//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-19324574
// Cuda compilation tools, release 7.0, V7.0.27
// Based on LLVM 3.4svn
//

.version 4.2
.target sm_20, debug
.address_size 64

	// .globl	_Z4tanhf

.visible .func  (.param .b32 func_retval0) _Z4tanhf(
	.param .b32 _Z4tanhf_param_0
)
{
	.reg .pred 	%p<7>;
	.reg .f32 	%f<38>;
	.reg .s32 	%r<5>;


	.loc 4 1139 1
func_begin0:
	.loc	4 0 0

	.loc 4 1139 1

	ld.param.f32 	%f10, [_Z4tanhf_param_0];
	mov.f32 	%f1, %f10;
tmp0:
func_exec_begin0:

//C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\math.h:1140         {return (tanhf(_X)); }
	.loc	4 1140 8
	bra.uni	tmp1;
tmp1:

//c:\program files\nvidia gpu computing toolkit\cuda\v7.0\include\math_functions.hpp:1108   return __nv_tanhf(a);
	.loc	3 1108 10
	abs.f32 	%f2, %f1;
	setp.ge.f32	%p1, %f2, 0f3F0CCCCD;
	not.pred 	%p2, %p1;
	@%p2 bra 	BB0_4;
	bra.uni 	BB0_1;

BB0_1:
	add.f32 	%f24, %f2, %f2;
	mul.f32 	%f25, %f24, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f26, %f25;
	mov.f32 	%f27, 0fBF317200;
	fma.rn.f32 	%f28, %f26, %f27, %f24;
	mov.f32 	%f29, 0fB5BFBE8E;
	fma.rn.f32 	%f30, %f26, %f29, %f28;
	mul.f32 	%f21, %f30, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f20,%f21;
	// inline asm
	ex2.approx.f32 	%f31, %f26;
	mov.f32 	%f32, 0f3F800000;
	fma.rn.f32 	%f23, %f20, %f31, %f32;
	// inline asm
	rcp.approx.ftz.f32 %f22,%f23;
	// inline asm
	mov.f32 	%f33, 0fC0000000;
	fma.rn.f32 	%f36, %f22, %f33, %f32;
	setp.ge.f32	%p5, %f2, 0f42B00000;
	not.pred 	%p6, %p5;
	@%p6 bra 	BB0_3;
	bra.uni 	BB0_2;

BB0_2:
	mov.f32 	%f36, 0f3F800000;

BB0_3:
	mov.b32 	 %r1, %f36;
	mov.b32 	 %r2, %f1;
	and.b32  	%r3, %r2, -2147483648;
	or.b32  	%r4, %r1, %r3;
	mov.b32 	 %f37, %r4;
	bra.uni 	BB0_7;

BB0_4:
	mul.f32 	%f11, %f1, %f1;
	mov.f32 	%f12, 0fBD57BE66;
	mov.f32 	%f13, 0f3C86A81B;
	fma.rn.f32 	%f14, %f13, %f11, %f12;
	mov.f32 	%f15, 0f3E08677B;
	fma.rn.f32 	%f16, %f14, %f11, %f15;
	mov.f32 	%f17, 0fBEAAAA29;
	fma.rn.f32 	%f18, %f16, %f11, %f17;
	mul.f32 	%f19, %f18, %f11;
	fma.rn.f32 	%f37, %f19, %f1, %f1;
	setp.eq.f32	%p3, %f1, 0f00000000;
	not.pred 	%p4, %p3;
	@%p4 bra 	BB0_6;
	bra.uni 	BB0_5;

BB0_5:
	add.f32 	%f37, %f1, %f1;
tmp2:

BB0_6:

BB0_7:

//C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\include\math.h:1140         {return (tanhf(_X)); }
	.loc	4 1140 8
	mov.f32 	%f35, %f37;
	st.param.f32	[func_retval0+0], %f35;
	ret;
tmp3:
func_end0:
}

	// .globl	_Z10vectorTanhPfS_i
.visible .entry _Z10vectorTanhPfS_i(
	.param .u64 _Z10vectorTanhPfS_i_param_0,
	.param .u64 _Z10vectorTanhPfS_i_param_1,
	.param .u32 _Z10vectorTanhPfS_i_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<3>;
	.reg .s32 	%r<7>;
	.reg .s64 	%rd<9>;


	.loc 1 9 1
func_begin1:
	.loc	1 0 0

	.loc 1 9 1

	ld.param.u64 	%rd1, [_Z10vectorTanhPfS_i_param_0];
	ld.param.u64 	%rd2, [_Z10vectorTanhPfS_i_param_1];
	ld.param.u32 	%r2, [_Z10vectorTanhPfS_i_param_2];
func_exec_begin1:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:11 	int i = threadIdx.x + (blockDim.x * blockIdx.x);
	.loc	1 11 1
tmp4:
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mul.lo.s32 	%r6, %r4, %r5;
	add.s32 	%r1, %r3, %r6;
tmp5:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:12 	if (i < n)
	.loc	1 12 1
	setp.lt.s32	%p1, %r1, %r2;
	not.pred 	%p2, %p1;
	@%p2 bra 	BB1_2;
	bra.uni 	BB1_1;

BB1_1:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:14 		output[i] = tanh(input[i]);
	.loc	1 14 1
tmp6:
	cvt.s64.s32	%rd3, %r1;
	shl.b64 	%rd4, %rd3, 2;
	add.s64 	%rd5, %rd1, %rd4;
	ld.f32 	%f1, [%rd5];

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:14 		output[i] = tanh(input[i]);
	.loc	1 14 52
	// Callseq Start 0
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.f32	[param0+0], %f1;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z4tanhf, 
	(
	param0
	);
	ld.param.f32	%f2, [retval0+0];
	
	//{
	}// Callseq End 0
	cvt.s64.s32	%rd6, %r1;
	shl.b64 	%rd7, %rd6, 2;
	add.s64 	%rd8, %rd2, %rd7;
	st.f32 	[%rd8], %f2;
tmp7:

BB1_2:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:16 }
	.loc	1 16 2
	ret;
tmp8:
func_end1:
}

	// .globl	_Z15vectorTanhDerivPfS_i
.visible .entry _Z15vectorTanhDerivPfS_i(
	.param .u64 _Z15vectorTanhDerivPfS_i_param_0,
	.param .u64 _Z15vectorTanhDerivPfS_i_param_1,
	.param .u32 _Z15vectorTanhDerivPfS_i_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .s32 	%r<7>;
	.reg .s64 	%rd<9>;


	.loc 1 18 1
func_begin2:
	.loc	1 0 0

	.loc 1 18 1

	ld.param.u64 	%rd1, [_Z15vectorTanhDerivPfS_i_param_0];
	ld.param.u64 	%rd2, [_Z15vectorTanhDerivPfS_i_param_1];
	ld.param.u32 	%r2, [_Z15vectorTanhDerivPfS_i_param_2];
func_exec_begin2:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:20 	int i = threadIdx.x + (blockDim.x * blockIdx.x);
	.loc	1 20 1
tmp9:
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mul.lo.s32 	%r6, %r4, %r5;
	add.s32 	%r1, %r3, %r6;
tmp10:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:21 	if (i < n)
	.loc	1 21 1
	setp.lt.s32	%p1, %r1, %r2;
	not.pred 	%p2, %p1;
	@%p2 bra 	BB2_2;
	bra.uni 	BB2_1;

BB2_1:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:23 		float tmp = tanh(input[i]);
	.loc	1 23 1
tmp11:
	cvt.s64.s32	%rd3, %r1;
	shl.b64 	%rd4, %rd3, 2;
	add.s64 	%rd5, %rd1, %rd4;
	ld.f32 	%f1, [%rd5];

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:23 		float tmp = tanh(input[i]);
	.loc	1 23 44
	// Callseq Start 1
	{
	.reg .b32 temp_param_reg;
	// <end>}
	.param .b32 param0;
	st.param.f32	[param0+0], %f1;
	.param .b32 retval0;
	call.uni (retval0), 
	_Z4tanhf, 
	(
	param0
	);
	ld.param.f32	%f2, [retval0+0];
	
	//{
	}// Callseq End 1
tmp12:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:24 		output[i] = 1 - (tmp*tmp);
	.loc	1 24 1
	mul.f32 	%f3, %f2, %f2;
	mov.f32 	%f4, 0f3F800000;
	sub.f32 	%f5, %f4, %f3;
	cvt.s64.s32	%rd6, %r1;
	shl.b64 	%rd7, %rd6, 2;
	add.s64 	%rd8, %rd2, %rd7;
	st.f32 	[%rd8], %f5;
tmp13:

BB2_2:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:26 }
	.loc	1 26 2
	ret;
tmp14:
func_end2:
}

	// .globl	_Z10vectorReLuPfS_i
.visible .entry _Z10vectorReLuPfS_i(
	.param .u64 _Z10vectorReLuPfS_i_param_0,
	.param .u64 _Z10vectorReLuPfS_i_param_1,
	.param .u32 _Z10vectorReLuPfS_i_param_2
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<6>;
	.reg .s32 	%r<7>;
	.reg .s64 	%rd<9>;


	.loc 1 28 1
func_begin3:
	.loc	1 0 0

	.loc 1 28 1

	ld.param.u64 	%rd1, [_Z10vectorReLuPfS_i_param_0];
	ld.param.u64 	%rd2, [_Z10vectorReLuPfS_i_param_1];
	ld.param.u32 	%r2, [_Z10vectorReLuPfS_i_param_2];
func_exec_begin3:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:30 	int i = threadIdx.x + (blockDim.x * blockIdx.x);
	.loc	1 30 1
tmp15:
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mul.lo.s32 	%r6, %r4, %r5;
	add.s32 	%r1, %r3, %r6;
tmp16:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:31 	if (i < n)
	.loc	1 31 1
	setp.lt.s32	%p1, %r1, %r2;
	not.pred 	%p2, %p1;
	@%p2 bra 	BB3_2;
	bra.uni 	BB3_1;

BB3_1:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:33 		output[i] = fmaxf(input[i], 0);
	.loc	1 33 1
tmp17:
	cvt.s64.s32	%rd3, %r1;
	shl.b64 	%rd4, %rd3, 2;
	add.s64 	%rd5, %rd1, %rd4;
	ld.f32 	%f1, [%rd5];
	mov.f32 	%f2, %f1;
tmp18:
	mov.f32 	%f3, 0f00000000;
	mov.f32 	%f4, %f3;
tmp19:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:33 		output[i] = fmaxf(input[i], 0);
	.loc	1 33 52
	bra.uni	tmp20;
tmp20:

//c:\program files\nvidia gpu computing toolkit\cuda\v7.0\include\device_functions.hpp:604   return __nv_fmaxf(x, y);
	.loc	2 604 10
	max.f32 	%f5, %f2, %f4;
tmp21:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:33 		output[i] = fmaxf(input[i], 0);
	.loc	1 33 52
	cvt.s64.s32	%rd6, %r1;
	shl.b64 	%rd7, %rd6, 2;
	add.s64 	%rd8, %rd2, %rd7;
	st.f32 	[%rd8], %f5;
tmp22:

BB3_2:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:35 }
	.loc	1 35 2
	ret;
tmp23:
func_end3:
}

	// .globl	_Z15vectorReLuDerivPfS_i
.visible .entry _Z15vectorReLuDerivPfS_i(
	.param .u64 _Z15vectorReLuDerivPfS_i_param_0,
	.param .u64 _Z15vectorReLuDerivPfS_i_param_1,
	.param .u32 _Z15vectorReLuDerivPfS_i_param_2
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<3>;
	.reg .s32 	%r<11>;
	.reg .s64 	%rd<9>;


	.loc 1 37 1
func_begin4:
	.loc	1 0 0

	.loc 1 37 1

	ld.param.u64 	%rd1, [_Z15vectorReLuDerivPfS_i_param_0];
	ld.param.u64 	%rd2, [_Z15vectorReLuDerivPfS_i_param_1];
	ld.param.u32 	%r3, [_Z15vectorReLuDerivPfS_i_param_2];
func_exec_begin4:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:39 	int i = threadIdx.x + (blockDim.x * blockIdx.x);
	.loc	1 39 1
tmp24:
	mov.u32 	%r4, %tid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mul.lo.s32 	%r7, %r5, %r6;
	add.s32 	%r1, %r4, %r7;
tmp25:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:40 	if (i < n)
	.loc	1 40 1
	setp.lt.s32	%p1, %r1, %r3;
	not.pred 	%p2, %p1;
	@%p2 bra 	BB4_5;
	bra.uni 	BB4_1;

BB4_1:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:42 		output[i] = input[i] <= 0 ? 0 : 1;
	.loc	1 42 1
tmp26:
	cvt.s64.s32	%rd3, %r1;
	shl.b64 	%rd4, %rd3, 2;
	add.s64 	%rd5, %rd1, %rd4;
	ld.f32 	%f1, [%rd5];
	setp.le.f32	%p3, %f1, 0f00000000;
	not.pred 	%p4, %p3;
	@%p4 bra 	BB4_3;
	bra.uni 	BB4_2;

BB4_2:
	mov.u32 	%r10, 0;
	bra.uni 	BB4_4;

BB4_3:
	mov.u32 	%r10, 1;

BB4_4:
	cvt.rn.f32.s32	%f2, %r10;
	cvt.s64.s32	%rd6, %r1;
	shl.b64 	%rd7, %rd6, 2;
	add.s64 	%rd8, %rd2, %rd7;
	st.f32 	[%rd8], %f2;
tmp27:

BB4_5:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:44 }
	.loc	1 44 2
	ret;
tmp28:
func_end4:
}

	// .globl	_Z13vectorSigmoidPfS_i
.visible .entry _Z13vectorSigmoidPfS_i(
	.param .u64 _Z13vectorSigmoidPfS_i_param_0,
	.param .u64 _Z13vectorSigmoidPfS_i_param_1,
	.param .u32 _Z13vectorSigmoidPfS_i_param_2
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<46>;
	.reg .s32 	%r<11>;
	.reg .f64 	%fd<3>;
	.reg .s64 	%rd<9>;


	.loc 1 46 1
func_begin5:
	.loc	1 0 0

	.loc 1 46 1

	ld.param.u64 	%rd1, [_Z13vectorSigmoidPfS_i_param_0];
	ld.param.u64 	%rd2, [_Z13vectorSigmoidPfS_i_param_1];
	ld.param.u32 	%r2, [_Z13vectorSigmoidPfS_i_param_2];
func_exec_begin5:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:48 	int i = threadIdx.x + (blockDim.x * blockIdx.x);
	.loc	1 48 1
tmp29:
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mul.lo.s32 	%r6, %r4, %r5;
	add.s32 	%r1, %r3, %r6;
tmp30:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:49 	if (i < n)
	.loc	1 49 1
	setp.lt.s32	%p1, %r1, %r2;
	not.pred 	%p2, %p1;
	@%p2 bra 	BB5_9;
	bra.uni 	BB5_1;

BB5_1:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:52 		output[i] = (tanhf(input[i] / 2) + 1) / 2.0f;
	.loc	1 52 1
tmp31:
	cvt.s64.s32	%rd3, %r1;
	shl.b64 	%rd4, %rd3, 2;
	add.s64 	%rd5, %rd1, %rd4;
	ld.f32 	%f10, [%rd5];
	cvt.f64.f32	%fd1, %f10;
	cvt.rn.f32.f64	%f11, %fd1;
tmp32:
	mov.f32 	%f12, 0f40000000;
	mov.f32 	%f13, %f12;
tmp33:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:52 		output[i] = (tanhf(input[i] / 2) + 1) / 2.0f;
	.loc	1 52 95
	bra.uni	tmp34;
tmp34:

//c:\program files\nvidia gpu computing toolkit\cuda\v7.0\include\device_functions.hpp:1442   return a / b;
	.loc	2 1442 3
	div.rn.f32 	%f14, %f11, %f13;
	mov.f32 	%f1, %f14;
tmp35:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:52 		output[i] = (tanhf(input[i] / 2) + 1) / 2.0f;
	.loc	1 52 80
	bra.uni	tmp36;
tmp36:

//c:\program files\nvidia gpu computing toolkit\cuda\v7.0\include\math_functions.hpp:1108   return __nv_tanhf(a);
	.loc	3 1108 10
	abs.f32 	%f2, %f1;
	setp.ge.f32	%p3, %f2, 0f3F0CCCCD;
	not.pred 	%p4, %p3;
	@%p4 bra 	BB5_5;
	bra.uni 	BB5_2;

BB5_2:
	add.f32 	%f28, %f2, %f2;
	mul.f32 	%f29, %f28, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f30, %f29;
	mov.f32 	%f31, 0fBF317200;
	fma.rn.f32 	%f32, %f30, %f31, %f28;
	mov.f32 	%f33, 0fB5BFBE8E;
	fma.rn.f32 	%f34, %f30, %f33, %f32;
	mul.f32 	%f25, %f34, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f24,%f25;
	// inline asm
	ex2.approx.f32 	%f35, %f30;
	mov.f32 	%f36, 0f3F800000;
	fma.rn.f32 	%f27, %f24, %f35, %f36;
	// inline asm
	rcp.approx.ftz.f32 %f26,%f27;
	// inline asm
	mov.f32 	%f37, 0fC0000000;
	fma.rn.f32 	%f44, %f26, %f37, %f36;
	setp.ge.f32	%p7, %f2, 0f42B00000;
	not.pred 	%p8, %p7;
	@%p8 bra 	BB5_4;
	bra.uni 	BB5_3;

BB5_3:
	mov.f32 	%f44, 0f3F800000;

BB5_4:
	mov.b32 	 %r7, %f44;
	mov.b32 	 %r8, %f1;
	and.b32  	%r9, %r8, -2147483648;
	or.b32  	%r10, %r7, %r9;
	mov.b32 	 %f45, %r10;
	bra.uni 	BB5_8;

BB5_5:
	mul.f32 	%f15, %f1, %f1;
	mov.f32 	%f16, 0fBD57BE66;
	mov.f32 	%f17, 0f3C86A81B;
	fma.rn.f32 	%f18, %f17, %f15, %f16;
	mov.f32 	%f19, 0f3E08677B;
	fma.rn.f32 	%f20, %f18, %f15, %f19;
	mov.f32 	%f21, 0fBEAAAA29;
	fma.rn.f32 	%f22, %f20, %f15, %f21;
	mul.f32 	%f23, %f22, %f15;
	fma.rn.f32 	%f45, %f23, %f1, %f1;
	setp.eq.f32	%p5, %f1, 0f00000000;
	not.pred 	%p6, %p5;
	@%p6 bra 	BB5_7;
	bra.uni 	BB5_6;

BB5_6:
	add.f32 	%f45, %f1, %f1;
tmp37:

BB5_7:

BB5_8:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:52 		output[i] = (tanhf(input[i] / 2) + 1) / 2.0f;
	.loc	1 52 80
	add.f32 	%f39, %f45, 0f3F800000;
	cvt.f64.f32	%fd2, %f39;
	cvt.rn.f32.f64	%f40, %fd2;
tmp38:
	mov.f32 	%f41, 0f40000000;
	mov.f32 	%f42, %f41;
tmp39:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:52 		output[i] = (tanhf(input[i] / 2) + 1) / 2.0f;
	.loc	1 52 60
	bra.uni	tmp40;
tmp40:

//c:\program files\nvidia gpu computing toolkit\cuda\v7.0\include\device_functions.hpp:1442   return a / b;
	.loc	2 1442 3
	div.rn.f32 	%f43, %f40, %f42;
tmp41:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:52 		output[i] = (tanhf(input[i] / 2) + 1) / 2.0f;
	.loc	1 52 60
	cvt.s64.s32	%rd6, %r1;
	shl.b64 	%rd7, %rd6, 2;
	add.s64 	%rd8, %rd2, %rd7;
	st.f32 	[%rd8], %f43;
tmp42:

BB5_9:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:54 }
	.loc	1 54 2
	ret;
tmp43:
func_end5:
}

	// .globl	_Z18vectorSigmoidDerivPfS_i
.visible .entry _Z18vectorSigmoidDerivPfS_i(
	.param .u64 _Z18vectorSigmoidDerivPfS_i_param_0,
	.param .u64 _Z18vectorSigmoidDerivPfS_i_param_1,
	.param .u32 _Z18vectorSigmoidDerivPfS_i_param_2
)
{
	.reg .pred 	%p<9>;
	.reg .f32 	%f<50>;
	.reg .s32 	%r<11>;
	.reg .f64 	%fd<3>;
	.reg .s64 	%rd<9>;


	.loc 1 56 1
func_begin6:
	.loc	1 0 0

	.loc 1 56 1

	ld.param.u64 	%rd1, [_Z18vectorSigmoidDerivPfS_i_param_0];
	ld.param.u64 	%rd2, [_Z18vectorSigmoidDerivPfS_i_param_1];
	ld.param.u32 	%r2, [_Z18vectorSigmoidDerivPfS_i_param_2];
func_exec_begin6:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:58 	int i = threadIdx.x + (blockDim.x * blockIdx.x);
	.loc	1 58 1
tmp44:
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mul.lo.s32 	%r6, %r4, %r5;
	add.s32 	%r1, %r3, %r6;
tmp45:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:59 	if (i < n)
	.loc	1 59 1
	setp.lt.s32	%p1, %r1, %r2;
	not.pred 	%p2, %p1;
	@%p2 bra 	BB6_9;
	bra.uni 	BB6_1;

BB6_1:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:62 		float sigmoid = (tanhf(input[i] / 2) + 1) / 2.0f;
	.loc	1 62 1
tmp46:
	cvt.s64.s32	%rd3, %r1;
	shl.b64 	%rd4, %rd3, 2;
	add.s64 	%rd5, %rd1, %rd4;
	ld.f32 	%f10, [%rd5];
	cvt.f64.f32	%fd1, %f10;
	cvt.rn.f32.f64	%f11, %fd1;
tmp47:
	mov.f32 	%f12, 0f40000000;
	mov.f32 	%f13, %f12;
tmp48:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:62 		float sigmoid = (tanhf(input[i] / 2) + 1) / 2.0f;
	.loc	1 62 91
	bra.uni	tmp49;
tmp49:

//c:\program files\nvidia gpu computing toolkit\cuda\v7.0\include\device_functions.hpp:1442   return a / b;
	.loc	2 1442 3
	div.rn.f32 	%f14, %f11, %f13;
	mov.f32 	%f1, %f14;
tmp50:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:62 		float sigmoid = (tanhf(input[i] / 2) + 1) / 2.0f;
	.loc	1 62 76
	bra.uni	tmp51;
tmp51:

//c:\program files\nvidia gpu computing toolkit\cuda\v7.0\include\math_functions.hpp:1108   return __nv_tanhf(a);
	.loc	3 1108 10
	abs.f32 	%f2, %f1;
	setp.ge.f32	%p3, %f2, 0f3F0CCCCD;
	not.pred 	%p4, %p3;
	@%p4 bra 	BB6_5;
	bra.uni 	BB6_2;

BB6_2:
	add.f32 	%f28, %f2, %f2;
	mul.f32 	%f29, %f28, 0f3FB8AA3B;
	cvt.rzi.f32.f32	%f30, %f29;
	mov.f32 	%f31, 0fBF317200;
	fma.rn.f32 	%f32, %f30, %f31, %f28;
	mov.f32 	%f33, 0fB5BFBE8E;
	fma.rn.f32 	%f34, %f30, %f33, %f32;
	mul.f32 	%f25, %f34, 0f3FB8AA3B;
	// inline asm
	ex2.approx.ftz.f32 %f24,%f25;
	// inline asm
	ex2.approx.f32 	%f35, %f30;
	mov.f32 	%f36, 0f3F800000;
	fma.rn.f32 	%f27, %f24, %f35, %f36;
	// inline asm
	rcp.approx.ftz.f32 %f26,%f27;
	// inline asm
	mov.f32 	%f37, 0fC0000000;
	fma.rn.f32 	%f48, %f26, %f37, %f36;
	setp.ge.f32	%p7, %f2, 0f42B00000;
	not.pred 	%p8, %p7;
	@%p8 bra 	BB6_4;
	bra.uni 	BB6_3;

BB6_3:
	mov.f32 	%f48, 0f3F800000;

BB6_4:
	mov.b32 	 %r7, %f48;
	mov.b32 	 %r8, %f1;
	and.b32  	%r9, %r8, -2147483648;
	or.b32  	%r10, %r7, %r9;
	mov.b32 	 %f49, %r10;
	bra.uni 	BB6_8;

BB6_5:
	mul.f32 	%f15, %f1, %f1;
	mov.f32 	%f16, 0fBD57BE66;
	mov.f32 	%f17, 0f3C86A81B;
	fma.rn.f32 	%f18, %f17, %f15, %f16;
	mov.f32 	%f19, 0f3E08677B;
	fma.rn.f32 	%f20, %f18, %f15, %f19;
	mov.f32 	%f21, 0fBEAAAA29;
	fma.rn.f32 	%f22, %f20, %f15, %f21;
	mul.f32 	%f23, %f22, %f15;
	fma.rn.f32 	%f49, %f23, %f1, %f1;
	setp.eq.f32	%p5, %f1, 0f00000000;
	not.pred 	%p6, %p5;
	@%p6 bra 	BB6_7;
	bra.uni 	BB6_6;

BB6_6:
	add.f32 	%f49, %f1, %f1;
tmp52:

BB6_7:

BB6_8:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:62 		float sigmoid = (tanhf(input[i] / 2) + 1) / 2.0f;
	.loc	1 62 76
	add.f32 	%f39, %f49, 0f3F800000;
	cvt.f64.f32	%fd2, %f39;
	cvt.rn.f32.f64	%f40, %fd2;
tmp53:
	mov.f32 	%f41, 0f40000000;
	mov.f32 	%f42, %f41;
tmp54:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:62 		float sigmoid = (tanhf(input[i] / 2) + 1) / 2.0f;
	.loc	1 62 56
	bra.uni	tmp55;
tmp55:

//c:\program files\nvidia gpu computing toolkit\cuda\v7.0\include\device_functions.hpp:1442   return a / b;
	.loc	2 1442 3
	div.rn.f32 	%f43, %f40, %f42;
tmp56:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:62 		float sigmoid = (tanhf(input[i] / 2) + 1) / 2.0f;
	.loc	1 62 56
	mov.f32 	%f44, %f43;
tmp57:
	mov.f32 	%f45, 0f3F800000;

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:63 		output[i] = sigmoid*(1 - sigmoid);
	.loc	1 63 1
	sub.f32 	%f46, %f45, %f44;
	mul.f32 	%f47, %f44, %f46;
	cvt.s64.s32	%rd6, %r1;
	shl.b64 	%rd7, %rd6, 2;
	add.s64 	%rd8, %rd2, %rd7;
	st.f32 	[%rd8], %f47;
tmp58:

BB6_9:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:65 }
	.loc	1 65 2
	ret;
tmp59:
func_end6:
}

	// .globl	_Z23vectorCrossEntropyErrorPfS_S_i
.visible .entry _Z23vectorCrossEntropyErrorPfS_S_i(
	.param .u64 _Z23vectorCrossEntropyErrorPfS_S_i_param_0,
	.param .u64 _Z23vectorCrossEntropyErrorPfS_S_i_param_1,
	.param .u64 _Z23vectorCrossEntropyErrorPfS_S_i_param_2,
	.param .u32 _Z23vectorCrossEntropyErrorPfS_S_i_param_3
)
{
	.reg .pred 	%p<27>;
	.reg .f32 	%f<84>;
	.reg .s32 	%r<15>;
	.reg .s64 	%rd<19>;


	.loc 1 67 1
func_begin7:
	.loc	1 0 0

	.loc 1 67 1

	ld.param.u64 	%rd1, [_Z23vectorCrossEntropyErrorPfS_S_i_param_0];
	ld.param.u64 	%rd2, [_Z23vectorCrossEntropyErrorPfS_S_i_param_1];
	ld.param.u64 	%rd3, [_Z23vectorCrossEntropyErrorPfS_S_i_param_2];
	ld.param.u32 	%r2, [_Z23vectorCrossEntropyErrorPfS_S_i_param_3];
func_exec_begin7:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:69 	int i = threadIdx.x + (blockDim.x * blockIdx.x);
	.loc	1 69 1
tmp60:
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mul.lo.s32 	%r6, %r4, %r5;
	add.s32 	%r1, %r3, %r6;
tmp61:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:70 	if (i < n)
	.loc	1 70 1
	setp.lt.s32	%p5, %r1, %r2;
	not.pred 	%p6, %p5;
	@%p6 bra 	BB7_23;
	bra.uni 	BB7_1;

BB7_1:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:72 		output[i] = trueLabels[i] > 0 ? logf(sigmoidScores[i] + FLT_EPSILON) : logf(1 - sigmoidScores[i] + FLT_EPSILON);
	.loc	1 72 1
tmp62:
	cvt.s64.s32	%rd4, %r1;
	shl.b64 	%rd5, %rd4, 2;
	add.s64 	%rd6, %rd2, %rd5;
	ld.f32 	%f28, [%rd6];
	setp.gt.f32	%p7, %f28, 0f00000000;
	not.pred 	%p8, %p7;
	@%p8 bra 	BB7_12;
	bra.uni 	BB7_2;

BB7_2:
	cvt.s64.s32	%rd10, %r1;
	shl.b64 	%rd11, %rd10, 2;
	add.s64 	%rd12, %rd1, %rd11;
	ld.f32 	%f52, [%rd12];
	add.f32 	%f75, %f52, 0f34000000;
tmp63:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:72 		output[i] = trueLabels[i] > 0 ? logf(sigmoidScores[i] + FLT_EPSILON) : logf(1 - sigmoidScores[i] + FLT_EPSILON);
	.loc	1 72 118
	bra.uni	tmp64;
tmp64:

//c:\program files\nvidia gpu computing toolkit\cuda\v7.0\include\math_functions.hpp:1136   return __nv_logf(a);
	.loc	3 1136 10
	setp.gt.f32	%p18, %f75, 0f00000000;
	mov.pred 	%p25, 0;
	not.pred 	%p19, %p18;
	@%p19 bra 	BB7_4;
	bra.uni 	BB7_3;

BB7_3:
	setp.lt.f32	%p25, %f75, 0f7F800000;

BB7_4:
	not.pred 	%p20, %p25;
	@%p20 bra 	BB7_10;
	bra.uni 	BB7_5;

BB7_5:
	setp.lt.f32	%p21, %f75, 0f00800000;
	mov.f32 	%f76, 0fC2FE0000;
	not.pred 	%p22, %p21;
	@%p22 bra 	BB7_7;
	bra.uni 	BB7_6;

BB7_6:
	mul.f32 	%f75, %f75, 0f4B800000;
	mov.f32 	%f76, 0fC3170000;

BB7_7:
	mov.b32 	 %r11, %f75;
	and.b32  	%r12, %r11, 8388607;
	or.b32  	%r13, %r12, 1065353216;
	mov.b32 	 %f77, %r13;
	shr.u32 	%r14, %r11, 23;
	cvt.rn.f32.u32	%f55, %r14;
	add.f32 	%f78, %f76, %f55;
	setp.gt.f32	%p23, %f77, 0f3FAE147B;
	not.pred 	%p24, %p23;
	@%p24 bra 	BB7_9;
	bra.uni 	BB7_8;

BB7_8:
	mul.f32 	%f77, %f77, 0f3F000000;
	add.f32 	%f78, %f78, 0f3F800000;

BB7_9:
	add.f32 	%f57, %f77, 0f3F800000;
	sub.f32 	%f58, %f77, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f56,%f57;
	// inline asm
	neg.f32 	%f59, %f58;
	mul.f32 	%f60, %f59, %f58;
	mul.rn.f32 	%f61, %f56, %f60;
	add.rn.f32 	%f62, %f58, %f61;
	mul.f32 	%f63, %f62, %f62;
	mov.f32 	%f64, 0f3C4C6A36;
	mov.f32 	%f65, 0f3B1E94E6;
	fma.rn.f32 	%f66, %f65, %f63, %f64;
	mov.f32 	%f67, 0f3DAAAB1A;
	fma.rn.f32 	%f68, %f66, %f63, %f67;
	mul.f32 	%f69, %f68, %f63;
	fma.rn.f32 	%f70, %f69, %f62, %f61;
	add.f32 	%f71, %f70, %f58;
	mov.f32 	%f72, 0f3F317218;
	fma.rn.f32 	%f83, %f78, %f72, %f71;
	bra.uni 	BB7_11;

BB7_10:
	lg2.approx.f32 	%f83, %f75;
tmp65:

BB7_11:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:72 		output[i] = trueLabels[i] > 0 ? logf(sigmoidScores[i] + FLT_EPSILON) : logf(1 - sigmoidScores[i] + FLT_EPSILON);
	.loc	1 72 118
	bra.uni 	BB7_22;

BB7_12:
	cvt.s64.s32	%rd7, %r1;
	shl.b64 	%rd8, %rd7, 2;
	add.s64 	%rd9, %rd1, %rd8;
	ld.f32 	%f29, [%rd9];
	mov.f32 	%f30, 0f3F800000;
	sub.f32 	%f31, %f30, %f29;
	add.f32 	%f79, %f31, 0f34000000;
tmp66:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:72 		output[i] = trueLabels[i] > 0 ? logf(sigmoidScores[i] + FLT_EPSILON) : logf(1 - sigmoidScores[i] + FLT_EPSILON);
	.loc	1 72 207
	bra.uni	tmp67;
tmp67:

//c:\program files\nvidia gpu computing toolkit\cuda\v7.0\include\math_functions.hpp:1136   return __nv_logf(a);
	.loc	3 1136 10
	setp.gt.f32	%p10, %f79, 0f00000000;
	mov.pred 	%p26, 0;
	not.pred 	%p11, %p10;
	@%p11 bra 	BB7_14;
	bra.uni 	BB7_13;

BB7_13:
	setp.lt.f32	%p26, %f79, 0f7F800000;

BB7_14:
	not.pred 	%p12, %p26;
	@%p12 bra 	BB7_20;
	bra.uni 	BB7_15;

BB7_15:
	setp.lt.f32	%p13, %f79, 0f00800000;
	mov.f32 	%f80, 0fC2FE0000;
	not.pred 	%p14, %p13;
	@%p14 bra 	BB7_17;
	bra.uni 	BB7_16;

BB7_16:
	mul.f32 	%f79, %f79, 0f4B800000;
	mov.f32 	%f80, 0fC3170000;

BB7_17:
	mov.b32 	 %r7, %f79;
	and.b32  	%r8, %r7, 8388607;
	or.b32  	%r9, %r8, 1065353216;
	mov.b32 	 %f81, %r9;
	shr.u32 	%r10, %r7, 23;
	cvt.rn.f32.u32	%f34, %r10;
	add.f32 	%f82, %f80, %f34;
	setp.gt.f32	%p15, %f81, 0f3FAE147B;
	not.pred 	%p16, %p15;
	@%p16 bra 	BB7_19;
	bra.uni 	BB7_18;

BB7_18:
	mul.f32 	%f81, %f81, 0f3F000000;
	add.f32 	%f82, %f82, 0f3F800000;

BB7_19:
	add.f32 	%f36, %f81, 0f3F800000;
	sub.f32 	%f37, %f81, 0f3F800000;
	// inline asm
	rcp.approx.ftz.f32 %f35,%f36;
	// inline asm
	neg.f32 	%f38, %f37;
	mul.f32 	%f39, %f38, %f37;
	mul.rn.f32 	%f40, %f35, %f39;
	add.rn.f32 	%f41, %f37, %f40;
	mul.f32 	%f42, %f41, %f41;
	mov.f32 	%f43, 0f3C4C6A36;
	mov.f32 	%f44, 0f3B1E94E6;
	fma.rn.f32 	%f45, %f44, %f42, %f43;
	mov.f32 	%f46, 0f3DAAAB1A;
	fma.rn.f32 	%f47, %f45, %f42, %f46;
	mul.f32 	%f48, %f47, %f42;
	fma.rn.f32 	%f49, %f48, %f41, %f40;
	add.f32 	%f50, %f49, %f37;
	mov.f32 	%f51, 0f3F317218;
	fma.rn.f32 	%f83, %f82, %f51, %f50;
	bra.uni 	BB7_21;

BB7_20:
	lg2.approx.f32 	%f83, %f79;
tmp68:

BB7_21:

BB7_22:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:72 		output[i] = trueLabels[i] > 0 ? logf(sigmoidScores[i] + FLT_EPSILON) : logf(1 - sigmoidScores[i] + FLT_EPSILON);
	.loc	1 72 207
	cvt.s64.s32	%rd13, %r1;
	shl.b64 	%rd14, %rd13, 2;
	add.s64 	%rd15, %rd3, %rd14;
	st.f32 	[%rd15], %f83;

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:73 		output[i] *= -1;
	.loc	1 73 1
	cvt.s64.s32	%rd16, %r1;
	shl.b64 	%rd17, %rd16, 2;
	add.s64 	%rd18, %rd3, %rd17;
	ld.f32 	%f73, [%rd18];
	mul.f32 	%f74, %f73, 0fBF800000;
	st.f32 	[%rd18], %f74;
tmp69:

BB7_23:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:75 }
	.loc	1 75 2
	ret;
tmp70:
func_end7:
}

	// .globl	_Z23vectorBellmanErrorDerivfiPfi
.visible .entry _Z23vectorBellmanErrorDerivfiPfi(
	.param .f32 _Z23vectorBellmanErrorDerivfiPfi_param_0,
	.param .u32 _Z23vectorBellmanErrorDerivfiPfi_param_1,
	.param .u64 _Z23vectorBellmanErrorDerivfiPfi_param_2,
	.param .u32 _Z23vectorBellmanErrorDerivfiPfi_param_3
)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<2>;
	.reg .s32 	%r<9>;
	.reg .s64 	%rd<8>;


	.loc 1 77 1
func_begin8:
	.loc	1 0 0

	.loc 1 77 1

	ld.param.f32 	%f1, [_Z23vectorBellmanErrorDerivfiPfi_param_0];
	ld.param.u32 	%r2, [_Z23vectorBellmanErrorDerivfiPfi_param_1];
	ld.param.u64 	%rd1, [_Z23vectorBellmanErrorDerivfiPfi_param_2];
	ld.param.u32 	%r3, [_Z23vectorBellmanErrorDerivfiPfi_param_3];
func_exec_begin8:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:79 	int i = threadIdx.x + (blockDim.x * blockIdx.x);
	.loc	1 79 1
tmp71:
	mov.u32 	%r4, %tid.x;
	mov.u32 	%r5, %ntid.x;
	mov.u32 	%r6, %ctaid.x;
	mul.lo.s32 	%r7, %r5, %r6;
	add.s32 	%r1, %r4, %r7;
tmp72:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:80 	if (i < n)
	.loc	1 80 1
	setp.lt.s32	%p1, %r1, %r3;
	not.pred 	%p2, %p1;
	@%p2 bra 	BB8_5;
	bra.uni 	BB8_1;

BB8_1:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:82 		if (i == actionIndex)
	.loc	1 82 1
tmp73:
	setp.eq.s32	%p3, %r1, %r2;
	not.pred 	%p4, %p3;
	@%p4 bra 	BB8_3;
	bra.uni 	BB8_2;

BB8_2:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:84 			output[i] = derivValue;
	.loc	1 84 1
tmp74:
	cvt.s64.s32	%rd5, %r1;
	shl.b64 	%rd6, %rd5, 2;
	add.s64 	%rd7, %rd1, %rd6;
	st.f32 	[%rd7], %f1;
	bra.uni 	BB8_4;
tmp75:

BB8_3:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:88 			output[i] = 0;
	.loc	1 88 1
	cvt.s64.s32	%rd2, %r1;
	shl.b64 	%rd3, %rd2, 2;
	add.s64 	%rd4, %rd1, %rd3;
	mov.u32 	%r8, 0;
	st.u32 	[%rd4], %r8;
tmp76:

BB8_4:

BB8_5:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:91 }
	.loc	1 91 2
	ret;
tmp77:
func_end8:
}

	// .globl	_Z14vectorHadamardPfS_fS_fi
.visible .entry _Z14vectorHadamardPfS_fS_fi(
	.param .u64 _Z14vectorHadamardPfS_fS_fi_param_0,
	.param .u64 _Z14vectorHadamardPfS_fS_fi_param_1,
	.param .f32 _Z14vectorHadamardPfS_fS_fi_param_2,
	.param .u64 _Z14vectorHadamardPfS_fS_fi_param_3,
	.param .f32 _Z14vectorHadamardPfS_fS_fi_param_4,
	.param .u32 _Z14vectorHadamardPfS_fS_fi_param_5
)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<10>;
	.reg .s32 	%r<7>;
	.reg .s64 	%rd<16>;


	.loc 1 93 1
func_begin9:
	.loc	1 0 0

	.loc 1 93 1

	ld.param.u64 	%rd1, [_Z14vectorHadamardPfS_fS_fi_param_0];
	ld.param.u64 	%rd2, [_Z14vectorHadamardPfS_fS_fi_param_1];
	ld.param.f32 	%f1, [_Z14vectorHadamardPfS_fS_fi_param_2];
	ld.param.u64 	%rd3, [_Z14vectorHadamardPfS_fS_fi_param_3];
	ld.param.f32 	%f2, [_Z14vectorHadamardPfS_fS_fi_param_4];
	ld.param.u32 	%r2, [_Z14vectorHadamardPfS_fS_fi_param_5];
func_exec_begin9:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:95 	int i = threadIdx.x + (blockDim.x * blockIdx.x);
	.loc	1 95 1
tmp78:
	mov.u32 	%r3, %tid.x;
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mul.lo.s32 	%r6, %r4, %r5;
	add.s32 	%r1, %r3, %r6;
tmp79:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:96 	if (i < n)
	.loc	1 96 1
	setp.lt.s32	%p1, %r1, %r2;
	not.pred 	%p2, %p1;
	@%p2 bra 	BB9_2;
	bra.uni 	BB9_1;

BB9_1:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:98 		output[i] = alpha*input1[i] * input2[i] + beta*output[i];
	.loc	1 98 1
tmp80:
	cvt.s64.s32	%rd4, %r1;
	shl.b64 	%rd5, %rd4, 2;
	add.s64 	%rd6, %rd1, %rd5;
	ld.f32 	%f3, [%rd6];
	mul.f32 	%f4, %f1, %f3;
	cvt.s64.s32	%rd7, %r1;
	shl.b64 	%rd8, %rd7, 2;
	add.s64 	%rd9, %rd2, %rd8;
	ld.f32 	%f5, [%rd9];
	mul.f32 	%f6, %f4, %f5;
	cvt.s64.s32	%rd10, %r1;
	shl.b64 	%rd11, %rd10, 2;
	add.s64 	%rd12, %rd3, %rd11;
	ld.f32 	%f7, [%rd12];
	mul.f32 	%f8, %f2, %f7;
	add.f32 	%f9, %f6, %f8;
	cvt.s64.s32	%rd13, %r1;
	shl.b64 	%rd14, %rd13, 2;
	add.s64 	%rd15, %rd3, %rd14;
	st.f32 	[%rd15], %f9;
tmp81:

BB9_2:

//D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu:100 }
	.loc	1 100 2
	ret;
tmp82:
func_end9:
}

	.file	1 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu", 1436317108, 2314
	.file	2 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp", 1424261298, 140584
	.file	3 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp", 1424261299, 98411
	.file	4 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h", 1379564280, 44558

.section .debug_info {
 .b32 3723
 .b8 2
 .b8 0
 .b32 .debug_abbrev
 .b8 8
 .b8 1

 .b8 108
 .b8 103
 .b8 101
 .b8 110
 .b8 102
 .b8 101
 .b8 58
 .b8 32
 .b8 69
 .b8 68
 .b8 71
 .b8 32
 .b8 52
 .b8 46
 .b8 57

 .b8 0
 .b8 4
 .b8 68
 .b8 58
 .b8 47
 .b8 118
 .b8 105
 .b8 110
 .b8 111
 .b8 100
 .b8 115
 .b8 47
 .b8 82
 .b8 101
 .b8 112
 .b8 111
 .b8 115
 .b8 47
 .b8 77
 .b8 83
 .b8 82
 .b8 45
 .b8 68
 .b8 83
 .b8 83
 .b8 77
 .b8 47
 .b8 112
 .b8 114
 .b8 105
 .b8 118
 .b8 97
 .b8 116
 .b8 101
 .b8 47
 .b8 118
 .b8 105
 .b8 110
 .b8 111
 .b8 100
 .b8 115
 .b8 47
 .b8 67
 .b8 117
 .b8 100
 .b8 97
 .b8 108
 .b8 105
 .b8 98
 .b8 77
 .b8 97
 .b8 110
 .b8 97
 .b8 103
 .b8 101
 .b8 100
 .b8 47
 .b8 75
 .b8 101
 .b8 114
 .b8 110
 .b8 101
 .b8 108
 .b8 115
 .b8 47
 .b8 107
 .b8 101
 .b8 114
 .b8 110
 .b8 101
 .b8 108
 .b8 46
 .b8 99
 .b8 117

 .b8 0
 .b64 0
 .b32 .debug_line
 .b8 68
 .b8 58
 .b8 92
 .b8 118
 .b8 105
 .b8 110
 .b8 111
 .b8 100
 .b8 115
 .b8 92
 .b8 82
 .b8 101
 .b8 112
 .b8 111
 .b8 115
 .b8 92
 .b8 77
 .b8 83
 .b8 82
 .b8 45
 .b8 68
 .b8 83
 .b8 83
 .b8 77
 .b8 92
 .b8 112
 .b8 114
 .b8 105
 .b8 118
 .b8 97
 .b8 116
 .b8 101
 .b8 92
 .b8 118
 .b8 105
 .b8 110
 .b8 111
 .b8 100
 .b8 115
 .b8 92
 .b8 67
 .b8 117
 .b8 100
 .b8 97
 .b8 108
 .b8 105
 .b8 98
 .b8 77
 .b8 97
 .b8 110
 .b8 97
 .b8 103
 .b8 101
 .b8 100
 .b8 92
 .b8 75
 .b8 101
 .b8 114
 .b8 110
 .b8 101
 .b8 108
 .b8 115

 .b8 0
 .b8 2

 .b8 102
 .b8 109
 .b8 97
 .b8 120
 .b8 102

 .b8 0
 .b8 102
 .b8 109
 .b8 97
 .b8 120
 .b8 102

 .b8 0
 .b32 2
 .b32 602
 .b32 234
 .b8 1
 .b8 3

 .b8 120

 .b8 0
 .b32 2
 .b32 602
 .b32 234
 .b8 3

 .b8 121

 .b8 0
 .b32 2
 .b32 602
 .b32 234
 .b8 0
 .b8 4

 .b8 102
 .b8 108
 .b8 111
 .b8 97
 .b8 116

 .b8 0
 .b8 4
 .b32 4
 .b8 2

 .b8 102
 .b8 100
 .b8 105
 .b8 118
 .b8 105
 .b8 100
 .b8 101
 .b8 102

 .b8 0
 .b8 102
 .b8 100
 .b8 105
 .b8 118
 .b8 105
 .b8 100
 .b8 101
 .b8 102

 .b8 0
 .b32 2
 .b32 1437
 .b32 234
 .b8 1
 .b8 3

 .b8 97

 .b8 0
 .b32 2
 .b32 1437
 .b32 234
 .b8 3

 .b8 98

 .b8 0
 .b32 2
 .b32 1437
 .b32 234
 .b8 0
 .b8 2

 .b8 116
 .b8 97
 .b8 110
 .b8 104
 .b8 102

 .b8 0
 .b8 116
 .b8 97
 .b8 110
 .b8 104
 .b8 102

 .b8 0
 .b32 3
 .b32 1106
 .b32 234
 .b8 1
 .b8 3

 .b8 97

 .b8 0
 .b32 3
 .b32 1106
 .b32 234
 .b8 0
 .b8 2

 .b8 108
 .b8 111
 .b8 103
 .b8 102

 .b8 0
 .b8 108
 .b8 111
 .b8 103
 .b8 102

 .b8 0
 .b32 3
 .b32 1131
 .b32 234
 .b8 1
 .b8 3

 .b8 97

 .b8 0
 .b32 3
 .b32 1131
 .b32 234
 .b8 0
 .b8 5

 .b8 95
 .b8 90
 .b8 52
 .b8 116
 .b8 97
 .b8 110
 .b8 104
 .b8 102

 .b8 0
 .b8 95
 .b8 90
 .b8 52
 .b8 116
 .b8 97
 .b8 110
 .b8 104
 .b8 102

 .b8 0
 .b32 4
 .b32 1139
 .b32 234
 .b8 1
 .b64 func_begin0
 .b64 func_end0
 .b8 1
 .b8 156
 .b8 6

 .b8 95
 .b8 88

 .b8 0
 .b32 4
 .b32 1139
 .b32 234
 .b8 6
 .b8 144
 .b8 176
 .b8 226
 .b8 152
 .b8 171
 .b8 2
 .b8 2
 .b8 7

 .b64 tmp1
 .b64 tmp3
 .b8 7

 .b64 tmp1
 .b64 tmp3
 .b8 7

 .b64 tmp1
 .b64 tmp3
 .b8 8

 .b32 309
 .b64 tmp1
 .b64 tmp2
 .b32 4
 .b32 1140
 .b8 9

 .b32 335
 .b8 5
 .b8 144
 .b8 177
 .b8 204
 .b8 149
 .b8 1
 .b8 2
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 5

 .b8 95
 .b8 90
 .b8 49
 .b8 48
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 84
 .b8 97
 .b8 110
 .b8 104
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b8 95
 .b8 90
 .b8 49
 .b8 48
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 84
 .b8 97
 .b8 110
 .b8 104
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b32 1
 .b32 9
 .b32 798
 .b8 1
 .b64 func_begin1
 .b64 func_end1
 .b8 1
 .b8 156
 .b8 6

 .b8 105
 .b8 110
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 9
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z10vectorTanhPfS_i_param_0
 .b8 7
 .b8 6

 .b8 111
 .b8 117
 .b8 116
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 9
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z10vectorTanhPfS_i_param_1
 .b8 7
 .b8 6

 .b8 110

 .b8 0
 .b32 1
 .b32 9
 .b32 3716
 .b8 9
 .b8 3
 .b64 _Z10vectorTanhPfS_i_param_2
 .b8 7
 .b8 7

 .b64 tmp4
 .b64 tmp8
 .b8 7

 .b64 tmp4
 .b64 tmp7
 .b8 7

 .b64 tmp4
 .b64 tmp7
 .b8 10

 .b8 105

 .b8 0
 .b32 1
 .b32 11
 .b32 3716
 .b8 5
 .b8 144
 .b8 177
 .b8 228
 .b8 149
 .b8 1
 .b8 2
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 11

 .b8 118
 .b8 111
 .b8 105
 .b8 100

 .b8 0
 .b8 5

 .b8 95
 .b8 90
 .b8 49
 .b8 53
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 84
 .b8 97
 .b8 110
 .b8 104
 .b8 68
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b8 95
 .b8 90
 .b8 49
 .b8 53
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 84
 .b8 97
 .b8 110
 .b8 104
 .b8 68
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b32 1
 .b32 18
 .b32 798
 .b8 1
 .b64 func_begin2
 .b64 func_end2
 .b8 1
 .b8 156
 .b8 6

 .b8 105
 .b8 110
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 18
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z15vectorTanhDerivPfS_i_param_0
 .b8 7
 .b8 6

 .b8 111
 .b8 117
 .b8 116
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 18
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z15vectorTanhDerivPfS_i_param_1
 .b8 7
 .b8 6

 .b8 110

 .b8 0
 .b32 1
 .b32 18
 .b32 3716
 .b8 9
 .b8 3
 .b64 _Z15vectorTanhDerivPfS_i_param_2
 .b8 7
 .b8 7

 .b64 tmp9
 .b64 tmp14
 .b8 7

 .b64 tmp9
 .b64 tmp13
 .b8 7

 .b64 tmp9
 .b64 tmp13
 .b8 10

 .b8 105

 .b8 0
 .b32 1
 .b32 20
 .b32 3716
 .b8 5
 .b8 144
 .b8 177
 .b8 228
 .b8 149
 .b8 1
 .b8 2
 .b8 7

 .b64 tmp10
 .b64 tmp13
 .b8 7

 .b64 tmp11
 .b64 tmp13
 .b8 10

 .b8 116
 .b8 109
 .b8 112

 .b8 0
 .b32 1
 .b32 23
 .b32 234
 .b8 5
 .b8 144
 .b8 178
 .b8 204
 .b8 149
 .b8 1
 .b8 2
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 5

 .b8 95
 .b8 90
 .b8 49
 .b8 48
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 82
 .b8 101
 .b8 76
 .b8 117
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b8 95
 .b8 90
 .b8 49
 .b8 48
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 82
 .b8 101
 .b8 76
 .b8 117
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b32 1
 .b32 28
 .b32 798
 .b8 1
 .b64 func_begin3
 .b64 func_end3
 .b8 1
 .b8 156
 .b8 6

 .b8 105
 .b8 110
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 28
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z10vectorReLuPfS_i_param_0
 .b8 7
 .b8 6

 .b8 111
 .b8 117
 .b8 116
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 28
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z10vectorReLuPfS_i_param_1
 .b8 7
 .b8 6

 .b8 110

 .b8 0
 .b32 1
 .b32 28
 .b32 3716
 .b8 9
 .b8 3
 .b64 _Z10vectorReLuPfS_i_param_2
 .b8 7
 .b8 7

 .b64 tmp15
 .b64 tmp23
 .b8 7

 .b64 tmp15
 .b64 tmp22
 .b8 7

 .b64 tmp15
 .b64 tmp22
 .b8 10

 .b8 105

 .b8 0
 .b32 1
 .b32 30
 .b32 3716
 .b8 5
 .b8 144
 .b8 177
 .b8 228
 .b8 149
 .b8 1
 .b8 2
 .b8 7

 .b64 tmp16
 .b64 tmp22
 .b8 7

 .b64 tmp17
 .b64 tmp22
 .b8 8

 .b32 177
 .b64 tmp20
 .b64 tmp21
 .b32 1
 .b32 33
 .b8 9

 .b32 203
 .b8 5
 .b8 144
 .b8 178
 .b8 204
 .b8 149
 .b8 1
 .b8 2
 .b8 9

 .b32 218
 .b8 5
 .b8 144
 .b8 180
 .b8 204
 .b8 149
 .b8 1
 .b8 2
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 5

 .b8 95
 .b8 90
 .b8 49
 .b8 53
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 82
 .b8 101
 .b8 76
 .b8 117
 .b8 68
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b8 95
 .b8 90
 .b8 49
 .b8 53
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 82
 .b8 101
 .b8 76
 .b8 117
 .b8 68
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b32 1
 .b32 37
 .b32 798
 .b8 1
 .b64 func_begin4
 .b64 func_end4
 .b8 1
 .b8 156
 .b8 6

 .b8 105
 .b8 110
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 37
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z15vectorReLuDerivPfS_i_param_0
 .b8 7
 .b8 6

 .b8 111
 .b8 117
 .b8 116
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 37
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z15vectorReLuDerivPfS_i_param_1
 .b8 7
 .b8 6

 .b8 110

 .b8 0
 .b32 1
 .b32 37
 .b32 3716
 .b8 9
 .b8 3
 .b64 _Z15vectorReLuDerivPfS_i_param_2
 .b8 7
 .b8 7

 .b64 tmp24
 .b64 tmp28
 .b8 7

 .b64 tmp24
 .b64 tmp27
 .b8 7

 .b64 tmp24
 .b64 tmp27
 .b8 10

 .b8 105

 .b8 0
 .b32 1
 .b32 39
 .b32 3716
 .b8 5
 .b8 144
 .b8 177
 .b8 228
 .b8 149
 .b8 1
 .b8 2
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 5

 .b8 95
 .b8 90
 .b8 49
 .b8 51
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 83
 .b8 105
 .b8 103
 .b8 109
 .b8 111
 .b8 105
 .b8 100
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b8 95
 .b8 90
 .b8 49
 .b8 51
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 83
 .b8 105
 .b8 103
 .b8 109
 .b8 111
 .b8 105
 .b8 100
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b32 1
 .b32 46
 .b32 798
 .b8 1
 .b64 func_begin5
 .b64 func_end5
 .b8 1
 .b8 156
 .b8 6

 .b8 105
 .b8 110
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 46
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z13vectorSigmoidPfS_i_param_0
 .b8 7
 .b8 6

 .b8 111
 .b8 117
 .b8 116
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 46
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z13vectorSigmoidPfS_i_param_1
 .b8 7
 .b8 6

 .b8 110

 .b8 0
 .b32 1
 .b32 46
 .b32 3716
 .b8 9
 .b8 3
 .b64 _Z13vectorSigmoidPfS_i_param_2
 .b8 7
 .b8 7

 .b64 tmp29
 .b64 tmp43
 .b8 7

 .b64 tmp29
 .b64 tmp42
 .b8 7

 .b64 tmp29
 .b64 tmp42
 .b8 10

 .b8 105

 .b8 0
 .b32 1
 .b32 48
 .b32 3716
 .b8 5
 .b8 144
 .b8 177
 .b8 228
 .b8 149
 .b8 1
 .b8 2
 .b8 7

 .b64 tmp30
 .b64 tmp42
 .b8 7

 .b64 tmp31
 .b64 tmp42
 .b8 8

 .b32 246
 .b64 tmp34
 .b64 tmp35
 .b32 1
 .b32 52
 .b8 9

 .b32 278
 .b8 6
 .b8 144
 .b8 177
 .b8 226
 .b8 152
 .b8 171
 .b8 2
 .b8 2
 .b8 9

 .b32 293
 .b8 6
 .b8 144
 .b8 179
 .b8 226
 .b8 152
 .b8 171
 .b8 2
 .b8 2
 .b8 0
 .b8 8

 .b32 309
 .b64 tmp36
 .b64 tmp37
 .b32 1
 .b32 52
 .b8 6

 .b8 97

 .b8 0
 .b32 3
 .b32 1106
 .b32 234
 .b8 5
 .b8 144
 .b8 177
 .b8 204
 .b8 149
 .b8 1
 .b8 2
 .b8 0
 .b8 8

 .b32 246
 .b64 tmp40
 .b64 tmp41
 .b32 1
 .b32 52
 .b8 9

 .b32 278
 .b8 6
 .b8 144
 .b8 176
 .b8 232
 .b8 152
 .b8 171
 .b8 2
 .b8 2
 .b8 9

 .b32 293
 .b8 6
 .b8 144
 .b8 178
 .b8 232
 .b8 152
 .b8 171
 .b8 2
 .b8 2
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 5

 .b8 95
 .b8 90
 .b8 49
 .b8 56
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 83
 .b8 105
 .b8 103
 .b8 109
 .b8 111
 .b8 105
 .b8 100
 .b8 68
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b8 95
 .b8 90
 .b8 49
 .b8 56
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 83
 .b8 105
 .b8 103
 .b8 109
 .b8 111
 .b8 105
 .b8 100
 .b8 68
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b32 1
 .b32 56
 .b32 798
 .b8 1
 .b64 func_begin6
 .b64 func_end6
 .b8 1
 .b8 156
 .b8 6

 .b8 105
 .b8 110
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 56
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z18vectorSigmoidDerivPfS_i_param_0
 .b8 7
 .b8 6

 .b8 111
 .b8 117
 .b8 116
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 56
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z18vectorSigmoidDerivPfS_i_param_1
 .b8 7
 .b8 6

 .b8 110

 .b8 0
 .b32 1
 .b32 56
 .b32 3716
 .b8 9
 .b8 3
 .b64 _Z18vectorSigmoidDerivPfS_i_param_2
 .b8 7
 .b8 7

 .b64 tmp44
 .b64 tmp59
 .b8 7

 .b64 tmp44
 .b64 tmp58
 .b8 7

 .b64 tmp44
 .b64 tmp58
 .b8 10

 .b8 105

 .b8 0
 .b32 1
 .b32 58
 .b32 3716
 .b8 5
 .b8 144
 .b8 177
 .b8 228
 .b8 149
 .b8 1
 .b8 2
 .b8 7

 .b64 tmp45
 .b64 tmp58
 .b8 7

 .b64 tmp46
 .b64 tmp58
 .b8 10

 .b8 115
 .b8 105
 .b8 103
 .b8 109
 .b8 111
 .b8 105
 .b8 100

 .b8 0
 .b32 1
 .b32 62
 .b32 234
 .b8 6
 .b8 144
 .b8 180
 .b8 232
 .b8 152
 .b8 171
 .b8 2
 .b8 2
 .b8 8

 .b32 246
 .b64 tmp49
 .b64 tmp50
 .b32 1
 .b32 62
 .b8 6

 .b8 97

 .b8 0
 .b32 2
 .b32 1437
 .b32 234
 .b8 6
 .b8 144
 .b8 177
 .b8 226
 .b8 152
 .b8 171
 .b8 2
 .b8 2
 .b8 6

 .b8 98

 .b8 0
 .b32 2
 .b32 1437
 .b32 234
 .b8 6
 .b8 144
 .b8 179
 .b8 226
 .b8 152
 .b8 171
 .b8 2
 .b8 2
 .b8 0
 .b8 8

 .b32 309
 .b64 tmp51
 .b64 tmp52
 .b32 1
 .b32 62
 .b8 6

 .b8 97

 .b8 0
 .b32 3
 .b32 1106
 .b32 234
 .b8 5
 .b8 144
 .b8 177
 .b8 204
 .b8 149
 .b8 1
 .b8 2
 .b8 0
 .b8 8

 .b32 246
 .b64 tmp55
 .b64 tmp56
 .b32 1
 .b32 62
 .b8 6

 .b8 97

 .b8 0
 .b32 2
 .b32 1437
 .b32 234
 .b8 6
 .b8 144
 .b8 176
 .b8 232
 .b8 152
 .b8 171
 .b8 2
 .b8 2
 .b8 6

 .b8 98

 .b8 0
 .b32 2
 .b32 1437
 .b32 234
 .b8 6
 .b8 144
 .b8 178
 .b8 232
 .b8 152
 .b8 171
 .b8 2
 .b8 2
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 5

 .b8 95
 .b8 90
 .b8 50
 .b8 51
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 67
 .b8 114
 .b8 111
 .b8 115
 .b8 115
 .b8 69
 .b8 110
 .b8 116
 .b8 114
 .b8 111
 .b8 112
 .b8 121
 .b8 69
 .b8 114
 .b8 114
 .b8 111
 .b8 114
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b8 95
 .b8 90
 .b8 50
 .b8 51
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 67
 .b8 114
 .b8 111
 .b8 115
 .b8 115
 .b8 69
 .b8 110
 .b8 116
 .b8 114
 .b8 111
 .b8 112
 .b8 121
 .b8 69
 .b8 114
 .b8 114
 .b8 111
 .b8 114
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 83
 .b8 95
 .b8 105

 .b8 0
 .b32 1
 .b32 67
 .b32 798
 .b8 1
 .b64 func_begin7
 .b64 func_end7
 .b8 1
 .b8 156
 .b8 6

 .b8 115
 .b8 105
 .b8 103
 .b8 109
 .b8 111
 .b8 105
 .b8 100
 .b8 83
 .b8 99
 .b8 111
 .b8 114
 .b8 101
 .b8 115

 .b8 0
 .b32 1
 .b32 67
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z23vectorCrossEntropyErrorPfS_S_i_param_0
 .b8 7
 .b8 6

 .b8 116
 .b8 114
 .b8 117
 .b8 101
 .b8 76
 .b8 97
 .b8 98
 .b8 101
 .b8 108
 .b8 115

 .b8 0
 .b32 1
 .b32 67
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z23vectorCrossEntropyErrorPfS_S_i_param_1
 .b8 7
 .b8 6

 .b8 111
 .b8 117
 .b8 116
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 67
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z23vectorCrossEntropyErrorPfS_S_i_param_2
 .b8 7
 .b8 6

 .b8 110

 .b8 0
 .b32 1
 .b32 67
 .b32 3716
 .b8 9
 .b8 3
 .b64 _Z23vectorCrossEntropyErrorPfS_S_i_param_3
 .b8 7
 .b8 7

 .b64 tmp60
 .b64 tmp70
 .b8 7

 .b64 tmp60
 .b64 tmp69
 .b8 7

 .b64 tmp60
 .b64 tmp69
 .b8 10

 .b8 105

 .b8 0
 .b32 1
 .b32 69
 .b32 3716
 .b8 5
 .b8 144
 .b8 177
 .b8 228
 .b8 149
 .b8 1
 .b8 2
 .b8 7

 .b64 tmp61
 .b64 tmp69
 .b8 7

 .b64 tmp62
 .b64 tmp69
 .b8 8

 .b32 351
 .b64 tmp64
 .b64 tmp65
 .b32 1
 .b32 72
 .b8 9

 .b32 375
 .b8 6
 .b8 144
 .b8 181
 .b8 238
 .b8 152
 .b8 171
 .b8 2
 .b8 2
 .b8 0
 .b8 8

 .b32 351
 .b64 tmp67
 .b64 tmp68
 .b32 1
 .b32 72
 .b8 9

 .b32 375
 .b8 6
 .b8 144
 .b8 185
 .b8 238
 .b8 152
 .b8 171
 .b8 2
 .b8 2
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 5

 .b8 95
 .b8 90
 .b8 50
 .b8 51
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 66
 .b8 101
 .b8 108
 .b8 108
 .b8 109
 .b8 97
 .b8 110
 .b8 69
 .b8 114
 .b8 114
 .b8 111
 .b8 114
 .b8 68
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 102
 .b8 105
 .b8 80
 .b8 102
 .b8 105

 .b8 0
 .b8 95
 .b8 90
 .b8 50
 .b8 51
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 66
 .b8 101
 .b8 108
 .b8 108
 .b8 109
 .b8 97
 .b8 110
 .b8 69
 .b8 114
 .b8 114
 .b8 111
 .b8 114
 .b8 68
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 102
 .b8 105
 .b8 80
 .b8 102
 .b8 105

 .b8 0
 .b32 1
 .b32 77
 .b32 798
 .b8 1
 .b64 func_begin8
 .b64 func_end8
 .b8 1
 .b8 156
 .b8 6

 .b8 100
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 86
 .b8 97
 .b8 108
 .b8 117
 .b8 101

 .b8 0
 .b32 1
 .b32 77
 .b32 234
 .b8 5
 .b8 144
 .b8 177
 .b8 204
 .b8 149
 .b8 1
 .b8 2
 .b8 6

 .b8 97
 .b8 99
 .b8 116
 .b8 105
 .b8 111
 .b8 110
 .b8 73
 .b8 110
 .b8 100
 .b8 101
 .b8 120

 .b8 0
 .b32 1
 .b32 77
 .b32 3716
 .b8 9
 .b8 3
 .b64 _Z23vectorBellmanErrorDerivfiPfi_param_1
 .b8 7
 .b8 6

 .b8 111
 .b8 117
 .b8 116
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 77
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z23vectorBellmanErrorDerivfiPfi_param_2
 .b8 7
 .b8 6

 .b8 110

 .b8 0
 .b32 1
 .b32 77
 .b32 3716
 .b8 9
 .b8 3
 .b64 _Z23vectorBellmanErrorDerivfiPfi_param_3
 .b8 7
 .b8 7

 .b64 tmp71
 .b64 tmp77
 .b8 7

 .b64 tmp71
 .b64 tmp76
 .b8 7

 .b64 tmp71
 .b64 tmp76
 .b8 10

 .b8 105

 .b8 0
 .b32 1
 .b32 79
 .b32 3716
 .b8 5
 .b8 144
 .b8 177
 .b8 228
 .b8 149
 .b8 1
 .b8 2
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 5

 .b8 95
 .b8 90
 .b8 49
 .b8 52
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 72
 .b8 97
 .b8 100
 .b8 97
 .b8 109
 .b8 97
 .b8 114
 .b8 100
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 102
 .b8 83
 .b8 95
 .b8 102
 .b8 105

 .b8 0
 .b8 95
 .b8 90
 .b8 49
 .b8 52
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 72
 .b8 97
 .b8 100
 .b8 97
 .b8 109
 .b8 97
 .b8 114
 .b8 100
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 102
 .b8 83
 .b8 95
 .b8 102
 .b8 105

 .b8 0
 .b32 1
 .b32 93
 .b32 798
 .b8 1
 .b64 func_begin9
 .b64 func_end9
 .b8 1
 .b8 156
 .b8 6

 .b8 105
 .b8 110
 .b8 112
 .b8 117
 .b8 116
 .b8 49

 .b8 0
 .b32 1
 .b32 93
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z14vectorHadamardPfS_fS_fi_param_0
 .b8 7
 .b8 6

 .b8 105
 .b8 110
 .b8 112
 .b8 117
 .b8 116
 .b8 50

 .b8 0
 .b32 1
 .b32 93
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z14vectorHadamardPfS_fS_fi_param_1
 .b8 7
 .b8 6

 .b8 97
 .b8 108
 .b8 112
 .b8 104
 .b8 97

 .b8 0
 .b32 1
 .b32 93
 .b32 234
 .b8 5
 .b8 144
 .b8 177
 .b8 204
 .b8 149
 .b8 1
 .b8 2
 .b8 6

 .b8 111
 .b8 117
 .b8 116
 .b8 112
 .b8 117
 .b8 116

 .b8 0
 .b32 1
 .b32 93
 .b32 3710
 .b8 9
 .b8 3
 .b64 _Z14vectorHadamardPfS_fS_fi_param_3
 .b8 7
 .b8 6

 .b8 98
 .b8 101
 .b8 116
 .b8 97

 .b8 0
 .b32 1
 .b32 93
 .b32 234
 .b8 5
 .b8 144
 .b8 178
 .b8 204
 .b8 149
 .b8 1
 .b8 2
 .b8 6

 .b8 110

 .b8 0
 .b32 1
 .b32 93
 .b32 3716
 .b8 9
 .b8 3
 .b64 _Z14vectorHadamardPfS_fS_fi_param_5
 .b8 7
 .b8 7

 .b64 tmp78
 .b64 tmp82
 .b8 7

 .b64 tmp78
 .b64 tmp81
 .b8 7

 .b64 tmp78
 .b64 tmp81
 .b8 10

 .b8 105

 .b8 0
 .b32 1
 .b32 95
 .b32 3716
 .b8 5
 .b8 144
 .b8 177
 .b8 228
 .b8 149
 .b8 1
 .b8 2
 .b8 0
 .b8 0
 .b8 0
 .b8 0
 .b8 12

 .b32 234
 .b8 12
 .b8 4

 .b8 105
 .b8 110
 .b8 116

 .b8 0
 .b8 5
 .b32 4
 .b8 0
}
.section .debug_abbrev {
 .b8 1

 .b8 17

 .b8 1

 .b8 37

 .b8 8

 .b8 19

 .b8 11

 .b8 3

 .b8 8

 .b8 17

 .b8 1

 .b8 16

 .b8 6

 .b8 27

 .b8 8

 .b8 0

 .b8 0

 .b8 2

 .b8 46

 .b8 1

 .b8 135
 .b8 64

 .b8 8

 .b8 3

 .b8 8

 .b8 58

 .b8 6

 .b8 59

 .b8 6

 .b8 73

 .b8 19

 .b8 32

 .b8 11

 .b8 0

 .b8 0

 .b8 3

 .b8 5

 .b8 0

 .b8 3

 .b8 8

 .b8 58

 .b8 6

 .b8 59

 .b8 6

 .b8 73

 .b8 19

 .b8 0

 .b8 0

 .b8 4

 .b8 36

 .b8 0

 .b8 3

 .b8 8

 .b8 62

 .b8 11

 .b8 11

 .b8 6

 .b8 0

 .b8 0

 .b8 5

 .b8 46

 .b8 1

 .b8 135
 .b8 64

 .b8 8

 .b8 3

 .b8 8

 .b8 58

 .b8 6

 .b8 59

 .b8 6

 .b8 73

 .b8 19

 .b8 63

 .b8 12

 .b8 17

 .b8 1

 .b8 18

 .b8 1

 .b8 64

 .b8 10

 .b8 0

 .b8 0

 .b8 6

 .b8 5

 .b8 0

 .b8 3

 .b8 8

 .b8 58

 .b8 6

 .b8 59

 .b8 6

 .b8 73

 .b8 19

 .b8 2

 .b8 10

 .b8 51

 .b8 11

 .b8 0

 .b8 0

 .b8 7

 .b8 11

 .b8 1

 .b8 17

 .b8 1

 .b8 18

 .b8 1

 .b8 0

 .b8 0

 .b8 8

 .b8 29

 .b8 1

 .b8 49

 .b8 19

 .b8 17

 .b8 1

 .b8 18

 .b8 1

 .b8 88

 .b8 6

 .b8 89

 .b8 6

 .b8 0

 .b8 0

 .b8 9

 .b8 5

 .b8 0

 .b8 49

 .b8 19

 .b8 2

 .b8 10

 .b8 51

 .b8 11

 .b8 0

 .b8 0

 .b8 10

 .b8 52

 .b8 0

 .b8 3

 .b8 8

 .b8 58

 .b8 6

 .b8 59

 .b8 6

 .b8 73

 .b8 19

 .b8 2

 .b8 10

 .b8 51

 .b8 11

 .b8 0

 .b8 0

 .b8 11

 .b8 59

 .b8 0

 .b8 3

 .b8 8

 .b8 0

 .b8 0

 .b8 12

 .b8 15

 .b8 0

 .b8 73

 .b8 19

 .b8 51

 .b8 11

 .b8 0

 .b8 0

 .b8 0

}
.section .debug_ranges {
}
.section .debug_pubnames {
 .b32 342
 .b8 2
 .b8 0
 .b32 .debug_info
 .b32 3723
 .b32 246
 .b8 102
 .b8 100
 .b8 105
 .b8 118
 .b8 105
 .b8 100
 .b8 101
 .b8 102
 .b8 0

 .b32 351
 .b8 108
 .b8 111
 .b8 103
 .b8 102
 .b8 0

 .b32 562
 .b8 95
 .b8 90
 .b8 49
 .b8 48
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 84
 .b8 97
 .b8 110
 .b8 104
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105
 .b8 0

 .b32 804
 .b8 95
 .b8 90
 .b8 49
 .b8 53
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 84
 .b8 97
 .b8 110
 .b8 104
 .b8 68
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105
 .b8 0

 .b32 2124
 .b8 95
 .b8 90
 .b8 49
 .b8 56
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 83
 .b8 105
 .b8 103
 .b8 109
 .b8 111
 .b8 105
 .b8 100
 .b8 68
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105
 .b8 0

 .b32 1682
 .b8 95
 .b8 90
 .b8 49
 .b8 51
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 83
 .b8 105
 .b8 103
 .b8 109
 .b8 111
 .b8 105
 .b8 100
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105
 .b8 0

 .b32 309
 .b8 116
 .b8 97
 .b8 110
 .b8 104
 .b8 102
 .b8 0

 .b32 177
 .b8 102
 .b8 109
 .b8 97
 .b8 120
 .b8 102
 .b8 0

 .b32 3375
 .b8 95
 .b8 90
 .b8 49
 .b8 52
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 72
 .b8 97
 .b8 100
 .b8 97
 .b8 109
 .b8 97
 .b8 114
 .b8 100
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 102
 .b8 83
 .b8 95
 .b8 102
 .b8 105
 .b8 0

 .b32 1436
 .b8 95
 .b8 90
 .b8 49
 .b8 53
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 82
 .b8 101
 .b8 76
 .b8 117
 .b8 68
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105
 .b8 0

 .b32 1110
 .b8 95
 .b8 90
 .b8 49
 .b8 48
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 82
 .b8 101
 .b8 76
 .b8 117
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 105
 .b8 0

 .b32 2645
 .b8 95
 .b8 90
 .b8 50
 .b8 51
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 67
 .b8 114
 .b8 111
 .b8 115
 .b8 115
 .b8 69
 .b8 110
 .b8 116
 .b8 114
 .b8 111
 .b8 112
 .b8 121
 .b8 69
 .b8 114
 .b8 114
 .b8 111
 .b8 114
 .b8 80
 .b8 102
 .b8 83
 .b8 95
 .b8 83
 .b8 95
 .b8 105
 .b8 0

 .b32 391
 .b8 95
 .b8 90
 .b8 52
 .b8 116
 .b8 97
 .b8 110
 .b8 104
 .b8 102
 .b8 0

 .b32 3076
 .b8 95
 .b8 90
 .b8 50
 .b8 51
 .b8 118
 .b8 101
 .b8 99
 .b8 116
 .b8 111
 .b8 114
 .b8 66
 .b8 101
 .b8 108
 .b8 108
 .b8 109
 .b8 97
 .b8 110
 .b8 69
 .b8 114
 .b8 114
 .b8 111
 .b8 114
 .b8 68
 .b8 101
 .b8 114
 .b8 105
 .b8 118
 .b8 102
 .b8 105
 .b8 80
 .b8 102
 .b8 105
 .b8 0

 .b32 0
}
