#line 1 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
#pragma section("__nv_managed_data__")
#line 1
static char __nv_inited_managed_rt = 0; static void **__nv_fatbinhandle_for_managed_rt; static void __nv_save_fatbinhandle_for_managed_rt(void **in){__nv_fatbinhandle_for_managed_rt = in;} static char __nv_init_managed_rt_with_module(void **); static inline void __nv_init_managed_rt(void) { __nv_inited_managed_rt = (__nv_inited_managed_rt ? __nv_inited_managed_rt                 : __nv_init_managed_rt_with_module(__nv_fatbinhandle_for_managed_rt));}
#line 1
#line 717 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\sal.h"
#pragma region Input Buffer SAL 1 compatibility macros
#line 1481
#pragma endregion Input Buffer SAL 1 compatibility macros
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#pragma pack ( push, 8 )
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vadefs.h"
#pragma pack ( push, 8 )
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vadefs.h"
extern "C" { typedef unsigned __int64 uintptr_t; }
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vadefs.h"
extern "C" { typedef char *va_list; }
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vadefs.h"
extern "C" { extern void __cdecl __va_start(va_list *, ...); } 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\vadefs.h"
#pragma pack ( pop )
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
typedef unsigned __int64 size_t; 
#include "crt/host_runtime.h"
#line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
extern "C" { typedef size_t rsize_t; }
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
extern "C" { typedef __int64 intptr_t; }
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
extern "C" { typedef __int64 ptrdiff_t; }
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
extern "C" { typedef unsigned short wint_t; }
#line 542
extern "C" { typedef unsigned short wctype_t; }
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
extern "C" { typedef int errno_t; }
#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
extern "C" { typedef long __time32_t; }
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
extern "C" { typedef __int64 __time64_t; }
#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
extern "C" { typedef __time64_t time_t; }
#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
extern "C" { __declspec(dllimport) void __cdecl _invalid_parameter(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); } 
#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
extern "C" { 
#line 641
__declspec(dllimport) __declspec(noreturn) void __cdecl 
#line 642
_invoke_watson(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); } 
#line 2072 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
struct threadlocaleinfostruct; 
#line 2073
struct threadmbcinfostruct; 
#line 2074
extern "C" { typedef threadlocaleinfostruct *pthreadlocinfo; }
#line 2075
extern "C" { typedef threadmbcinfostruct *pthreadmbcinfo; }
#line 2076
struct __lc_time_data; 
#line 2082
extern "C" { typedef 
#line 2078
struct localeinfo_struct { 
#line 2080
pthreadlocinfo locinfo; 
#line 2081
pthreadmbcinfo mbcinfo; 
#line 2082
} _locale_tstruct, *_locale_t; }
#line 2090
extern "C" { typedef 
#line 2085
struct localerefcount { 
#line 2086
char *locale; 
#line 2087
__wchar_t *wlocale; 
#line 2088
int *refcount; 
#line 2089
int *wrefcount; 
#line 2090
} locrefcount; }
#line 2111
extern "C" { typedef 
#line 2092
struct threadlocaleinfostruct { 
#line 2093
int refcount; 
#line 2094
unsigned lc_codepage; 
#line 2095
unsigned lc_collate_cp; 
#line 2096
unsigned lc_time_cp; 
#line 2097
locrefcount lc_category[6]; 
#line 2098
int lc_clike; 
#line 2099
int mb_cur_max; 
#line 2100
int *lconv_intl_refcount; 
#line 2101
int *lconv_num_refcount; 
#line 2102
int *lconv_mon_refcount; 
#line 2103
struct lconv *lconv; 
#line 2104
int *ctype1_refcount; 
#line 2105
unsigned short *ctype1; 
#line 2106
const unsigned short *pctype; 
#line 2107
const unsigned char *pclmap; 
#line 2108
const unsigned char *pcumap; 
#line 2109
__lc_time_data *lc_time_curr; 
#line 2110
__wchar_t *locale_name[6]; 
#line 2111
} threadlocinfo; }
#line 2148 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\crtdefs.h"
#pragma pack ( pop )
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_types.h"
#if 0
#line 61
enum cudaRoundMode { 
#line 63
cudaRoundNearest, 
#line 64
cudaRoundZero, 
#line 65
cudaRoundPosInf, 
#line 66
cudaRoundMinInf
#line 67
}; 
#endif
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stddef.h"
namespace std { typedef decltype((__nullptr)) nullptr_t; }
#line 37
using std::nullptr_t;
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stddef.h"
extern "C" { __declspec(dllimport) extern int *__cdecl _errno(); } 
#line 46
extern "C" { errno_t __cdecl _set_errno(int _Value); } 
#line 47
extern "C" { errno_t __cdecl _get_errno(int * _Value); } 
#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stddef.h"
extern "C" { __declspec(dllimport) extern unsigned long __cdecl __threadid(); } 
#line 71
extern "C" { __declspec(dllimport) extern uintptr_t __cdecl __threadhandle(); } 
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 150
enum cudaError { 
#line 157
cudaSuccess, 
#line 163
cudaErrorMissingConfiguration, 
#line 169
cudaErrorMemoryAllocation, 
#line 175
cudaErrorInitializationError, 
#line 185
cudaErrorLaunchFailure, 
#line 194
cudaErrorPriorLaunchFailure, 
#line 204
cudaErrorLaunchTimeout, 
#line 213
cudaErrorLaunchOutOfResources, 
#line 219
cudaErrorInvalidDeviceFunction, 
#line 228
cudaErrorInvalidConfiguration, 
#line 234
cudaErrorInvalidDevice, 
#line 240
cudaErrorInvalidValue, 
#line 246
cudaErrorInvalidPitchValue, 
#line 252
cudaErrorInvalidSymbol, 
#line 257
cudaErrorMapBufferObjectFailed, 
#line 262
cudaErrorUnmapBufferObjectFailed, 
#line 268
cudaErrorInvalidHostPointer, 
#line 274
cudaErrorInvalidDevicePointer, 
#line 280
cudaErrorInvalidTexture, 
#line 286
cudaErrorInvalidTextureBinding, 
#line 293
cudaErrorInvalidChannelDescriptor, 
#line 299
cudaErrorInvalidMemcpyDirection, 
#line 309
cudaErrorAddressOfConstant, 
#line 318
cudaErrorTextureFetchFailed, 
#line 327
cudaErrorTextureNotBound, 
#line 336
cudaErrorSynchronizationError, 
#line 342
cudaErrorInvalidFilterSetting, 
#line 348
cudaErrorInvalidNormSetting, 
#line 356
cudaErrorMixedDeviceExecution, 
#line 363
cudaErrorCudartUnloading, 
#line 368
cudaErrorUnknown, 
#line 376
cudaErrorNotYetImplemented, 
#line 385
cudaErrorMemoryValueTooLarge, 
#line 392
cudaErrorInvalidResourceHandle, 
#line 400
cudaErrorNotReady, 
#line 407
cudaErrorInsufficientDriver, 
#line 420
cudaErrorSetOnActiveProcess, 
#line 426
cudaErrorInvalidSurface, 
#line 432
cudaErrorNoDevice, 
#line 438
cudaErrorECCUncorrectable, 
#line 443
cudaErrorSharedObjectSymbolNotFound, 
#line 448
cudaErrorSharedObjectInitFailed, 
#line 454
cudaErrorUnsupportedLimit, 
#line 460
cudaErrorDuplicateVariableName, 
#line 466
cudaErrorDuplicateTextureName, 
#line 472
cudaErrorDuplicateSurfaceName, 
#line 482
cudaErrorDevicesUnavailable, 
#line 487
cudaErrorInvalidKernelImage, 
#line 495
cudaErrorNoKernelImageForDevice, 
#line 508
cudaErrorIncompatibleDriverContext, 
#line 515
cudaErrorPeerAccessAlreadyEnabled, 
#line 522
cudaErrorPeerAccessNotEnabled, 
#line 528
cudaErrorDeviceAlreadyInUse = 54, 
#line 535
cudaErrorProfilerDisabled, 
#line 543
cudaErrorProfilerNotInitialized, 
#line 550
cudaErrorProfilerAlreadyStarted, 
#line 557
cudaErrorProfilerAlreadyStopped, 
#line 565
cudaErrorAssert, 
#line 572
cudaErrorTooManyPeers, 
#line 578
cudaErrorHostMemoryAlreadyRegistered, 
#line 584
cudaErrorHostMemoryNotRegistered, 
#line 589
cudaErrorOperatingSystem, 
#line 595
cudaErrorPeerAccessUnsupported, 
#line 602
cudaErrorLaunchMaxDepthExceeded, 
#line 610
cudaErrorLaunchFileScopedTex, 
#line 618
cudaErrorLaunchFileScopedSurf, 
#line 633
cudaErrorSyncDepthExceeded, 
#line 645
cudaErrorLaunchPendingCountExceeded, 
#line 650
cudaErrorNotPermitted, 
#line 656
cudaErrorNotSupported, 
#line 665
cudaErrorHardwareStackError, 
#line 673
cudaErrorIllegalInstruction, 
#line 682
cudaErrorMisalignedAddress, 
#line 693
cudaErrorInvalidAddressSpace, 
#line 701
cudaErrorInvalidPc, 
#line 709
cudaErrorIllegalAddress, 
#line 715
cudaErrorInvalidPtx, 
#line 720
cudaErrorInvalidGraphicsContext, 
#line 726
cudaErrorStartupFailure = 127, 
#line 734
cudaErrorApiFailureBase = 10000
#line 735
}; 
#endif
#line 740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 740
enum cudaChannelFormatKind { 
#line 742
cudaChannelFormatKindSigned, 
#line 743
cudaChannelFormatKindUnsigned, 
#line 744
cudaChannelFormatKindFloat, 
#line 745
cudaChannelFormatKindNone
#line 746
}; 
#endif
#line 751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 751
struct cudaChannelFormatDesc { 
#line 753
int x; 
#line 754
int y; 
#line 755
int z; 
#line 756
int w; 
#line 757
cudaChannelFormatKind f; 
#line 758
}; 
#endif
#line 763 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
typedef struct cudaArray *cudaArray_t; 
#line 768
typedef const cudaArray *cudaArray_const_t; 
#line 770
struct cudaArray; 
#line 775
typedef struct cudaMipmappedArray *cudaMipmappedArray_t; 
#line 780
typedef const cudaMipmappedArray *cudaMipmappedArray_const_t; 
#line 782
struct cudaMipmappedArray; 
#line 787
#if 0
#line 787
enum cudaMemoryType { 
#line 789
cudaMemoryTypeHost = 1, 
#line 790
cudaMemoryTypeDevice
#line 791
}; 
#endif
#line 796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 796
enum cudaMemcpyKind { 
#line 798
cudaMemcpyHostToHost, 
#line 799
cudaMemcpyHostToDevice, 
#line 800
cudaMemcpyDeviceToHost, 
#line 801
cudaMemcpyDeviceToDevice, 
#line 802
cudaMemcpyDefault
#line 803
}; 
#endif
#line 810 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 810
struct cudaPitchedPtr { 
#line 812
void *ptr; 
#line 813
size_t pitch; 
#line 814
size_t xsize; 
#line 815
size_t ysize; 
#line 816
}; 
#endif
#line 823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 823
struct cudaExtent { 
#line 825
size_t width; 
#line 826
size_t height; 
#line 827
size_t depth; 
#line 828
}; 
#endif
#line 835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 835
struct cudaPos { 
#line 837
size_t x; 
#line 838
size_t y; 
#line 839
size_t z; 
#line 840
}; 
#endif
#line 845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 845
struct cudaMemcpy3DParms { 
#line 847
cudaArray_t srcArray; 
#line 848
cudaPos srcPos; 
#line 849
cudaPitchedPtr srcPtr; 
#line 851
cudaArray_t dstArray; 
#line 852
cudaPos dstPos; 
#line 853
cudaPitchedPtr dstPtr; 
#line 855
cudaExtent extent; 
#line 856
cudaMemcpyKind kind; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 857
}; 
#endif
#line 862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 862
struct cudaMemcpy3DPeerParms { 
#line 864
cudaArray_t srcArray; 
#line 865
cudaPos srcPos; 
#line 866
cudaPitchedPtr srcPtr; 
#line 867
int srcDevice; 
#line 869
cudaArray_t dstArray; 
#line 870
cudaPos dstPos; 
#line 871
cudaPitchedPtr dstPtr; 
#line 872
int dstDevice; 
#line 874
cudaExtent extent; 
#line 875
}; 
#endif
#line 880 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
struct cudaGraphicsResource; 
#line 885
#if 0
#line 885
enum cudaGraphicsRegisterFlags { 
#line 887
cudaGraphicsRegisterFlagsNone, 
#line 888
cudaGraphicsRegisterFlagsReadOnly, 
#line 889
cudaGraphicsRegisterFlagsWriteDiscard, 
#line 890
cudaGraphicsRegisterFlagsSurfaceLoadStore = 4, 
#line 891
cudaGraphicsRegisterFlagsTextureGather = 8
#line 892
}; 
#endif
#line 897 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 897
enum cudaGraphicsMapFlags { 
#line 899
cudaGraphicsMapFlagsNone, 
#line 900
cudaGraphicsMapFlagsReadOnly, 
#line 901
cudaGraphicsMapFlagsWriteDiscard
#line 902
}; 
#endif
#line 907 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 907
enum cudaGraphicsCubeFace { 
#line 909
cudaGraphicsCubeFacePositiveX, 
#line 910
cudaGraphicsCubeFaceNegativeX, 
#line 911
cudaGraphicsCubeFacePositiveY, 
#line 912
cudaGraphicsCubeFaceNegativeY, 
#line 913
cudaGraphicsCubeFacePositiveZ, 
#line 914
cudaGraphicsCubeFaceNegativeZ
#line 915
}; 
#endif
#line 920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 920
enum cudaResourceType { 
#line 922
cudaResourceTypeArray, 
#line 923
cudaResourceTypeMipmappedArray, 
#line 924
cudaResourceTypeLinear, 
#line 925
cudaResourceTypePitch2D
#line 926
}; 
#endif
#line 931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 931
enum cudaResourceViewFormat { 
#line 933
cudaResViewFormatNone, 
#line 934
cudaResViewFormatUnsignedChar1, 
#line 935
cudaResViewFormatUnsignedChar2, 
#line 936
cudaResViewFormatUnsignedChar4, 
#line 937
cudaResViewFormatSignedChar1, 
#line 938
cudaResViewFormatSignedChar2, 
#line 939
cudaResViewFormatSignedChar4, 
#line 940
cudaResViewFormatUnsignedShort1, 
#line 941
cudaResViewFormatUnsignedShort2, 
#line 942
cudaResViewFormatUnsignedShort4, 
#line 943
cudaResViewFormatSignedShort1, 
#line 944
cudaResViewFormatSignedShort2, 
#line 945
cudaResViewFormatSignedShort4, 
#line 946
cudaResViewFormatUnsignedInt1, 
#line 947
cudaResViewFormatUnsignedInt2, 
#line 948
cudaResViewFormatUnsignedInt4, 
#line 949
cudaResViewFormatSignedInt1, 
#line 950
cudaResViewFormatSignedInt2, 
#line 951
cudaResViewFormatSignedInt4, 
#line 952
cudaResViewFormatHalf1, 
#line 953
cudaResViewFormatHalf2, 
#line 954
cudaResViewFormatHalf4, 
#line 955
cudaResViewFormatFloat1, 
#line 956
cudaResViewFormatFloat2, 
#line 957
cudaResViewFormatFloat4, 
#line 958
cudaResViewFormatUnsignedBlockCompressed1, 
#line 959
cudaResViewFormatUnsignedBlockCompressed2, 
#line 960
cudaResViewFormatUnsignedBlockCompressed3, 
#line 961
cudaResViewFormatUnsignedBlockCompressed4, 
#line 962
cudaResViewFormatSignedBlockCompressed4, 
#line 963
cudaResViewFormatUnsignedBlockCompressed5, 
#line 964
cudaResViewFormatSignedBlockCompressed5, 
#line 965
cudaResViewFormatUnsignedBlockCompressed6H, 
#line 966
cudaResViewFormatSignedBlockCompressed6H, 
#line 967
cudaResViewFormatUnsignedBlockCompressed7
#line 968
}; 
#endif
#line 973 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 973
struct cudaResourceDesc { 
#line 974
cudaResourceType resType; 
#line 976
union { 
#line 977
struct { 
#line 978
cudaArray_t array; 
#line 979
} array; 
#line 980
struct { 
#line 981
cudaMipmappedArray_t mipmap; 
#line 982
} mipmap; 
#line 983
struct { 
#line 984
void *devPtr; 
#line 985
cudaChannelFormatDesc desc; 
#line 986
size_t sizeInBytes; 
#line 987
} linear; 
#line 988
struct { 
#line 989
void *devPtr; 
#line 990
cudaChannelFormatDesc desc; 
#line 991
size_t width; 
#line 992
size_t height; 
#line 993
size_t pitchInBytes; 
#line 994
} pitch2D; 
#line 995
} res; 
#line 996
}; 
#endif
#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 1001
struct cudaResourceViewDesc { 
#line 1003
cudaResourceViewFormat format; 
#line 1004
size_t width; 
#line 1005
size_t height; 
#line 1006
size_t depth; 
#line 1007
unsigned firstMipmapLevel; 
#line 1008
unsigned lastMipmapLevel; 
#line 1009
unsigned firstLayer; 
#line 1010
unsigned lastLayer; 
#line 1011
}; 
#endif
#line 1016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 1016
struct cudaPointerAttributes { 
#line 1022
cudaMemoryType memoryType; 
#line 1033
int device; 
#line 1039
void *devicePointer; 
#line 1045
void *hostPointer; 
#line 1050
int isManaged; __pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)__pad__(volatile char:8;)
#line 1051
}; 
#endif
#line 1056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 1056
struct cudaFuncAttributes { 
#line 1063
size_t sharedSizeBytes; 
#line 1069
size_t constSizeBytes; 
#line 1074
size_t localSizeBytes; 
#line 1081
int maxThreadsPerBlock; 
#line 1086
int numRegs; 
#line 1093
int ptxVersion; 
#line 1100
int binaryVersion; 
#line 1106
int cacheModeCA; 
#line 1107
}; 
#endif
#line 1112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 1112
enum cudaFuncCache { 
#line 1114
cudaFuncCachePreferNone, 
#line 1115
cudaFuncCachePreferShared, 
#line 1116
cudaFuncCachePreferL1, 
#line 1117
cudaFuncCachePreferEqual
#line 1118
}; 
#endif
#line 1124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 1124
enum cudaSharedMemConfig { 
#line 1126
cudaSharedMemBankSizeDefault, 
#line 1127
cudaSharedMemBankSizeFourByte, 
#line 1128
cudaSharedMemBankSizeEightByte
#line 1129
}; 
#endif
#line 1134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 1134
enum cudaComputeMode { 
#line 1136
cudaComputeModeDefault, 
#line 1137
cudaComputeModeExclusive, 
#line 1138
cudaComputeModeProhibited, 
#line 1139
cudaComputeModeExclusiveProcess
#line 1140
}; 
#endif
#line 1145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 1145
enum cudaLimit { 
#line 1147
cudaLimitStackSize, 
#line 1148
cudaLimitPrintfFifoSize, 
#line 1149
cudaLimitMallocHeapSize, 
#line 1150
cudaLimitDevRuntimeSyncDepth, 
#line 1151
cudaLimitDevRuntimePendingLaunchCount
#line 1152
}; 
#endif
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 1157
enum cudaOutputMode { 
#line 1159
cudaKeyValuePair, 
#line 1160
cudaCSV
#line 1161
}; 
#endif
#line 1166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 1166
enum cudaDeviceAttr { 
#line 1168
cudaDevAttrMaxThreadsPerBlock = 1, 
#line 1169
cudaDevAttrMaxBlockDimX, 
#line 1170
cudaDevAttrMaxBlockDimY, 
#line 1171
cudaDevAttrMaxBlockDimZ, 
#line 1172
cudaDevAttrMaxGridDimX, 
#line 1173
cudaDevAttrMaxGridDimY, 
#line 1174
cudaDevAttrMaxGridDimZ, 
#line 1175
cudaDevAttrMaxSharedMemoryPerBlock, 
#line 1176
cudaDevAttrTotalConstantMemory, 
#line 1177
cudaDevAttrWarpSize, 
#line 1178
cudaDevAttrMaxPitch, 
#line 1179
cudaDevAttrMaxRegistersPerBlock, 
#line 1180
cudaDevAttrClockRate, 
#line 1181
cudaDevAttrTextureAlignment, 
#line 1182
cudaDevAttrGpuOverlap, 
#line 1183
cudaDevAttrMultiProcessorCount, 
#line 1184
cudaDevAttrKernelExecTimeout, 
#line 1185
cudaDevAttrIntegrated, 
#line 1186
cudaDevAttrCanMapHostMemory, 
#line 1187
cudaDevAttrComputeMode, 
#line 1188
cudaDevAttrMaxTexture1DWidth, 
#line 1189
cudaDevAttrMaxTexture2DWidth, 
#line 1190
cudaDevAttrMaxTexture2DHeight, 
#line 1191
cudaDevAttrMaxTexture3DWidth, 
#line 1192
cudaDevAttrMaxTexture3DHeight, 
#line 1193
cudaDevAttrMaxTexture3DDepth, 
#line 1194
cudaDevAttrMaxTexture2DLayeredWidth, 
#line 1195
cudaDevAttrMaxTexture2DLayeredHeight, 
#line 1196
cudaDevAttrMaxTexture2DLayeredLayers, 
#line 1197
cudaDevAttrSurfaceAlignment, 
#line 1198
cudaDevAttrConcurrentKernels, 
#line 1199
cudaDevAttrEccEnabled, 
#line 1200
cudaDevAttrPciBusId, 
#line 1201
cudaDevAttrPciDeviceId, 
#line 1202
cudaDevAttrTccDriver, 
#line 1203
cudaDevAttrMemoryClockRate, 
#line 1204
cudaDevAttrGlobalMemoryBusWidth, 
#line 1205
cudaDevAttrL2CacheSize, 
#line 1206
cudaDevAttrMaxThreadsPerMultiProcessor, 
#line 1207
cudaDevAttrAsyncEngineCount, 
#line 1208
cudaDevAttrUnifiedAddressing, 
#line 1209
cudaDevAttrMaxTexture1DLayeredWidth, 
#line 1210
cudaDevAttrMaxTexture1DLayeredLayers, 
#line 1211
cudaDevAttrMaxTexture2DGatherWidth = 45, 
#line 1212
cudaDevAttrMaxTexture2DGatherHeight, 
#line 1213
cudaDevAttrMaxTexture3DWidthAlt, 
#line 1214
cudaDevAttrMaxTexture3DHeightAlt, 
#line 1215
cudaDevAttrMaxTexture3DDepthAlt, 
#line 1216
cudaDevAttrPciDomainId, 
#line 1217
cudaDevAttrTexturePitchAlignment, 
#line 1218
cudaDevAttrMaxTextureCubemapWidth, 
#line 1219
cudaDevAttrMaxTextureCubemapLayeredWidth, 
#line 1220
cudaDevAttrMaxTextureCubemapLayeredLayers, 
#line 1221
cudaDevAttrMaxSurface1DWidth, 
#line 1222
cudaDevAttrMaxSurface2DWidth, 
#line 1223
cudaDevAttrMaxSurface2DHeight, 
#line 1224
cudaDevAttrMaxSurface3DWidth, 
#line 1225
cudaDevAttrMaxSurface3DHeight, 
#line 1226
cudaDevAttrMaxSurface3DDepth, 
#line 1227
cudaDevAttrMaxSurface1DLayeredWidth, 
#line 1228
cudaDevAttrMaxSurface1DLayeredLayers, 
#line 1229
cudaDevAttrMaxSurface2DLayeredWidth, 
#line 1230
cudaDevAttrMaxSurface2DLayeredHeight, 
#line 1231
cudaDevAttrMaxSurface2DLayeredLayers, 
#line 1232
cudaDevAttrMaxSurfaceCubemapWidth, 
#line 1233
cudaDevAttrMaxSurfaceCubemapLayeredWidth, 
#line 1234
cudaDevAttrMaxSurfaceCubemapLayeredLayers, 
#line 1235
cudaDevAttrMaxTexture1DLinearWidth, 
#line 1236
cudaDevAttrMaxTexture2DLinearWidth, 
#line 1237
cudaDevAttrMaxTexture2DLinearHeight, 
#line 1238
cudaDevAttrMaxTexture2DLinearPitch, 
#line 1239
cudaDevAttrMaxTexture2DMipmappedWidth, 
#line 1240
cudaDevAttrMaxTexture2DMipmappedHeight, 
#line 1241
cudaDevAttrComputeCapabilityMajor, 
#line 1242
cudaDevAttrComputeCapabilityMinor, 
#line 1243
cudaDevAttrMaxTexture1DMipmappedWidth, 
#line 1244
cudaDevAttrStreamPrioritiesSupported, 
#line 1245
cudaDevAttrGlobalL1CacheSupported, 
#line 1246
cudaDevAttrLocalL1CacheSupported, 
#line 1247
cudaDevAttrMaxSharedMemoryPerMultiprocessor, 
#line 1248
cudaDevAttrMaxRegistersPerMultiprocessor, 
#line 1249
cudaDevAttrManagedMemory, 
#line 1250
cudaDevAttrIsMultiGpuBoard, 
#line 1251
cudaDevAttrMultiGpuBoardGroupID
#line 1252
}; 
#endif
#line 1257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
#line 1257
struct cudaDeviceProp { 
#line 1259
char name[256]; 
#line 1260
size_t totalGlobalMem; 
#line 1261
size_t sharedMemPerBlock; 
#line 1262
int regsPerBlock; 
#line 1263
int warpSize; 
#line 1264
size_t memPitch; 
#line 1265
int maxThreadsPerBlock; 
#line 1266
int maxThreadsDim[3]; 
#line 1267
int maxGridSize[3]; 
#line 1268
int clockRate; 
#line 1269
size_t totalConstMem; 
#line 1270
int major; 
#line 1271
int minor; 
#line 1272
size_t textureAlignment; 
#line 1273
size_t texturePitchAlignment; 
#line 1274
int deviceOverlap; 
#line 1275
int multiProcessorCount; 
#line 1276
int kernelExecTimeoutEnabled; 
#line 1277
int integrated; 
#line 1278
int canMapHostMemory; 
#line 1279
int computeMode; 
#line 1280
int maxTexture1D; 
#line 1281
int maxTexture1DMipmap; 
#line 1282
int maxTexture1DLinear; 
#line 1283
int maxTexture2D[2]; 
#line 1284
int maxTexture2DMipmap[2]; 
#line 1285
int maxTexture2DLinear[3]; 
#line 1286
int maxTexture2DGather[2]; 
#line 1287
int maxTexture3D[3]; 
#line 1288
int maxTexture3DAlt[3]; 
#line 1289
int maxTextureCubemap; 
#line 1290
int maxTexture1DLayered[2]; 
#line 1291
int maxTexture2DLayered[3]; 
#line 1292
int maxTextureCubemapLayered[2]; 
#line 1293
int maxSurface1D; 
#line 1294
int maxSurface2D[2]; 
#line 1295
int maxSurface3D[3]; 
#line 1296
int maxSurface1DLayered[2]; 
#line 1297
int maxSurface2DLayered[3]; 
#line 1298
int maxSurfaceCubemap; 
#line 1299
int maxSurfaceCubemapLayered[2]; 
#line 1300
size_t surfaceAlignment; 
#line 1301
int concurrentKernels; 
#line 1302
int ECCEnabled; 
#line 1303
int pciBusID; 
#line 1304
int pciDeviceID; 
#line 1305
int pciDomainID; 
#line 1306
int tccDriver; 
#line 1307
int asyncEngineCount; 
#line 1308
int unifiedAddressing; 
#line 1309
int memoryClockRate; 
#line 1310
int memoryBusWidth; 
#line 1311
int l2CacheSize; 
#line 1312
int maxThreadsPerMultiProcessor; 
#line 1313
int streamPrioritiesSupported; 
#line 1314
int globalL1CacheSupported; 
#line 1315
int localL1CacheSupported; 
#line 1316
size_t sharedMemPerMultiprocessor; 
#line 1317
int regsPerMultiprocessor; 
#line 1318
int managedMemory; 
#line 1319
int isMultiGpuBoard; 
#line 1320
int multiGpuBoardGroupID; 
#line 1321
}; 
#endif
#line 1400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
typedef 
#line 1397
struct cudaIpcEventHandle_st { 
#line 1399
char reserved[64]; 
#line 1400
} cudaIpcEventHandle_t; 
#endif
#line 1408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
typedef 
#line 1405
struct cudaIpcMemHandle_st { 
#line 1407
char reserved[64]; 
#line 1408
} cudaIpcMemHandle_t; 
#endif
#line 1419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
typedef cudaError 
#line 1419
cudaError_t; 
#endif
#line 1424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
typedef struct CUstream_st *
#line 1424
cudaStream_t; 
#endif
#line 1429 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
typedef struct CUevent_st *
#line 1429
cudaEvent_t; 
#endif
#line 1434 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
typedef cudaGraphicsResource *
#line 1434
cudaGraphicsResource_t; 
#endif
#line 1439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
typedef struct CUuuid_st 
#line 1439
cudaUUID_t; 
#endif
#line 1444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_types.h"
#if 0
typedef cudaOutputMode 
#line 1444
cudaOutputMode_t; 
#endif
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_types.h"
#if 0
#line 84
enum cudaSurfaceBoundaryMode { 
#line 86
cudaBoundaryModeZero, 
#line 87
cudaBoundaryModeClamp, 
#line 88
cudaBoundaryModeTrap
#line 89
}; 
#endif
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_types.h"
#if 0
#line 94
enum cudaSurfaceFormatMode { 
#line 96
cudaFormatModeForced, 
#line 97
cudaFormatModeAuto
#line 98
}; 
#endif
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_types.h"
#if 0
#line 103
struct surfaceReference { 
#line 108
cudaChannelFormatDesc channelDesc; 
#line 109
}; 
#endif
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_types.h"
#if 0
typedef unsigned __int64 
#line 114
cudaSurfaceObject_t; 
#endif
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_types.h"
#if 0
#line 84
enum cudaTextureAddressMode { 
#line 86
cudaAddressModeWrap, 
#line 87
cudaAddressModeClamp, 
#line 88
cudaAddressModeMirror, 
#line 89
cudaAddressModeBorder
#line 90
}; 
#endif
#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_types.h"
#if 0
#line 95
enum cudaTextureFilterMode { 
#line 97
cudaFilterModePoint, 
#line 98
cudaFilterModeLinear
#line 99
}; 
#endif
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_types.h"
#if 0
#line 104
enum cudaTextureReadMode { 
#line 106
cudaReadModeElementType, 
#line 107
cudaReadModeNormalizedFloat
#line 108
}; 
#endif
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_types.h"
#if 0
#line 113
struct textureReference { 
#line 118
int normalized; 
#line 122
cudaTextureFilterMode filterMode; 
#line 126
cudaTextureAddressMode addressMode[3]; 
#line 130
cudaChannelFormatDesc channelDesc; 
#line 134
int sRGB; 
#line 138
unsigned maxAnisotropy; 
#line 142
cudaTextureFilterMode mipmapFilterMode; 
#line 146
float mipmapLevelBias; 
#line 150
float minMipmapLevelClamp; 
#line 154
float maxMipmapLevelClamp; 
#line 155
int __cudaReserved[15]; 
#line 156
}; 
#endif
#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_types.h"
#if 0
#line 161
struct cudaTextureDesc { 
#line 166
cudaTextureAddressMode addressMode[3]; 
#line 170
cudaTextureFilterMode filterMode; 
#line 174
cudaTextureReadMode readMode; 
#line 178
int sRGB; 
#line 182
int normalizedCoords; 
#line 186
unsigned maxAnisotropy; 
#line 190
cudaTextureFilterMode mipmapFilterMode; 
#line 194
float mipmapLevelBias; 
#line 198
float minMipmapLevelClamp; 
#line 202
float maxMipmapLevelClamp; 
#line 203
}; 
#endif
#line 208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_types.h"
#if 0
typedef unsigned __int64 
#line 208
cudaTextureObject_t; 
#endif
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 98
struct char1 { 
#line 100
signed char x; 
#line 101
}; 
#endif
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 103
struct uchar1 { 
#line 105
unsigned char x; 
#line 106
}; 
#endif
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 109
struct __declspec(align(2)) char2 { 
#line 111
signed char x, y; 
#line 112
}; 
#endif
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 114
struct __declspec(align(2)) uchar2 { 
#line 116
unsigned char x, y; 
#line 117
}; 
#endif
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 119
struct char3 { 
#line 121
signed char x, y, z; 
#line 122
}; 
#endif
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 124
struct uchar3 { 
#line 126
unsigned char x, y, z; 
#line 127
}; 
#endif
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 129
struct __declspec(align(4)) char4 { 
#line 131
signed char x, y, z, w; 
#line 132
}; 
#endif
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 134
struct __declspec(align(4)) uchar4 { 
#line 136
unsigned char x, y, z, w; 
#line 137
}; 
#endif
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 139
struct short1 { 
#line 141
short x; 
#line 142
}; 
#endif
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 144
struct ushort1 { 
#line 146
unsigned short x; 
#line 147
}; 
#endif
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 149
struct __declspec(align(4)) short2 { 
#line 151
short x, y; 
#line 152
}; 
#endif
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 154
struct __declspec(align(4)) ushort2 { 
#line 156
unsigned short x, y; 
#line 157
}; 
#endif
#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 159
struct short3 { 
#line 161
short x, y, z; 
#line 162
}; 
#endif
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 164
struct ushort3 { 
#line 166
unsigned short x, y, z; 
#line 167
}; 
#endif
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 169
struct __declspec(align(8)) short4 { short x; short y; short z; short w; }; 
#endif
#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 170
struct __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; }; 
#endif
#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 172
struct int1 { 
#line 174
int x; 
#line 175
}; 
#endif
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 177
struct uint1 { 
#line 179
unsigned x; 
#line 180
}; 
#endif
#line 182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 182
struct __declspec(align(8)) int2 { int x; int y; }; 
#endif
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 183
struct __declspec(align(8)) uint2 { unsigned x; unsigned y; }; 
#endif
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 185
struct int3 { 
#line 187
int x, y, z; 
#line 188
}; 
#endif
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 190
struct uint3 { 
#line 192
unsigned x, y, z; 
#line 193
}; 
#endif
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 195
struct __declspec(align(16)) int4 { 
#line 197
int x, y, z, w; 
#line 198
}; 
#endif
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 200
struct __declspec(align(16)) uint4 { 
#line 202
unsigned x, y, z, w; 
#line 203
}; 
#endif
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 205
struct long1 { 
#line 207
long x; 
#line 208
}; 
#endif
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 210
struct ulong1 { 
#line 212
unsigned long x; 
#line 213
}; 
#endif
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 216
struct __declspec(align(8)) long2 { long x; long y; }; 
#endif
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 217
struct __declspec(align(8)) ulong2 { unsigned long x; unsigned long y; }; 
#endif
#line 232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 232
struct long3 { 
#line 234
long x, y, z; 
#line 235
}; 
#endif
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 237
struct ulong3 { 
#line 239
unsigned long x, y, z; 
#line 240
}; 
#endif
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 242
struct __declspec(align(16)) long4 { 
#line 244
long x, y, z, w; 
#line 245
}; 
#endif
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 247
struct __declspec(align(16)) ulong4 { 
#line 249
unsigned long x, y, z, w; 
#line 250
}; 
#endif
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 252
struct float1 { 
#line 254
float x; 
#line 255
}; 
#endif
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 274
struct __declspec(align(8)) float2 { float x; float y; }; 
#endif
#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 279
struct float3 { 
#line 281
float x, y, z; 
#line 282
}; 
#endif
#line 284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 284
struct __declspec(align(16)) float4 { 
#line 286
float x, y, z, w; 
#line 287
}; 
#endif
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 289
struct longlong1 { 
#line 291
__int64 x; 
#line 292
}; 
#endif
#line 294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 294
struct ulonglong1 { 
#line 296
unsigned __int64 x; 
#line 297
}; 
#endif
#line 299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 299
struct __declspec(align(16)) longlong2 { 
#line 301
__int64 x, y; 
#line 302
}; 
#endif
#line 304 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 304
struct __declspec(align(16)) ulonglong2 { 
#line 306
unsigned __int64 x, y; 
#line 307
}; 
#endif
#line 309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 309
struct longlong3 { 
#line 311
__int64 x, y, z; 
#line 312
}; 
#endif
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 314
struct ulonglong3 { 
#line 316
unsigned __int64 x, y, z; 
#line 317
}; 
#endif
#line 319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 319
struct __declspec(align(16)) longlong4 { 
#line 321
__int64 x, y, z, w; 
#line 322
}; 
#endif
#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 324
struct __declspec(align(16)) ulonglong4 { 
#line 326
unsigned __int64 x, y, z, w; 
#line 327
}; 
#endif
#line 329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 329
struct double1 { 
#line 331
double x; 
#line 332
}; 
#endif
#line 334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 334
struct __declspec(align(16)) double2 { 
#line 336
double x, y; 
#line 337
}; 
#endif
#line 339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 339
struct double3 { 
#line 341
double x, y, z; 
#line 342
}; 
#endif
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 344
struct __declspec(align(16)) double4 { 
#line 346
double x, y, z, w; 
#line 347
}; 
#endif
#line 362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef char1 
#line 362
char1; 
#endif
#line 363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef uchar1 
#line 363
uchar1; 
#endif
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef char2 
#line 364
char2; 
#endif
#line 365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef uchar2 
#line 365
uchar2; 
#endif
#line 366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef char3 
#line 366
char3; 
#endif
#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef uchar3 
#line 367
uchar3; 
#endif
#line 368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef char4 
#line 368
char4; 
#endif
#line 369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef uchar4 
#line 369
uchar4; 
#endif
#line 370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef short1 
#line 370
short1; 
#endif
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef ushort1 
#line 371
ushort1; 
#endif
#line 372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef short2 
#line 372
short2; 
#endif
#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef ushort2 
#line 373
ushort2; 
#endif
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef short3 
#line 374
short3; 
#endif
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef ushort3 
#line 375
ushort3; 
#endif
#line 376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef short4 
#line 376
short4; 
#endif
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef ushort4 
#line 377
ushort4; 
#endif
#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef int1 
#line 378
int1; 
#endif
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef uint1 
#line 379
uint1; 
#endif
#line 380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef int2 
#line 380
int2; 
#endif
#line 381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef uint2 
#line 381
uint2; 
#endif
#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef int3 
#line 382
int3; 
#endif
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef uint3 
#line 383
uint3; 
#endif
#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef int4 
#line 384
int4; 
#endif
#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef uint4 
#line 385
uint4; 
#endif
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef long1 
#line 386
long1; 
#endif
#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef ulong1 
#line 387
ulong1; 
#endif
#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef long2 
#line 388
long2; 
#endif
#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef ulong2 
#line 389
ulong2; 
#endif
#line 390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef long3 
#line 390
long3; 
#endif
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef ulong3 
#line 391
ulong3; 
#endif
#line 392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef long4 
#line 392
long4; 
#endif
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef ulong4 
#line 393
ulong4; 
#endif
#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef float1 
#line 394
float1; 
#endif
#line 395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef float2 
#line 395
float2; 
#endif
#line 396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef float3 
#line 396
float3; 
#endif
#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef float4 
#line 397
float4; 
#endif
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef longlong1 
#line 398
longlong1; 
#endif
#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef ulonglong1 
#line 399
ulonglong1; 
#endif
#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef longlong2 
#line 400
longlong2; 
#endif
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef ulonglong2 
#line 401
ulonglong2; 
#endif
#line 402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef longlong3 
#line 402
longlong3; 
#endif
#line 403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef ulonglong3 
#line 403
ulonglong3; 
#endif
#line 404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef longlong4 
#line 404
longlong4; 
#endif
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef ulonglong4 
#line 405
ulonglong4; 
#endif
#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef double1 
#line 406
double1; 
#endif
#line 407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef double2 
#line 407
double2; 
#endif
#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef double3 
#line 408
double3; 
#endif
#line 409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef double4 
#line 409
double4; 
#endif
#line 417 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
#line 417
struct dim3 { 
#line 419
unsigned x, y, z; 
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
}; 
#endif
#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_types.h"
#if 0
typedef dim3 
#line 427
dim3; 
#endif
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\cuda_device_runtime_api.h"
extern "C" { extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); } 
#line 107
extern "C" { extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); } 
#line 108
extern "C" { extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); } 
#line 109
extern "C" { extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); } 
#line 110
extern "C" { extern cudaError_t __stdcall cudaDeviceSynchronize(); } 
#line 111
extern "C" { extern cudaError_t __stdcall cudaGetLastError(); } 
#line 112
extern "C" { extern cudaError_t __stdcall cudaPeekAtLastError(); } 
#line 113
extern "C" { extern const char *__stdcall cudaGetErrorString(cudaError_t error); } 
#line 114
extern "C" { extern const char *__stdcall cudaGetErrorName(cudaError_t error); } 
#line 115
extern "C" { extern cudaError_t __stdcall cudaGetDeviceCount(int * count); } 
#line 116
extern "C" { extern cudaError_t __stdcall cudaGetDevice(int * device); } 
#line 117
extern "C" { extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); } 
#line 118
extern "C" { extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); } 
#line 119
extern "C" { extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); } 
#line 120
extern "C" { extern cudaError_t __stdcall cudaStreamWaitEvent_ptsz(cudaStream_t stream, cudaEvent_t event, unsigned flags); } 
#line 121
extern "C" { extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); } 
#line 122
extern "C" { extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream); } 
#line 123
extern "C" { extern cudaError_t __stdcall cudaEventRecord_ptsz(cudaEvent_t event, cudaStream_t stream); } 
#line 124
extern "C" { extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); } 
#line 125
extern "C" { extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); } 
#line 126
extern "C" { extern cudaError_t __stdcall cudaFree(void * devPtr); } 
#line 127
extern "C" { extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); } 
#line 128
extern "C" { extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); } 
#line 129
extern "C" { extern cudaError_t __stdcall cudaMemcpyAsync_ptsz(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream); } 
#line 130
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); } 
#line 131
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DAsync_ptsz(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream); } 
#line 132
extern "C" { extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream); } 
#line 133
extern "C" { extern cudaError_t __stdcall cudaMemcpy3DAsync_ptsz(const cudaMemcpy3DParms * p, cudaStream_t stream); } 
#line 134
extern "C" { extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream); } 
#line 135
extern "C" { extern cudaError_t __stdcall cudaMemsetAsync_ptsz(void * devPtr, int value, size_t count, cudaStream_t stream); } 
#line 136
extern "C" { extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); } 
#line 137
extern "C" { extern cudaError_t __stdcall cudaMemset2DAsync_ptsz(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream); } 
#line 138
extern "C" { extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); } 
#line 139
extern "C" { extern cudaError_t __stdcall cudaMemset3DAsync_ptsz(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream); } 
#line 140
extern "C" { extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); } 
#line 161
extern "C" { extern void *__stdcall cudaGetParameterBuffer(size_t alignment, size_t size); } 
#line 189
extern "C" { extern void *__stdcall cudaGetParameterBufferV2(void * func, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize); } 
#line 190
extern "C" { extern cudaError_t __stdcall cudaLaunchDevice_ptsz(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); } 
#line 191
extern "C" { extern cudaError_t __stdcall cudaLaunchDeviceV2_ptsz(void * parameterBuffer, cudaStream_t stream); } 
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\cuda_device_runtime_api.h"
extern "C" { extern cudaError_t __stdcall cudaLaunchDevice(void * func, void * parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned sharedMemSize, cudaStream_t stream); } 
#line 210
extern "C" { extern cudaError_t __stdcall cudaLaunchDeviceV2(void * parameterBuffer, cudaStream_t stream); } 
#line 213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\cuda_device_runtime_api.h"
extern "C" { extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize); } 
#line 214
extern "C" { extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSmemSize, unsigned flags); } 
#line 218
template< class T> static __inline cudaError_t cudaMalloc(T ** devPtr, size_t size); 
#line 219
template< class T> static __inline cudaError_t cudaFuncGetAttributes(cudaFuncAttributes * attr, T * entry); 
#line 220
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize); 
#line 221
template< class T> static __inline cudaError_t cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, T func, int blockSize, size_t dynamicSmemSize, unsigned flags); 
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\cuda_runtime_api.h"
extern "C" { extern cudaError_t __stdcall cudaDeviceReset(); } 
#line 274
extern "C" { extern cudaError_t __stdcall cudaDeviceSynchronize(); } 
#line 349
extern "C" { extern cudaError_t __stdcall cudaDeviceSetLimit(cudaLimit limit, size_t value); } 
#line 378
extern "C" { extern cudaError_t __stdcall cudaDeviceGetLimit(size_t * pValue, cudaLimit limit); } 
#line 409
extern "C" { extern cudaError_t __stdcall cudaDeviceGetCacheConfig(cudaFuncCache * pCacheConfig); } 
#line 444
extern "C" { extern cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int * leastPriority, int * greatestPriority); } 
#line 486
extern "C" { extern cudaError_t __stdcall cudaDeviceSetCacheConfig(cudaFuncCache cacheConfig); } 
#line 515
extern "C" { extern cudaError_t __stdcall cudaDeviceGetSharedMemConfig(cudaSharedMemConfig * pConfig); } 
#line 557
extern "C" { extern cudaError_t __stdcall cudaDeviceSetSharedMemConfig(cudaSharedMemConfig config); } 
#line 580
extern "C" { extern cudaError_t __stdcall cudaDeviceGetByPCIBusId(int * device, const char * pciBusId); } 
#line 607
extern "C" { extern cudaError_t __stdcall cudaDeviceGetPCIBusId(char * pciBusId, int len, int device); } 
#line 649
extern "C" { extern cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t * handle, cudaEvent_t event); } 
#line 684
extern "C" { extern cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t * event, cudaIpcEventHandle_t handle); } 
#line 722
extern "C" { extern cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t * handle, void * devPtr); } 
#line 772
extern "C" { extern cudaError_t __stdcall cudaIpcOpenMemHandle(void ** devPtr, cudaIpcMemHandle_t handle, unsigned flags); } 
#line 802
extern "C" { extern cudaError_t __stdcall cudaIpcCloseMemHandle(void * devPtr); } 
#line 842
extern "C" { extern cudaError_t __stdcall cudaThreadExit(); } 
#line 866
extern "C" { extern cudaError_t __stdcall cudaThreadSynchronize(); } 
#line 913
extern "C" { extern cudaError_t __stdcall cudaThreadSetLimit(cudaLimit limit, size_t value); } 
#line 944
extern "C" { extern cudaError_t __stdcall cudaThreadGetLimit(size_t * pValue, cudaLimit limit); } 
#line 979
extern "C" { extern cudaError_t __stdcall cudaThreadGetCacheConfig(cudaFuncCache * pCacheConfig); } 
#line 1025
extern "C" { extern cudaError_t __stdcall cudaThreadSetCacheConfig(cudaFuncCache cacheConfig); } 
#line 1079
extern "C" { extern cudaError_t __stdcall cudaGetLastError(); } 
#line 1120
extern "C" { extern cudaError_t __stdcall cudaPeekAtLastError(); } 
#line 1135
extern "C" { extern const char *__stdcall cudaGetErrorName(cudaError_t error); } 
#line 1150
extern "C" { extern const char *__stdcall cudaGetErrorString(cudaError_t error); } 
#line 1180
extern "C" { extern cudaError_t __stdcall cudaGetDeviceCount(int * count); } 
#line 1416
extern "C" { extern cudaError_t __stdcall cudaGetDeviceProperties(cudaDeviceProp * prop, int device); } 
#line 1576
extern "C" { extern cudaError_t __stdcall cudaDeviceGetAttribute(int * value, cudaDeviceAttr attr, int device); } 
#line 1595
extern "C" { extern cudaError_t __stdcall cudaChooseDevice(int * device, const cudaDeviceProp * prop); } 
#line 1629
extern "C" { extern cudaError_t __stdcall cudaSetDevice(int device); } 
#line 1646
extern "C" { extern cudaError_t __stdcall cudaGetDevice(int * device); } 
#line 1675
extern "C" { extern cudaError_t __stdcall cudaSetValidDevices(int * device_arr, int len); } 
#line 1737
extern "C" { extern cudaError_t __stdcall cudaSetDeviceFlags(unsigned flags); } 
#line 1778
extern "C" { extern cudaError_t __stdcall cudaGetDeviceFlags(unsigned * flags); } 
#line 1815
extern "C" { extern cudaError_t __stdcall cudaStreamCreate(cudaStream_t * pStream); } 
#line 1844
extern "C" { extern cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t * pStream, unsigned flags); } 
#line 1887
extern "C" { extern cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t * pStream, unsigned flags, int priority); } 
#line 1911
extern "C" { extern cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int * priority); } 
#line 1932
extern "C" { extern cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned * flags); } 
#line 1953
extern "C" { extern cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream); } 
#line 1985
extern "C" { extern cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned flags); } 
#line 1999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\cuda_runtime_api.h"
extern "C" { typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void * userData); }
#line 2056
extern "C" { extern cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream, cudaStreamCallback_t callback, void * userData, unsigned flags); } 
#line 2076
extern "C" { extern cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream); } 
#line 2097
extern "C" { extern cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream); } 
#line 2163
extern "C" { extern cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void * devPtr, size_t length, unsigned flags); } 
#line 2199
extern "C" { extern cudaError_t __stdcall cudaEventCreate(cudaEvent_t * event); } 
#line 2233
extern "C" { extern cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t * event, unsigned flags); } 
#line 2264
extern "C" { extern cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0); } 
#line 2296
extern "C" { extern cudaError_t __stdcall cudaEventQuery(cudaEvent_t event); } 
#line 2328
extern "C" { extern cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event); } 
#line 2353
extern "C" { extern cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event); } 
#line 2394
extern "C" { extern cudaError_t __stdcall cudaEventElapsedTime(float * ms, cudaEvent_t start, cudaEvent_t end); } 
#line 2450
extern "C" { extern cudaError_t __stdcall cudaLaunchKernel(const void * func, dim3 gridDim, dim3 blockDim, void ** args, size_t sharedMem, cudaStream_t stream); } 
#line 2499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\cuda_runtime_api.h"
extern "C" { extern cudaError_t __stdcall cudaFuncSetCacheConfig(const void * func, cudaFuncCache cacheConfig); } 
#line 2550
extern "C" { extern cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void * func, cudaSharedMemConfig config); } 
#line 2583
extern "C" { extern cudaError_t __stdcall cudaFuncGetAttributes(cudaFuncAttributes * attr, const void * func); } 
#line 2604
extern "C" { extern cudaError_t __stdcall cudaSetDoubleForDevice(double * d); } 
#line 2625
extern "C" { extern cudaError_t __stdcall cudaSetDoubleForHost(double * d); } 
#line 2681
extern "C" { extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize); } 
#line 2725
extern "C" { extern cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int * numBlocks, const void * func, int blockSize, size_t dynamicSMemSize, unsigned flags); } 
#line 2776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\cuda_runtime_api.h"
extern "C" { extern cudaError_t __stdcall cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0); } 
#line 2805
extern "C" { extern cudaError_t __stdcall cudaSetupArgument(const void * arg, size_t size, size_t offset); } 
#line 2842
extern "C" { extern cudaError_t __stdcall cudaLaunch(const void * func); } 
#line 2931
extern "C" { extern cudaError_t __stdcall cudaMallocManaged(void ** devPtr, size_t size, unsigned flags); } 
#line 2957
extern "C" { extern cudaError_t __stdcall cudaMalloc(void ** devPtr, size_t size); } 
#line 2986
extern "C" { extern cudaError_t __stdcall cudaMallocHost(void ** ptr, size_t size); } 
#line 3025
extern "C" { extern cudaError_t __stdcall cudaMallocPitch(void ** devPtr, size_t * pitch, size_t width, size_t height); } 
#line 3067
extern "C" { extern cudaError_t __stdcall cudaMallocArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, size_t width, size_t height = 0, unsigned flags = 0); } 
#line 3094
extern "C" { extern cudaError_t __stdcall cudaFree(void * devPtr); } 
#line 3114
extern "C" { extern cudaError_t __stdcall cudaFreeHost(void * ptr); } 
#line 3136
extern "C" { extern cudaError_t __stdcall cudaFreeArray(cudaArray_t array); } 
#line 3158
extern "C" { extern cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray); } 
#line 3217
extern "C" { extern cudaError_t __stdcall cudaHostAlloc(void ** pHost, size_t size, unsigned flags); } 
#line 3274
extern "C" { extern cudaError_t __stdcall cudaHostRegister(void * ptr, size_t size, unsigned flags); } 
#line 3293
extern "C" { extern cudaError_t __stdcall cudaHostUnregister(void * ptr); } 
#line 3320
extern "C" { extern cudaError_t __stdcall cudaHostGetDevicePointer(void ** pDevice, void * pHost, unsigned flags); } 
#line 3339
extern "C" { extern cudaError_t __stdcall cudaHostGetFlags(unsigned * pFlags, void * pHost); } 
#line 3374
extern "C" { extern cudaError_t __stdcall cudaMalloc3D(cudaPitchedPtr * pitchedDevPtr, cudaExtent extent); } 
#line 3509
extern "C" { extern cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t * array, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned flags = 0); } 
#line 3630
extern "C" { extern cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t * mipmappedArray, const cudaChannelFormatDesc * desc, cudaExtent extent, unsigned numLevels, unsigned flags = 0); } 
#line 3656
extern "C" { extern cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t * levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned level); } 
#line 3753
extern "C" { extern cudaError_t __stdcall cudaMemcpy3D(const cudaMemcpy3DParms * p); } 
#line 3781
extern "C" { extern cudaError_t __stdcall cudaMemcpy3DPeer(const cudaMemcpy3DPeerParms * p); } 
#line 3889
extern "C" { extern cudaError_t __stdcall cudaMemcpy3DAsync(const cudaMemcpy3DParms * p, cudaStream_t stream = 0); } 
#line 3912
extern "C" { extern cudaError_t __stdcall cudaMemcpy3DPeerAsync(const cudaMemcpy3DPeerParms * p, cudaStream_t stream = 0); } 
#line 3931
extern "C" { extern cudaError_t __stdcall cudaMemGetInfo(size_t * free, size_t * total); } 
#line 3952
extern "C" { extern cudaError_t __stdcall cudaArrayGetInfo(cudaChannelFormatDesc * desc, cudaExtent * extent, unsigned * flags, cudaArray_t array); } 
#line 3987
extern "C" { extern cudaError_t __stdcall cudaMemcpy(void * dst, const void * src, size_t count, cudaMemcpyKind kind); } 
#line 4019
extern "C" { extern cudaError_t __stdcall cudaMemcpyPeer(void * dst, int dstDevice, const void * src, int srcDevice, size_t count); } 
#line 4053
extern "C" { extern cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind); } 
#line 4087
extern "C" { extern cudaError_t __stdcall cudaMemcpyFromArray(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind); } 
#line 4122
extern "C" { extern cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); } 
#line 4164
extern "C" { extern cudaError_t __stdcall cudaMemcpy2D(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); } 
#line 4206
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind); } 
#line 4248
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DFromArray(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind); } 
#line 4288
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, cudaMemcpyKind kind = cudaMemcpyDeviceToDevice); } 
#line 4323
extern "C" { extern cudaError_t __stdcall cudaMemcpyToSymbol(const void * symbol, const void * src, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyHostToDevice); } 
#line 4358
extern "C" { extern cudaError_t __stdcall cudaMemcpyFromSymbol(void * dst, const void * symbol, size_t count, size_t offset = 0, cudaMemcpyKind kind = cudaMemcpyDeviceToHost); } 
#line 4404
extern "C" { extern cudaError_t __stdcall cudaMemcpyAsync(void * dst, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); } 
#line 4436
extern "C" { extern cudaError_t __stdcall cudaMemcpyPeerAsync(void * dst, int dstDevice, const void * src, int srcDevice, size_t count, cudaStream_t stream = 0); } 
#line 4478
extern "C" { extern cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); } 
#line 4520
extern "C" { extern cudaError_t __stdcall cudaMemcpyFromArrayAsync(void * dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, cudaMemcpyKind kind, cudaStream_t stream = 0); } 
#line 4575
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DAsync(void * dst, size_t dpitch, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); } 
#line 4626
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void * src, size_t spitch, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); } 
#line 4676
extern "C" { extern cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void * dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, cudaMemcpyKind kind, cudaStream_t stream = 0); } 
#line 4719
extern "C" { extern cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void * symbol, const void * src, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); } 
#line 4762
extern "C" { extern cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void * dst, const void * symbol, size_t count, size_t offset, cudaMemcpyKind kind, cudaStream_t stream = 0); } 
#line 4788
extern "C" { extern cudaError_t __stdcall cudaMemset(void * devPtr, int value, size_t count); } 
#line 4818
extern "C" { extern cudaError_t __stdcall cudaMemset2D(void * devPtr, size_t pitch, int value, size_t width, size_t height); } 
#line 4861
extern "C" { extern cudaError_t __stdcall cudaMemset3D(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent); } 
#line 4893
extern "C" { extern cudaError_t __stdcall cudaMemsetAsync(void * devPtr, int value, size_t count, cudaStream_t stream = 0); } 
#line 4930
extern "C" { extern cudaError_t __stdcall cudaMemset2DAsync(void * devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0); } 
#line 4980
extern "C" { extern cudaError_t __stdcall cudaMemset3DAsync(cudaPitchedPtr pitchedDevPtr, int value, cudaExtent extent, cudaStream_t stream = 0); } 
#line 5003
extern "C" { extern cudaError_t __stdcall cudaGetSymbolAddress(void ** devPtr, const void * symbol); } 
#line 5025
extern "C" { extern cudaError_t __stdcall cudaGetSymbolSize(size_t * size, const void * symbol); } 
#line 5178
extern "C" { extern cudaError_t __stdcall cudaPointerGetAttributes(cudaPointerAttributes * attributes, const void * ptr); } 
#line 5216
extern "C" { extern cudaError_t __stdcall cudaDeviceCanAccessPeer(int * canAccessPeer, int device, int peerDevice); } 
#line 5253
extern "C" { extern cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned flags); } 
#line 5272
extern "C" { extern cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice); } 
#line 5330
extern "C" { extern cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource); } 
#line 5362
extern "C" { extern cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned flags); } 
#line 5398
extern "C" { extern cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); } 
#line 5430
extern "C" { extern cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t * resources, cudaStream_t stream = 0); } 
#line 5459
extern "C" { extern cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void ** devPtr, size_t * size, cudaGraphicsResource_t resource); } 
#line 5493
extern "C" { extern cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t * array, cudaGraphicsResource_t resource, unsigned arrayIndex, unsigned mipLevel); } 
#line 5518
extern "C" { extern cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t * mipmappedArray, cudaGraphicsResource_t resource); } 
#line 5558
extern "C" { extern cudaError_t __stdcall cudaGetChannelDesc(cudaChannelFormatDesc * desc, cudaArray_const_t array); } 
#line 5593
extern "C" { extern cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, cudaChannelFormatKind f); } 
#line 5640
extern "C" { extern cudaError_t __stdcall cudaBindTexture(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t size = 4294967295U); } 
#line 5691
extern "C" { extern cudaError_t __stdcall cudaBindTexture2D(size_t * offset, const textureReference * texref, const void * devPtr, const cudaChannelFormatDesc * desc, size_t width, size_t height, size_t pitch); } 
#line 5719
extern "C" { extern cudaError_t __stdcall cudaBindTextureToArray(const textureReference * texref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); } 
#line 5747
extern "C" { extern cudaError_t __stdcall cudaBindTextureToMipmappedArray(const textureReference * texref, cudaMipmappedArray_const_t mipmappedArray, const cudaChannelFormatDesc * desc); } 
#line 5768
extern "C" { extern cudaError_t __stdcall cudaUnbindTexture(const textureReference * texref); } 
#line 5793
extern "C" { extern cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t * offset, const textureReference * texref); } 
#line 5818
extern "C" { extern cudaError_t __stdcall cudaGetTextureReference(const textureReference ** texref, const void * symbol); } 
#line 5858
extern "C" { extern cudaError_t __stdcall cudaBindSurfaceToArray(const surfaceReference * surfref, cudaArray_const_t array, const cudaChannelFormatDesc * desc); } 
#line 5877
extern "C" { extern cudaError_t __stdcall cudaGetSurfaceReference(const surfaceReference ** surfref, const void * symbol); } 
#line 6094
extern "C" { extern cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t * pTexObject, const cudaResourceDesc * pResDesc, const cudaTextureDesc * pTexDesc, const cudaResourceViewDesc * pResViewDesc); } 
#line 6109
extern "C" { extern cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject); } 
#line 6125
extern "C" { extern cudaError_t __stdcall cudaGetTextureObjectResourceDesc(cudaResourceDesc * pResDesc, cudaTextureObject_t texObject); } 
#line 6141
extern "C" { extern cudaError_t __stdcall cudaGetTextureObjectTextureDesc(cudaTextureDesc * pTexDesc, cudaTextureObject_t texObject); } 
#line 6158
extern "C" { extern cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(cudaResourceViewDesc * pResViewDesc, cudaTextureObject_t texObject); } 
#line 6197
extern "C" { extern cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t * pSurfObject, const cudaResourceDesc * pResDesc); } 
#line 6212
extern "C" { extern cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject); } 
#line 6227
extern "C" { extern cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(cudaResourceDesc * pResDesc, cudaSurfaceObject_t surfObject); } 
#line 6254
extern "C" { extern cudaError_t __stdcall cudaDriverGetVersion(int * driverVersion); } 
#line 6271
extern "C" { extern cudaError_t __stdcall cudaRuntimeGetVersion(int * runtimeVersion); } 
#line 6276
extern "C" { extern cudaError_t __stdcall cudaGetExportTable(const void ** ppExportTable, const cudaUUID_t * pExportTableId); } 
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\channel_descriptor.h"
template< class T> __inline ::cudaChannelFormatDesc cudaCreateChannelDesc() 
#line 108
{ 
#line 109
return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone); 
#line 110
} 
#line 112
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf() 
#line 113
{ 
#line 114
int e = (((int)sizeof(unsigned short)) * 8); 
#line 116
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 117
} 
#line 119
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf1() 
#line 120
{ 
#line 121
int e = (((int)sizeof(unsigned short)) * 8); 
#line 123
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 124
} 
#line 126
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf2() 
#line 127
{ 
#line 128
int e = (((int)sizeof(unsigned short)) * 8); 
#line 130
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 131
} 
#line 133
static __inline cudaChannelFormatDesc cudaCreateChannelDescHalf4() 
#line 134
{ 
#line 135
int e = (((int)sizeof(unsigned short)) * 8); 
#line 137
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 138
} 
#line 140
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char> () 
#line 141
{ 
#line 142
int e = (((int)sizeof(char)) * 8); 
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\channel_descriptor.h"
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\channel_descriptor.h"
} 
#line 151
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< signed char> () 
#line 152
{ 
#line 153
int e = (((int)sizeof(signed char)) * 8); 
#line 155
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 156
} 
#line 158
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned char> () 
#line 159
{ 
#line 160
int e = (((int)sizeof(unsigned char)) * 8); 
#line 162
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 163
} 
#line 165
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char1> () 
#line 166
{ 
#line 167
int e = (((int)sizeof(signed char)) * 8); 
#line 169
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 170
} 
#line 172
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar1> () 
#line 173
{ 
#line 174
int e = (((int)sizeof(unsigned char)) * 8); 
#line 176
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 177
} 
#line 179
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char2> () 
#line 180
{ 
#line 181
int e = (((int)sizeof(signed char)) * 8); 
#line 183
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 184
} 
#line 186
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar2> () 
#line 187
{ 
#line 188
int e = (((int)sizeof(unsigned char)) * 8); 
#line 190
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 191
} 
#line 193
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< char4> () 
#line 194
{ 
#line 195
int e = (((int)sizeof(signed char)) * 8); 
#line 197
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 198
} 
#line 200
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uchar4> () 
#line 201
{ 
#line 202
int e = (((int)sizeof(unsigned char)) * 8); 
#line 204
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 205
} 
#line 207
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short> () 
#line 208
{ 
#line 209
int e = (((int)sizeof(short)) * 8); 
#line 211
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 212
} 
#line 214
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned short> () 
#line 215
{ 
#line 216
int e = (((int)sizeof(unsigned short)) * 8); 
#line 218
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 219
} 
#line 221
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short1> () 
#line 222
{ 
#line 223
int e = (((int)sizeof(short)) * 8); 
#line 225
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 226
} 
#line 228
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort1> () 
#line 229
{ 
#line 230
int e = (((int)sizeof(unsigned short)) * 8); 
#line 232
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 233
} 
#line 235
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short2> () 
#line 236
{ 
#line 237
int e = (((int)sizeof(short)) * 8); 
#line 239
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 240
} 
#line 242
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort2> () 
#line 243
{ 
#line 244
int e = (((int)sizeof(unsigned short)) * 8); 
#line 246
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 247
} 
#line 249
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< short4> () 
#line 250
{ 
#line 251
int e = (((int)sizeof(short)) * 8); 
#line 253
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 254
} 
#line 256
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ushort4> () 
#line 257
{ 
#line 258
int e = (((int)sizeof(unsigned short)) * 8); 
#line 260
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 261
} 
#line 263
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int> () 
#line 264
{ 
#line 265
int e = (((int)sizeof(int)) * 8); 
#line 267
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 268
} 
#line 270
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned> () 
#line 271
{ 
#line 272
int e = (((int)sizeof(unsigned)) * 8); 
#line 274
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 275
} 
#line 277
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int1> () 
#line 278
{ 
#line 279
int e = (((int)sizeof(int)) * 8); 
#line 281
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 282
} 
#line 284
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint1> () 
#line 285
{ 
#line 286
int e = (((int)sizeof(unsigned)) * 8); 
#line 288
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 289
} 
#line 291
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int2> () 
#line 292
{ 
#line 293
int e = (((int)sizeof(int)) * 8); 
#line 295
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 296
} 
#line 298
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint2> () 
#line 299
{ 
#line 300
int e = (((int)sizeof(unsigned)) * 8); 
#line 302
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 303
} 
#line 305
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< int4> () 
#line 306
{ 
#line 307
int e = (((int)sizeof(int)) * 8); 
#line 309
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 310
} 
#line 312
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< uint4> () 
#line 313
{ 
#line 314
int e = (((int)sizeof(unsigned)) * 8); 
#line 316
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 317
} 
#line 321
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long> () 
#line 322
{ 
#line 323
int e = (((int)sizeof(long)) * 8); 
#line 325
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 326
} 
#line 328
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< unsigned long> () 
#line 329
{ 
#line 330
int e = (((int)sizeof(unsigned long)) * 8); 
#line 332
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 333
} 
#line 335
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long1> () 
#line 336
{ 
#line 337
int e = (((int)sizeof(long)) * 8); 
#line 339
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned); 
#line 340
} 
#line 342
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong1> () 
#line 343
{ 
#line 344
int e = (((int)sizeof(unsigned long)) * 8); 
#line 346
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned); 
#line 347
} 
#line 349
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long2> () 
#line 350
{ 
#line 351
int e = (((int)sizeof(long)) * 8); 
#line 353
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned); 
#line 354
} 
#line 356
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong2> () 
#line 357
{ 
#line 358
int e = (((int)sizeof(unsigned long)) * 8); 
#line 360
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned); 
#line 361
} 
#line 363
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< long4> () 
#line 364
{ 
#line 365
int e = (((int)sizeof(long)) * 8); 
#line 367
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned); 
#line 368
} 
#line 370
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< ulong4> () 
#line 371
{ 
#line 372
int e = (((int)sizeof(unsigned long)) * 8); 
#line 374
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned); 
#line 375
} 
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\channel_descriptor.h"
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float> () 
#line 380
{ 
#line 381
int e = (((int)sizeof(float)) * 8); 
#line 383
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 384
} 
#line 386
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float1> () 
#line 387
{ 
#line 388
int e = (((int)sizeof(float)) * 8); 
#line 390
return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat); 
#line 391
} 
#line 393
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float2> () 
#line 394
{ 
#line 395
int e = (((int)sizeof(float)) * 8); 
#line 397
return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat); 
#line 398
} 
#line 400
template<> __inline cudaChannelFormatDesc cudaCreateChannelDesc< float4> () 
#line 401
{ 
#line 402
int e = (((int)sizeof(float)) * 8); 
#line 404
return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat); 
#line 405
} 
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\driver_functions.h"
static __inline cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
#line 80
{ 
#line 81
cudaPitchedPtr s; 
#line 83
(s.ptr) = d; 
#line 84
(s.pitch) = p; 
#line 85
(s.xsize) = xsz; 
#line 86
(s.ysize) = ysz; 
#line 88
return s; 
#line 89
} 
#line 106
static __inline cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
#line 107
{ 
#line 108
cudaPos p; 
#line 110
(p.x) = x; 
#line 111
(p.y) = y; 
#line 112
(p.z) = z; 
#line 114
return p; 
#line 115
} 
#line 132
static __inline cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
#line 133
{ 
#line 134
cudaExtent e; 
#line 136
(e.width) = w; 
#line 137
(e.height) = h; 
#line 138
(e.depth) = d; 
#line 140
return e; 
#line 141
} 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_functions.h"
static __inline char1 make_char1(signed char x); 
#line 77
static __inline uchar1 make_uchar1(unsigned char x); 
#line 79
static __inline char2 make_char2(signed char x, signed char y); 
#line 81
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y); 
#line 83
static __inline char3 make_char3(signed char x, signed char y, signed char z); 
#line 85
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z); 
#line 87
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w); 
#line 89
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w); 
#line 91
static __inline short1 make_short1(short x); 
#line 93
static __inline ushort1 make_ushort1(unsigned short x); 
#line 95
static __inline short2 make_short2(short x, short y); 
#line 97
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y); 
#line 99
static __inline short3 make_short3(short x, short y, short z); 
#line 101
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z); 
#line 103
static __inline short4 make_short4(short x, short y, short z, short w); 
#line 105
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w); 
#line 107
static __inline int1 make_int1(int x); 
#line 109
static __inline uint1 make_uint1(unsigned x); 
#line 111
static __inline int2 make_int2(int x, int y); 
#line 113
static __inline uint2 make_uint2(unsigned x, unsigned y); 
#line 115
static __inline int3 make_int3(int x, int y, int z); 
#line 117
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z); 
#line 119
static __inline int4 make_int4(int x, int y, int z, int w); 
#line 121
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w); 
#line 123
static __inline long1 make_long1(long x); 
#line 125
static __inline ulong1 make_ulong1(unsigned long x); 
#line 127
static __inline long2 make_long2(long x, long y); 
#line 129
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y); 
#line 131
static __inline long3 make_long3(long x, long y, long z); 
#line 133
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z); 
#line 135
static __inline long4 make_long4(long x, long y, long z, long w); 
#line 137
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w); 
#line 139
static __inline float1 make_float1(float x); 
#line 141
static __inline float2 make_float2(float x, float y); 
#line 143
static __inline float3 make_float3(float x, float y, float z); 
#line 145
static __inline float4 make_float4(float x, float y, float z, float w); 
#line 147
static __inline longlong1 make_longlong1(__int64 x); 
#line 149
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x); 
#line 151
static __inline longlong2 make_longlong2(__int64 x, __int64 y); 
#line 153
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y); 
#line 155
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z); 
#line 157
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z); 
#line 159
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w); 
#line 161
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w); 
#line 163
static __inline double1 make_double1(double x); 
#line 165
static __inline double2 make_double2(double x, double y); 
#line 167
static __inline double3 make_double3(double x, double y, double z); 
#line 169
static __inline double4 make_double4(double x, double y, double z, double w); 
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\vector_functions.hpp"
static __inline char1 make_char1(signed char x) 
#line 76
{ 
#line 77
char1 t; (t.x) = x; return t; 
#line 78
} 
#line 80
static __inline uchar1 make_uchar1(unsigned char x) 
#line 81
{ 
#line 82
uchar1 t; (t.x) = x; return t; 
#line 83
} 
#line 85
static __inline char2 make_char2(signed char x, signed char y) 
#line 86
{ 
#line 87
char2 t; (t.x) = x; (t.y) = y; return t; 
#line 88
} 
#line 90
static __inline uchar2 make_uchar2(unsigned char x, unsigned char y) 
#line 91
{ 
#line 92
uchar2 t; (t.x) = x; (t.y) = y; return t; 
#line 93
} 
#line 95
static __inline char3 make_char3(signed char x, signed char y, signed char z) 
#line 96
{ 
#line 97
char3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 98
} 
#line 100
static __inline uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z) 
#line 101
{ 
#line 102
uchar3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 103
} 
#line 105
static __inline char4 make_char4(signed char x, signed char y, signed char z, signed char w) 
#line 106
{ 
#line 107
char4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 108
} 
#line 110
static __inline uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w) 
#line 111
{ 
#line 112
uchar4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 113
} 
#line 115
static __inline short1 make_short1(short x) 
#line 116
{ 
#line 117
short1 t; (t.x) = x; return t; 
#line 118
} 
#line 120
static __inline ushort1 make_ushort1(unsigned short x) 
#line 121
{ 
#line 122
ushort1 t; (t.x) = x; return t; 
#line 123
} 
#line 125
static __inline short2 make_short2(short x, short y) 
#line 126
{ 
#line 127
short2 t; (t.x) = x; (t.y) = y; return t; 
#line 128
} 
#line 130
static __inline ushort2 make_ushort2(unsigned short x, unsigned short y) 
#line 131
{ 
#line 132
ushort2 t; (t.x) = x; (t.y) = y; return t; 
#line 133
} 
#line 135
static __inline short3 make_short3(short x, short y, short z) 
#line 136
{ 
#line 137
short3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 138
} 
#line 140
static __inline ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z) 
#line 141
{ 
#line 142
ushort3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 143
} 
#line 145
static __inline short4 make_short4(short x, short y, short z, short w) 
#line 146
{ 
#line 147
short4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 148
} 
#line 150
static __inline ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w) 
#line 151
{ 
#line 152
ushort4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 153
} 
#line 155
static __inline int1 make_int1(int x) 
#line 156
{ 
#line 157
int1 t; (t.x) = x; return t; 
#line 158
} 
#line 160
static __inline uint1 make_uint1(unsigned x) 
#line 161
{ 
#line 162
uint1 t; (t.x) = x; return t; 
#line 163
} 
#line 165
static __inline int2 make_int2(int x, int y) 
#line 166
{ 
#line 167
int2 t; (t.x) = x; (t.y) = y; return t; 
#line 168
} 
#line 170
static __inline uint2 make_uint2(unsigned x, unsigned y) 
#line 171
{ 
#line 172
uint2 t; (t.x) = x; (t.y) = y; return t; 
#line 173
} 
#line 175
static __inline int3 make_int3(int x, int y, int z) 
#line 176
{ 
#line 177
int3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 178
} 
#line 180
static __inline uint3 make_uint3(unsigned x, unsigned y, unsigned z) 
#line 181
{ 
#line 182
uint3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 183
} 
#line 185
static __inline int4 make_int4(int x, int y, int z, int w) 
#line 186
{ 
#line 187
int4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 188
} 
#line 190
static __inline uint4 make_uint4(unsigned x, unsigned y, unsigned z, unsigned w) 
#line 191
{ 
#line 192
uint4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 193
} 
#line 195
static __inline long1 make_long1(long x) 
#line 196
{ 
#line 197
long1 t; (t.x) = x; return t; 
#line 198
} 
#line 200
static __inline ulong1 make_ulong1(unsigned long x) 
#line 201
{ 
#line 202
ulong1 t; (t.x) = x; return t; 
#line 203
} 
#line 205
static __inline long2 make_long2(long x, long y) 
#line 206
{ 
#line 207
long2 t; (t.x) = x; (t.y) = y; return t; 
#line 208
} 
#line 210
static __inline ulong2 make_ulong2(unsigned long x, unsigned long y) 
#line 211
{ 
#line 212
ulong2 t; (t.x) = x; (t.y) = y; return t; 
#line 213
} 
#line 215
static __inline long3 make_long3(long x, long y, long z) 
#line 216
{ 
#line 217
long3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 218
} 
#line 220
static __inline ulong3 make_ulong3(unsigned long x, unsigned long y, unsigned long z) 
#line 221
{ 
#line 222
ulong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 223
} 
#line 225
static __inline long4 make_long4(long x, long y, long z, long w) 
#line 226
{ 
#line 227
long4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 228
} 
#line 230
static __inline ulong4 make_ulong4(unsigned long x, unsigned long y, unsigned long z, unsigned long w) 
#line 231
{ 
#line 232
ulong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 233
} 
#line 235
static __inline float1 make_float1(float x) 
#line 236
{ 
#line 237
float1 t; (t.x) = x; return t; 
#line 238
} 
#line 240
static __inline float2 make_float2(float x, float y) 
#line 241
{ 
#line 242
float2 t; (t.x) = x; (t.y) = y; return t; 
#line 243
} 
#line 245
static __inline float3 make_float3(float x, float y, float z) 
#line 246
{ 
#line 247
float3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 248
} 
#line 250
static __inline float4 make_float4(float x, float y, float z, float w) 
#line 251
{ 
#line 252
float4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 253
} 
#line 255
static __inline longlong1 make_longlong1(__int64 x) 
#line 256
{ 
#line 257
longlong1 t; (t.x) = x; return t; 
#line 258
} 
#line 260
static __inline ulonglong1 make_ulonglong1(unsigned __int64 x) 
#line 261
{ 
#line 262
ulonglong1 t; (t.x) = x; return t; 
#line 263
} 
#line 265
static __inline longlong2 make_longlong2(__int64 x, __int64 y) 
#line 266
{ 
#line 267
longlong2 t; (t.x) = x; (t.y) = y; return t; 
#line 268
} 
#line 270
static __inline ulonglong2 make_ulonglong2(unsigned __int64 x, unsigned __int64 y) 
#line 271
{ 
#line 272
ulonglong2 t; (t.x) = x; (t.y) = y; return t; 
#line 273
} 
#line 275
static __inline longlong3 make_longlong3(__int64 x, __int64 y, __int64 z) 
#line 276
{ 
#line 277
longlong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 278
} 
#line 280
static __inline ulonglong3 make_ulonglong3(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z) 
#line 281
{ 
#line 282
ulonglong3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 283
} 
#line 285
static __inline longlong4 make_longlong4(__int64 x, __int64 y, __int64 z, __int64 w) 
#line 286
{ 
#line 287
longlong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 288
} 
#line 290
static __inline ulonglong4 make_ulonglong4(unsigned __int64 x, unsigned __int64 y, unsigned __int64 z, unsigned __int64 w) 
#line 291
{ 
#line 292
ulonglong4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 293
} 
#line 295
static __inline double1 make_double1(double x) 
#line 296
{ 
#line 297
double1 t; (t.x) = x; return t; 
#line 298
} 
#line 300
static __inline double2 make_double2(double x, double y) 
#line 301
{ 
#line 302
double2 t; (t.x) = x; (t.y) = y; return t; 
#line 303
} 
#line 305
static __inline double3 make_double3(double x, double y, double z) 
#line 306
{ 
#line 307
double3 t; (t.x) = x; (t.y) = y; (t.z) = z; return t; 
#line 308
} 
#line 310
static __inline double4 make_double4(double x, double y, double z, double w) 
#line 311
{ 
#line 312
double4 t; (t.x) = x; (t.y) = y; (t.z) = z; (t.w) = w; return t; 
#line 313
} 
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) void *__cdecl _memccpy(void * _Dst, const void * _Src, int _Val, size_t _MaxCount); } 
#line 48
extern "C" { __declspec(dllimport) const void *__cdecl memchr(const void * _Buf, int _Val, size_t _MaxCount); } 
#line 49
extern "C" { __declspec(dllimport) int __cdecl _memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); } 
#line 50
extern "C" { __declspec(dllimport) int __cdecl _memicmp_l(const void * _Buf1, const void * _Buf2, size_t _Size, _locale_t _Locale); } 
#line 51
extern "C" { int __cdecl memcmp(const void * _Buf1, const void * _Buf2, size_t _Size); } 
#line 55
extern "C" { void *__cdecl memcpy(void * _Dst, const void * _Src, size_t _Size); } 
#line 57
extern "C" { __declspec(dllimport) errno_t __cdecl memcpy_s(void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount); } 
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { void *__cdecl memset(void * _Dst, int _Val, size_t _Size); } 
#line 98
extern "C" { __declspec(dllimport) void *__cdecl memccpy(void * _Dst, const void * _Src, int _Val, size_t _Size); } 
#line 99
extern "C" { __declspec(dllimport) int __cdecl memicmp(const void * _Buf1, const void * _Buf2, size_t _Size); } 
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) errno_t __cdecl _strset_s(char * _Dst, size_t _DstSize, int _Value); } 
#line 106
template < size_t _Size > inline errno_t __cdecl _strset_s ( char ( & _Dest ) [ _Size ], int _Value ) throw ( ) { return _strset_s ( _Dest, _Size, _Value ); }
#line 107
extern "C" { char *__cdecl _strset(char * _Dest, int _Value); } 
#line 109
extern "C" { __declspec(dllimport) errno_t __cdecl strcpy_s(char * _Dst, rsize_t _SizeInBytes, const char * _Src); } 
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
template < size_t _Size > inline errno_t __cdecl strcpy_s ( char ( & _Dest ) [ _Size ], const char * _Source ) throw ( ) { return strcpy_s ( _Dest, _Size, _Source ); }
#line 112
extern "C" { char *__cdecl strcpy(char * _Dest, const char * _Source); } 
#line 114
extern "C" { __declspec(dllimport) errno_t __cdecl strcat_s(char * _Dst, rsize_t _SizeInBytes, const char * _Src); } 
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
template < size_t _Size > inline errno_t __cdecl strcat_s ( char ( & _Dest ) [ _Size ], const char * _Source ) throw ( ) { return strcat_s ( _Dest, _Size, _Source ); }
#line 118
extern "C" { char *__cdecl strcat(char * _Dest, const char * _Source); } 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { int __cdecl strcmp(const char * _Str1, const char * _Str2); } 
#line 121
extern "C" { size_t __cdecl strlen(const char * _Str); } 
#line 125
extern "C" { 
#line 122
__declspec(dllimport) size_t __cdecl 
#line 125
strnlen(const char * _Str, size_t _MaxCount); } 
#line 130
extern "C" { static __inline size_t __cdecl strnlen_s(const char *_Str, size_t _MaxCount) 
#line 131
{ 
#line 132
return (_Str == (0)) ? 0 : strnlen(_Str, _MaxCount); 
#line 133
} } 
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) errno_t __cdecl memmove_s(void * _Dst, rsize_t _DstSize, const void * _Src, rsize_t _MaxCount); } 
#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) void *__cdecl memmove(void * _Dst, const void * _Src, size_t _Size); } 
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) char *__cdecl _strdup(const char * _Src); } 
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) const char *__cdecl strchr(const char * _Str, int _Val); } 
#line 153
extern "C" { __declspec(dllimport) int __cdecl _stricmp(const char * _Str1, const char * _Str2); } 
#line 154
extern "C" { __declspec(dllimport) int __cdecl _strcmpi(const char * _Str1, const char * _Str2); } 
#line 155
extern "C" { __declspec(dllimport) int __cdecl _stricmp_l(const char * _Str1, const char * _Str2, _locale_t _Locale); } 
#line 156
extern "C" { __declspec(dllimport) int __cdecl strcoll(const char * _Str1, const char * _Str2); } 
#line 157
extern "C" { __declspec(dllimport) int __cdecl _strcoll_l(const char * _Str1, const char * _Str2, _locale_t _Locale); } 
#line 158
extern "C" { __declspec(dllimport) int __cdecl _stricoll(const char * _Str1, const char * _Str2); } 
#line 159
extern "C" { __declspec(dllimport) int __cdecl _stricoll_l(const char * _Str1, const char * _Str2, _locale_t _Locale); } 
#line 160
extern "C" { __declspec(dllimport) int __cdecl _strncoll(const char * _Str1, const char * _Str2, size_t _MaxCount); } 
#line 161
extern "C" { __declspec(dllimport) int __cdecl _strncoll_l(const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale); } 
#line 162
extern "C" { __declspec(dllimport) int __cdecl _strnicoll(const char * _Str1, const char * _Str2, size_t _MaxCount); } 
#line 163
extern "C" { __declspec(dllimport) int __cdecl _strnicoll_l(const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale); } 
#line 164
extern "C" { __declspec(dllimport) size_t __cdecl strcspn(const char * _Str, const char * _Control); } 
#line 165
extern "C" { __declspec(dllimport) char *__cdecl _strerror(const char * _ErrMsg); } 
#line 166
extern "C" { __declspec(dllimport) errno_t __cdecl _strerror_s(char * _Buf, size_t _SizeInBytes, const char * _ErrMsg); } 
#line 167
template < size_t _Size > inline errno_t __cdecl _strerror_s ( char ( & _Buffer ) [ _Size ], const char * _ErrorMessage ) throw ( ) { return _strerror_s ( _Buffer, _Size, _ErrorMessage ); }
#line 168
extern "C" { __declspec(dllimport) char *__cdecl strerror(int); } 
#line 170
extern "C" { __declspec(dllimport) errno_t __cdecl strerror_s(char * _Buf, size_t _SizeInBytes, int _ErrNum); } 
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
template < size_t _Size > inline errno_t __cdecl strerror_s ( char ( & _Buffer ) [ _Size ], int _ErrorMessage ) throw ( ) { return strerror_s ( _Buffer, _Size, _ErrorMessage ); }
#line 173
extern "C" { __declspec(dllimport) errno_t __cdecl _strlwr_s(char * _Str, size_t _Size); } 
#line 174
template < size_t _Size > inline errno_t __cdecl _strlwr_s ( char ( & _String ) [ _Size ] ) throw ( ) { return _strlwr_s ( _String, _Size ); }
#line 175
extern "C" { __declspec(dllimport) char *__cdecl _strlwr(char * _String); } 
#line 176
extern "C" { __declspec(dllimport) errno_t __cdecl _strlwr_s_l(char * _Str, size_t _Size, _locale_t _Locale); } 
#line 177
template < size_t _Size > inline errno_t __cdecl _strlwr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _strlwr_s_l ( _String, _Size, _Locale ); }
#line 178
extern "C" { __declspec(dllimport) char *__cdecl _strlwr_l(char * _String, _locale_t _Locale); } 
#line 180
extern "C" { __declspec(dllimport) errno_t __cdecl strncat_s(char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount); } 
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
template < size_t _Size > inline errno_t __cdecl strncat_s ( char ( & _Dest ) [ _Size ], const char * _Source, size_t _Count ) throw ( ) { return strncat_s ( _Dest, _Size, _Source, _Count ); }
#pragma warning(push)
#pragma warning(disable:6059)
#line 186
extern "C" { __declspec(dllimport) char *__cdecl strncat(char * _Dest, const char * _Source, size_t _Count); } 
#pragma warning(pop)
extern "C" { __declspec(dllimport) int __cdecl strncmp(const char * _Str1, const char * _Str2, size_t _MaxCount); } 
#line 189
extern "C" { __declspec(dllimport) int __cdecl _strnicmp(const char * _Str1, const char * _Str2, size_t _MaxCount); } 
#line 190
extern "C" { __declspec(dllimport) int __cdecl _strnicmp_l(const char * _Str1, const char * _Str2, size_t _MaxCount, _locale_t _Locale); } 
#line 192
extern "C" { __declspec(dllimport) errno_t __cdecl strncpy_s(char * _Dst, rsize_t _SizeInBytes, const char * _Src, rsize_t _MaxCount); } 
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
template < size_t _Size > inline errno_t __cdecl strncpy_s ( char ( & _Dest ) [ _Size ], const char * _Source, size_t _Count ) throw ( ) { return strncpy_s ( _Dest, _Size, _Source, _Count ); }
#line 195
extern "C" { __declspec(dllimport) char *__cdecl strncpy(char * _Dest, const char * _Source, size_t _Count); } 
#line 196
extern "C" { __declspec(dllimport) errno_t __cdecl _strnset_s(char * _Str, size_t _SizeInBytes, int _Val, size_t _MaxCount); } 
#line 197
template < size_t _Size > inline errno_t __cdecl _strnset_s ( char ( & _Dest ) [ _Size ], int _Val, size_t _Count ) throw ( ) { return _strnset_s ( _Dest, _Size, _Val, _Count ); }
#line 198
extern "C" { __declspec(dllimport) char *__cdecl _strnset(char * _Dest, int _Val, size_t _Count); } 
#line 199
extern "C" { __declspec(dllimport) const char *__cdecl strpbrk(const char * _Str, const char * _Control); } 
#line 200
extern "C" { __declspec(dllimport) const char *__cdecl strrchr(const char * _Str, int _Ch); } 
#line 201
extern "C" { __declspec(dllimport) char *__cdecl _strrev(char * _Str); } 
#line 202
extern "C" { __declspec(dllimport) size_t __cdecl strspn(const char * _Str, const char * _Control); } 
#line 203
extern "C" { __declspec(dllimport) const char *__cdecl strstr(const char * _Str, const char * _SubStr); } 
#line 204
extern "C" { __declspec(dllimport) char *__cdecl strtok(char * _Str, const char * _Delim); } 
#line 206
extern "C" { __declspec(dllimport) char *__cdecl strtok_s(char * _Str, const char * _Delim, char ** _Context); } 
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) errno_t __cdecl _strupr_s(char * _Str, size_t _Size); } 
#line 209
template < size_t _Size > inline errno_t __cdecl _strupr_s ( char ( & _String ) [ _Size ] ) throw ( ) { return _strupr_s ( _String, _Size ); }
#line 210
extern "C" { __declspec(dllimport) char *__cdecl _strupr(char * _String); } 
#line 211
extern "C" { __declspec(dllimport) errno_t __cdecl _strupr_s_l(char * _Str, size_t _Size, _locale_t _Locale); } 
#line 212
template < size_t _Size > inline errno_t __cdecl _strupr_s_l ( char ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _strupr_s_l ( _String, _Size, _Locale ); }
#line 213
extern "C" { __declspec(dllimport) char *__cdecl _strupr_l(char * _String, _locale_t _Locale); } 
#line 214
extern "C" { __declspec(dllimport) size_t __cdecl strxfrm(char * _Dst, const char * _Src, size_t _MaxCount); } 
#line 215
extern "C" { __declspec(dllimport) size_t __cdecl _strxfrm_l(char * _Dst, const char * _Src, size_t _MaxCount, _locale_t _Locale); } 
#line 221
inline char *__cdecl strchr(char *_Str, int _Ch) 
#line 222
{ return (char *)strchr((const char *)_Str, _Ch); } 
#line 223
inline char *__cdecl strpbrk(char *_Str, const char *_Control) 
#line 224
{ return (char *)strpbrk((const char *)_Str, _Control); } 
#line 225
inline char *__cdecl strrchr(char *_Str, int _Ch) 
#line 226
{ return (char *)strrchr((const char *)_Str, _Ch); } 
#line 227
inline char *__cdecl strstr(char *_Str, const char *_SubStr) 
#line 228
{ return (char *)strstr((const char *)_Str, _SubStr); } 
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
inline void *__cdecl memchr(void *_Pv, int _C, size_t _N) 
#line 233
{ return (void *)memchr((const void *)_Pv, _C, _N); } 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) char *__cdecl strdup(const char * _Src); } 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) int __cdecl strcmpi(const char * _Str1, const char * _Str2); } 
#line 253
extern "C" { __declspec(dllimport) int __cdecl stricmp(const char * _Str1, const char * _Str2); } 
#line 254
extern "C" { __declspec(dllimport) char *__cdecl strlwr(char * _Str); } 
#line 255
extern "C" { __declspec(dllimport) int __cdecl strnicmp(const char * _Str1, const char * _Str, size_t _MaxCount); } 
#line 256
extern "C" { __declspec(dllimport) char *__cdecl strnset(char * _Str, int _Val, size_t _MaxCount); } 
#line 257
extern "C" { __declspec(dllimport) char *__cdecl strrev(char * _Str); } 
#line 258
extern "C" { char *__cdecl strset(char * _Str, int _Val); } 
#line 259
extern "C" { __declspec(dllimport) char *__cdecl strupr(char * _Str); } 
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wcsdup(const __wchar_t * _Str); } 
#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) errno_t __cdecl wcscat_s(__wchar_t * _Dst, rsize_t _SizeInWords, const __wchar_t * _Src); } 
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
template < size_t _Size > inline errno_t __cdecl wcscat_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source ) throw ( ) { return wcscat_s ( _Dest, _Size, _Source ); }
#line 284
extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcscat(__wchar_t * _Dest, const __wchar_t * _Source); } 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) const __wchar_t *__cdecl wcschr(const __wchar_t * _Str, __wchar_t _Ch); } 
#line 289
extern "C" { __declspec(dllimport) int __cdecl wcscmp(const __wchar_t * _Str1, const __wchar_t * _Str2); } 
#line 291
extern "C" { __declspec(dllimport) errno_t __cdecl wcscpy_s(__wchar_t * _Dst, rsize_t _SizeInWords, const __wchar_t * _Src); } 
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
template < size_t _Size > inline errno_t __cdecl wcscpy_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source ) throw ( ) { return wcscpy_s ( _Dest, _Size, _Source ); }
#line 294
extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcscpy(__wchar_t * _Dest, const __wchar_t * _Source); } 
#line 295
extern "C" { __declspec(dllimport) size_t __cdecl wcscspn(const __wchar_t * _Str, const __wchar_t * _Control); } 
#line 296
extern "C" { __declspec(dllimport) size_t __cdecl wcslen(const __wchar_t * _Str); } 
#line 300
extern "C" { 
#line 297
__declspec(dllimport) size_t __cdecl 
#line 300
wcsnlen(const __wchar_t * _Src, size_t _MaxCount); } 
#line 305
extern "C" { static __inline size_t __cdecl wcsnlen_s(const __wchar_t *_Src, size_t _MaxCount) 
#line 306
{ 
#line 307
return (_Src == (0)) ? 0 : wcsnlen(_Src, _MaxCount); 
#line 308
} } 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) errno_t __cdecl wcsncat_s(__wchar_t * _Dst, rsize_t _SizeInWords, const __wchar_t * _Src, rsize_t _MaxCount); } 
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
template < size_t _Size > inline errno_t __cdecl wcsncat_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _Count ) throw ( ) { return wcsncat_s ( _Dest, _Size, _Source, _Count ); }
#pragma warning(push)
#pragma warning(disable:6059)
extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcsncat(__wchar_t * _Dest, const __wchar_t * _Source, size_t _Count); } 
#pragma warning(pop)
extern "C" { __declspec(dllimport) int __cdecl wcsncmp(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount); } 
#line 320
extern "C" { __declspec(dllimport) errno_t __cdecl wcsncpy_s(__wchar_t * _Dst, rsize_t _SizeInWords, const __wchar_t * _Src, rsize_t _MaxCount); } 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
template < size_t _Size > inline errno_t __cdecl wcsncpy_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _Count ) throw ( ) { return wcsncpy_s ( _Dest, _Size, _Source, _Count ); }
#line 323
extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcsncpy(__wchar_t * _Dest, const __wchar_t * _Source, size_t _Count); } 
#line 324
extern "C" { __declspec(dllimport) const __wchar_t *__cdecl wcspbrk(const __wchar_t * _Str, const __wchar_t * _Control); } 
#line 325
extern "C" { __declspec(dllimport) const __wchar_t *__cdecl wcsrchr(const __wchar_t * _Str, __wchar_t _Ch); } 
#line 326
extern "C" { __declspec(dllimport) size_t __cdecl wcsspn(const __wchar_t * _Str, const __wchar_t * _Control); } 
#line 329
extern "C" { __declspec(dllimport) const __wchar_t *__cdecl wcsstr(const __wchar_t * _Str, const __wchar_t * _SubStr); } 
#line 330
extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcstok(__wchar_t * _Str, const __wchar_t * _Delim); } 
#line 332
extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcstok_s(__wchar_t * _Str, const __wchar_t * _Delim, __wchar_t ** _Context); } 
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wcserror(int _ErrNum); } 
#line 335
extern "C" { __declspec(dllimport) errno_t __cdecl _wcserror_s(__wchar_t * _Buf, size_t _SizeInWords, int _ErrNum); } 
#line 336
template < size_t _Size > inline errno_t __cdecl _wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], int _Error ) throw ( ) { return _wcserror_s ( _Buffer, _Size, _Error ); }
#line 337
extern "C" { __declspec(dllimport) __wchar_t *__cdecl __wcserror(const __wchar_t * _Str); } 
#line 338
extern "C" { __declspec(dllimport) errno_t __cdecl __wcserror_s(__wchar_t * _Buffer, size_t _SizeInWords, const __wchar_t * _ErrMsg); } 
#line 339
template < size_t _Size > inline errno_t __cdecl __wcserror_s ( wchar_t ( & _Buffer ) [ _Size ], const wchar_t * _ErrorMessage ) throw ( ) { return __wcserror_s ( _Buffer, _Size, _ErrorMessage ); }
#line 341
extern "C" { __declspec(dllimport) int __cdecl _wcsicmp(const __wchar_t * _Str1, const __wchar_t * _Str2); } 
#line 342
extern "C" { __declspec(dllimport) int __cdecl _wcsicmp_l(const __wchar_t * _Str1, const __wchar_t * _Str2, _locale_t _Locale); } 
#line 343
extern "C" { __declspec(dllimport) int __cdecl _wcsnicmp(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount); } 
#line 344
extern "C" { __declspec(dllimport) int __cdecl _wcsnicmp_l(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale); } 
#line 345
extern "C" { __declspec(dllimport) errno_t __cdecl _wcsnset_s(__wchar_t * _Dst, size_t _SizeInWords, __wchar_t _Val, size_t _MaxCount); } 
#line 346
template < size_t _Size > inline errno_t __cdecl _wcsnset_s ( wchar_t ( & _Dst ) [ _Size ], wchar_t _Val, size_t _MaxCount ) throw ( ) { return _wcsnset_s ( _Dst, _Size, _Val, _MaxCount ); }
#line 347
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wcsnset(__wchar_t * _Str, __wchar_t _Val, size_t _MaxCount); } 
#line 348
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wcsrev(__wchar_t * _Str); } 
#line 349
extern "C" { __declspec(dllimport) errno_t __cdecl _wcsset_s(__wchar_t * _Dst, size_t _SizeInWords, __wchar_t _Value); } 
#line 350
template < size_t _Size > inline errno_t __cdecl _wcsset_s ( wchar_t ( & _Str ) [ _Size ], wchar_t _Val ) throw ( ) { return _wcsset_s ( _Str, _Size, _Val ); }
#line 351
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wcsset(__wchar_t * _Str, __wchar_t _Val); } 
#line 353
extern "C" { __declspec(dllimport) errno_t __cdecl _wcslwr_s(__wchar_t * _Str, size_t _SizeInWords); } 
#line 354
template < size_t _Size > inline errno_t __cdecl _wcslwr_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _wcslwr_s ( _String, _Size ); }
#line 355
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wcslwr(__wchar_t * _String); } 
#line 356
extern "C" { __declspec(dllimport) errno_t __cdecl _wcslwr_s_l(__wchar_t * _Str, size_t _SizeInWords, _locale_t _Locale); } 
#line 357
template < size_t _Size > inline errno_t __cdecl _wcslwr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _wcslwr_s_l ( _String, _Size, _Locale ); }
#line 358
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wcslwr_l(__wchar_t * _String, _locale_t _Locale); } 
#line 359
extern "C" { __declspec(dllimport) errno_t __cdecl _wcsupr_s(__wchar_t * _Str, size_t _Size); } 
#line 360
template < size_t _Size > inline errno_t __cdecl _wcsupr_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _wcsupr_s ( _String, _Size ); }
#line 361
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wcsupr(__wchar_t * _String); } 
#line 362
extern "C" { __declspec(dllimport) errno_t __cdecl _wcsupr_s_l(__wchar_t * _Str, size_t _Size, _locale_t _Locale); } 
#line 363
template < size_t _Size > inline errno_t __cdecl _wcsupr_s_l ( wchar_t ( & _String ) [ _Size ], _locale_t _Locale ) throw ( ) { return _wcsupr_s_l ( _String, _Size, _Locale ); }
#line 364
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wcsupr_l(__wchar_t * _String, _locale_t _Locale); } 
#line 365
extern "C" { __declspec(dllimport) size_t __cdecl wcsxfrm(__wchar_t * _Dst, const __wchar_t * _Src, size_t _MaxCount); } 
#line 366
extern "C" { __declspec(dllimport) size_t __cdecl _wcsxfrm_l(__wchar_t * _Dst, const __wchar_t * _Src, size_t _MaxCount, _locale_t _Locale); } 
#line 367
extern "C" { __declspec(dllimport) int __cdecl wcscoll(const __wchar_t * _Str1, const __wchar_t * _Str2); } 
#line 368
extern "C" { __declspec(dllimport) int __cdecl _wcscoll_l(const __wchar_t * _Str1, const __wchar_t * _Str2, _locale_t _Locale); } 
#line 369
extern "C" { __declspec(dllimport) int __cdecl _wcsicoll(const __wchar_t * _Str1, const __wchar_t * _Str2); } 
#line 370
extern "C" { __declspec(dllimport) int __cdecl _wcsicoll_l(const __wchar_t * _Str1, const __wchar_t * _Str2, _locale_t _Locale); } 
#line 371
extern "C" { __declspec(dllimport) int __cdecl _wcsncoll(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount); } 
#line 372
extern "C" { __declspec(dllimport) int __cdecl _wcsncoll_l(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale); } 
#line 373
extern "C" { __declspec(dllimport) int __cdecl _wcsnicoll(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount); } 
#line 374
extern "C" { __declspec(dllimport) int __cdecl _wcsnicoll_l(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount, _locale_t _Locale); } 
#line 382
inline __wchar_t *__cdecl wcschr(__wchar_t *_Str, __wchar_t _Ch) 
#line 383
{ return (__wchar_t *)wcschr((const __wchar_t *)_Str, _Ch); } 
#line 384
inline __wchar_t *__cdecl wcspbrk(__wchar_t *_Str, const __wchar_t *_Control) 
#line 385
{ return (__wchar_t *)wcspbrk((const __wchar_t *)_Str, _Control); } 
#line 386
inline __wchar_t *__cdecl wcsrchr(__wchar_t *_Str, __wchar_t _Ch) 
#line 387
{ return (__wchar_t *)wcsrchr((const __wchar_t *)_Str, _Ch); } 
#line 390
inline __wchar_t *__cdecl wcsstr(__wchar_t *_Str, const __wchar_t *_SubStr) 
#line 391
{ return (__wchar_t *)wcsstr((const __wchar_t *)_Str, _SubStr); } 
#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcsdup(const __wchar_t * _Str); } 
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\string.h"
extern "C" { __declspec(dllimport) int __cdecl wcsicmp(const __wchar_t * _Str1, const __wchar_t * _Str2); } 
#line 414
extern "C" { __declspec(dllimport) int __cdecl wcsnicmp(const __wchar_t * _Str1, const __wchar_t * _Str2, size_t _MaxCount); } 
#line 415
extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcsnset(__wchar_t * _Str, __wchar_t _Val, size_t _MaxCount); } 
#line 416
extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcsrev(__wchar_t * _Str); } 
#line 417
extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcsset(__wchar_t * _Str, __wchar_t _Val); } 
#line 418
extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcslwr(__wchar_t * _Str); } 
#line 419
extern "C" { __declspec(dllimport) __wchar_t *__cdecl wcsupr(__wchar_t * _Str); } 
#line 420
extern "C" { __declspec(dllimport) int __cdecl wcsicoll(const __wchar_t * _Str1, const __wchar_t * _Str2); } 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
#pragma pack ( push, 8 )
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
extern "C" { typedef long clock_t; }
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
extern "C" { struct tm { 
#line 114
int tm_sec; 
#line 115
int tm_min; 
#line 116
int tm_hour; 
#line 117
int tm_mday; 
#line 118
int tm_mon; 
#line 119
int tm_year; 
#line 120
int tm_wday; 
#line 121
int tm_yday; 
#line 122
int tm_isdst; 
#line 123
}; }
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
extern "C" { __declspec(dllimport) int *__cdecl __daylight(); } 
#line 151
extern "C" { __declspec(dllimport) long *__cdecl __dstbias(); } 
#line 155
extern "C" { __declspec(dllimport) long *__cdecl __timezone(); } 
#line 159
extern "C" { __declspec(dllimport) char **__cdecl __tzname(); } 
#line 162
extern "C" { __declspec(dllimport) errno_t __cdecl _get_daylight(int * _Daylight); } 
#line 163
extern "C" { __declspec(dllimport) errno_t __cdecl _get_dstbias(long * _Daylight_savings_bias); } 
#line 164
extern "C" { __declspec(dllimport) errno_t __cdecl _get_timezone(long * _Timezone); } 
#line 165
extern "C" { __declspec(dllimport) errno_t __cdecl _get_tzname(size_t * _ReturnValue, char * _Buffer, size_t _SizeInBytes, int _Index); } 
#line 174
extern "C" { __declspec(dllimport) char *__cdecl asctime(const tm * _Tm); } 
#line 176
extern "C" { __declspec(dllimport) errno_t __cdecl asctime_s(char * _Buf, size_t _SizeInBytes, const tm * _Tm); } 
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
template < size_t _Size > inline errno_t __cdecl asctime_s ( char ( & _Buffer ) [ _Size ], const struct tm * _Time ) throw ( ) { return asctime_s ( _Buffer, _Size, _Time ); }
#line 180
extern "C" { __declspec(dllimport) char *__cdecl _ctime32(const __time32_t * _Time); } 
#line 181
extern "C" { __declspec(dllimport) errno_t __cdecl _ctime32_s(char * _Buf, size_t _SizeInBytes, const __time32_t * _Time); } 
#line 182
template < size_t _Size > inline errno_t __cdecl _ctime32_s ( char ( & _Buffer ) [ _Size ], const __time32_t * _Time ) throw ( ) { return _ctime32_s ( _Buffer, _Size, _Time ); }
#line 184
extern "C" { __declspec(dllimport) clock_t __cdecl clock(); } 
#line 185
extern "C" { __declspec(dllimport) double __cdecl _difftime32(__time32_t _Time1, __time32_t _Time2); } 
#line 187
extern "C" { __declspec(dllimport) tm *__cdecl _gmtime32(const __time32_t * _Time); } 
#line 188
extern "C" { __declspec(dllimport) errno_t __cdecl _gmtime32_s(tm * _Tm, const __time32_t * _Time); } 
#line 190
extern "C" { __declspec(dllimport) tm *__cdecl _localtime32(const __time32_t * _Time); } 
#line 191
extern "C" { __declspec(dllimport) errno_t __cdecl _localtime32_s(tm * _Tm, const __time32_t * _Time); } 
#line 193
extern "C" { __declspec(dllimport) size_t __cdecl strftime(char * _Buf, size_t _SizeInBytes, const char * _Format, const tm * _Tm); } 
#line 194
extern "C" { __declspec(dllimport) size_t __cdecl _strftime_l(char * _Buf, size_t _Max_size, const char * _Format, const tm * _Tm, _locale_t _Locale); } 
#line 196
extern "C" { __declspec(dllimport) errno_t __cdecl _strdate_s(char * _Buf, size_t _SizeInBytes); } 
#line 197
template < size_t _Size > inline errno_t __cdecl _strdate_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return _strdate_s ( _Buffer, _Size ); }
#line 198
extern "C" { __declspec(dllimport) char *__cdecl _strdate(char * _Buffer); } 
#line 200
extern "C" { __declspec(dllimport) errno_t __cdecl _strtime_s(char * _Buf, size_t _SizeInBytes); } 
#line 201
template < size_t _Size > inline errno_t __cdecl _strtime_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return _strtime_s ( _Buffer, _Size ); }
#line 202
extern "C" { __declspec(dllimport) char *__cdecl _strtime(char * _Buffer); } 
#line 204
extern "C" { __declspec(dllimport) __time32_t __cdecl _time32(__time32_t * _Time); } 
#line 205
extern "C" { __declspec(dllimport) __time32_t __cdecl _mktime32(tm * _Tm); } 
#line 206
extern "C" { __declspec(dllimport) __time32_t __cdecl _mkgmtime32(tm * _Tm); } 
#line 210
extern "C" { __declspec(dllimport) void __cdecl _tzset(); } 
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
extern "C" { __declspec(dllimport) double __cdecl _difftime64(__time64_t _Time1, __time64_t _Time2); } 
#line 215
extern "C" { __declspec(dllimport) char *__cdecl _ctime64(const __time64_t * _Time); } 
#line 216
extern "C" { __declspec(dllimport) errno_t __cdecl _ctime64_s(char * _Buf, size_t _SizeInBytes, const __time64_t * _Time); } 
#line 217
template < size_t _Size > inline errno_t __cdecl _ctime64_s ( char ( & _Buffer ) [ _Size ], const __time64_t * _Time ) throw ( ) { return _ctime64_s ( _Buffer, _Size, _Time ); }
#line 219
extern "C" { __declspec(dllimport) tm *__cdecl _gmtime64(const __time64_t * _Time); } 
#line 220
extern "C" { __declspec(dllimport) errno_t __cdecl _gmtime64_s(tm * _Tm, const __time64_t * _Time); } 
#line 222
extern "C" { __declspec(dllimport) tm *__cdecl _localtime64(const __time64_t * _Time); } 
#line 223
extern "C" { __declspec(dllimport) errno_t __cdecl _localtime64_s(tm * _Tm, const __time64_t * _Time); } 
#line 225
extern "C" { __declspec(dllimport) __time64_t __cdecl _mktime64(tm * _Tm); } 
#line 226
extern "C" { __declspec(dllimport) __time64_t __cdecl _mkgmtime64(tm * _Tm); } 
#line 227
extern "C" { __declspec(dllimport) __time64_t __cdecl _time64(__time64_t * _Time); } 
#line 231
extern "C" { __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using GetLocalTime in" "stead. See online help for details.")) unsigned __cdecl _getsystime(tm * _Tm); } 
#line 232
extern "C" { __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetLocalTime in" "stead. See online help for details.")) unsigned __cdecl _setsystime(tm * _Tm, unsigned _MilliSec); } 
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wasctime(const tm * _Tm); } 
#line 246
extern "C" { __declspec(dllimport) errno_t __cdecl _wasctime_s(__wchar_t * _Buf, size_t _SizeInWords, const tm * _Tm); } 
#line 247
template < size_t _Size > inline errno_t __cdecl _wasctime_s ( wchar_t ( & _Buffer ) [ _Size ], const struct tm * _Time ) throw ( ) { return _wasctime_s ( _Buffer, _Size, _Time ); }
#line 249
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wctime32(const __time32_t * _Time); } 
#line 250
extern "C" { __declspec(dllimport) errno_t __cdecl _wctime32_s(__wchar_t * _Buf, size_t _SizeInWords, const __time32_t * _Time); } 
#line 251
template < size_t _Size > inline errno_t __cdecl _wctime32_s ( wchar_t ( & _Buffer ) [ _Size ], const __time32_t * _Time ) throw ( ) { return _wctime32_s ( _Buffer, _Size, _Time ); }
#line 253
extern "C" { __declspec(dllimport) size_t __cdecl wcsftime(__wchar_t * _Buf, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm); } 
#line 254
extern "C" { __declspec(dllimport) size_t __cdecl _wcsftime_l(__wchar_t * _Buf, size_t _SizeInWords, const __wchar_t * _Format, const tm * _Tm, _locale_t _Locale); } 
#line 256
extern "C" { __declspec(dllimport) errno_t __cdecl _wstrdate_s(__wchar_t * _Buf, size_t _SizeInWords); } 
#line 257
template < size_t _Size > inline errno_t __cdecl _wstrdate_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wstrdate_s ( _Buffer, _Size ); }
#line 258
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wstrdate(__wchar_t * _Buffer); } 
#line 260
extern "C" { __declspec(dllimport) errno_t __cdecl _wstrtime_s(__wchar_t * _Buf, size_t _SizeInWords); } 
#line 261
template < size_t _Size > inline errno_t __cdecl _wstrtime_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wstrtime_s ( _Buffer, _Size ); }
#line 262
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wstrtime(__wchar_t * _Buffer); } 
#line 264
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wctime64(const __time64_t * _Time); } 
#line 265
extern "C" { __declspec(dllimport) errno_t __cdecl _wctime64_s(__wchar_t * _Buf, size_t _SizeInWords, const __time64_t * _Time); } 
#line 266
template < size_t _Size > inline errno_t __cdecl _wctime64_s ( wchar_t ( & _Buffer ) [ _Size ], const __time64_t * _Time ) throw ( ) { return _wctime64_s ( _Buffer, _Size, _Time ); }
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wtime.inl"
#pragma warning(push)
#pragma warning(disable:4996)
#line 44
extern "C" { static __inline __wchar_t *__cdecl _wctime(const time_t *_Time) 
#line 45
{ 
#pragma warning( push )
#pragma warning( disable : 4996 )
return _wctime64(_Time); 
#pragma warning( pop )
} } 
#line 52
extern "C" { static __inline errno_t __cdecl _wctime_s(__wchar_t *_Buffer, size_t _SizeInWords, const time_t *_Time) 
#line 53
{ 
#line 54
return _wctime64_s(_Buffer, _SizeInWords, _Time); 
#line 55
} } 
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\wtime.inl"
#pragma warning(pop)
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.inl"
extern "C" { static __inline double __cdecl difftime(time_t _Time1, time_t _Time2) 
#line 83
{ 
#line 84
return _difftime64(_Time1, _Time2); 
#line 85
} } 
#line 86
extern "C" { static __inline char *__cdecl ctime(const time_t *_Time) 
#line 87
{ 
#pragma warning( push )
#pragma warning( disable : 4996 )
return _ctime64(_Time); 
#pragma warning( pop )
} } 
#line 94
extern "C" { static __inline errno_t __cdecl ctime_s(char *_Buffer, size_t _SizeInBytes, const time_t *_Time) 
#line 95
{ 
#line 96
return _ctime64_s(_Buffer, _SizeInBytes, _Time); 
#line 97
} } 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.inl"
extern "C" { static __inline tm *__cdecl gmtime(const time_t *_Time) 
#line 100
{ 
#pragma warning( push )
#pragma warning( disable : 4996 )
return _gmtime64(_Time); 
#pragma warning( pop )
} } 
#line 107
extern "C" { static __inline errno_t __cdecl gmtime_s(tm *_Tm, const time_t *_Time) 
#line 108
{ 
#line 109
return _gmtime64_s(_Tm, _Time); 
#line 110
} } 
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.inl"
extern "C" { static __inline tm *__cdecl localtime(const time_t *_Time) 
#line 113
{ 
#pragma warning( push )
#pragma warning( disable : 4996 )
return _localtime64(_Time); 
#pragma warning( pop )
} } 
#line 119
extern "C" { static __inline errno_t __cdecl localtime_s(tm *_Tm, const time_t *_Time) 
#line 120
{ 
#line 121
return _localtime64_s(_Tm, _Time); 
#line 122
} } 
#line 123
extern "C" { static __inline time_t __cdecl mktime(tm *_Tm) 
#line 124
{ 
#line 125
return _mktime64(_Tm); 
#line 126
} } 
#line 127
extern "C" { static __inline time_t __cdecl _mkgmtime(tm *_Tm) 
#line 128
{ 
#line 129
return _mkgmtime64(_Tm); 
#line 130
} } 
#line 131
extern "C" { static __inline time_t __cdecl time(time_t *_Time) 
#line 132
{ 
#line 133
return _time64(_Time); 
#line 134
} } 
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
extern "C" __declspec(dllimport) int daylight; 
#line 292
extern "C" __declspec(dllimport) long timezone; 
#line 293
extern "C" __declspec(dllimport) char *tzname[2]; 
#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
extern "C" { __declspec(dllimport) void __cdecl tzset(); } 
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\time.h"
#pragma pack ( pop )
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\common_functions.h"
extern "C" { __declspec(dllimport) extern clock_t __cdecl clock(); } 
#line 72
extern "C" { extern void *__cdecl memset(void *, int, size_t); } 
#line 73
extern "C" { extern void *__cdecl memcpy(void *, const void *, size_t); } 
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern int __cdecl abs(int); } 
#line 152
extern "C" { extern long __cdecl labs(long); } 
#line 153
extern "C" { extern __int64 llabs(__int64); } 
#line 200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern double __cdecl fabs(double x); } 
#line 241
extern "C" { extern __inline float fabsf(float x); } 
#line 245
extern "C" { extern int min(int, int); } 
#line 247
extern "C" { extern unsigned umin(unsigned, unsigned); } 
#line 248
extern "C" { extern __int64 llmin(__int64, __int64); } 
#line 249
extern "C" { extern unsigned __int64 ullmin(unsigned __int64, unsigned __int64); } 
#line 272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl fminf(float x, float y); } 
#line 292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl fmin(double x, double y); 
#line 297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern int max(int, int); } 
#line 299
extern "C" { extern unsigned umax(unsigned, unsigned); } 
#line 300
extern "C" { extern __int64 llmax(__int64, __int64); } 
#line 301
extern "C" { extern unsigned __int64 ullmax(unsigned __int64, unsigned __int64); } 
#line 324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl fmaxf(float x, float y); } 
#line 344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl fmax(double, double); 
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" double __cdecl sin(double x); 
#line 419
extern "C" double __cdecl cos(double x); 
#line 438
extern "C" { extern void sincos(double x, double * sptr, double * cptr); } 
#line 454
extern "C" { extern void sincosf(float x, float * sptr, float * cptr); } 
#line 499
extern "C" double __cdecl tan(double x); 
#line 568
extern "C" double __cdecl sqrt(double x); 
#line 640
extern "C" { extern double rsqrt(double x); } 
#line 710
extern "C" { extern float rsqrtf(float x); } 
#line 768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl log2(double x); 
#line 793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl exp2(double x); 
#line 818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl exp2f(float x); } 
#line 843 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern double exp10(double x); } 
#line 866
extern "C" { extern float exp10f(float x); } 
#line 914 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl expm1(double x); 
#line 959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl expm1f(float x); } 
#line 1014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl log2f(float x); } 
#line 1066 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" double __cdecl log10(double x); 
#line 1137
extern "C" double __cdecl log(double x); 
#line 1233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl log1p(double x); 
#line 1330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl log1pf(float x); } 
#line 1403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl floor(double x); 
#line 1442
extern "C" double __cdecl exp(double x); 
#line 1473
extern "C" double __cdecl cosh(double x); 
#line 1503
extern "C" double __cdecl sinh(double x); 
#line 1533
extern "C" double __cdecl tanh(double x); 
#line 1570 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl acosh(double x); 
#line 1608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl acoshf(float x); } 
#line 1624 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl asinh(double x); 
#line 1640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl asinhf(float x); } 
#line 1694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl atanh(double x); 
#line 1748 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl atanhf(float x); } 
#line 1805 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl ldexp(double x, int exp); 
#line 1861
extern "C" { extern __inline float ldexpf(float x, int exp); } 
#line 1915 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl logb(double x); 
#line 1970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl logbf(float x); } 
#line 2000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) int __cdecl ilogb(double x); 
#line 2030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern int __cdecl ilogbf(float x); } 
#line 2106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl scalbn(double x, int n); 
#line 2182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl scalbnf(float x, int n); } 
#line 2258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl scalbln(double x, long n); 
#line 2334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl scalblnf(float x, long n); } 
#line 2410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl frexp(double x, int * nptr); 
#line 2485
extern "C" { extern __inline float frexpf(float x, int * nptr); } 
#line 2501 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl round(double x); 
#line 2518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl roundf(float x); } 
#line 2536 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) long __cdecl lround(double x); 
#line 2554 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern long __cdecl lroundf(float x); } 
#line 2572 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) __int64 __cdecl llround(double x); 
#line 2590 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern __int64 __cdecl llroundf(float x); } 
#line 2605 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl rint(double x); 
#line 2620 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl rintf(float x); } 
#line 2636 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) long __cdecl lrint(double x); 
#line 2652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern long __cdecl lrintf(float x); } 
#line 2668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) __int64 __cdecl llrint(double x); 
#line 2684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern __int64 __cdecl llrintf(float x); } 
#line 2737 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl nearbyint(double x); 
#line 2790 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl nearbyintf(float x); } 
#line 2850 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl ceil(double x); 
#line 2864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl trunc(double x); 
#line 2879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl truncf(float x); } 
#line 2905 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl fdim(double x, double y); 
#line 2931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl fdimf(float x, float y); } 
#line 2965 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" double __cdecl atan2(double y, double x); 
#line 2996
extern "C" double __cdecl atan(double x); 
#line 3019
extern "C" double __cdecl acos(double x); 
#line 3051
extern "C" double __cdecl asin(double x); 
#line 3091
extern "C" { static __inline double __cdecl hypot(double x, double y); } 
#line 3145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern double rhypot(double x, double y); } 
#line 3189
extern "C" { static __inline float __cdecl hypotf(float x, float y); } 
#line 3243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern float rhypotf(float x, float y); } 
#line 3290
extern "C" { __declspec(dllimport) extern double __cdecl norm3d(double a, double b, double c); } 
#line 3341
extern "C" { extern double rnorm3d(double a, double b, double c); } 
#line 3390
extern "C" { __declspec(dllimport) extern double __cdecl norm4d(double a, double b, double c, double d); } 
#line 3434
extern "C" { extern float norm3df(float a, float b, float c); } 
#line 3485
extern "C" { extern float rnorm3df(float a, float b, float c); } 
#line 3534
extern "C" { extern float norm4df(float a, float b, float c, float d); } 
#line 3620 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl cbrt(double x); 
#line 3706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl cbrtf(float x); } 
#line 3759 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern double rcbrt(double x); } 
#line 3809
extern "C" { extern float rcbrtf(float x); } 
#line 3869
extern "C" { extern double sinpi(double x); } 
#line 3929
extern "C" { extern float sinpif(float x); } 
#line 3981
extern "C" { extern double cospi(double x); } 
#line 4033
extern "C" { extern float cospif(float x); } 
#line 4063
extern "C" { extern void sincospi(double x, double * sptr, double * cptr); } 
#line 4093
extern "C" { extern void sincospif(float x, float * sptr, float * cptr); } 
#line 4405
extern "C" double __cdecl pow(double x, double y); 
#line 4461
extern "C" { __declspec(dllimport) extern double __cdecl modf(double x, double * iptr); } 
#line 4520
extern "C" double __cdecl fmod(double x, double y); 
#line 4608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl remainder(double x, double y); 
#line 4698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl remainderf(float x, float y); } 
#line 4752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern double __cdecl remquo(double x, double y, int * quo); } 
#line 4806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl remquof(float x, float y, int * quo); } 
#line 4845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern double __cdecl j0(double x); } 
#line 4887
extern "C" { extern float j0f(float x); } 
#line 4948
extern "C" { __declspec(dllimport) extern double __cdecl j1(double x); } 
#line 5009
extern "C" { extern float j1f(float x); } 
#line 5052
extern "C" { __declspec(dllimport) extern double __cdecl jn(int n, double x); } 
#line 5095
extern "C" { extern float jnf(int n, float x); } 
#line 5147
extern "C" { __declspec(dllimport) extern double __cdecl y0(double x); } 
#line 5199
extern "C" { extern float y0f(float x); } 
#line 5251
extern "C" { __declspec(dllimport) extern double __cdecl y1(double x); } 
#line 5303
extern "C" { extern float y1f(float x); } 
#line 5356
extern "C" { __declspec(dllimport) extern double __cdecl yn(int n, double x); } 
#line 5409
extern "C" { extern float ynf(int n, float x); } 
#line 5436
extern "C" { __declspec(dllimport) extern double __cdecl cyl_bessel_i0(double x); } 
#line 5462
extern "C" { extern float cyl_bessel_i0f(float x); } 
#line 5489
extern "C" { __declspec(dllimport) extern double __cdecl cyl_bessel_i1(double x); } 
#line 5515
extern "C" { extern float cyl_bessel_i1f(float x); } 
#line 5600 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl erf(double x); 
#line 5682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl erff(float x); } 
#line 5744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern double erfinv(double y); } 
#line 5801
extern "C" { extern float erfinvf(float y); } 
#line 5842 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl erfc(double x); 
#line 5880 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl erfcf(float x); } 
#line 6008 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl lgamma(double x); 
#line 6069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern double erfcinv(double y); } 
#line 6125
extern "C" { extern float erfcinvf(float y); } 
#line 6183
extern "C" { extern double normcdfinv(double y); } 
#line 6241
extern "C" { extern float normcdfinvf(float y); } 
#line 6284
extern "C" { extern double normcdf(double y); } 
#line 6327
extern "C" { extern float normcdff(float y); } 
#line 6402
extern "C" { extern double erfcx(double x); } 
#line 6477
extern "C" { extern float erfcxf(float x); } 
#line 6613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl lgammaf(float x); } 
#line 6722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl tgamma(double x); 
#line 6831 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl tgammaf(float x); } 
#line 6844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl copysign(double x, double y); 
#line 6857 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl copysignf(float x, float y); } 
#line 6894 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" __declspec(dllimport) double __cdecl nextafter(double x, double y); 
#line 6931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl nextafterf(float x, float y); } 
#line 6947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern double __cdecl nan(const char * tagp); } 
#line 6963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl nanf(const char * tagp); } 
#line 6968 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern int __isinff(float); } 
#line 6969
extern "C" { extern int __isnanf(float); } 
#line 6979 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern int __finite(double); } 
#line 6980
extern "C" { extern int __finitef(float); } 
#line 6981
extern "C" { extern int __signbit(double); } 
#line 6982
extern "C" { extern int __isnan(double); } 
#line 6983
extern "C" { extern int __isinf(double); } 
#line 6986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern int __signbitf(float); } 
#line 7147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern double __cdecl fma(double x, double y, double z); } 
#line 7305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl fmaf(float x, float y, float z); } 
#line 7314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern int __signbitl(long double); } 
#line 7320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { extern int __finitel(long double); } 
#line 7321
extern "C" { extern int __isinfl(long double); } 
#line 7322
extern "C" { extern int __isnanl(long double); } 
#line 7326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern float __cdecl acosf(float); } 
#line 7327
extern "C" { __declspec(dllimport) extern float __cdecl asinf(float); } 
#line 7328
extern "C" { __declspec(dllimport) extern float __cdecl atanf(float); } 
#line 7329
extern "C" { __declspec(dllimport) extern float __cdecl atan2f(float, float); } 
#line 7330
extern "C" { __declspec(dllimport) extern float __cdecl cosf(float); } 
#line 7331
extern "C" { __declspec(dllimport) extern float __cdecl sinf(float); } 
#line 7332
extern "C" { __declspec(dllimport) extern float __cdecl tanf(float); } 
#line 7333
extern "C" { __declspec(dllimport) extern float __cdecl coshf(float); } 
#line 7334
extern "C" { __declspec(dllimport) extern float __cdecl sinhf(float); } 
#line 7335
extern "C" { __declspec(dllimport) extern float __cdecl tanhf(float); } 
#line 7336
extern "C" { __declspec(dllimport) extern float __cdecl expf(float); } 
#line 7337
extern "C" { __declspec(dllimport) extern float __cdecl logf(float); } 
#line 7338
extern "C" { __declspec(dllimport) extern float __cdecl log10f(float); } 
#line 7339
extern "C" { __declspec(dllimport) extern float __cdecl modff(float, float *); } 
#line 7340
extern "C" { __declspec(dllimport) extern float __cdecl powf(float, float); } 
#line 7341
extern "C" { __declspec(dllimport) extern float __cdecl sqrtf(float); } 
#line 7342
extern "C" { __declspec(dllimport) extern float __cdecl ceilf(float); } 
#line 7343
extern "C" { __declspec(dllimport) extern float __cdecl floorf(float); } 
#line 7344
extern "C" { __declspec(dllimport) extern float __cdecl fmodf(float, float); } 
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
#pragma pack ( push, 8 )
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { struct _exception { 
#line 38
int type; 
#line 39
char *name; 
#line 40
double arg1; 
#line 41
double arg2; 
#line 42
double retval; 
#line 43
}; }
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { struct _complex { 
#line 55
double x, y; 
#line 56
}; }
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { typedef float float_t; }
#line 68
extern "C" { typedef double double_t; }
#line 90
extern "C" __declspec(dllimport) double _HUGE; 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { void __cdecl _fperrraise(int _Except); } 
#line 186
extern "C" { __declspec(dllimport) short __cdecl _dclass(double _X); } 
#line 187
extern "C" { __declspec(dllimport) short __cdecl _ldclass(long double _X); } 
#line 188
extern "C" { __declspec(dllimport) short __cdecl _fdclass(float _X); } 
#line 190
extern "C" { __declspec(dllimport) int __cdecl _dsign(double _X); } 
#line 191
extern "C" { __declspec(dllimport) int __cdecl _ldsign(long double _X); } 
#line 192
extern "C" { __declspec(dllimport) int __cdecl _fdsign(float _X); } 
#line 194
extern "C" { __declspec(dllimport) int __cdecl _dpcomp(double _X, double _Y); } 
#line 195
extern "C" { __declspec(dllimport) int __cdecl _ldpcomp(long double _X, long double _Y); } 
#line 196
extern "C" { __declspec(dllimport) int __cdecl _fdpcomp(float _X, float _Y); } 
#line 198
extern "C" { __declspec(dllimport) short __cdecl _dtest(double * _Px); } 
#line 199
extern "C" { __declspec(dllimport) short __cdecl _ldtest(long double * _Px); } 
#line 200
extern "C" { __declspec(dllimport) short __cdecl _fdtest(float * _Px); } 
#line 202
extern "C" { __declspec(dllimport) short __cdecl _d_int(double * _Px, short _Xexp); } 
#line 203
extern "C" { __declspec(dllimport) short __cdecl _ld_int(long double * _Px, short _Xexp); } 
#line 204
extern "C" { __declspec(dllimport) short __cdecl _fd_int(float * _Px, short _Xexp); } 
#line 206
extern "C" { __declspec(dllimport) short __cdecl _dscale(double * _Px, long _Lexp); } 
#line 207
extern "C" { __declspec(dllimport) short __cdecl _ldscale(long double * _Px, long _Lexp); } 
#line 208
extern "C" { __declspec(dllimport) short __cdecl _fdscale(float * _Px, long _Lexp); } 
#line 210
extern "C" { __declspec(dllimport) short __cdecl _dunscale(short * _Pex, double * _Px); } 
#line 211
extern "C" { __declspec(dllimport) short __cdecl _ldunscale(short * _Pex, long double * _Px); } 
#line 212
extern "C" { __declspec(dllimport) short __cdecl _fdunscale(short * _Pex, float * _Px); } 
#line 214
extern "C" { __declspec(dllimport) short __cdecl _dexp(double * _Px, double _Y, long _Eoff); } 
#line 215
extern "C" { __declspec(dllimport) short __cdecl _ldexp(long double * _Px, long double _Y, long _Eoff); } 
#line 216
extern "C" { __declspec(dllimport) short __cdecl _fdexp(float * _Px, float _Y, long _Eoff); } 
#line 218
extern "C" { __declspec(dllimport) short __cdecl _dnorm(unsigned short * _Ps); } 
#line 219
extern "C" { __declspec(dllimport) short __cdecl _fdnorm(unsigned short * _Ps); } 
#line 221
extern "C" { double __cdecl _dpoly(double _X, const double * _Tab, int _N); } 
#line 222
extern "C" { long double __cdecl _ldpoly(long double _X, const long double * _Tab, int _N); } 
#line 223
extern "C" { float __cdecl _fdpoly(float _X, const float * _Tab, int _N); } 
#line 225
extern "C" { __declspec(dllimport) double __cdecl _dlog(double _X, int _Baseflag); } 
#line 226
extern "C" { __declspec(dllimport) long double __cdecl _ldlog(long double _X, int _Baseflag); } 
#line 227
extern "C" { __declspec(dllimport) float __cdecl _fdlog(float _X, int _Baseflag); } 
#line 229
extern "C" { __declspec(dllimport) double __cdecl _dsin(double _X, unsigned _Qoff); } 
#line 230
extern "C" { __declspec(dllimport) long double __cdecl _ldsin(long double _X, unsigned _Qoff); } 
#line 231
extern "C" { __declspec(dllimport) float __cdecl _fdsin(float _X, unsigned _Qoff); } 
#line 238
extern "C" { typedef 
#line 235
union { 
#line 236
unsigned short _Sh[8]; 
#line 237
double _Val; 
#line 238
} _double_val; }
#line 245
extern "C" { typedef 
#line 242
union { 
#line 243
unsigned short _Sh[8]; 
#line 244
float _Val; 
#line 245
} _float_val; }
#line 252
extern "C" { typedef 
#line 249
union { 
#line 250
unsigned short _Sh[8]; 
#line 251
long double _Val; 
#line 252
} _ldouble_val; }
#line 260
extern "C" { typedef 
#line 255
union { 
#line 256
unsigned short _Word[8]; 
#line 257
float _Float; 
#line 258
double _Double; 
#line 259
long double _Long_double; 
#line 260
} _float_const; }
#line 262
extern "C" const _float_const _Denorm_C, _Inf_C, _Nan_C, _Snan_C, _Hugeval_C; 
#line 263
extern "C" const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C; 
#line 264
extern "C" const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C; 
#line 266
extern "C" const _float_const _Eps_C, _Rteps_C; 
#line 267
extern "C" const _float_const _FEps_C, _FRteps_C; 
#line 268
extern "C" const _float_const _LEps_C, _LRteps_C; 
#line 270
extern "C" const double _Zero_C, _Xbig_C; 
#line 271
extern "C" const float _FZero_C, _FXbig_C; 
#line 272
extern "C" const long double _LZero_C, _LXbig_C; 
#line 304
__declspec(nothrow) inline int fpclassify(float _X) 
#line 305
{ 
#line 306
return _fdtest(&_X); 
#line 307
} 
#line 309
__declspec(nothrow) inline int fpclassify(double _X) 
#line 310
{ 
#line 311
return _dtest(&_X); 
#line 312
} 
#line 314
__declspec(nothrow) inline int fpclassify(long double _X) 
#line 315
{ 
#line 316
return _ldtest(&_X); 
#line 317
} 
#line 319
__declspec(nothrow) inline bool signbit(float _X) 
#line 320
{ 
#line 321
return _fdsign(_X) != 0; 
#line 322
} 
#line 324
__declspec(nothrow) inline bool signbit(double _X) 
#line 325
{ 
#line 326
return _dsign(_X) != 0; 
#line 327
} 
#line 329
__declspec(nothrow) inline bool signbit(long double _X) 
#line 330
{ 
#line 331
return _ldsign(_X) != 0; 
#line 332
} 
#line 334
__declspec(nothrow) inline int _fpcomp(float _X, float _Y) 
#line 335
{ 
#line 336
return _fdpcomp(_X, _Y); 
#line 337
} 
#line 339
__declspec(nothrow) inline int _fpcomp(double _X, double _Y) 
#line 340
{ 
#line 341
return _dpcomp(_X, _Y); 
#line 342
} 
#line 344
__declspec(nothrow) inline int _fpcomp(long double _X, long double _Y) 
#line 345
{ 
#line 346
return _ldpcomp(_X, _Y); 
#line 347
} 
#line 349
template< class _Trc, class _Tre> struct _Combined_type { 
#line 351
typedef float _Type; 
#line 352
}; 
#line 354
template<> struct _Combined_type< float, double>  { 
#line 356
typedef double _Type; 
#line 357
}; 
#line 359
template<> struct _Combined_type< float, long double>  { 
#line 361
typedef long double _Type; 
#line 362
}; 
#line 364
template< class _Ty, class _T2> struct _Real_widened { 
#line 366
typedef long double _Type; 
#line 367
}; 
#line 369
template<> struct _Real_widened< float, float>  { 
#line 371
typedef float _Type; 
#line 372
}; 
#line 374
template<> struct _Real_widened< float, double>  { 
#line 376
typedef double _Type; 
#line 377
}; 
#line 379
template<> struct _Real_widened< double, float>  { 
#line 381
typedef double _Type; 
#line 382
}; 
#line 384
template<> struct _Real_widened< double, double>  { 
#line 386
typedef double _Type; 
#line 387
}; 
#line 389
template< class _Ty> struct _Real_type { 
#line 391
typedef double _Type; 
#line 392
}; 
#line 394
template<> struct _Real_type< float>  { 
#line 396
typedef float _Type; 
#line 397
}; 
#line 399
template<> struct _Real_type< long double>  { 
#line 401
typedef long double _Type; 
#line 402
}; 
#line 404
template < class _T1, class _T2 > inline __declspec ( nothrow ) int _fpcomp ( _T1 _X, _T2 _Y )
{
    typedef typename _Combined_type < float,
        typename _Real_widened <
        typename _Real_type < _T1 > :: _Type,
        typename _Real_type < _T2 > :: _Type > :: _Type > :: _Type _Tw;
    return ( _fpcomp ( ( _Tw ) _X, ( _Tw ) _Y ) );
}
#line 413
template < class _Ty > inline __declspec ( nothrow ) bool isfinite ( _Ty _X )
{
    return ( fpclassify ( _X ) <= 0 );
}
#line 418
template < class _Ty > inline __declspec ( nothrow ) bool isinf ( _Ty _X )
{
    return ( fpclassify ( _X ) == 1 );
}
#line 423
template < class _Ty > inline __declspec ( nothrow ) bool isnan ( _Ty _X )
{
    return ( fpclassify ( _X ) == 2 );
}
#line 428
template < class _Ty > inline __declspec ( nothrow ) bool isnormal ( _Ty _X )
{
    return ( fpclassify ( _X ) == ( - 1 ) );
}
#line 433
template < class _Ty1, class _Ty2 > inline __declspec ( nothrow ) bool isgreater ( _Ty1 _X, _Ty2 _Y )
{
    return ( ( _fpcomp ( _X, _Y ) & 4 ) != 0 );
}
#line 438
template < class _Ty1, class _Ty2 > inline __declspec ( nothrow ) bool isgreaterequal ( _Ty1 _X, _Ty2 _Y )
{
    return ( ( _fpcomp ( _X, _Y ) & ( 2 | 4 ) ) != 0 );
}
#line 443
template < class _Ty1, class _Ty2 > inline __declspec ( nothrow ) bool isless ( _Ty1 _X, _Ty2 _Y )
{
    return ( ( _fpcomp ( _X, _Y ) & 1 ) != 0 );
}
#line 448
template < class _Ty1, class _Ty2 > inline __declspec ( nothrow ) bool islessequal ( _Ty1 _X, _Ty2 _Y )
{
    return ( ( _fpcomp ( _X, _Y ) & ( 1 | 2 ) ) != 0 );
}
#line 453
template < class _Ty1, class _Ty2 > inline __declspec ( nothrow ) bool islessgreater ( _Ty1 _X, _Ty2 _Y )
{
    return ( ( _fpcomp ( _X, _Y ) & ( 1 | 4 ) ) != 0 );
}
#line 458
template < class _Ty1, class _Ty2 > inline __declspec ( nothrow ) bool isunordered ( _Ty1 _X, _Ty2 _Y )
{
    return ( _fpcomp ( _X, _Y ) == 0 );
}
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { int __cdecl abs(int _X); } 
#line 471
extern "C" { long __cdecl labs(long _X); } 
#line 472
extern "C" { __int64 __cdecl llabs(__int64 _X); } 
#line 474
extern "C" double __cdecl acos(double _X); 
#line 475
extern "C" __declspec(dllimport) double __cdecl acosh(double _X); 
#line 476
extern "C" double __cdecl asin(double _X); 
#line 477
extern "C" __declspec(dllimport) double __cdecl asinh(double _X); 
#line 478
extern "C" double __cdecl atan(double _X); 
#line 479
extern "C" __declspec(dllimport) double __cdecl atanh(double _X); 
#line 480
extern "C" double __cdecl atan2(double _Y, double _X); 
#line 482
extern "C" __declspec(dllimport) double __cdecl cbrt(double _X); 
#line 483
extern "C" __declspec(dllimport) double __cdecl copysign(double _X, double _Y); 
#line 484
extern "C" double __cdecl cos(double _X); 
#line 485
extern "C" double __cdecl cosh(double _X); 
#line 486
extern "C" __declspec(dllimport) double __cdecl erf(double _X); 
#line 487
extern "C" __declspec(dllimport) double __cdecl erfc(double _X); 
#line 488
extern "C" double __cdecl exp(double _X); 
#line 489
extern "C" __declspec(dllimport) double __cdecl exp2(double _X); 
#line 490
extern "C" __declspec(dllimport) double __cdecl expm1(double _X); 
#line 491
extern "C" { double __cdecl fabs(double _X); } 
#line 492
extern "C" __declspec(dllimport) double __cdecl fdim(double _X, double _Y); 
#line 493
extern "C" { __declspec(dllimport) double __cdecl fma(double _X, double _Y, double _Z); } 
#line 494
extern "C" __declspec(dllimport) double __cdecl fmax(double _X, double _Y); 
#line 495
extern "C" __declspec(dllimport) double __cdecl fmin(double _X, double _Y); 
#line 496
extern "C" double __cdecl fmod(double _X, double _Y); 
#line 497
extern "C" __declspec(dllimport) int __cdecl ilogb(double _X); 
#line 498
extern "C" __declspec(dllimport) double __cdecl lgamma(double _X); 
#line 499
extern "C" __declspec(dllimport) __int64 __cdecl llrint(double _X); 
#line 500
extern "C" __declspec(dllimport) __int64 __cdecl llround(double _X); 
#line 501
extern "C" double __cdecl log(double _X); 
#line 502
extern "C" double __cdecl log10(double _X); 
#line 503
extern "C" __declspec(dllimport) double __cdecl log1p(double _X); 
#line 504
extern "C" __declspec(dllimport) double __cdecl log2(double _X); 
#line 505
extern "C" __declspec(dllimport) double __cdecl logb(double _X); 
#line 506
extern "C" __declspec(dllimport) long __cdecl lrint(double _X); 
#line 507
extern "C" __declspec(dllimport) long __cdecl lround(double _X); 
#line 508
extern "C" { __declspec(dllimport) double __cdecl nan(const char *); } 
#line 509
extern "C" __declspec(dllimport) double __cdecl nearbyint(double _X); 
#line 510
extern "C" __declspec(dllimport) double __cdecl nextafter(double _X, double _Y); 
#line 511
extern "C" __declspec(dllimport) double __cdecl nexttoward(double _X, long double _Y); 
#line 512
extern "C" double __cdecl pow(double _X, double _Y); 
#line 513
extern "C" __declspec(dllimport) double __cdecl remainder(double _X, double _Y); 
#line 514
extern "C" { __declspec(dllimport) double __cdecl remquo(double _X, double _Y, int * _Z); } 
#line 515
extern "C" __declspec(dllimport) double __cdecl rint(double _X); 
#line 516
extern "C" __declspec(dllimport) double __cdecl round(double _X); 
#line 517
extern "C" __declspec(dllimport) double __cdecl scalbln(double _X, long _Y); 
#line 518
extern "C" __declspec(dllimport) double __cdecl scalbn(double _X, int _Y); 
#line 519
extern "C" double __cdecl sin(double _X); 
#line 520
extern "C" double __cdecl sinh(double _X); 
#line 521
extern "C" double __cdecl sqrt(double _X); 
#line 522
extern "C" double __cdecl tan(double _X); 
#line 523
extern "C" double __cdecl tanh(double _X); 
#line 524
extern "C" __declspec(dllimport) double __cdecl tgamma(double _X); 
#line 525
extern "C" __declspec(dllimport) double __cdecl trunc(double _X); 
#line 527
extern "C" { __declspec(dllimport) double __cdecl atof(const char * _String); } 
#line 528
extern "C" { __declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); } 
#line 530
extern "C" { __declspec(dllimport) double __cdecl _cabs(_complex _Complex_value); } 
#line 531
extern "C" __declspec(dllimport) double __cdecl ceil(double _X); 
#line 533
extern "C" { __declspec(dllimport) double __cdecl _chgsign(double _X); } 
#line 534
extern "C" { __declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); } 
#line 536
extern "C" __declspec(dllimport) double __cdecl floor(double _X); 
#line 537
extern "C" __declspec(dllimport) double __cdecl frexp(double _X, int * _Y); 
#line 538
extern "C" { __declspec(dllimport) double __cdecl _hypot(double _X, double _Y); } 
#line 539
extern "C" { __declspec(dllimport) double __cdecl _j0(double _X); } 
#line 540
extern "C" { __declspec(dllimport) double __cdecl _j1(double _X); } 
#line 541
extern "C" { __declspec(dllimport) double __cdecl _jn(int _X, double _Y); } 
#line 542
extern "C" __declspec(dllimport) double __cdecl ldexp(double _X, int _Y); 
#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { int __cdecl _matherr(_exception * _Except); } 
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { __declspec(dllimport) double __cdecl modf(double _X, double * _Y); } 
#line 551
extern "C" { __declspec(dllimport) double __cdecl _y0(double _X); } 
#line 552
extern "C" { __declspec(dllimport) double __cdecl _y1(double _X); } 
#line 553
extern "C" { __declspec(dllimport) double __cdecl _yn(int _X, double _Y); } 
#line 555
extern "C" { __inline double __cdecl hypot(double _X, double _Y) 
#line 556
{ 
#line 557
return _hypot(_X, _Y); 
#line 558
} } 
#line 561
extern "C" { __declspec(dllimport) float __cdecl acoshf(float _X); } 
#line 562
extern "C" { __declspec(dllimport) float __cdecl asinhf(float _X); } 
#line 563
extern "C" { __declspec(dllimport) float __cdecl atanhf(float _X); } 
#line 564
extern "C" { __declspec(dllimport) float __cdecl cbrtf(float _X); } 
#line 565
extern "C" { __declspec(dllimport) float __cdecl _chgsignf(float _X); } 
#line 566
extern "C" { __declspec(dllimport) float __cdecl copysignf(float _X, float _Y); } 
#line 567
extern "C" { __declspec(dllimport) float __cdecl _copysignf(float _Number, float _Sign); } 
#line 568
extern "C" { __declspec(dllimport) float __cdecl erff(float _X); } 
#line 569
extern "C" { __declspec(dllimport) float __cdecl erfcf(float _X); } 
#line 570
extern "C" { __declspec(dllimport) float __cdecl expm1f(float _X); } 
#line 571
extern "C" { __declspec(dllimport) float __cdecl exp2f(float _X); } 
#line 572
extern "C" { __declspec(dllimport) float __cdecl fdimf(float _X, float _Y); } 
#line 573
extern "C" { __declspec(dllimport) float __cdecl fmaf(float _X, float _Y, float _Z); } 
#line 574
extern "C" { __declspec(dllimport) float __cdecl fmaxf(float _X, float _Y); } 
#line 575
extern "C" { __declspec(dllimport) float __cdecl fminf(float _X, float _Y); } 
#line 576
extern "C" { __declspec(dllimport) float __cdecl _hypotf(float _X, float _Y); } 
#line 577
extern "C" { __declspec(dllimport) int __cdecl ilogbf(float _X); } 
#line 578
extern "C" { __declspec(dllimport) float __cdecl lgammaf(float _X); } 
#line 579
extern "C" { __declspec(dllimport) __int64 __cdecl llrintf(float _X); } 
#line 580
extern "C" { __declspec(dllimport) __int64 __cdecl llroundf(float _X); } 
#line 581
extern "C" { __declspec(dllimport) float __cdecl log1pf(float _X); } 
#line 582
extern "C" { __declspec(dllimport) float __cdecl log2f(float _X); } 
#line 583
extern "C" { __declspec(dllimport) float __cdecl logbf(float _X); } 
#line 584
extern "C" { __declspec(dllimport) long __cdecl lrintf(float _X); } 
#line 585
extern "C" { __declspec(dllimport) long __cdecl lroundf(float _X); } 
#line 586
extern "C" { __declspec(dllimport) float __cdecl nanf(const char *); } 
#line 587
extern "C" { __declspec(dllimport) float __cdecl nearbyintf(float _X); } 
#line 588
extern "C" { __declspec(dllimport) float __cdecl nextafterf(float _X, float _Y); } 
#line 589
extern "C" { __declspec(dllimport) float __cdecl nexttowardf(float _X, long double _Y); } 
#line 590
extern "C" { __declspec(dllimport) float __cdecl remainderf(float _X, float _Y); } 
#line 591
extern "C" { __declspec(dllimport) float __cdecl remquof(float _X, float _Y, int * _Z); } 
#line 592
extern "C" { __declspec(dllimport) float __cdecl rintf(float _X); } 
#line 593
extern "C" { __declspec(dllimport) float __cdecl roundf(float _X); } 
#line 594
extern "C" { __declspec(dllimport) float __cdecl scalblnf(float _X, long _Y); } 
#line 595
extern "C" { __declspec(dllimport) float __cdecl scalbnf(float _X, int _Y); } 
#line 596
extern "C" { __declspec(dllimport) float __cdecl tgammaf(float _X); } 
#line 597
extern "C" { __declspec(dllimport) float __cdecl truncf(float _X); } 
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { __declspec(dllimport) float __cdecl _logbf(float _X); } 
#line 608
extern "C" { __declspec(dllimport) float __cdecl _nextafterf(float _X, float _Y); } 
#line 609
extern "C" { __declspec(dllimport) int __cdecl _finitef(float _X); } 
#line 610
extern "C" { __declspec(dllimport) int __cdecl _isnanf(float _X); } 
#line 611
extern "C" { __declspec(dllimport) int __cdecl _fpclassf(float _X); } 
#line 613
extern "C" { __declspec(dllimport) int __cdecl _set_FMA3_enable(int _Flag); } 
#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { __declspec(dllimport) float __cdecl acosf(float _X); } 
#line 627
extern "C" { __declspec(dllimport) float __cdecl asinf(float _X); } 
#line 628
extern "C" { __declspec(dllimport) float __cdecl atan2f(float _Y, float _X); } 
#line 629
extern "C" { __declspec(dllimport) float __cdecl atanf(float _X); } 
#line 630
extern "C" { __declspec(dllimport) float __cdecl ceilf(float _X); } 
#line 631
extern "C" { __declspec(dllimport) float __cdecl cosf(float _X); } 
#line 632
extern "C" { __declspec(dllimport) float __cdecl coshf(float _X); } 
#line 633
extern "C" { __declspec(dllimport) float __cdecl expf(float _X); } 
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { __inline float __cdecl fabsf(float _X) 
#line 686
{ 
#line 687
return (float)fabs(_X); 
#line 688
} } 
#line 694 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { __declspec(dllimport) float __cdecl floorf(float _X); } 
#line 695
extern "C" { __declspec(dllimport) float __cdecl fmodf(float _X, float _Y); } 
#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { __inline float __cdecl frexpf(float _X, int *_Y) 
#line 712
{ 
#line 713
return (float)frexp(_X, _Y); 
#line 714
} } 
#line 716
extern "C" { __inline float __cdecl hypotf(float _X, float _Y) 
#line 717
{ 
#line 718
return _hypotf(_X, _Y); 
#line 719
} } 
#line 721
extern "C" { __inline float __cdecl ldexpf(float _X, int _Y) 
#line 722
{ 
#line 723
return (float)ldexp(_X, _Y); 
#line 724
} } 
#line 728
extern "C" { __declspec(dllimport) float __cdecl log10f(float _X); } 
#line 729
extern "C" { __declspec(dllimport) float __cdecl logf(float _X); } 
#line 730
extern "C" { __declspec(dllimport) float __cdecl modff(float _X, float * _Y); } 
#line 731
extern "C" { __declspec(dllimport) float __cdecl powf(float _X, float _Y); } 
#line 732
extern "C" { __declspec(dllimport) float __cdecl sinf(float _X); } 
#line 733
extern "C" { __declspec(dllimport) float __cdecl sinhf(float _X); } 
#line 734
extern "C" { __declspec(dllimport) float __cdecl sqrtf(float _X); } 
#line 735
extern "C" { __declspec(dllimport) float __cdecl tanf(float _X); } 
#line 736
extern "C" { __declspec(dllimport) float __cdecl tanhf(float _X); } 
#line 790 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { __declspec(dllimport) long double __cdecl acoshl(long double _X); } 
#line 792
extern "C" { __inline long double __cdecl acosl(long double _X) 
#line 793
{ 
#line 794
return acos((double)_X); 
#line 795
} } 
#line 797
extern "C" { __declspec(dllimport) long double __cdecl asinhl(long double _X); } 
#line 799
extern "C" { __inline long double __cdecl asinl(long double _X) 
#line 800
{ 
#line 801
return asin((double)_X); 
#line 802
} } 
#line 804
extern "C" { __inline long double __cdecl atan2l(long double _Y, long double _X) 
#line 805
{ 
#line 806
return atan2((double)_Y, (double)_X); 
#line 807
} } 
#line 809
extern "C" { __declspec(dllimport) long double __cdecl atanhl(long double _X); } 
#line 811
extern "C" { __inline long double __cdecl atanl(long double _X) 
#line 812
{ 
#line 813
return atan((double)_X); 
#line 814
} } 
#line 816
extern "C" { __declspec(dllimport) long double __cdecl cbrtl(long double _X); } 
#line 818
extern "C" { __inline long double __cdecl ceill(long double _X) 
#line 819
{ 
#line 820
return ceil((double)_X); 
#line 821
} } 
#line 823
extern "C" { __inline long double __cdecl _chgsignl(long double _X) 
#line 824
{ 
#line 825
return _chgsign((double)_X); 
#line 826
} } 
#line 828
extern "C" { __declspec(dllimport) long double __cdecl copysignl(long double _X, long double _Y); } 
#line 830
extern "C" { __inline long double __cdecl _copysignl(long double _X, long double _Y) 
#line 831
{ 
#line 832
return _copysign((double)_X, (double)_Y); 
#line 833
} } 
#line 835
extern "C" { __inline long double __cdecl coshl(long double _X) 
#line 836
{ 
#line 837
return cosh((double)_X); 
#line 838
} } 
#line 840
extern "C" { __inline long double __cdecl cosl(long double _X) 
#line 841
{ 
#line 842
return cos((double)_X); 
#line 843
} } 
#line 845
extern "C" { __declspec(dllimport) long double __cdecl erfl(long double _X); } 
#line 846
extern "C" { __declspec(dllimport) long double __cdecl erfcl(long double _X); } 
#line 848
extern "C" { __inline long double __cdecl expl(long double _X) 
#line 849
{ 
#line 850
return exp((double)_X); 
#line 851
} } 
#line 853
extern "C" { __declspec(dllimport) long double __cdecl exp2l(long double _X); } 
#line 854
extern "C" { __declspec(dllimport) long double __cdecl expm1l(long double _X); } 
#line 856
extern "C" { __inline long double __cdecl fabsl(long double _X) 
#line 857
{ 
#line 858
return fabs((double)_X); 
#line 859
} } 
#line 861
extern "C" { __declspec(dllimport) long double __cdecl fdiml(long double _X, long double _Y); } 
#line 863
extern "C" { __inline long double __cdecl floorl(long double _X) 
#line 864
{ 
#line 865
return floor((double)_X); 
#line 866
} } 
#line 868
extern "C" { __declspec(dllimport) long double __cdecl fmal(long double _X, long double _Y, long double _Z); } 
#line 869
extern "C" { __declspec(dllimport) long double __cdecl fmaxl(long double _X, long double _Y); } 
#line 870
extern "C" { __declspec(dllimport) long double __cdecl fminl(long double _X, long double _Y); } 
#line 872
extern "C" { __inline long double __cdecl fmodl(long double _X, long double _Y) 
#line 873
{ 
#line 874
return fmod((double)_X, (double)_Y); 
#line 875
} } 
#line 877
extern "C" { __inline long double __cdecl frexpl(long double _X, int *_Y) 
#line 878
{ 
#line 879
return frexp((double)_X, _Y); 
#line 880
} } 
#line 882
extern "C" { __declspec(dllimport) int __cdecl ilogbl(long double _X); } 
#line 884
extern "C" { __inline long double __cdecl _hypotl(long double _X, long double _Y) 
#line 885
{ 
#line 886
return _hypot((double)_X, (double)_Y); 
#line 887
} } 
#line 889
extern "C" { __inline long double __cdecl hypotl(long double _X, long double _Y) 
#line 890
{ 
#line 891
return _hypot((double)_X, (double)_Y); 
#line 892
} } 
#line 894
extern "C" { __inline long double __cdecl ldexpl(long double _X, int _Y) 
#line 895
{ 
#line 896
return ldexp((double)_X, _Y); 
#line 897
} } 
#line 899
extern "C" { __declspec(dllimport) long double __cdecl lgammal(long double _X); } 
#line 900
extern "C" { __declspec(dllimport) __int64 __cdecl llrintl(long double _X); } 
#line 901
extern "C" { __declspec(dllimport) __int64 __cdecl llroundl(long double _X); } 
#line 903
extern "C" { __inline long double __cdecl logl(long double _X) 
#line 904
{ 
#line 905
return log((double)_X); 
#line 906
} } 
#line 908
extern "C" { __inline long double __cdecl log10l(long double _X) 
#line 909
{ 
#line 910
return log10((double)_X); 
#line 911
} } 
#line 913
extern "C" { __declspec(dllimport) long double __cdecl log1pl(long double _X); } 
#line 914
extern "C" { __declspec(dllimport) long double __cdecl log2l(long double _X); } 
#line 915
extern "C" { __declspec(dllimport) long double __cdecl logbl(long double _X); } 
#line 916
extern "C" { __declspec(dllimport) long __cdecl lrintl(long double _X); } 
#line 917
extern "C" { __declspec(dllimport) long __cdecl lroundl(long double _X); } 
#line 919
extern "C" { __inline long double __cdecl modfl(long double _X, long double *_Y) 
#line 920
{ 
#line 921
double _F, _I; 
#line 922
_F = modf((double)_X, &_I); 
#line 923
(*_Y) = _I; 
#line 924
return _F; 
#line 925
} } 
#line 926
extern "C" { __declspec(dllimport) long double __cdecl nanl(const char *); } 
#line 927
extern "C" { __declspec(dllimport) long double __cdecl nearbyintl(long double _X); } 
#line 928
extern "C" { __declspec(dllimport) long double __cdecl nextafterl(long double _X, long double _Y); } 
#line 929
extern "C" { __declspec(dllimport) long double __cdecl nexttowardl(long double _X, long double _Y); } 
#line 931
extern "C" { __inline long double __cdecl powl(long double _X, long double _Y) 
#line 932
{ 
#line 933
return pow((double)_X, (double)_Y); 
#line 934
} } 
#line 936
extern "C" { __declspec(dllimport) long double __cdecl remainderl(long double _X, long double _Y); } 
#line 937
extern "C" { __declspec(dllimport) long double __cdecl remquol(long double _X, long double _Y, int * _Z); } 
#line 938
extern "C" { __declspec(dllimport) long double __cdecl rintl(long double _X); } 
#line 939
extern "C" { __declspec(dllimport) long double __cdecl roundl(long double _X); } 
#line 940
extern "C" { __declspec(dllimport) long double __cdecl scalblnl(long double _X, long _Y); } 
#line 941
extern "C" { __declspec(dllimport) long double __cdecl scalbnl(long double _X, int _Y); } 
#line 943
extern "C" { __inline long double __cdecl sinhl(long double _X) 
#line 944
{ 
#line 945
return sinh((double)_X); 
#line 946
} } 
#line 948
extern "C" { __inline long double __cdecl sinl(long double _X) 
#line 949
{ 
#line 950
return sin((double)_X); 
#line 951
} } 
#line 953
extern "C" { __inline long double __cdecl sqrtl(long double _X) 
#line 954
{ 
#line 955
return sqrt((double)_X); 
#line 956
} } 
#line 958
extern "C" { __inline long double __cdecl tanhl(long double _X) 
#line 959
{ 
#line 960
return tanh((double)_X); 
#line 961
} } 
#line 963
extern "C" { __inline long double __cdecl tanl(long double _X) 
#line 964
{ 
#line 965
return tan((double)_X); 
#line 966
} } 
#line 968
extern "C" { __declspec(dllimport) long double __cdecl tgammal(long double _X); } 
#line 969
extern "C" { __declspec(dllimport) long double __cdecl truncl(long double _X); } 
#line 992 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" __declspec(dllimport) double HUGE; 
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
extern "C" { __declspec(dllimport) double __cdecl j0(double _X); } 
#line 998
extern "C" { __declspec(dllimport) double __cdecl j1(double _X); } 
#line 999
extern "C" { __declspec(dllimport) double __cdecl jn(int _X, double _Y); } 
#line 1000
extern "C" { __declspec(dllimport) double __cdecl y0(double _X); } 
#line 1001
extern "C" { __declspec(dllimport) double __cdecl y1(double _X); } 
#line 1002
extern "C" { __declspec(dllimport) double __cdecl yn(int _X, double _Y); } 
#line 1012 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
template < class _Ty > inline
        _Ty _Pow_int ( _Ty _X, int _Y ) throw ( )
        { unsigned int _N;
        if ( _Y >= 0 )
                _N = ( unsigned int ) _Y;
        else
                _N = ( unsigned int ) ( - _Y );
        for ( _Ty _Z = _Ty ( 1 );; _X *= _X )
                { if ( ( _N & 1 ) != 0 )
                        _Z *= _X;
                if ( ( _N >>= 1 ) == 0 )
                        return ( _Y < 0 ? _Ty ( 1 ) / _Z : _Z ); } }
#line 1025
inline double __cdecl abs(double _X) throw() 
#line 1026
{ return fabs(_X); } 
#line 1027
inline double __cdecl pow(double _X, int _Y) throw() 
#line 1028
{ return _Pow_int(_X, _Y); } 
#line 1029
inline float __cdecl abs(float _X) throw() 
#line 1030
{ return fabsf(_X); } 
#line 1031
inline float __cdecl acos(float _X) throw() 
#line 1032
{ return acosf(_X); } 
#line 1033
inline float __cdecl acosh(float _X) throw() 
#line 1034
{ return acoshf(_X); } 
#line 1035
inline float __cdecl asin(float _X) throw() 
#line 1036
{ return asinf(_X); } 
#line 1037
inline float __cdecl asinh(float _X) throw() 
#line 1038
{ return asinhf(_X); } 
#line 1039
inline float __cdecl atan(float _X) throw() 
#line 1040
{ return atanf(_X); } 
#line 1041
inline float __cdecl atanh(float _X) throw() 
#line 1042
{ return atanhf(_X); } 
#line 1043
inline float __cdecl atan2(float _Y, float _X) throw() 
#line 1044
{ return atan2f(_Y, _X); } 
#line 1045
inline float __cdecl cbrt(float _X) throw() 
#line 1046
{ return cbrtf(_X); } 
#line 1047
inline float __cdecl ceil(float _X) throw() 
#line 1048
{ return ceilf(_X); } 
#line 1049
inline float __cdecl copysign(float _X, float _Y) throw() 
#line 1050
{ return copysignf(_X, _Y); } 
#line 1051
inline float __cdecl cos(float _X) throw() 
#line 1052
{ return cosf(_X); } 
#line 1053
inline float __cdecl cosh(float _X) throw() 
#line 1054
{ return coshf(_X); } 
#line 1055
inline float __cdecl erf(float _X) throw() 
#line 1056
{ return erff(_X); } 
#line 1057
inline float __cdecl erfc(float _X) throw() 
#line 1058
{ return erfcf(_X); } 
#line 1059
inline float __cdecl exp(float _X) throw() 
#line 1060
{ return expf(_X); } 
#line 1061
inline float __cdecl exp2(float _X) throw() 
#line 1062
{ return exp2f(_X); } 
#line 1063
inline float __cdecl expm1(float _X) throw() 
#line 1064
{ return expm1f(_X); } 
#line 1065
inline float __cdecl fabs(float _X) throw() 
#line 1066
{ return fabsf(_X); } 
#line 1067
inline float __cdecl fdim(float _X, float _Y) throw() 
#line 1068
{ return fdimf(_X, _Y); } 
#line 1069
inline float __cdecl floor(float _X) throw() 
#line 1070
{ return floorf(_X); } 
#line 1071
inline float __cdecl fma(float _X, float _Y, float _Z) throw() 
#line 1072
{ return fmaf(_X, _Y, _Z); } 
#line 1073
inline float __cdecl fmax(float _X, float _Y) throw() 
#line 1074
{ return fmaxf(_X, _Y); } 
#line 1075
inline float __cdecl fmin(float _X, float _Y) throw() 
#line 1076
{ return fminf(_X, _Y); } 
#line 1077
inline float __cdecl fmod(float _X, float _Y) throw() 
#line 1078
{ return fmodf(_X, _Y); } 
#line 1079
inline float __cdecl frexp(float _X, int *_Y) throw() 
#line 1080
{ return frexpf(_X, _Y); } 
#line 1081
inline float __cdecl hypot(float _X, float _Y) throw() 
#line 1082
{ return hypotf(_X, _Y); } 
#line 1083
inline int __cdecl ilogb(float _X) throw() 
#line 1084
{ return ilogbf(_X); } 
#line 1085
inline float __cdecl ldexp(float _X, int _Y) throw() 
#line 1086
{ return ldexpf(_X, _Y); } 
#line 1087
inline float __cdecl lgamma(float _X) throw() 
#line 1088
{ return lgammaf(_X); } 
#line 1089
inline __int64 __cdecl llrint(float _X) throw() 
#line 1090
{ return llrintf(_X); } 
#line 1091
inline __int64 __cdecl llround(float _X) throw() 
#line 1092
{ return llroundf(_X); } 
#line 1093
inline float __cdecl log(float _X) throw() 
#line 1094
{ return logf(_X); } 
#line 1095
inline float __cdecl log10(float _X) throw() 
#line 1096
{ return log10f(_X); } 
#line 1097
inline float __cdecl log1p(float _X) throw() 
#line 1098
{ return log1pf(_X); } 
#line 1099
inline float __cdecl log2(float _X) throw() 
#line 1100
{ return log2f(_X); } 
#line 1101
inline float __cdecl logb(float _X) throw() 
#line 1102
{ return logbf(_X); } 
#line 1103
inline long __cdecl lrint(float _X) throw() 
#line 1104
{ return lrintf(_X); } 
#line 1105
inline long __cdecl lround(float _X) throw() 
#line 1106
{ return lroundf(_X); } 
#line 1107
inline float __cdecl modf(float _X, float *_Y) throw() 
#line 1108
{ return modff(_X, _Y); } 
#line 1109
inline float __cdecl nearbyint(float _X) throw() 
#line 1110
{ return nearbyintf(_X); } 
#line 1111
inline float __cdecl nextafter(float _X, float _Y) throw() 
#line 1112
{ return nextafterf(_X, _Y); } 
#line 1113
inline float __cdecl nexttoward(float _X, long double _Y) throw() 
#line 1114
{ return nexttowardf(_X, _Y); } 
#line 1115
inline float __cdecl pow(float _X, float _Y) throw() 
#line 1116
{ return powf(_X, _Y); } 
#line 1117
inline float __cdecl pow(float _X, int _Y) throw() 
#line 1118
{ return _Pow_int(_X, _Y); } 
#line 1119
inline float __cdecl remainder(float _X, float _Y) throw() 
#line 1120
{ return remainderf(_X, _Y); } 
#line 1121
inline float __cdecl remquo(float _X, float _Y, int *_Z) throw() 
#line 1122
{ return remquof(_X, _Y, _Z); } 
#line 1123
inline float __cdecl rint(float _X) throw() 
#line 1124
{ return rintf(_X); } 
#line 1125
inline float __cdecl round(float _X) throw() 
#line 1126
{ return roundf(_X); } 
#line 1127
inline float __cdecl scalbln(float _X, long _Y) throw() 
#line 1128
{ return scalblnf(_X, _Y); } 
#line 1129
inline float __cdecl scalbn(float _X, int _Y) throw() 
#line 1130
{ return scalbnf(_X, _Y); } 
#line 1131
inline float __cdecl sin(float _X) throw() 
#line 1132
{ return sinf(_X); } 
#line 1133
inline float __cdecl sinh(float _X) throw() 
#line 1134
{ return sinhf(_X); } 
#line 1135
inline float __cdecl sqrt(float _X) throw() 
#line 1136
{ return sqrtf(_X); } 
#line 1137
inline float __cdecl tan(float _X) throw() 
#line 1138
{ return tanf(_X); } 
#line 1139
inline float __cdecl tanh(float _X) throw() 
#line 1140
{ return tanhf(_X); } 
#line 1141
inline float __cdecl tgamma(float _X) throw() 
#line 1142
{ return tgammaf(_X); } 
#line 1143
inline float __cdecl trunc(float _X) throw() 
#line 1144
{ return truncf(_X); } 
#line 1145
inline long double __cdecl abs(long double _X) throw() 
#line 1146
{ return fabsl(_X); } 
#line 1147
inline long double __cdecl acos(long double _X) throw() 
#line 1148
{ return acosl(_X); } 
#line 1149
inline long double __cdecl acosh(long double _X) throw() 
#line 1150
{ return acoshl(_X); } 
#line 1151
inline long double __cdecl asin(long double _X) throw() 
#line 1152
{ return asinl(_X); } 
#line 1153
inline long double __cdecl asinh(long double _X) throw() 
#line 1154
{ return asinhl(_X); } 
#line 1155
inline long double __cdecl atan(long double _X) throw() 
#line 1156
{ return atanl(_X); } 
#line 1157
inline long double __cdecl atanh(long double _X) throw() 
#line 1158
{ return atanhl(_X); } 
#line 1159
inline long double __cdecl atan2(long double _Y, long double _X) throw() 
#line 1160
{ return atan2l(_Y, _X); } 
#line 1161
inline long double __cdecl cbrt(long double _X) throw() 
#line 1162
{ return cbrtl(_X); } 
#line 1163
inline long double __cdecl ceil(long double _X) throw() 
#line 1164
{ return ceill(_X); } 
#line 1165
inline long double __cdecl copysign(long double _X, long double _Y) throw() 
#line 1166
{ return copysignl(_X, _Y); } 
#line 1167
inline long double __cdecl cos(long double _X) throw() 
#line 1168
{ return cosl(_X); } 
#line 1169
inline long double __cdecl cosh(long double _X) throw() 
#line 1170
{ return coshl(_X); } 
#line 1171
inline long double __cdecl erf(long double _X) throw() 
#line 1172
{ return erfl(_X); } 
#line 1173
inline long double __cdecl erfc(long double _X) throw() 
#line 1174
{ return erfcl(_X); } 
#line 1175
inline long double __cdecl exp(long double _X) throw() 
#line 1176
{ return expl(_X); } 
#line 1177
inline long double __cdecl exp2(long double _X) throw() 
#line 1178
{ return exp2l(_X); } 
#line 1179
inline long double __cdecl expm1(long double _X) throw() 
#line 1180
{ return expm1l(_X); } 
#line 1181
inline long double __cdecl fabs(long double _X) throw() 
#line 1182
{ return fabsl(_X); } 
#line 1183
inline long double __cdecl fdim(long double _X, long double _Y) throw() 
#line 1184
{ return fdiml(_X, _Y); } 
#line 1185
inline long double __cdecl floor(long double _X) throw() 
#line 1186
{ return floorl(_X); } 
#line 1187
inline long double __cdecl fma(long double _X, long double _Y, long double _Z) throw() 
#line 1188
{ return fmal(_X, _Y, _Z); } 
#line 1189
inline long double __cdecl fmax(long double _X, long double _Y) throw() 
#line 1190
{ return fmaxl(_X, _Y); } 
#line 1191
inline long double __cdecl fmin(long double _X, long double _Y) throw() 
#line 1192
{ return fminl(_X, _Y); } 
#line 1193
inline long double __cdecl fmod(long double _X, long double _Y) throw() 
#line 1194
{ return fmodl(_X, _Y); } 
#line 1195
inline long double __cdecl frexp(long double _X, int *_Y) throw() 
#line 1196
{ return frexpl(_X, _Y); } 
#line 1197
inline long double __cdecl hypot(long double _X, long double _Y) throw() 
#line 1198
{ return hypotl(_X, _Y); } 
#line 1199
inline int __cdecl ilogb(long double _X) throw() 
#line 1200
{ return ilogbl(_X); } 
#line 1201
inline long double __cdecl ldexp(long double _X, int _Y) throw() 
#line 1202
{ return ldexpl(_X, _Y); } 
#line 1203
inline long double __cdecl lgamma(long double _X) throw() 
#line 1204
{ return lgammal(_X); } 
#line 1205
inline __int64 __cdecl llrint(long double _X) throw() 
#line 1206
{ return llrintl(_X); } 
#line 1207
inline __int64 __cdecl llround(long double _X) throw() 
#line 1208
{ return llroundl(_X); } 
#line 1209
inline long double __cdecl log(long double _X) throw() 
#line 1210
{ return logl(_X); } 
#line 1211
inline long double __cdecl log10(long double _X) throw() 
#line 1212
{ return log10l(_X); } 
#line 1213
inline long double __cdecl log1p(long double _X) throw() 
#line 1214
{ return log1pl(_X); } 
#line 1215
inline long double __cdecl log2(long double _X) throw() 
#line 1216
{ return log2l(_X); } 
#line 1217
inline long double __cdecl logb(long double _X) throw() 
#line 1218
{ return logbl(_X); } 
#line 1219
inline long __cdecl lrint(long double _X) throw() 
#line 1220
{ return lrintl(_X); } 
#line 1221
inline long __cdecl lround(long double _X) throw() 
#line 1222
{ return lroundl(_X); } 
#line 1223
inline long double __cdecl modf(long double _X, long double *_Y) throw() 
#line 1224
{ return modfl(_X, _Y); } 
#line 1225
inline long double __cdecl nearbyint(long double _X) throw() 
#line 1226
{ return nearbyintl(_X); } 
#line 1227
inline long double __cdecl nextafter(long double _X, long double _Y) throw() 
#line 1228
{ return nextafterl(_X, _Y); } 
#line 1229
inline long double __cdecl nexttoward(long double _X, long double _Y) throw() 
#line 1230
{ return nexttowardl(_X, _Y); } 
#line 1231
inline long double __cdecl pow(long double _X, long double _Y) throw() 
#line 1232
{ return powl(_X, _Y); } 
#line 1233
inline long double __cdecl pow(long double _X, int _Y) throw() 
#line 1234
{ return _Pow_int(_X, _Y); } 
#line 1235
inline long double __cdecl remainder(long double _X, long double _Y) throw() 
#line 1236
{ return remainderl(_X, _Y); } 
#line 1237
inline long double __cdecl remquo(long double _X, long double _Y, int *_Z) throw() 
#line 1238
{ return remquol(_X, _Y, _Z); } 
#line 1239
inline long double __cdecl rint(long double _X) throw() 
#line 1240
{ return rintl(_X); } 
#line 1241
inline long double __cdecl round(long double _X) throw() 
#line 1242
{ return roundl(_X); } 
#line 1243
inline long double __cdecl scalbln(long double _X, long _Y) throw() 
#line 1244
{ return scalblnl(_X, _Y); } 
#line 1245
inline long double __cdecl scalbn(long double _X, int _Y) throw() 
#line 1246
{ return scalbnl(_X, _Y); } 
#line 1247
inline long double __cdecl sin(long double _X) throw() 
#line 1248
{ return sinl(_X); } 
#line 1249
inline long double __cdecl sinh(long double _X) throw() 
#line 1250
{ return sinhl(_X); } 
#line 1251
inline long double __cdecl sqrt(long double _X) throw() 
#line 1252
{ return sqrtl(_X); } 
#line 1253
inline long double __cdecl tan(long double _X) throw() 
#line 1254
{ return tanl(_X); } 
#line 1255
inline long double __cdecl tanh(long double _X) throw() 
#line 1256
{ return tanhl(_X); } 
#line 1257
inline long double __cdecl tgamma(long double _X) throw() 
#line 1258
{ return tgammal(_X); } 
#line 1259
inline long double __cdecl trunc(long double _X) throw() 
#line 1260
{ return truncl(_X); } 
#line 1265 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\math.h"
#pragma pack ( pop )
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
#pragma pack ( push, 8 )
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { typedef int (__cdecl *_onexit_t)(void); }
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { typedef 
#line 75
struct _div_t { 
#line 76
int quot; 
#line 77
int rem; 
#line 78
} div_t; }
#line 83
extern "C" { typedef 
#line 80
struct _ldiv_t { 
#line 81
long quot; 
#line 82
long rem; 
#line 83
} ldiv_t; }
#line 88
extern "C" { typedef 
#line 85
struct _lldiv_t { 
#line 86
__int64 quot; 
#line 87
__int64 rem; 
#line 88
} lldiv_t; }
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
#pragma pack ( 4 )
#line 105
extern "C" { typedef 
#line 103
struct { 
#line 104
unsigned char ld[10]; 
#line 105
} _LDOUBLE; }
#pragma pack ( )
#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { typedef 
#line 122
struct { 
#line 123
double x; 
#line 124
} _CRT_DOUBLE; }
#line 128
extern "C" { typedef 
#line 126
struct { 
#line 127
float f; 
#line 128
} _CRT_FLOAT; }
#line 139
extern "C" { typedef 
#line 134
struct { 
#line 138
long double x; 
#line 139
} _LONGDOUBLE; }
#line 143
#pragma pack ( 4 )
#line 146
extern "C" { typedef 
#line 144
struct { 
#line 145
unsigned char ld12[12]; 
#line 146
} _LDBL12; }
#pragma pack ( )
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" __declspec(dllimport) int __mb_cur_max; 
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) int __cdecl ___mb_cur_max_func(); } 
#line 176
extern "C" { __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t); } 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { typedef void (__cdecl *_purecall_handler)(void); }
#line 218
extern "C" { __declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(_purecall_handler _Handler); } 
#line 219
extern "C" { __declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(); } 
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { typedef void (__cdecl *_invalid_parameter_handler)(const __wchar_t *, const __wchar_t *, const __wchar_t *, unsigned, uintptr_t); }
#line 238
extern "C" { __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(_invalid_parameter_handler _Handler); } 
#line 239
extern "C" { __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(); } 
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) unsigned long *__cdecl __doserrno(); } 
#line 255
extern "C" { errno_t __cdecl _set_doserrno(unsigned long _Value); } 
#line 256
extern "C" { errno_t __cdecl _get_doserrno(unsigned long * _Value); } 
#line 259
extern "C" { __declspec(dllimport) char **__cdecl __sys_errlist(); } 
#line 262
extern "C" { __declspec(dllimport) int *__cdecl __sys_nerr(); } 
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" __declspec(dllimport) int __argc; 
#line 289
extern "C" __declspec(dllimport) char **__argv; 
#line 290
extern "C" __declspec(dllimport) __wchar_t **__wargv; 
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" __declspec(dllimport) char **_environ; 
#line 307
extern "C" __declspec(dllimport) __wchar_t **_wenviron; 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" __declspec(dllimport) char *_pgmptr; 
#line 312
extern "C" __declspec(dllimport) __wchar_t *_wpgmptr; 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { errno_t __cdecl _get_pgmptr(char ** _Value); } 
#line 340
extern "C" { errno_t __cdecl _get_wpgmptr(__wchar_t ** _Value); } 
#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" __declspec(dllimport) int _fmode; 
#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) errno_t __cdecl _set_fmode(int _Mode); } 
#line 354
extern "C" { __declspec(dllimport) errno_t __cdecl _get_fmode(int * _PMode); } 
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
template< class _CountofType, size_t _SizeOfArray> char (*__countof_helper(__unaligned _CountofType (& _Array)[_SizeOfArray]))[_SizeOfArray]; 
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) __declspec(noreturn) void __cdecl exit(int _Code); } 
#line 378
extern "C" { __declspec(dllimport) __declspec(noreturn) void __cdecl _exit(int _Code); } 
#line 379
extern "C" { __declspec(dllimport) __declspec(noreturn) void __cdecl abort(); } 
#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) unsigned __cdecl _set_abort_behavior(unsigned _Flags, unsigned _Mask); } 
#line 384
extern "C" { int __cdecl abs(int _X); } 
#line 385
extern "C" { long __cdecl labs(long _X); } 
#line 386
extern "C" { __int64 __cdecl llabs(__int64 _X); } 
#line 388
extern "C" { __int64 __cdecl _abs64(__int64); } 
#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { int __cdecl atexit(void (__cdecl *)(void)); } 
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) double __cdecl atof(const char * _String); } 
#line 429
extern "C" { __declspec(dllimport) double __cdecl _atof_l(const char * _String, _locale_t _Locale); } 
#line 430
extern "C" { __declspec(dllimport) int __cdecl atoi(const char * _Str); } 
#line 431
extern "C" { __declspec(dllimport) int __cdecl _atoi_l(const char * _Str, _locale_t _Locale); } 
#line 432
extern "C" { __declspec(dllimport) long __cdecl atol(const char * _Str); } 
#line 433
extern "C" { __declspec(dllimport) long __cdecl _atol_l(const char * _Str, _locale_t _Locale); } 
#line 434
extern "C" { __declspec(dllimport) __int64 __cdecl atoll(const char * _Str); } 
#line 435
extern "C" { __declspec(dllimport) __int64 __cdecl _atoll_l(const char * _Str, _locale_t _Locale); } 
#line 439
extern "C" { __declspec(dllimport) void *__cdecl bsearch_s(const void * _Key, const void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); } 
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) void *__cdecl bsearch(const void * _Key, const void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); } 
#line 448
extern "C" { __declspec(dllimport) void __cdecl qsort_s(void * _Base, rsize_t _NumOfElements, rsize_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context); } 
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) void __cdecl qsort(void * _Base, size_t _NumOfElements, size_t _SizeOfElements, int (__cdecl * _PtFuncCompare)(const void *, const void *)); } 
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { unsigned short __cdecl _byteswap_ushort(unsigned short _Short); } 
#line 457
extern "C" { unsigned long __cdecl _byteswap_ulong(unsigned long _Long); } 
#line 458
extern "C" { unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Int64); } 
#line 459
extern "C" { __declspec(dllimport) div_t __cdecl div(int _Numerator, int _Denominator); } 
#line 462
extern "C" { __declspec(dllimport) char *__cdecl getenv(const char * _VarName); } 
#line 464
extern "C" { __declspec(dllimport) errno_t __cdecl getenv_s(size_t * _ReturnSize, char * _DstBuf, rsize_t _DstSize, const char * _VarName); } 
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
template < size_t _Size > inline errno_t __cdecl getenv_s ( size_t * _ReturnSize, char ( & _Dest ) [ _Size ], const char * _VarName ) throw ( ) { return getenv_s ( _ReturnSize, _Dest, _Size, _VarName ); }
#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) errno_t __cdecl _dupenv_s(char ** _PBuffer, size_t * _PBufferSizeInBytes, const char * _VarName); } 
#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) errno_t __cdecl _itoa_s(int _Value, char * _DstBuf, size_t _Size, int _Radix); } 
#line 480
template < size_t _Size > inline errno_t __cdecl _itoa_s ( int _Value, char ( & _Dest ) [ _Size ], int _Radix ) throw ( ) { return _itoa_s ( _Value, _Dest, _Size, _Radix ); }
#line 481
extern "C" { __declspec(dllimport) char *__cdecl _itoa(int _Value, char * _Dest, int _Radix); } 
#line 482
extern "C" { __declspec(dllimport) errno_t __cdecl _i64toa_s(__int64 _Val, char * _DstBuf, size_t _Size, int _Radix); } 
#line 483
extern "C" { __declspec(dllimport) char *__cdecl _i64toa(__int64 _Val, char * _DstBuf, int _Radix); } 
#line 484
extern "C" { __declspec(dllimport) errno_t __cdecl _ui64toa_s(unsigned __int64 _Val, char * _DstBuf, size_t _Size, int _Radix); } 
#line 485
extern "C" { __declspec(dllimport) char *__cdecl _ui64toa(unsigned __int64 _Val, char * _DstBuf, int _Radix); } 
#line 486
extern "C" { __declspec(dllimport) __int64 __cdecl _atoi64(const char * _String); } 
#line 487
extern "C" { __declspec(dllimport) __int64 __cdecl _atoi64_l(const char * _String, _locale_t _Locale); } 
#line 488
extern "C" { __declspec(dllimport) __int64 __cdecl _strtoi64(const char * _String, char ** _EndPtr, int _Radix); } 
#line 489
extern "C" { __declspec(dllimport) __int64 __cdecl _strtoi64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 490
extern "C" { __declspec(dllimport) unsigned __int64 __cdecl _strtoui64(const char * _String, char ** _EndPtr, int _Radix); } 
#line 491
extern "C" { __declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(const char * _String, char ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 492
extern "C" { __declspec(dllimport) ldiv_t __cdecl ldiv(long _Numerator, long _Denominator); } 
#line 493
extern "C" { __declspec(dllimport) lldiv_t __cdecl lldiv(__int64 _Numerator, __int64 _Denominator); } 
#line 497
inline long abs(long _X) throw() 
#line 498
{ 
#line 499
return labs(_X); 
#line 500
} 
#line 501
inline __int64 abs(__int64 _X) throw() 
#line 502
{ 
#line 503
return llabs(_X); 
#line 504
} 
#line 505
inline ldiv_t div(long _A1, long _A2) throw() 
#line 506
{ 
#line 507
return ldiv(_A1, _A2); 
#line 508
} 
#line 509
inline lldiv_t div(__int64 _A1, __int64 _A2) throw() 
#line 510
{ 
#line 511
return lldiv(_A1, _A2); 
#line 512
} 
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) errno_t __cdecl _ltoa_s(long _Val, char * _DstBuf, size_t _Size, int _Radix); } 
#line 516
template < size_t _Size > inline errno_t __cdecl _ltoa_s ( long _Value, char ( & _Dest ) [ _Size ], int _Radix ) throw ( ) { return _ltoa_s ( _Value, _Dest, _Size, _Radix ); }
#line 517
extern "C" { __declspec(dllimport) char *__cdecl _ltoa(long _Value, char * _Dest, int _Radix); } 
#line 518
extern "C" { __declspec(dllimport) int __cdecl mblen(const char * _Ch, size_t _MaxCount); } 
#line 519
extern "C" { __declspec(dllimport) int __cdecl _mblen_l(const char * _Ch, size_t _MaxCount, _locale_t _Locale); } 
#line 520
extern "C" { __declspec(dllimport) size_t __cdecl _mbstrlen(const char * _Str); } 
#line 521
extern "C" { __declspec(dllimport) size_t __cdecl _mbstrlen_l(const char * _Str, _locale_t _Locale); } 
#line 522
extern "C" { __declspec(dllimport) size_t __cdecl _mbstrnlen(const char * _Str, size_t _MaxCount); } 
#line 523
extern "C" { __declspec(dllimport) size_t __cdecl _mbstrnlen_l(const char * _Str, size_t _MaxCount, _locale_t _Locale); } 
#line 524
extern "C" { __declspec(dllimport) int __cdecl mbtowc(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes); } 
#line 525
extern "C" { __declspec(dllimport) int __cdecl _mbtowc_l(__wchar_t * _DstCh, const char * _SrcCh, size_t _SrcSizeInBytes, _locale_t _Locale); } 
#line 526
extern "C" { __declspec(dllimport) errno_t __cdecl mbstowcs_s(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount); } 
#line 527
template < size_t _Size > inline errno_t __cdecl mbstowcs_s ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], const char * _Source, size_t _MaxCount ) throw ( ) { return mbstowcs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }
#line 528
extern "C" { __declspec(dllimport) size_t __cdecl mbstowcs(__wchar_t * _Dest, const char * _Source, size_t _MaxCount); } 
#line 530
extern "C" { __declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(size_t * _PtNumOfCharConverted, __wchar_t * _DstBuf, size_t _SizeInWords, const char * _SrcBuf, size_t _MaxCount, _locale_t _Locale); } 
#line 531
template < size_t _Size > inline errno_t __cdecl _mbstowcs_s_l ( size_t * _PtNumOfCharConverted, wchar_t ( & _Dest ) [ _Size ], const char * _Source, size_t _MaxCount, _locale_t _Locale ) throw ( ) { return _mbstowcs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }
#line 532
extern "C" { __declspec(dllimport) size_t __cdecl _mbstowcs_l(__wchar_t * _Dest, const char * _Source, size_t _MaxCount, _locale_t _Locale); } 
#line 534
extern "C" { __declspec(dllimport) int __cdecl rand(); } 
#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) int __cdecl _set_error_mode(int _Mode); } 
#line 541
extern "C" { __declspec(dllimport) void __cdecl srand(unsigned _Seed); } 
#line 542
extern "C" { __declspec(dllimport) double __cdecl strtod(const char * _Str, char ** _EndPtr); } 
#line 543
extern "C" { __declspec(dllimport) double __cdecl _strtod_l(const char * _Str, char ** _EndPtr, _locale_t _Locale); } 
#line 544
extern "C" { __declspec(dllimport) long __cdecl strtol(const char * _Str, char ** _EndPtr, int _Radix); } 
#line 545
extern "C" { __declspec(dllimport) long __cdecl _strtol_l(const char * _Str, char ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 546
extern "C" { __declspec(dllimport) __int64 __cdecl strtoll(const char * _Str, char ** _EndPtr, int _Radix); } 
#line 547
extern "C" { __declspec(dllimport) __int64 __cdecl _strtoll_l(const char * _Str, char ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 548
extern "C" { __declspec(dllimport) unsigned long __cdecl strtoul(const char * _Str, char ** _EndPtr, int _Radix); } 
#line 549
extern "C" { __declspec(dllimport) unsigned long __cdecl _strtoul_l(const char * _Str, char ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 550
extern "C" { __declspec(dllimport) unsigned __int64 __cdecl strtoull(const char * _Str, char ** _EndPtr, int _Radix); } 
#line 551
extern "C" { __declspec(dllimport) unsigned __int64 __cdecl _strtoull_l(const char * _Str, char ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 552
extern "C" { __declspec(dllimport) long double __cdecl strtold(const char * _Str, char ** _EndPtr); } 
#line 553
extern "C" { __declspec(dllimport) long double __cdecl _strtold_l(const char * _Str, char ** _EndPtr, _locale_t _Locale); } 
#line 554
extern "C" { __declspec(dllimport) float __cdecl strtof(const char * _Str, char ** _EndPtr); } 
#line 555
extern "C" { __declspec(dllimport) float __cdecl _strtof_l(const char * _Str, char ** _EndPtr, _locale_t _Locale); } 
#line 560
extern "C" { __declspec(dllimport) int __cdecl system(const char * _Command); } 
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) errno_t __cdecl _ultoa_s(unsigned long _Val, char * _DstBuf, size_t _Size, int _Radix); } 
#line 565
template < size_t _Size > inline errno_t __cdecl _ultoa_s ( unsigned long _Value, char ( & _Dest ) [ _Size ], int _Radix ) throw ( ) { return _ultoa_s ( _Value, _Dest, _Size, _Radix ); }
#line 566
extern "C" { __declspec(dllimport) char *__cdecl _ultoa(unsigned long _Value, char * _Dest, int _Radix); } 
#line 567
extern "C" { __declspec(dllimport) int __cdecl wctomb(char * _MbCh, __wchar_t _WCh); } 
#line 568
extern "C" { __declspec(dllimport) int __cdecl _wctomb_l(char * _MbCh, __wchar_t _WCh, _locale_t _Locale); } 
#line 570
extern "C" { __declspec(dllimport) errno_t __cdecl wctomb_s(int * _SizeConverted, char * _MbCh, rsize_t _SizeInBytes, __wchar_t _WCh); } 
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) errno_t __cdecl _wctomb_s_l(int * _SizeConverted, char * _MbCh, size_t _SizeInBytes, __wchar_t _WCh, _locale_t _Locale); } 
#line 573
extern "C" { __declspec(dllimport) errno_t __cdecl wcstombs_s(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes); } 
#line 574
template < size_t _Size > inline errno_t __cdecl wcstombs_s ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _MaxCount ) throw ( ) { return wcstombs_s ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount ); }
#line 575
extern "C" { __declspec(dllimport) size_t __cdecl wcstombs(char * _Dest, const __wchar_t * _Source, size_t _MaxCount); } 
#line 576
extern "C" { __declspec(dllimport) errno_t __cdecl _wcstombs_s_l(size_t * _PtNumOfCharConverted, char * _Dst, size_t _DstSizeInBytes, const __wchar_t * _Src, size_t _MaxCountInBytes, _locale_t _Locale); } 
#line 577
template < size_t _Size > inline errno_t __cdecl _wcstombs_s_l ( size_t * _PtNumOfCharConverted, char ( & _Dest ) [ _Size ], const wchar_t * _Source, size_t _MaxCount, _locale_t _Locale ) throw ( ) { return _wcstombs_s_l ( _PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale ); }
#line 578
extern "C" { __declspec(dllimport) size_t __cdecl _wcstombs_l(char * _Dest, const __wchar_t * _Source, size_t _MaxCount, _locale_t _Locale); } 
#line 640 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl calloc(size_t _Count, size_t _Size); } 
#line 641
extern "C" { __declspec(dllimport) __declspec(noalias) void __cdecl free(void * _Memory); } 
#line 642
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl malloc(size_t _Size); } 
#line 644
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl realloc(void * _Memory, size_t _NewSize); } 
#line 646
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _recalloc(void * _Memory, size_t _Count, size_t _Size); } 
#line 647
extern "C" { __declspec(dllimport) __declspec(noalias) void __cdecl _aligned_free(void * _Memory); } 
#line 648
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _aligned_malloc(size_t _Size, size_t _Alignment); } 
#line 649
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _aligned_offset_malloc(size_t _Size, size_t _Alignment, size_t _Offset); } 
#line 651
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _aligned_realloc(void * _Memory, size_t _NewSize, size_t _Alignment); } 
#line 653
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _aligned_recalloc(void * _Memory, size_t _Count, size_t _Size, size_t _Alignment); } 
#line 655
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _aligned_offset_realloc(void * _Memory, size_t _NewSize, size_t _Alignment, size_t _Offset); } 
#line 657
extern "C" { __declspec(dllimport) __declspec(noalias) __declspec(restrict) void *__cdecl _aligned_offset_recalloc(void * _Memory, size_t _Count, size_t _Size, size_t _Alignment, size_t _Offset); } 
#line 658
extern "C" { __declspec(dllimport) size_t __cdecl _aligned_msize(void * _Memory, size_t _Alignment, size_t _Offset); } 
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) errno_t __cdecl _itow_s(int _Val, __wchar_t * _DstBuf, size_t _SizeInWords, int _Radix); } 
#line 686
template < size_t _Size > inline errno_t __cdecl _itow_s ( int _Value, wchar_t ( & _Dest ) [ _Size ], int _Radix ) throw ( ) { return _itow_s ( _Value, _Dest, _Size, _Radix ); }
#line 687
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _itow(int _Value, __wchar_t * _Dest, int _Radix); } 
#line 688
extern "C" { __declspec(dllimport) errno_t __cdecl _ltow_s(long _Val, __wchar_t * _DstBuf, size_t _SizeInWords, int _Radix); } 
#line 689
template < size_t _Size > inline errno_t __cdecl _ltow_s ( long _Value, wchar_t ( & _Dest ) [ _Size ], int _Radix ) throw ( ) { return _ltow_s ( _Value, _Dest, _Size, _Radix ); }
#line 690
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _ltow(long _Value, __wchar_t * _Dest, int _Radix); } 
#line 691
extern "C" { __declspec(dllimport) errno_t __cdecl _ultow_s(unsigned long _Val, __wchar_t * _DstBuf, size_t _SizeInWords, int _Radix); } 
#line 692
template < size_t _Size > inline errno_t __cdecl _ultow_s ( unsigned long _Value, wchar_t ( & _Dest ) [ _Size ], int _Radix ) throw ( ) { return _ultow_s ( _Value, _Dest, _Size, _Radix ); }
#line 693
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _ultow(unsigned long _Value, __wchar_t * _Dest, int _Radix); } 
#line 694
extern "C" { __declspec(dllimport) double __cdecl wcstod(const __wchar_t * _Str, __wchar_t ** _EndPtr); } 
#line 695
extern "C" { __declspec(dllimport) double __cdecl _wcstod_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, _locale_t _Locale); } 
#line 696
extern "C" { __declspec(dllimport) long __cdecl wcstol(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix); } 
#line 697
extern "C" { __declspec(dllimport) long __cdecl _wcstol_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 698
extern "C" { __declspec(dllimport) __int64 __cdecl wcstoll(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix); } 
#line 699
extern "C" { __declspec(dllimport) __int64 __cdecl _wcstoll_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 700
extern "C" { __declspec(dllimport) unsigned long __cdecl wcstoul(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix); } 
#line 701
extern "C" { __declspec(dllimport) unsigned long __cdecl _wcstoul_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 702
extern "C" { __declspec(dllimport) unsigned __int64 __cdecl wcstoull(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix); } 
#line 703
extern "C" { __declspec(dllimport) unsigned __int64 __cdecl _wcstoull_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 704
extern "C" { __declspec(dllimport) long double __cdecl wcstold(const __wchar_t * _Str, __wchar_t ** _EndPtr); } 
#line 705
extern "C" { __declspec(dllimport) long double __cdecl _wcstold_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, _locale_t _Locale); } 
#line 706
extern "C" { __declspec(dllimport) float __cdecl wcstof(const __wchar_t * _Str, __wchar_t ** _EndPtr); } 
#line 707
extern "C" { __declspec(dllimport) float __cdecl _wcstof_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, _locale_t _Locale); } 
#line 711
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wgetenv(const __wchar_t * _VarName); } 
#line 712
extern "C" { __declspec(dllimport) errno_t __cdecl _wgetenv_s(size_t * _ReturnSize, __wchar_t * _DstBuf, size_t _DstSizeInWords, const __wchar_t * _VarName); } 
#line 713
template < size_t _Size > inline errno_t __cdecl _wgetenv_s ( size_t * _ReturnSize, wchar_t ( & _Dest ) [ _Size ], const wchar_t * _VarName ) throw ( ) { return _wgetenv_s ( _ReturnSize, _Dest, _Size, _VarName ); }
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) errno_t __cdecl _wdupenv_s(__wchar_t ** _Buffer, size_t * _BufferSizeInWords, const __wchar_t * _VarName); } 
#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) int __cdecl _wsystem(const __wchar_t * _Command); } 
#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) double __cdecl _wtof(const __wchar_t * _Str); } 
#line 734
extern "C" { __declspec(dllimport) double __cdecl _wtof_l(const __wchar_t * _Str, _locale_t _Locale); } 
#line 735
extern "C" { __declspec(dllimport) int __cdecl _wtoi(const __wchar_t * _Str); } 
#line 736
extern "C" { __declspec(dllimport) int __cdecl _wtoi_l(const __wchar_t * _Str, _locale_t _Locale); } 
#line 737
extern "C" { __declspec(dllimport) long __cdecl _wtol(const __wchar_t * _Str); } 
#line 738
extern "C" { __declspec(dllimport) long __cdecl _wtol_l(const __wchar_t * _Str, _locale_t _Locale); } 
#line 739
extern "C" { __declspec(dllimport) __int64 __cdecl _wtoll(const __wchar_t * _Str); } 
#line 740
extern "C" { __declspec(dllimport) __int64 __cdecl _wtoll_l(const __wchar_t * _Str, _locale_t _Locale); } 
#line 742
extern "C" { __declspec(dllimport) errno_t __cdecl _i64tow_s(__int64 _Val, __wchar_t * _DstBuf, size_t _SizeInWords, int _Radix); } 
#line 743
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _i64tow(__int64 _Val, __wchar_t * _DstBuf, int _Radix); } 
#line 744
extern "C" { __declspec(dllimport) errno_t __cdecl _ui64tow_s(unsigned __int64 _Val, __wchar_t * _DstBuf, size_t _SizeInWords, int _Radix); } 
#line 745
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _ui64tow(unsigned __int64 _Val, __wchar_t * _DstBuf, int _Radix); } 
#line 746
extern "C" { __declspec(dllimport) __int64 __cdecl _wtoi64(const __wchar_t * _Str); } 
#line 747
extern "C" { __declspec(dllimport) __int64 __cdecl _wtoi64_l(const __wchar_t * _Str, _locale_t _Locale); } 
#line 748
extern "C" { __declspec(dllimport) __int64 __cdecl _wcstoi64(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix); } 
#line 749
extern "C" { __declspec(dllimport) __int64 __cdecl _wcstoi64_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 750
extern "C" { __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix); } 
#line 751
extern "C" { __declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(const __wchar_t * _Str, __wchar_t ** _EndPtr, int _Radix, _locale_t _Locale); } 
#line 770 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) char *__cdecl _fullpath(char * _FullPath, const char * _Path, size_t _SizeInBytes); } 
#line 778 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) errno_t __cdecl _ecvt_s(char * _DstBuf, size_t _Size, double _Val, int _NumOfDights, int * _PtDec, int * _PtSign); } 
#line 779
template < size_t _Size > inline errno_t __cdecl _ecvt_s ( char ( & _Dest ) [ _Size ], double _Value, int _NumOfDigits, int * _PtDec, int * _PtSign ) throw ( ) { return _ecvt_s ( _Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign ); }
#line 780
extern "C" { __declspec(dllimport) char *__cdecl _ecvt(double _Val, int _NumOfDigits, int * _PtDec, int * _PtSign); } 
#line 781
extern "C" { __declspec(dllimport) errno_t __cdecl _fcvt_s(char * _DstBuf, size_t _Size, double _Val, int _NumOfDec, int * _PtDec, int * _PtSign); } 
#line 782
template < size_t _Size > inline errno_t __cdecl _fcvt_s ( char ( & _Dest ) [ _Size ], double _Value, int _NumOfDigits, int * _PtDec, int * _PtSign ) throw ( ) { return _fcvt_s ( _Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign ); }
#line 783
extern "C" { __declspec(dllimport) char *__cdecl _fcvt(double _Val, int _NumOfDec, int * _PtDec, int * _PtSign); } 
#line 784
extern "C" { __declspec(dllimport) errno_t __cdecl _gcvt_s(char * _DstBuf, size_t _Size, double _Val, int _NumOfDigits); } 
#line 785
template < size_t _Size > inline errno_t __cdecl _gcvt_s ( char ( & _Dest ) [ _Size ], double _Value, int _NumOfDigits ) throw ( ) { return _gcvt_s ( _Dest, _Size, _Value, _NumOfDigits ); }
#line 786
extern "C" { __declspec(dllimport) char *__cdecl _gcvt(double _Val, int _NumOfDigits, char * _DstBuf); } 
#line 788
extern "C" { __declspec(dllimport) int __cdecl _atodbl(_CRT_DOUBLE * _Result, char * _Str); } 
#line 789
extern "C" { __declspec(dllimport) int __cdecl _atoldbl(_LDOUBLE * _Result, char * _Str); } 
#line 790
extern "C" { __declspec(dllimport) int __cdecl _atoflt(_CRT_FLOAT * _Result, const char * _Str); } 
#line 791
extern "C" { __declspec(dllimport) int __cdecl _atodbl_l(_CRT_DOUBLE * _Result, char * _Str, _locale_t _Locale); } 
#line 792
extern "C" { __declspec(dllimport) int __cdecl _atoldbl_l(_LDOUBLE * _Result, char * _Str, _locale_t _Locale); } 
#line 793
extern "C" { __declspec(dllimport) int __cdecl _atoflt_l(_CRT_FLOAT * _Result, const char * _Str, _locale_t _Locale); } 
#line 794
extern "C" { unsigned long __cdecl _lrotl(unsigned long _Val, int _Shift); } 
#line 795
extern "C" { unsigned long __cdecl _lrotr(unsigned long _Val, int _Shift); } 
#line 796
extern "C" { __declspec(dllimport) errno_t __cdecl _makepath_s(char * _PathResult, size_t _SizeInWords, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); } 
#line 798
template < size_t _Size > inline errno_t __cdecl _makepath_s ( char ( & _Path ) [ _Size ], const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext ) throw ( ) { return _makepath_s ( _Path, _Size, _Drive, _Dir, _Filename, _Ext ); }
#line 799
extern "C" { __declspec(dllimport) void __cdecl _makepath(char * _Path, const char * _Drive, const char * _Dir, const char * _Filename, const char * _Ext); } 
#line 826 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { _onexit_t __cdecl _onexit(_onexit_t _Func); } 
#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) void __cdecl perror(const char * _ErrMsg); } 
#line 834 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
#pragma warning (push)
#pragma warning (disable:6540)
#line 838
extern "C" { __declspec(dllimport) int __cdecl _putenv(const char * _EnvString); } 
#line 839
extern "C" { __declspec(dllimport) errno_t __cdecl _putenv_s(const char * _Name, const char * _Value); } 
#line 842 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { unsigned __cdecl _rotl(unsigned _Val, int _Shift); } 
#line 843
extern "C" { unsigned __int64 __cdecl _rotl64(unsigned __int64 _Val, int _Shift); } 
#line 844
extern "C" { unsigned __cdecl _rotr(unsigned _Val, int _Shift); } 
#line 845
extern "C" { unsigned __int64 __cdecl _rotr64(unsigned __int64 _Val, int _Shift); } 
#pragma warning (pop)
#line 849
extern "C" { __declspec(dllimport) errno_t __cdecl _searchenv_s(const char * _Filename, const char * _EnvVar, char * _ResultPath, size_t _SizeInBytes); } 
#line 850
template < size_t _Size > inline errno_t __cdecl _searchenv_s ( const char * _Filename, const char * _EnvVar, char ( & _ResultPath ) [ _Size ] ) throw ( ) { return _searchenv_s ( _Filename, _EnvVar, _ResultPath, _Size ); }
#line 851
extern "C" { __declspec(dllimport) void __cdecl _searchenv(const char * _Filename, const char * _EnvVar, char * _ResultPath); } 
#line 854 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) void __cdecl _splitpath(const char * _FullPath, char * _Drive, char * _Dir, char * _Filename, char * _Ext); } 
#line 855
extern "C" { __declspec(dllimport) errno_t __cdecl _splitpath_s(const char * _FullPath, char * _Drive, size_t _DriveSize, char * _Dir, size_t _DirSize, char * _Filename, size_t _FilenameSize, char * _Ext, size_t _ExtSize); } 
#line 860
template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _splitpath_s ( const char * _Dest, char ( & _Drive ) [ _DriveSize ], char ( & _Dir ) [ _DirSize ], char ( & _Name ) [ _NameSize ], char ( & _Ext ) [ _ExtSize ] ) throw ( ) { return _splitpath_s ( _Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }
#line 862
extern "C" { __declspec(dllimport) void __cdecl _swab(char * _Buf1, char * _Buf2, int _SizeInBytes); } 
#line 873 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wfullpath(__wchar_t * _FullPath, const __wchar_t * _Path, size_t _SizeInWords); } 
#line 879 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) errno_t __cdecl _wmakepath_s(__wchar_t * _PathResult, size_t _SIZE, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); } 
#line 881
template < size_t _Size > inline errno_t __cdecl _wmakepath_s ( wchar_t ( & _ResultPath ) [ _Size ], const wchar_t * _Drive, const wchar_t * _Dir, const wchar_t * _Filename, const wchar_t * _Ext ) throw ( ) { return _wmakepath_s ( _ResultPath, _Size, _Drive, _Dir, _Filename, _Ext ); }
#line 882
extern "C" { __declspec(dllimport) void __cdecl _wmakepath(__wchar_t * _ResultPath, const __wchar_t * _Drive, const __wchar_t * _Dir, const __wchar_t * _Filename, const __wchar_t * _Ext); } 
#line 885
extern "C" { __declspec(dllimport) void __cdecl _wperror(const __wchar_t * _ErrMsg); } 
#line 889 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) int __cdecl _wputenv(const __wchar_t * _EnvString); } 
#line 890
extern "C" { __declspec(dllimport) errno_t __cdecl _wputenv_s(const __wchar_t * _Name, const __wchar_t * _Value); } 
#line 891
extern "C" { __declspec(dllimport) errno_t __cdecl _wsearchenv_s(const __wchar_t * _Filename, const __wchar_t * _EnvVar, __wchar_t * _ResultPath, size_t _SizeInWords); } 
#line 892
template < size_t _Size > inline errno_t __cdecl _wsearchenv_s ( const wchar_t * _Filename, const wchar_t * _EnvVar, wchar_t ( & _ResultPath ) [ _Size ] ) throw ( ) { return _wsearchenv_s ( _Filename, _EnvVar, _ResultPath, _Size ); }
#line 893
extern "C" { __declspec(dllimport) void __cdecl _wsearchenv(const __wchar_t * _Filename, const __wchar_t * _EnvVar, __wchar_t * _ResultPath); } 
#line 896 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) void __cdecl _wsplitpath(const __wchar_t * _FullPath, __wchar_t * _Drive, __wchar_t * _Dir, __wchar_t * _Filename, __wchar_t * _Ext); } 
#line 897
extern "C" { __declspec(dllimport) errno_t __cdecl _wsplitpath_s(const __wchar_t * _FullPath, __wchar_t * _Drive, size_t _DriveSize, __wchar_t * _Dir, size_t _DirSize, __wchar_t * _Filename, size_t _FilenameSize, __wchar_t * _Ext, size_t _ExtSize); } 
#line 902
template < size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize > inline errno_t __cdecl _wsplitpath_s ( const wchar_t * _Path, wchar_t ( & _Drive ) [ _DriveSize ], wchar_t ( & _Dir ) [ _DirSize ], wchar_t ( & _Name ) [ _NameSize ], wchar_t ( & _Ext ) [ _ExtSize ] ) throw ( ) { return _wsplitpath_s ( _Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize ); }
#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using SetErrorMode in" "stead. See online help for details.")) __declspec(dllimport) void __cdecl _seterrormode(int _Mode); } 
#line 910
extern "C" { __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Beep instead. S" "ee online help for details.")) __declspec(dllimport) void __cdecl _beep(unsigned _Frequency, unsigned _Duration); } 
#line 911
extern "C" { __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using Sleep instead. " "See online help for details.")) __declspec(dllimport) void __cdecl _sleep(unsigned long _Duration); } 
#line 932 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
#pragma warning(push)
#pragma warning(disable: 4141)
extern "C" { __declspec(dllimport) char *__cdecl ecvt(double _Val, int _NumOfDigits, int * _PtDec, int * _PtSign); } 
#line 935
extern "C" { __declspec(dllimport) char *__cdecl fcvt(double _Val, int _NumOfDec, int * _PtDec, int * _PtSign); } 
#line 936
extern "C" { __declspec(dllimport) char *__cdecl gcvt(double _Val, int _NumOfDigits, char * _DstBuf); } 
#line 937
extern "C" { __declspec(dllimport) char *__cdecl itoa(int _Val, char * _DstBuf, int _Radix); } 
#line 938
extern "C" { __declspec(dllimport) char *__cdecl ltoa(long _Val, char * _DstBuf, int _Radix); } 
#line 941
extern "C" { __declspec(dllimport) int __cdecl putenv(const char * _EnvString); } 
#line 944 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
extern "C" { __declspec(dllimport) void __cdecl swab(char * _Buf1, char * _Buf2, int _SizeInBytes); } 
#line 945
extern "C" { __declspec(dllimport) char *__cdecl ultoa(unsigned long _Val, char * _Dstbuf, int _Radix); } 
#pragma warning(pop)
extern "C" { _onexit_t __cdecl onexit(_onexit_t _Func); } 
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("_MSC_VER", "1800")
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "2")
#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
#pragma detect_mismatch("RuntimeLibrary", "MDd_DynamicDebug")
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\use_ansi.h"
#pragma comment(lib, "msvcprtd")
#line 957 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdlib.h"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
#pragma pack ( push, 8 )
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
namespace std { 
#line 569
typedef bool _Bool; 
#line 570
}
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
typedef __int64 _Longlong; 
#line 587
typedef unsigned __int64 _ULonglong; 
#line 605 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
typedef unsigned short char16_t; 
#line 606
typedef unsigned char32_t; 
#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
namespace std { 
#line 620
enum _Uninitialized { 
#line 622
_Noinit
#line 623
}; 
#line 627
#pragma warning(push)
#pragma warning(disable:4412)
class __declspec(dllimport) _Lockit { 
#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
public: __thiscall _Lockit(); 
#line 653
explicit __thiscall _Lockit(int); 
#line 654
__thiscall ~_Lockit() throw(); 
#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
static void __cdecl _Lockit_ctor(int); 
#line 658
static void __cdecl _Lockit_dtor(int); 
#line 661
private: static void __cdecl _Lockit_ctor(_Lockit *); 
#line 662
static void __cdecl _Lockit_ctor(_Lockit *, int); 
#line 663
static void __cdecl _Lockit_dtor(_Lockit *); 
#line 666
public: _Lockit(const _Lockit &) = delete;
#line 667
_Lockit &operator=(const _Lockit &) = delete;
#line 670
private: int _Locktype; 
#line 685 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
}; 
#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
class __declspec(dllimport) _Init_locks { 
#line 788 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
public: __thiscall _Init_locks(); 
#line 789
__thiscall ~_Init_locks() throw(); 
#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
private: static void __cdecl _Init_locks_ctor(_Init_locks *); 
#line 794
static void __cdecl _Init_locks_dtor(_Init_locks *); 
#line 805 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
}; 
#line 807
#pragma warning(pop)
}
#line 817 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void)); 
#line 819
typedef int _Mbstatet; 
#line 820
typedef unsigned long _Uint32t; 
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtr1common"
#pragma warning(push,3)
#line 829 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\yvals.h"
#pragma pack ( pop )
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtr1common"
#pragma pack ( push, 8 )
#line 13
namespace std { 
#line 15
template< class _T1, class 
#line 16
_Ret> struct unary_function; 
#line 20
template< class _T1, class 
#line 21
_T2, class 
#line 22
_Ret> struct binary_function; 
#line 26
struct _Nil { 
#line 28
}; 
#line 29
static _Nil _Nil_obj; 
#line 32
template < class _Ty,
 _Ty _Val >
 struct integral_constant
 {
 static const _Ty value = _Val;

 typedef _Ty value_type;
 typedef integral_constant < _Ty, _Val > type;

 operator value_type ( ) const
  {
  return ( value );
  }
 };
#line 47
typedef integral_constant< bool, true>  true_type; 
#line 48
typedef integral_constant< bool, false>  false_type; 
#line 51
template< bool > 
#line 52
struct _Cat_base : public false_type { 
#line 55
}; 
#line 58
template<> struct _Cat_base< true>  : public true_type { 
#line 61
}; 
#line 64
template< bool _Test, class 
#line 65
_Ty = void> 
#line 66
struct enable_if { 
#line 68
}; 
#line 70
template< class _Ty> 
#line 71
struct enable_if< true, _Ty>  { 
#line 73
typedef _Ty type; 
#line 74
}; 
#line 77
template< bool _Test, class 
#line 78
_Ty1, class 
#line 79
_Ty2> 
#line 80
struct conditional { 
#line 82
typedef _Ty2 type; 
#line 83
}; 
#line 85
template< class _Ty1, class 
#line 86
_Ty2> 
#line 87
struct conditional< true, _Ty1, _Ty2>  { 
#line 89
typedef _Ty1 type; 
#line 90
}; 
#line 93
template< class _Ty1, class _Ty2> 
#line 94
struct is_same : public false_type { 
#line 97
}; 
#line 99
template< class _Ty1> 
#line 100
struct is_same< _Ty1, _Ty1>  : public true_type { 
#line 103
}; 
#line 106
template< class _Ty> 
#line 107
struct remove_const { 
#line 109
typedef _Ty type; 
#line 110
}; 
#line 112
template< class _Ty> 
#line 113
struct remove_const< const _Ty>  { 
#line 115
typedef _Ty type; 
#line 116
}; 
#line 118
template< class _Ty> 
#line 119
struct remove_const< const _Ty []>  { 
#line 121
typedef _Ty type[]; 
#line 122
}; 
#line 124
template< class _Ty, unsigned _Nx> 
#line 125
struct remove_const< const _Ty [_Nx]>  { 
#line 127
typedef _Ty type[_Nx]; 
#line 128
}; 
#line 131
template< class _Ty> 
#line 132
struct remove_volatile { 
#line 134
typedef _Ty type; 
#line 135
}; 
#line 137
template< class _Ty> 
#line 138
struct remove_volatile< volatile _Ty>  { 
#line 140
typedef _Ty type; 
#line 141
}; 
#line 143
template< class _Ty> 
#line 144
struct remove_volatile< volatile _Ty []>  { 
#line 146
typedef _Ty type[]; 
#line 147
}; 
#line 149
template< class _Ty, unsigned _Nx> 
#line 150
struct remove_volatile< volatile _Ty [_Nx]>  { 
#line 152
typedef _Ty type[_Nx]; 
#line 153
}; 
#line 156
template< class _Ty> 
#line 157
struct remove_cv { 
#line 160
typedef typename remove_const< typename remove_volatile< _Ty> ::type> ::type type; 
#line 161
}; 
#line 164
template< class _Ty> 
#line 165
struct _Is_integral : public false_type { 
#line 168
}; 
#line 171
template<> struct _Is_integral< bool>  : public true_type { 
#line 174
}; 
#line 177
template<> struct _Is_integral< char>  : public true_type { 
#line 180
}; 
#line 183
template<> struct _Is_integral< unsigned char>  : public true_type { 
#line 186
}; 
#line 189
template<> struct _Is_integral< signed char>  : public true_type { 
#line 192
}; 
#line 196
template<> struct _Is_integral< __wchar_t>  : public true_type { 
#line 199
}; 
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< unsigned short>  : public true_type { 
#line 206
}; 
#line 209
template<> struct _Is_integral< signed short>  : public true_type { 
#line 212
}; 
#line 215
template<> struct _Is_integral< unsigned>  : public true_type { 
#line 218
}; 
#line 221
template<> struct _Is_integral< signed int>  : public true_type { 
#line 224
}; 
#line 227
template<> struct _Is_integral< unsigned long>  : public true_type { 
#line 230
}; 
#line 233
template<> struct _Is_integral< signed long>  : public true_type { 
#line 236
}; 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtr1common"
template<> struct _Is_integral< __int64>  : public true_type { 
#line 257
}; 
#line 260
template<> struct _Is_integral< unsigned __int64>  : public true_type { 
#line 263
}; 
#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtr1common"
template< class _Ty> 
#line 268
struct is_integral : public _Is_integral< typename remove_cv< _Ty> ::type>  { 
#line 271
}; 
#line 274
template< class _Ty> 
#line 275
struct _Is_floating_point : public false_type { 
#line 278
}; 
#line 281
template<> struct _Is_floating_point< float>  : public true_type { 
#line 284
}; 
#line 287
template<> struct _Is_floating_point< double>  : public true_type { 
#line 290
}; 
#line 293
template<> struct _Is_floating_point< long double>  : public true_type { 
#line 296
}; 
#line 299
template< class _Ty> 
#line 300
struct is_floating_point : public _Is_floating_point< typename remove_cv< _Ty> ::type>  { 
#line 303
}; 
#line 305
template< class _Ty> 
#line 306
struct _Is_numeric : public _Cat_base< is_integral< _Ty> ::value || is_floating_point< _Ty> ::value>  { 
#line 310
}; 
#line 313
template< class _Ty> 
#line 314
struct remove_reference { 
#line 316
typedef _Ty type; 
#line 317
}; 
#line 319
template< class _Ty> 
#line 320
struct remove_reference< _Ty &>  { 
#line 322
typedef _Ty type; 
#line 323
}; 
#line 325
template< class _Ty> 
#line 326
struct remove_reference< _Ty &&>  { 
#line 328
typedef _Ty type; 
#line 329
}; 
#line 332
template< class _Tgt, class 
#line 333
_Src> 
#line 334
struct _Copy_cv { 
#line 336
typedef typename remove_reference< _Tgt> ::type _Tgtx; 
#line 337
typedef _Tgtx &type; 
#line 338
}; 
#line 340
template< class _Tgt, class 
#line 341
_Src> 
#line 342
struct _Copy_cv< _Tgt, const _Src>  { 
#line 344
typedef typename remove_reference< _Tgt> ::type _Tgtx; 
#line 345
typedef const _Tgtx &type; 
#line 346
}; 
#line 348
template< class _Tgt, class 
#line 349
_Src> 
#line 350
struct _Copy_cv< _Tgt, volatile _Src>  { 
#line 352
typedef typename remove_reference< _Tgt> ::type _Tgtx; 
#line 353
typedef volatile _Tgtx &type; 
#line 354
}; 
#line 356
template< class _Tgt, class 
#line 357
_Src> 
#line 358
struct _Copy_cv< _Tgt, const volatile _Src>  { 
#line 360
typedef typename remove_reference< _Tgt> ::type _Tgtx; 
#line 361
typedef const volatile _Tgtx &type; 
#line 362
}; 
#line 364
template< class _Tgt, class 
#line 365
_Src> 
#line 366
struct _Copy_cv< _Tgt, _Src &>  { 
#line 368
typedef typename std::_Copy_cv< _Tgt, _Src> ::type type; 
#line 369
}; 
#line 372
struct _Wrap_int { 
#line 374
_Wrap_int(int) 
#line 375
{ 
#line 376
} 
#line 377
}; 
#line 379
template< class _Ty> 
#line 380
struct _Identity { 
#line 382
typedef _Ty type; 
#line 383
}; 
#line 419
template< class _Ty> 
#line 420
struct _Has_result_type { 
#line 421
template< class _Uty> static auto _Fn(int, _Identity< typename _Uty::result_type>  * = 0, _Identity< typename _Uty::result_type>  * = 0, _Identity< typename _Uty::result_type>  * = 0)->true_type; template< class _Uty> static auto _Fn(_Wrap_int)->false_type; typedef decltype((_Fn< _Ty> (0))) type; }; 
#line 422
}
#line 424
#pragma warning(pop)
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtgmath.h"
#pragma warning(push,3)
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtr1common"
#pragma pack ( pop )
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtgmath.h"
#pragma pack ( push, 8 )
#line 15
namespace std { 
#line 16
template< class _Ty> 
#line 17
struct _Promote_to_float { 
#line 20
typedef typename conditional< is_integral< _Ty> ::value, double, _Ty> ::type type; 
#line 21
}; 
#line 23
template< class _Ty1, class 
#line 24
_Ty2> 
#line 25
struct _Common_float_type { 
#line 27
typedef typename _Promote_to_float< _Ty1> ::type _Ty1f; 
#line 28
typedef typename _Promote_to_float< _Ty2> ::type _Ty2f; 
#line 33
typedef typename conditional< is_same< typename _Promote_to_float< _Ty1> ::type, long double> ::value || is_same< typename _Promote_to_float< _Ty2> ::type, long double> ::value, long double, typename conditional< is_same< typename _Promote_to_float< _Ty1> ::type, double> ::value || is_same< typename _Promote_to_float< _Ty2> ::type, double> ::value, double, float> ::type> ::type type; 
#line 34
}; 
#line 35
}
#line 75
extern "C" double __cdecl pow(double, double); 
#line 76
inline float __cdecl pow(float, float) throw(); 
#line 77
inline long double __cdecl pow(long double, long double) throw(); 
#line 79
template < class _Ty1,
 class _Ty2 > inline
 typename :: std :: enable_if < :: std :: _Is_numeric < _Ty1 > :: value
  && :: std :: _Is_numeric < _Ty2 > :: value,
  typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type
 pow ( const _Ty1 _Left, const _Ty2 _Right )
 {
 typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type;
 return ( :: pow ( type ( _Left ), type ( _Right ) ) );
 }
#line 91
extern "C" double __cdecl acos(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type acos ( _Ty _Left ) { return ( :: acos ( ( double ) _Left ) ); }
#line 92
extern "C" double __cdecl asin(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type asin ( _Ty _Left ) { return ( :: asin ( ( double ) _Left ) ); }
#line 93
extern "C" double __cdecl atan(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type atan ( _Ty _Left ) { return ( :: atan ( ( double ) _Left ) ); }
#line 94
extern "C" double __cdecl atan2(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: _Is_numeric < _Ty1 > :: value && :: std :: _Is_numeric < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type atan2 ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: atan2 ( ( type ) _Left, ( type ) _Right ) ); }
#line 95
extern "C" __declspec(dllimport) double __cdecl ceil(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type ceil ( _Ty _Left ) { return ( :: ceil ( ( double ) _Left ) ); }
#line 96
extern "C" double __cdecl cos(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cos ( _Ty _Left ) { return ( :: cos ( ( double ) _Left ) ); }
#line 97
extern "C" double __cdecl cosh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cosh ( _Ty _Left ) { return ( :: cosh ( ( double ) _Left ) ); }
#line 98
extern "C" double __cdecl exp(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type exp ( _Ty _Left ) { return ( :: exp ( ( double ) _Left ) ); }
#line 100
extern "C" __declspec(dllimport) double __cdecl floor(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type floor ( _Ty _Left ) { return ( :: floor ( ( double ) _Left ) ); }
#line 101
extern "C" double __cdecl fmod(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: _Is_numeric < _Ty1 > :: value && :: std :: _Is_numeric < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmod ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmod ( ( type ) _Left, ( type ) _Right ) ); }
#line 102
extern "C" __declspec(dllimport) double __cdecl frexp(double, int *); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type frexp ( _Ty _Left, int * _Arg2 ) { return ( :: frexp ( ( double ) _Left, _Arg2 ) ); }
#line 103
extern "C" __declspec(dllimport) double __cdecl ldexp(double, int); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type ldexp ( _Ty _Left, int _Arg2 ) { return ( :: ldexp ( ( double ) _Left, _Arg2 ) ); }
#line 104
extern "C" double __cdecl log(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log ( _Ty _Left ) { return ( :: log ( ( double ) _Left ) ); }
#line 105
extern "C" double __cdecl log10(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log10 ( _Ty _Left ) { return ( :: log10 ( ( double ) _Left ) ); }
#line 108
extern "C" double __cdecl sin(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sin ( _Ty _Left ) { return ( :: sin ( ( double ) _Left ) ); }
#line 109
extern "C" double __cdecl sinh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sinh ( _Ty _Left ) { return ( :: sinh ( ( double ) _Left ) ); }
#line 110
extern "C" double __cdecl sqrt(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type sqrt ( _Ty _Left ) { return ( :: sqrt ( ( double ) _Left ) ); }
#line 111
extern "C" double __cdecl tan(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tan ( _Ty _Left ) { return ( :: tan ( ( double ) _Left ) ); }
#line 112
extern "C" double __cdecl tanh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tanh ( _Ty _Left ) { return ( :: tanh ( ( double ) _Left ) ); }
#line 124
inline float _Fma(float _Left, float _Middle, float _Right) 
#line 125
{ 
#line 126
return ::fmaf(_Left, _Middle, _Right); 
#line 127
} 
#line 129
inline double _Fma(double _Left, double _Middle, double _Right) 
#line 130
{ 
#line 131
return ::fma(_Left, _Middle, _Right); 
#line 132
} 
#line 134
inline long double _Fma(long double _Left, long double _Middle, long double _Right) 
#line 135
{ 
#line 136
return ::fmal(_Left, _Middle, _Right); 
#line 137
} 
#line 139
template < class _Ty1,
 class _Ty2,
 class _Ty3 > inline
 typename :: std :: _Common_float_type < _Ty1,
  typename :: std :: _Common_float_type < _Ty2, _Ty3 > :: type > :: type
 fma ( _Ty1 _Left, _Ty2 _Middle, _Ty3 _Right )
 {
 typedef typename :: std :: _Common_float_type < _Ty1,
  typename :: std :: _Common_float_type < _Ty2, _Ty3 > :: type > :: type type;
 return ( _Fma ( ( type ) _Left, ( type ) _Middle, ( type ) _Right ) );
 }
#line 152
inline float _Remquo(float _Left, float _Right, int *_Pquo) 
#line 153
{ 
#line 154
return ::remquof(_Left, _Right, _Pquo); 
#line 155
} 
#line 157
inline double _Remquo(double _Left, double _Right, int *_Pquo) 
#line 158
{ 
#line 159
return ::remquo(_Left, _Right, _Pquo); 
#line 160
} 
#line 162
inline long double _Remquo(long double _Left, long double _Right, int *_Pquo) 
#line 163
{ 
#line 164
return ::remquol(_Left, _Right, _Pquo); 
#line 165
} 
#line 167
template < class _Ty1,
 class _Ty2 > inline
 typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type
 remquo ( _Ty1 _Left, _Ty2 _Right, int * _Pquo )
 {
 typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type;
 return ( _Remquo ( ( type ) _Left, ( type ) _Right, _Pquo ) );
 }
#line 176
extern "C" __declspec(dllimport) double __cdecl acosh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type acosh ( _Ty _Left ) { return ( :: acosh ( ( double ) _Left ) ); }
#line 177
extern "C" __declspec(dllimport) double __cdecl asinh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type asinh ( _Ty _Left ) { return ( :: asinh ( ( double ) _Left ) ); }
#line 178
extern "C" __declspec(dllimport) double __cdecl atanh(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type atanh ( _Ty _Left ) { return ( :: atanh ( ( double ) _Left ) ); }
#line 179
extern "C" __declspec(dllimport) double __cdecl cbrt(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type cbrt ( _Ty _Left ) { return ( :: cbrt ( ( double ) _Left ) ); }
#line 180
extern "C" __declspec(dllimport) double __cdecl copysign(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: _Is_numeric < _Ty1 > :: value && :: std :: _Is_numeric < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type copysign ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: copysign ( ( type ) _Left, ( type ) _Right ) ); }
#line 181
extern "C" __declspec(dllimport) double __cdecl erf(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type erf ( _Ty _Left ) { return ( :: erf ( ( double ) _Left ) ); }
#line 182
extern "C" __declspec(dllimport) double __cdecl erfc(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type erfc ( _Ty _Left ) { return ( :: erfc ( ( double ) _Left ) ); }
#line 183
extern "C" __declspec(dllimport) double __cdecl expm1(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type expm1 ( _Ty _Left ) { return ( :: expm1 ( ( double ) _Left ) ); }
#line 184
extern "C" __declspec(dllimport) double __cdecl exp2(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type exp2 ( _Ty _Left ) { return ( :: exp2 ( ( double ) _Left ) ); }
#line 186
extern "C" __declspec(dllimport) double __cdecl fdim(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: _Is_numeric < _Ty1 > :: value && :: std :: _Is_numeric < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fdim ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fdim ( ( type ) _Left, ( type ) _Right ) ); }
#line 188
extern "C" __declspec(dllimport) double __cdecl fmax(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: _Is_numeric < _Ty1 > :: value && :: std :: _Is_numeric < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmax ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmax ( ( type ) _Left, ( type ) _Right ) ); }
#line 189
extern "C" __declspec(dllimport) double __cdecl fmin(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: _Is_numeric < _Ty1 > :: value && :: std :: _Is_numeric < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type fmin ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: fmin ( ( type ) _Left, ( type ) _Right ) ); }
#line 190
extern "C" __inline double __cdecl hypot(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: _Is_numeric < _Ty1 > :: value && :: std :: _Is_numeric < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type hypot ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: hypot ( ( type ) _Left, ( type ) _Right ) ); }
#line 191
extern "C" __declspec(dllimport) int __cdecl ilogb(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, int > :: type ilogb ( _Ty _Left ) { return ( :: ilogb ( ( double ) _Left ) ); }
#line 192
extern "C" __declspec(dllimport) double __cdecl lgamma(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type lgamma ( _Ty _Left ) { return ( :: lgamma ( ( double ) _Left ) ); }
#line 193
extern "C" __declspec(dllimport) __int64 __cdecl llrint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long long > :: type llrint ( _Ty _Left ) { return ( :: llrint ( ( double ) _Left ) ); }
#line 194
extern "C" __declspec(dllimport) __int64 __cdecl llround(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long long > :: type llround ( _Ty _Left ) { return ( :: llround ( ( double ) _Left ) ); }
#line 195
extern "C" __declspec(dllimport) double __cdecl log1p(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log1p ( _Ty _Left ) { return ( :: log1p ( ( double ) _Left ) ); }
#line 196
extern "C" __declspec(dllimport) double __cdecl log2(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type log2 ( _Ty _Left ) { return ( :: log2 ( ( double ) _Left ) ); }
#line 197
extern "C" __declspec(dllimport) double __cdecl logb(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type logb ( _Ty _Left ) { return ( :: logb ( ( double ) _Left ) ); }
#line 198
extern "C" __declspec(dllimport) long __cdecl lrint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long > :: type lrint ( _Ty _Left ) { return ( :: lrint ( ( double ) _Left ) ); }
#line 199
extern "C" __declspec(dllimport) long __cdecl lround(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, long > :: type lround ( _Ty _Left ) { return ( :: lround ( ( double ) _Left ) ); }
#line 200
extern "C" __declspec(dllimport) double __cdecl nearbyint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type nearbyint ( _Ty _Left ) { return ( :: nearbyint ( ( double ) _Left ) ); }
#line 201
extern "C" __declspec(dllimport) double __cdecl nextafter(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: _Is_numeric < _Ty1 > :: value && :: std :: _Is_numeric < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type nextafter ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: nextafter ( ( type ) _Left, ( type ) _Right ) ); }
#line 202
extern "C" __declspec(dllimport) double __cdecl nexttoward(double, long double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type nexttoward ( _Ty _Left, long double _Arg2 ) { return ( :: nexttoward ( ( double ) _Left, _Arg2 ) ); }
#line 203
extern "C" __declspec(dllimport) double __cdecl remainder(double, double); template < class _Ty1, class _Ty2 > inline typename :: std :: enable_if < :: std :: _Is_numeric < _Ty1 > :: value && :: std :: _Is_numeric < _Ty2 > :: value, typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type > :: type remainder ( _Ty1 _Left, _Ty2 _Right ) { typedef typename :: std :: _Common_float_type < _Ty1, _Ty2 > :: type type; return ( :: remainder ( ( type ) _Left, ( type ) _Right ) ); }
#line 205
extern "C" __declspec(dllimport) double __cdecl rint(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type rint ( _Ty _Left ) { return ( :: rint ( ( double ) _Left ) ); }
#line 206
extern "C" __declspec(dllimport) double __cdecl round(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type round ( _Ty _Left ) { return ( :: round ( ( double ) _Left ) ); }
#line 207
extern "C" __declspec(dllimport) double __cdecl scalbln(double, long); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type scalbln ( _Ty _Left, long _Arg2 ) { return ( :: scalbln ( ( double ) _Left, _Arg2 ) ); }
#line 208
extern "C" __declspec(dllimport) double __cdecl scalbn(double, int); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type scalbn ( _Ty _Left, int _Arg2 ) { return ( :: scalbn ( ( double ) _Left, _Arg2 ) ); }
#line 209
extern "C" __declspec(dllimport) double __cdecl tgamma(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type tgamma ( _Ty _Left ) { return ( :: tgamma ( ( double ) _Left ) ); }
#line 210
extern "C" __declspec(dllimport) double __cdecl trunc(double); template < class _Ty > inline typename :: std :: enable_if < :: std :: is_integral < _Ty > :: value, double > :: type trunc ( _Ty _Left ) { return ( :: trunc ( ( double ) _Left ) ); }
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\xtgmath.h"
#pragma warning(pop)
#pragma pack ( pop )
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cmath"
namespace std { 
#line 23
using ::abs;using ::acos;using ::asin;
#line 24
using ::atan;using ::atan2;using ::ceil;
#line 25
using ::cos;using ::cosh;using ::exp;
#line 26
using ::fabs;using ::floor;using ::fmod;
#line 27
using ::frexp;using ::ldexp;using ::log;
#line 28
using ::log10;using ::modf;using ::pow;
#line 29
using ::sin;using ::sinh;using ::sqrt;
#line 30
using ::tan;using ::tanh;
#line 32
using ::acosf;using ::asinf;
#line 33
using ::atanf;using ::atan2f;using ::ceilf;
#line 34
using ::cosf;using ::coshf;using ::expf;
#line 35
using ::fabsf;using ::floorf;using ::fmodf;
#line 36
using ::frexpf;using ::ldexpf;using ::logf;
#line 37
using ::log10f;using ::modff;using ::powf;
#line 38
using ::sinf;using ::sinhf;using ::sqrtf;
#line 39
using ::tanf;using ::tanhf;
#line 41
using ::acosl;using ::asinl;
#line 42
using ::atanl;using ::atan2l;using ::ceill;
#line 43
using ::cosl;using ::coshl;using ::expl;
#line 44
using ::fabsl;using ::floorl;using ::fmodl;
#line 45
using ::frexpl;using ::ldexpl;using ::logl;
#line 46
using ::log10l;using ::modfl;using ::powl;
#line 47
using ::sinl;using ::sinhl;using ::sqrtl;
#line 48
using ::tanl;using ::tanhl;
#line 50
using ::float_t;using ::double_t;
#line 52
using ::acosh;using ::asinh;using ::atanh;
#line 53
using ::cbrt;using ::erf;using ::erfc;
#line 54
using ::expm1;using ::exp2;
#line 55
using ::hypot;using ::ilogb;using ::lgamma;
#line 56
using ::log1p;using ::log2;using ::logb;
#line 57
using ::llrint;using ::lrint;using ::nearbyint;
#line 58
using ::rint;using ::llround;using ::lround;
#line 59
using ::fdim;using ::fma;using ::fmax;using ::fmin;
#line 60
using ::round;using ::trunc;
#line 61
using ::remainder;using ::remquo;
#line 62
using ::copysign;using ::nan;using ::nextafter;
#line 63
using ::scalbn;using ::scalbln;
#line 64
using ::nexttoward;using ::tgamma;
#line 66
using ::acoshf;using ::asinhf;using ::atanhf;
#line 67
using ::cbrtf;using ::erff;using ::erfcf;
#line 68
using ::expm1f;using ::exp2f;
#line 69
using ::hypotf;using ::ilogbf;using ::lgammaf;
#line 70
using ::log1pf;using ::log2f;using ::logbf;
#line 71
using ::llrintf;using ::lrintf;using ::nearbyintf;
#line 72
using ::rintf;using ::llroundf;using ::lroundf;
#line 73
using ::fdimf;using ::fmaf;using ::fmaxf;using ::fminf;
#line 74
using ::roundf;using ::truncf;
#line 75
using ::remainderf;using ::remquof;
#line 76
using ::copysignf;using ::nanf;
#line 77
using ::nextafterf;using ::scalbnf;using ::scalblnf;
#line 78
using ::nexttowardf;using ::tgammaf;
#line 80
using ::acoshl;using ::asinhl;using ::atanhl;
#line 81
using ::cbrtl;using ::erfl;using ::erfcl;
#line 82
using ::expm1l;using ::exp2l;
#line 83
using ::hypotl;using ::ilogbl;using ::lgammal;
#line 84
using ::log1pl;using ::log2l;using ::logbl;
#line 85
using ::llrintl;using ::lrintl;using ::nearbyintl;
#line 86
using ::rintl;using ::llroundl;using ::lroundl;
#line 87
using ::fdiml;using ::fmal;using ::fmaxl;using ::fminl;
#line 88
using ::roundl;using ::truncl;
#line 89
using ::remainderl;using ::remquol;
#line 90
using ::copysignl;using ::nanl;
#line 91
using ::nextafterl;using ::scalbnl;using ::scalblnl;
#line 92
using ::nexttowardl;using ::tgammal;
#line 94
using ::fpclassify;using ::signbit;
#line 95
using ::isfinite;using ::isinf;
#line 96
using ::isnan;using ::isnormal;
#line 97
using ::isgreater;using ::isgreaterequal;
#line 98
using ::isless;using ::islessequal;
#line 99
using ::islessgreater;using ::isunordered;
#line 100
}
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstdlib"
namespace std { 
#line 18
using ::size_t;using ::div_t;using ::ldiv_t;
#line 19
using ::abort;using ::abs;using ::atexit;
#line 20
using ::atof;using ::atoi;using ::atol;
#line 21
using ::bsearch;using ::calloc;using ::div;
#line 22
using ::exit;using ::free;
#line 23
using ::labs;using ::ldiv;using ::malloc;
#line 24
using ::mblen;using ::mbstowcs;using ::mbtowc;
#line 25
using ::qsort;using ::rand;using ::realloc;
#line 26
using ::srand;using ::strtod;using ::strtol;
#line 27
using ::strtoul;
#line 28
using ::wcstombs;using ::wctomb;
#line 30
using ::lldiv_t;
#line 33
using ::getenv;
#line 34
using ::system;
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\cstdlib"
using ::atoll;using ::llabs;using ::lldiv;
#line 38
using ::strtof;using ::strtold;
#line 39
using ::strtoll;using ::strtoull;
#line 40
}
#line 8647 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern "C" { __declspec(dllimport) extern double __cdecl _hypot(double x, double y); } 
#line 8648
extern "C" { __declspec(dllimport) extern float __cdecl _hypotf(float x, float y); } 
#line 8653 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern inline bool signbit(long double); 
#line 8654
extern "C" { __declspec(dllimport) extern int _ldsign(long double); } 
#line 8692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern inline bool signbit(double); 
#line 8693
extern "C" { __declspec(dllimport) extern int _dsign(double); } 
#line 8731 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern inline bool signbit(float); 
#line 8732
extern "C" { __declspec(dllimport) extern int _fdsign(float); } 
#line 8738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
static __inline bool isinf(long double a); 
#line 8774 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
static __inline bool isinf(double a); 
#line 8812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
static __inline bool isinf(float a); 
#line 8818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
static __inline bool isnan(long double a); 
#line 8852 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
static __inline bool isnan(double a); 
#line 8889 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
static __inline bool isnan(float a); 
#line 8895 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
static __inline bool isfinite(long double a); 
#line 8933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
static __inline bool isfinite(double a); 
#line 8969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
static __inline bool isfinite(float a); 
#line 8976 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
template< class T> extern inline T _Pow_int(T, int) throw(); 
#line 8977
extern inline __int64 abs(__int64) throw(); 
#line 9033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern inline long __cdecl abs(long) throw(); 
#line 9037 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern inline float __cdecl abs(float) throw(); 
#line 9038
extern inline double __cdecl abs(double) throw(); 
#line 9039
extern inline float __cdecl fabs(float) throw(); 
#line 9040
extern inline float __cdecl ceil(float) throw(); 
#line 9041
extern inline float __cdecl floor(float) throw(); 
#line 9042
extern inline float __cdecl sqrt(float) throw(); 
#line 9043
extern inline float __cdecl pow(float, float) throw(); 
#line 9045
extern inline float __cdecl pow(float, int) throw(); 
#line 9046
extern inline double __cdecl pow(double, int) throw(); 
#line 9048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern inline float __cdecl log(float) throw(); 
#line 9049
extern inline float __cdecl log10(float) throw(); 
#line 9050
extern inline float __cdecl fmod(float, float) throw(); 
#line 9051
extern inline float __cdecl modf(float, float *) throw(); 
#line 9052
extern inline float __cdecl exp(float) throw(); 
#line 9053
extern inline float __cdecl frexp(float, int *) throw(); 
#line 9054
extern inline float __cdecl ldexp(float, int) throw(); 
#line 9055
extern inline float __cdecl asin(float) throw(); 
#line 9056
extern inline float __cdecl sin(float) throw(); 
#line 9057
extern inline float __cdecl sinh(float) throw(); 
#line 9058
extern inline float __cdecl acos(float) throw(); 
#line 9059
extern inline float __cdecl cos(float) throw(); 
#line 9060
extern inline float __cdecl cosh(float) throw(); 
#line 9061
extern inline float __cdecl atan(float) throw(); 
#line 9062
extern inline float __cdecl atan2(float, float) throw(); 
#line 9063
extern inline float __cdecl tan(float) throw(); 
#line 9064
extern inline float __cdecl tanh(float) throw(); 
#line 9196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
extern inline float __cdecl logb(float) throw(); 
#line 9197
extern inline int __cdecl ilogb(float) throw(); 
#line 9198
extern float __cdecl scalbn(float, float) throw(); 
#line 9199
extern inline float __cdecl scalbln(float, long) throw(); 
#line 9200
extern inline float __cdecl exp2(float) throw(); 
#line 9201
extern inline float __cdecl expm1(float) throw(); 
#line 9202
extern inline float __cdecl log2(float) throw(); 
#line 9203
extern inline float __cdecl log1p(float) throw(); 
#line 9204
extern inline float __cdecl acosh(float) throw(); 
#line 9205
extern inline float __cdecl asinh(float) throw(); 
#line 9206
extern inline float __cdecl atanh(float) throw(); 
#line 9207
extern inline float __cdecl hypot(float, float) throw(); 
#line 9208
extern float __cdecl norm3d(float, float, float) throw(); 
#line 9209
extern float __cdecl norm4d(float, float, float, float) throw(); 
#line 9210
extern inline float __cdecl cbrt(float) throw(); 
#line 9211
extern inline float __cdecl erf(float) throw(); 
#line 9212
extern inline float __cdecl erfc(float) throw(); 
#line 9213
extern inline float __cdecl lgamma(float) throw(); 
#line 9214
extern inline float __cdecl tgamma(float) throw(); 
#line 9215
extern inline float __cdecl copysign(float, float) throw(); 
#line 9216
extern inline float __cdecl nextafter(float, float) throw(); 
#line 9217
extern inline float __cdecl remainder(float, float) throw(); 
#line 9218
extern inline float __cdecl remquo(float, float, int *) throw(); 
#line 9219
extern inline float __cdecl round(float) throw(); 
#line 9220
extern inline long __cdecl lround(float) throw(); 
#line 9221
extern inline __int64 __cdecl llround(float) throw(); 
#line 9222
extern inline float __cdecl trunc(float) throw(); 
#line 9223
extern inline float __cdecl rint(float) throw(); 
#line 9224
extern inline long __cdecl lrint(float) throw(); 
#line 9225
extern inline __int64 __cdecl llrint(float) throw(); 
#line 9226
extern inline float __cdecl nearbyint(float) throw(); 
#line 9227
extern inline float __cdecl fdim(float, float) throw(); 
#line 9228
extern inline float __cdecl fma(float, float, float) throw(); 
#line 9229
extern inline float __cdecl fmax(float, float) throw(); 
#line 9230
extern inline float __cdecl fmin(float, float) throw(); 
#line 9233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.h"
static inline float exp10(float a); 
#line 9235
static inline float rsqrt(float a); 
#line 9237
static inline float rcbrt(float a); 
#line 9239
static inline float sinpi(float a); 
#line 9241
static inline float cospi(float a); 
#line 9243
static inline void sincospi(float a, float * sptr, float * cptr); 
#line 9245
static inline void sincos(float a, float * sptr, float * cptr); 
#line 9247
static inline float j0(float a); 
#line 9249
static inline float j1(float a); 
#line 9251
static inline float jn(int n, float a); 
#line 9253
static inline float y0(float a); 
#line 9255
static inline float y1(float a); 
#line 9257
static inline float yn(int n, float a); 
#line 9259
static inline float cyl_bessel_i0(float a); 
#line 9261
static inline float cyl_bessel_i1(float a); 
#line 9263
static inline float erfinv(float a); 
#line 9265
static inline float erfcinv(float a); 
#line 9267
static inline float normcdfinv(float a); 
#line 9269
static inline float normcdf(float a); 
#line 9271
static inline float erfcx(float a); 
#line 9273
static inline double copysign(double a, float b); 
#line 9275
static inline float copysign(float a, double b); 
#line 9277
static inline unsigned min(unsigned a, unsigned b); 
#line 9279
static inline unsigned min(int a, unsigned b); 
#line 9281
static inline unsigned min(unsigned a, int b); 
#line 9283
static inline __int64 min(__int64 a, __int64 b); 
#line 9285
static inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b); 
#line 9287
static inline unsigned __int64 min(__int64 a, unsigned __int64 b); 
#line 9289
static inline unsigned __int64 min(unsigned __int64 a, __int64 b); 
#line 9291
static inline float min(float a, float b); 
#line 9293
static inline double min(double a, double b); 
#line 9295
static inline double min(float a, double b); 
#line 9297
static inline double min(double a, float b); 
#line 9299
static inline unsigned max(unsigned a, unsigned b); 
#line 9301
static inline unsigned max(int a, unsigned b); 
#line 9303
static inline unsigned max(unsigned a, int b); 
#line 9305
static inline __int64 max(__int64 a, __int64 b); 
#line 9307
static inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b); 
#line 9309
static inline unsigned __int64 max(__int64 a, unsigned __int64 b); 
#line 9311
static inline unsigned __int64 max(unsigned __int64 a, __int64 b); 
#line 9313
static inline float max(float a, float b); 
#line 9315
static inline double max(double a, double b); 
#line 9317
static inline double max(float a, double b); 
#line 9319
static inline double max(double a, float b); 
#line 330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
static __inline bool isinf(long double a) 
#line 331
{ 
#line 335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
return isinf< long double> (a); 
#line 337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
} 
#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
static __inline bool isinf(double a) 
#line 347
{ 
#line 351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
return isinf< double> (a); 
#line 353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
} 
#line 362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
static __inline bool isinf(float a) 
#line 363
{ 
#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
return isinf< float> (a); 
#line 369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
} 
#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
static __inline bool isnan(long double a) 
#line 379
{ 
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
return isnan< long double> (a); 
#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
} 
#line 394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
static __inline bool isnan(double a) 
#line 395
{ 
#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
return isnan< double> (a); 
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
} 
#line 410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
static __inline bool isnan(float a) 
#line 411
{ 
#line 415 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
return isnan< float> (a); 
#line 417 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
} 
#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
static __inline bool isfinite(long double a) 
#line 427
{ 
#line 431 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
return isfinite< long double> (a); 
#line 433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
} 
#line 442 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
static __inline bool isfinite(double a) 
#line 443
{ 
#line 447 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
return isfinite< double> (a); 
#line 449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
} 
#line 458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
static __inline bool isfinite(float a) 
#line 459
{ 
#line 463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
return isfinite< float> (a); 
#line 465 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
} 
#line 655 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\math_functions.hpp"
static inline float exp10(float a) 
#line 656
{ 
#line 657
return exp10f(a); 
#line 658
} 
#line 660
static inline float rsqrt(float a) 
#line 661
{ 
#line 662
return rsqrtf(a); 
#line 663
} 
#line 665
static inline float rcbrt(float a) 
#line 666
{ 
#line 667
return rcbrtf(a); 
#line 668
} 
#line 670
static inline float sinpi(float a) 
#line 671
{ 
#line 672
return sinpif(a); 
#line 673
} 
#line 675
static inline float cospi(float a) 
#line 676
{ 
#line 677
return cospif(a); 
#line 678
} 
#line 680
static inline void sincospi(float a, float *sptr, float *cptr) 
#line 681
{ 
#line 682
sincospif(a, sptr, cptr); 
#line 683
} 
#line 685
static inline void sincos(float a, float *sptr, float *cptr) 
#line 686
{ 
#line 687
sincosf(a, sptr, cptr); 
#line 688
} 
#line 690
static inline float j0(float a) 
#line 691
{ 
#line 692
return j0f(a); 
#line 693
} 
#line 695
static inline float j1(float a) 
#line 696
{ 
#line 697
return j1f(a); 
#line 698
} 
#line 700
static inline float jn(int n, float a) 
#line 701
{ 
#line 702
return jnf(n, a); 
#line 703
} 
#line 705
static inline float y0(float a) 
#line 706
{ 
#line 707
return y0f(a); 
#line 708
} 
#line 710
static inline float y1(float a) 
#line 711
{ 
#line 712
return y1f(a); 
#line 713
} 
#line 715
static inline float yn(int n, float a) 
#line 716
{ 
#line 717
return ynf(n, a); 
#line 718
} 
#line 720
static inline float cyl_bessel_i0(float a) 
#line 721
{ 
#line 722
return cyl_bessel_i0f(a); 
#line 723
} 
#line 725
static inline float cyl_bessel_i1(float a) 
#line 726
{ 
#line 727
return cyl_bessel_i1f(a); 
#line 728
} 
#line 730
static inline float erfinv(float a) 
#line 731
{ 
#line 732
return erfinvf(a); 
#line 733
} 
#line 735
static inline float erfcinv(float a) 
#line 736
{ 
#line 737
return erfcinvf(a); 
#line 738
} 
#line 740
static inline float normcdfinv(float a) 
#line 741
{ 
#line 742
return normcdfinvf(a); 
#line 743
} 
#line 745
static inline float normcdf(float a) 
#line 746
{ 
#line 747
return normcdff(a); 
#line 748
} 
#line 750
static inline float erfcx(float a) 
#line 751
{ 
#line 752
return erfcxf(a); 
#line 753
} 
#line 755
static inline double copysign(double a, float b) 
#line 756
{ 
#line 757
return copysign(a, (double)b); 
#line 758
} 
#line 760
static inline float copysign(float a, double b) 
#line 761
{ 
#line 762
return copysignf(a, (float)b); 
#line 763
} 
#line 765
static inline unsigned min(unsigned a, unsigned b) 
#line 766
{ 
#line 767
return umin(a, b); 
#line 768
} 
#line 770
static inline unsigned min(int a, unsigned b) 
#line 771
{ 
#line 772
return umin((unsigned)a, b); 
#line 773
} 
#line 775
static inline unsigned min(unsigned a, int b) 
#line 776
{ 
#line 777
return umin(a, (unsigned)b); 
#line 778
} 
#line 780
static inline __int64 min(__int64 a, __int64 b) 
#line 781
{ 
#line 782
return llmin(a, b); 
#line 783
} 
#line 785
static inline unsigned __int64 min(unsigned __int64 a, unsigned __int64 b) 
#line 786
{ 
#line 787
return ullmin(a, b); 
#line 788
} 
#line 790
static inline unsigned __int64 min(__int64 a, unsigned __int64 b) 
#line 791
{ 
#line 792
return ullmin((unsigned __int64)a, b); 
#line 793
} 
#line 795
static inline unsigned __int64 min(unsigned __int64 a, __int64 b) 
#line 796
{ 
#line 797
return ullmin(a, (unsigned __int64)b); 
#line 798
} 
#line 800
static inline float min(float a, float b) 
#line 801
{ 
#line 802
return fminf(a, b); 
#line 803
} 
#line 805
static inline double min(double a, double b) 
#line 806
{ 
#line 807
return fmin(a, b); 
#line 808
} 
#line 810
static inline double min(float a, double b) 
#line 811
{ 
#line 812
return fmin((double)a, b); 
#line 813
} 
#line 815
static inline double min(double a, float b) 
#line 816
{ 
#line 817
return fmin(a, (double)b); 
#line 818
} 
#line 820
static inline unsigned max(unsigned a, unsigned b) 
#line 821
{ 
#line 822
return umax(a, b); 
#line 823
} 
#line 825
static inline unsigned max(int a, unsigned b) 
#line 826
{ 
#line 827
return umax((unsigned)a, b); 
#line 828
} 
#line 830
static inline unsigned max(unsigned a, int b) 
#line 831
{ 
#line 832
return umax(a, (unsigned)b); 
#line 833
} 
#line 835
static inline __int64 max(__int64 a, __int64 b) 
#line 836
{ 
#line 837
return llmax(a, b); 
#line 838
} 
#line 840
static inline unsigned __int64 max(unsigned __int64 a, unsigned __int64 b) 
#line 841
{ 
#line 842
return ullmax(a, b); 
#line 843
} 
#line 845
static inline unsigned __int64 max(__int64 a, unsigned __int64 b) 
#line 846
{ 
#line 847
return ullmax((unsigned __int64)a, b); 
#line 848
} 
#line 850
static inline unsigned __int64 max(unsigned __int64 a, __int64 b) 
#line 851
{ 
#line 852
return ullmax(a, (unsigned __int64)b); 
#line 853
} 
#line 855
static inline float max(float a, float b) 
#line 856
{ 
#line 857
return fmaxf(a, b); 
#line 858
} 
#line 860
static inline double max(double a, double b) 
#line 861
{ 
#line 862
return fmax(a, b); 
#line 863
} 
#line 865
static inline double max(float a, double b) 
#line 866
{ 
#line 867
return fmax((double)a, b); 
#line 868
} 
#line 870
static inline double max(double a, float b) 
#line 871
{ 
#line 872
return fmax(a, (double)b); 
#line 873
} 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\cuda_surface_types.h"
template< class T, int dim = 1> 
#line 78
struct surface : public surfaceReference { 
#line 81
surface() 
#line 82
{ 
#line 83
(channelDesc) = cudaCreateChannelDesc< T> (); 
#line 84
} 
#line 86
surface(::cudaChannelFormatDesc desc) 
#line 87
{ 
#line 88
(channelDesc) = desc; 
#line 89
} 
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\cuda_surface_types.h"
}; 
#line 93
template< int dim> 
#line 94
struct surface< void, dim>  : public surfaceReference { 
#line 97
surface() 
#line 98
{ 
#line 99
(channelDesc) = cudaCreateChannelDesc< void> (); 
#line 100
} 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\cuda_surface_types.h"
}; 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\cuda_texture_types.h"
template< class T, int texType = 1, cudaTextureReadMode mode = cudaReadModeElementType> 
#line 78
struct texture : public textureReference { 
#line 81
texture(int norm = 0, ::cudaTextureFilterMode 
#line 82
fMode = cudaFilterModePoint, ::cudaTextureAddressMode 
#line 83
aMode = cudaAddressModeClamp) 
#line 84
{ 
#line 85
(normalized) = norm; 
#line 86
(filterMode) = fMode; 
#line 87
((addressMode)[0]) = aMode; 
#line 88
((addressMode)[1]) = aMode; 
#line 89
((addressMode)[2]) = aMode; 
#line 90
(channelDesc) = cudaCreateChannelDesc< T> (); 
#line 91
(sRGB) = 0; 
#line 92
} 
#line 94
texture(int norm, ::cudaTextureFilterMode 
#line 95
fMode, ::cudaTextureAddressMode 
#line 96
aMode, ::cudaChannelFormatDesc 
#line 97
desc) 
#line 98
{ 
#line 99
(normalized) = norm; 
#line 100
(filterMode) = fMode; 
#line 101
((addressMode)[0]) = aMode; 
#line 102
((addressMode)[1]) = aMode; 
#line 103
((addressMode)[2]) = aMode; 
#line 104
(channelDesc) = desc; 
#line 105
(sRGB) = 0; 
#line 106
} 
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\cuda_texture_types.h"
}; 
#line 3200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.h"
static __inline int mulhi(int a, int b); 
#line 3202
static __inline unsigned mulhi(unsigned a, unsigned b); 
#line 3204
static __inline unsigned mulhi(int a, unsigned b); 
#line 3206
static __inline unsigned mulhi(unsigned a, int b); 
#line 3208
static __inline __int64 mul64hi(__int64 a, __int64 b); 
#line 3210
static __inline unsigned __int64 mul64hi(unsigned __int64 a, unsigned __int64 b); 
#line 3212
static __inline unsigned __int64 mul64hi(__int64 a, unsigned __int64 b); 
#line 3214
static __inline unsigned __int64 mul64hi(unsigned __int64 a, __int64 b); 
#line 3216
static __inline int float_as_int(float a); 
#line 3218
static __inline float int_as_float(int a); 
#line 3220
static __inline float saturate(float a); 
#line 3222
static __inline int mul24(int a, int b); 
#line 3224
static __inline unsigned umul24(unsigned a, unsigned b); 
#line 3226
static __inline void trap(); 
#line 3229
static __inline void brkpt(int c = 0); 
#line 3231
static __inline void syncthreads(); 
#line 3233
static __inline void prof_trigger(int e); 
#line 3235
static __inline void threadfence(bool global = true); 
#line 3237
static __inline int float2int(float a, cudaRoundMode mode = cudaRoundZero); 
#line 3239
static __inline unsigned float2uint(float a, cudaRoundMode mode = cudaRoundZero); 
#line 3241
static __inline float int2float(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 3243
static __inline float uint2float(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline int mulhi(int a, int b) 
#line 80
{int volatile ___ = 1;(void)a;(void)b;
#line 82
::exit(___);}
#if 0
#line 80
{ 
#line 81
return __mulhi(a, b); 
#line 82
} 
#endif
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(unsigned a, unsigned b) 
#line 85
{int volatile ___ = 1;(void)a;(void)b;
#line 87
::exit(___);}
#if 0
#line 85
{ 
#line 86
return __umulhi(a, b); 
#line 87
} 
#endif
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(int a, unsigned b) 
#line 90
{int volatile ___ = 1;(void)a;(void)b;
#line 92
::exit(___);}
#if 0
#line 90
{ 
#line 91
return __umulhi((unsigned)a, b); 
#line 92
} 
#endif
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline unsigned mulhi(unsigned a, int b) 
#line 95
{int volatile ___ = 1;(void)a;(void)b;
#line 97
::exit(___);}
#if 0
#line 95
{ 
#line 96
return __umulhi(a, (unsigned)b); 
#line 97
} 
#endif
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline __int64 mul64hi(__int64 a, __int64 b) 
#line 100
{int volatile ___ = 1;(void)a;(void)b;
#line 102
::exit(___);}
#if 0
#line 100
{ 
#line 101
return __mul64hi(a, b); 
#line 102
} 
#endif
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, unsigned __int64 b) 
#line 105
{int volatile ___ = 1;(void)a;(void)b;
#line 107
::exit(___);}
#if 0
#line 105
{ 
#line 106
return __umul64hi(a, b); 
#line 107
} 
#endif
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(__int64 a, unsigned __int64 b) 
#line 110
{int volatile ___ = 1;(void)a;(void)b;
#line 112
::exit(___);}
#if 0
#line 110
{ 
#line 111
return __umul64hi((unsigned __int64)a, b); 
#line 112
} 
#endif
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline unsigned __int64 mul64hi(unsigned __int64 a, __int64 b) 
#line 115
{int volatile ___ = 1;(void)a;(void)b;
#line 117
::exit(___);}
#if 0
#line 115
{ 
#line 116
return __umul64hi(a, (unsigned __int64)b); 
#line 117
} 
#endif
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline int float_as_int(float a) 
#line 120
{int volatile ___ = 1;(void)a;
#line 122
::exit(___);}
#if 0
#line 120
{ 
#line 121
return __float_as_int(a); 
#line 122
} 
#endif
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline float int_as_float(int a) 
#line 125
{int volatile ___ = 1;(void)a;
#line 127
::exit(___);}
#if 0
#line 125
{ 
#line 126
return __int_as_float(a); 
#line 127
} 
#endif
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline float saturate(float a) 
#line 130
{int volatile ___ = 1;(void)a;
#line 132
::exit(___);}
#if 0
#line 130
{ 
#line 131
return __saturatef(a); 
#line 132
} 
#endif
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline int mul24(int a, int b) 
#line 135
{int volatile ___ = 1;(void)a;(void)b;
#line 137
::exit(___);}
#if 0
#line 135
{ 
#line 136
return __mul24(a, b); 
#line 137
} 
#endif
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline unsigned umul24(unsigned a, unsigned b) 
#line 140
{int volatile ___ = 1;(void)a;(void)b;
#line 142
::exit(___);}
#if 0
#line 140
{ 
#line 141
return __umul24(a, b); 
#line 142
} 
#endif
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline void trap() 
#line 145
{int volatile ___ = 1;
#line 147
::exit(___);}
#if 0
#line 145
{ 
#line 146
__trap(); 
#line 147
} 
#endif
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline void brkpt(int c) 
#line 151
{int volatile ___ = 1;(void)c;
#line 153
::exit(___);}
#if 0
#line 151
{ 
#line 152
__brkpt(c); 
#line 153
} 
#endif
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline void syncthreads() 
#line 156
{int volatile ___ = 1;
#line 158
::exit(___);}
#if 0
#line 156
{ 
#line 157
__syncthreads(); 
#line 158
} 
#endif
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline void prof_trigger(int e) 
#line 161
{int volatile ___ = 1;(void)e;
#line 178
::exit(___);}
#if 0
#line 161
{ 
#line 162
if (e == 0) { __prof_trigger(0); } else { 
#line 163
if (e == 1) { __prof_trigger(1); } else { 
#line 164
if (e == 2) { __prof_trigger(2); } else { 
#line 165
if (e == 3) { __prof_trigger(3); } else { 
#line 166
if (e == 4) { __prof_trigger(4); } else { 
#line 167
if (e == 5) { __prof_trigger(5); } else { 
#line 168
if (e == 6) { __prof_trigger(6); } else { 
#line 169
if (e == 7) { __prof_trigger(7); } else { 
#line 170
if (e == 8) { __prof_trigger(8); } else { 
#line 171
if (e == 9) { __prof_trigger(9); } else { 
#line 172
if (e == 10) { __prof_trigger(10); } else { 
#line 173
if (e == 11) { __prof_trigger(11); } else { 
#line 174
if (e == 12) { __prof_trigger(12); } else { 
#line 175
if (e == 13) { __prof_trigger(13); } else { 
#line 176
if (e == 14) { __prof_trigger(14); } else { 
#line 177
if (e == 15) { __prof_trigger(15); }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  }  
#line 178
} 
#endif
#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline void threadfence(bool global) 
#line 181
{int volatile ___ = 1;(void)global;
#line 183
::exit(___);}
#if 0
#line 181
{ 
#line 182
global ? __threadfence() : __threadfence_block(); 
#line 183
} 
#endif
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline int float2int(float a, cudaRoundMode mode) 
#line 186
{int volatile ___ = 1;(void)a;(void)mode;
#line 191
::exit(___);}
#if 0
#line 186
{ 
#line 187
return (mode == (cudaRoundNearest)) ? __float2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2int_rd(a) : __float2int_rz(a))); 
#line 191
} 
#endif
#line 193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline unsigned float2uint(float a, cudaRoundMode mode) 
#line 194
{int volatile ___ = 1;(void)a;(void)mode;
#line 199
::exit(___);}
#if 0
#line 194
{ 
#line 195
return (mode == (cudaRoundNearest)) ? __float2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __float2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __float2uint_rd(a) : __float2uint_rz(a))); 
#line 199
} 
#endif
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline float int2float(int a, cudaRoundMode mode) 
#line 202
{int volatile ___ = 1;(void)a;(void)mode;
#line 207
::exit(___);}
#if 0
#line 202
{ 
#line 203
return (mode == (cudaRoundZero)) ? __int2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __int2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __int2float_rd(a) : __int2float_rn(a))); 
#line 207
} 
#endif
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_functions.hpp"
static __inline float uint2float(unsigned a, cudaRoundMode mode) 
#line 210
{int volatile ___ = 1;(void)a;(void)mode;
#line 215
::exit(___);}
#if 0
#line 210
{ 
#line 211
return (mode == (cudaRoundZero)) ? __uint2float_rz(a) : ((mode == (cudaRoundPosInf)) ? __uint2float_ru(a) : ((mode == (cudaRoundMinInf)) ? __uint2float_rd(a) : __uint2float_rn(a))); 
#line 215
} 
#endif
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.h"
static __inline int atomicAdd(int * address, int val); 
#line 107
static __inline unsigned atomicAdd(unsigned * address, unsigned val); 
#line 109
static __inline int atomicSub(int * address, int val); 
#line 111
static __inline unsigned atomicSub(unsigned * address, unsigned val); 
#line 113
static __inline int atomicExch(int * address, int val); 
#line 115
static __inline unsigned atomicExch(unsigned * address, unsigned val); 
#line 117
static __inline float atomicExch(float * address, float val); 
#line 119
static __inline int atomicMin(int * address, int val); 
#line 121
static __inline unsigned atomicMin(unsigned * address, unsigned val); 
#line 123
static __inline int atomicMax(int * address, int val); 
#line 125
static __inline unsigned atomicMax(unsigned * address, unsigned val); 
#line 127
static __inline unsigned atomicInc(unsigned * address, unsigned val); 
#line 129
static __inline unsigned atomicDec(unsigned * address, unsigned val); 
#line 131
static __inline int atomicAnd(int * address, int val); 
#line 133
static __inline unsigned atomicAnd(unsigned * address, unsigned val); 
#line 135
static __inline int atomicOr(int * address, int val); 
#line 137
static __inline unsigned atomicOr(unsigned * address, unsigned val); 
#line 139
static __inline int atomicXor(int * address, int val); 
#line 141
static __inline unsigned atomicXor(unsigned * address, unsigned val); 
#line 143
static __inline int atomicCAS(int * address, int compare, int val); 
#line 145
static __inline unsigned atomicCAS(unsigned * address, unsigned compare, unsigned val); 
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.h"
static __inline unsigned __int64 atomicAdd(unsigned __int64 * address, unsigned __int64 val); 
#line 180
static __inline unsigned __int64 atomicExch(unsigned __int64 * address, unsigned __int64 val); 
#line 182
static __inline unsigned __int64 atomicCAS(unsigned __int64 * address, unsigned __int64 compare, unsigned __int64 val); 
#line 184
static __inline bool any(bool cond); 
#line 186
static __inline bool all(bool cond); 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline int atomicAdd(int *address, int val) 
#line 79
{int volatile ___ = 1;(void)address;(void)val;
#line 81
::exit(___);}
#if 0
#line 79
{ 
#line 80
return __iAtomicAdd(address, val); 
#line 81
} 
#endif
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned atomicAdd(unsigned *address, unsigned val) 
#line 84
{int volatile ___ = 1;(void)address;(void)val;
#line 86
::exit(___);}
#if 0
#line 84
{ 
#line 85
return __uAtomicAdd(address, val); 
#line 86
} 
#endif
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline int atomicSub(int *address, int val) 
#line 89
{int volatile ___ = 1;(void)address;(void)val;
#line 91
::exit(___);}
#if 0
#line 89
{ 
#line 90
return __iAtomicAdd(address, (unsigned)(-val)); 
#line 91
} 
#endif
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned atomicSub(unsigned *address, unsigned val) 
#line 94
{int volatile ___ = 1;(void)address;(void)val;
#line 96
::exit(___);}
#if 0
#line 94
{ 
#line 95
return __uAtomicAdd(address, (unsigned)(-((int)val))); 
#line 96
} 
#endif
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline int atomicExch(int *address, int val) 
#line 99
{int volatile ___ = 1;(void)address;(void)val;
#line 101
::exit(___);}
#if 0
#line 99
{ 
#line 100
return __iAtomicExch(address, val); 
#line 101
} 
#endif
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned atomicExch(unsigned *address, unsigned val) 
#line 104
{int volatile ___ = 1;(void)address;(void)val;
#line 106
::exit(___);}
#if 0
#line 104
{ 
#line 105
return __uAtomicExch(address, val); 
#line 106
} 
#endif
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline float atomicExch(float *address, float val) 
#line 109
{int volatile ___ = 1;(void)address;(void)val;
#line 111
::exit(___);}
#if 0
#line 109
{ 
#line 110
return __fAtomicExch(address, val); 
#line 111
} 
#endif
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline int atomicMin(int *address, int val) 
#line 114
{int volatile ___ = 1;(void)address;(void)val;
#line 116
::exit(___);}
#if 0
#line 114
{ 
#line 115
return __iAtomicMin(address, val); 
#line 116
} 
#endif
#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned atomicMin(unsigned *address, unsigned val) 
#line 119
{int volatile ___ = 1;(void)address;(void)val;
#line 121
::exit(___);}
#if 0
#line 119
{ 
#line 120
return __uAtomicMin(address, val); 
#line 121
} 
#endif
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline int atomicMax(int *address, int val) 
#line 124
{int volatile ___ = 1;(void)address;(void)val;
#line 126
::exit(___);}
#if 0
#line 124
{ 
#line 125
return __iAtomicMax(address, val); 
#line 126
} 
#endif
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned atomicMax(unsigned *address, unsigned val) 
#line 129
{int volatile ___ = 1;(void)address;(void)val;
#line 131
::exit(___);}
#if 0
#line 129
{ 
#line 130
return __uAtomicMax(address, val); 
#line 131
} 
#endif
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned atomicInc(unsigned *address, unsigned val) 
#line 134
{int volatile ___ = 1;(void)address;(void)val;
#line 136
::exit(___);}
#if 0
#line 134
{ 
#line 135
return __uAtomicInc(address, val); 
#line 136
} 
#endif
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned atomicDec(unsigned *address, unsigned val) 
#line 139
{int volatile ___ = 1;(void)address;(void)val;
#line 141
::exit(___);}
#if 0
#line 139
{ 
#line 140
return __uAtomicDec(address, val); 
#line 141
} 
#endif
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline int atomicAnd(int *address, int val) 
#line 144
{int volatile ___ = 1;(void)address;(void)val;
#line 146
::exit(___);}
#if 0
#line 144
{ 
#line 145
return __iAtomicAnd(address, val); 
#line 146
} 
#endif
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned atomicAnd(unsigned *address, unsigned val) 
#line 149
{int volatile ___ = 1;(void)address;(void)val;
#line 151
::exit(___);}
#if 0
#line 149
{ 
#line 150
return __uAtomicAnd(address, val); 
#line 151
} 
#endif
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline int atomicOr(int *address, int val) 
#line 154
{int volatile ___ = 1;(void)address;(void)val;
#line 156
::exit(___);}
#if 0
#line 154
{ 
#line 155
return __iAtomicOr(address, val); 
#line 156
} 
#endif
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned atomicOr(unsigned *address, unsigned val) 
#line 159
{int volatile ___ = 1;(void)address;(void)val;
#line 161
::exit(___);}
#if 0
#line 159
{ 
#line 160
return __uAtomicOr(address, val); 
#line 161
} 
#endif
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline int atomicXor(int *address, int val) 
#line 164
{int volatile ___ = 1;(void)address;(void)val;
#line 166
::exit(___);}
#if 0
#line 164
{ 
#line 165
return __iAtomicXor(address, val); 
#line 166
} 
#endif
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned atomicXor(unsigned *address, unsigned val) 
#line 169
{int volatile ___ = 1;(void)address;(void)val;
#line 171
::exit(___);}
#if 0
#line 169
{ 
#line 170
return __uAtomicXor(address, val); 
#line 171
} 
#endif
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline int atomicCAS(int *address, int compare, int val) 
#line 174
{int volatile ___ = 1;(void)address;(void)compare;(void)val;
#line 176
::exit(___);}
#if 0
#line 174
{ 
#line 175
return __iAtomicCAS(address, compare, val); 
#line 176
} 
#endif
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned atomicCAS(unsigned *address, unsigned compare, unsigned val) 
#line 179
{int volatile ___ = 1;(void)address;(void)compare;(void)val;
#line 181
::exit(___);}
#if 0
#line 179
{ 
#line 180
return __uAtomicCAS(address, compare, val); 
#line 181
} 
#endif
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned __int64 atomicAdd(unsigned __int64 *address, unsigned __int64 val) 
#line 202
{int volatile ___ = 1;(void)address;(void)val;
#line 204
::exit(___);}
#if 0
#line 202
{ 
#line 203
return __ullAtomicAdd(address, val); 
#line 204
} 
#endif
#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned __int64 atomicExch(unsigned __int64 *address, unsigned __int64 val) 
#line 207
{int volatile ___ = 1;(void)address;(void)val;
#line 209
::exit(___);}
#if 0
#line 207
{ 
#line 208
return __ullAtomicExch(address, val); 
#line 209
} 
#endif
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline unsigned __int64 atomicCAS(unsigned __int64 *address, unsigned __int64 compare, unsigned __int64 val) 
#line 212
{int volatile ___ = 1;(void)address;(void)compare;(void)val;
#line 214
::exit(___);}
#if 0
#line 212
{ 
#line 213
return __ullAtomicCAS(address, compare, val); 
#line 214
} 
#endif
#line 216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline bool any(bool cond) 
#line 217
{int volatile ___ = 1;(void)cond;
#line 219
::exit(___);}
#if 0
#line 217
{ 
#line 218
return (bool)__any((int)cond); 
#line 219
} 
#endif
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_atomic_functions.hpp"
static __inline bool all(bool cond) 
#line 222
{int volatile ___ = 1;(void)cond;
#line 224
::exit(___);}
#if 0
#line 222
{ 
#line 223
return (bool)__all((int)cond); 
#line 224
} 
#endif
#line 1141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.h"
static __inline double fma(double a, double b, double c, cudaRoundMode mode); 
#line 1143
static __inline double dmul(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1145
static __inline double dadd(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1147
static __inline double dsub(double a, double b, cudaRoundMode mode = cudaRoundNearest); 
#line 1149
static __inline int double2int(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1151
static __inline unsigned double2uint(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1153
static __inline __int64 double2ll(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1155
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode = cudaRoundZero); 
#line 1157
static __inline double ll2double(__int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1159
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode = cudaRoundNearest); 
#line 1161
static __inline double int2double(int a, cudaRoundMode mode = cudaRoundNearest); 
#line 1163
static __inline double uint2double(unsigned a, cudaRoundMode mode = cudaRoundNearest); 
#line 1165
static __inline double float2double(float a, cudaRoundMode mode = cudaRoundNearest); 
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline double fma(double a, double b, double c, cudaRoundMode mode) 
#line 84
{int volatile ___ = 1;(void)a;(void)b;(void)c;(void)mode;
#line 89
::exit(___);}
#if 0
#line 84
{ 
#line 85
return (mode == (cudaRoundZero)) ? __fma_rz(a, b, c) : ((mode == (cudaRoundPosInf)) ? __fma_ru(a, b, c) : ((mode == (cudaRoundMinInf)) ? __fma_rd(a, b, c) : __fma_rn(a, b, c))); 
#line 89
} 
#endif
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline double dmul(double a, double b, cudaRoundMode mode) 
#line 92
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 97
::exit(___);}
#if 0
#line 92
{ 
#line 93
return (mode == (cudaRoundZero)) ? __dmul_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dmul_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dmul_rd(a, b) : __dmul_rn(a, b))); 
#line 97
} 
#endif
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline double dadd(double a, double b, cudaRoundMode mode) 
#line 100
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 105
::exit(___);}
#if 0
#line 100
{ 
#line 101
return (mode == (cudaRoundZero)) ? __dadd_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dadd_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dadd_rd(a, b) : __dadd_rn(a, b))); 
#line 105
} 
#endif
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline double dsub(double a, double b, cudaRoundMode mode) 
#line 108
{int volatile ___ = 1;(void)a;(void)b;(void)mode;
#line 113
::exit(___);}
#if 0
#line 108
{ 
#line 109
return (mode == (cudaRoundZero)) ? __dsub_rz(a, b) : ((mode == (cudaRoundPosInf)) ? __dsub_ru(a, b) : ((mode == (cudaRoundMinInf)) ? __dsub_rd(a, b) : __dsub_rn(a, b))); 
#line 113
} 
#endif
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline int double2int(double a, cudaRoundMode mode) 
#line 116
{int volatile ___ = 1;(void)a;(void)mode;
#line 121
::exit(___);}
#if 0
#line 116
{ 
#line 117
return (mode == (cudaRoundNearest)) ? __double2int_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2int_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2int_rd(a) : __double2int_rz(a))); 
#line 121
} 
#endif
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline unsigned double2uint(double a, cudaRoundMode mode) 
#line 124
{int volatile ___ = 1;(void)a;(void)mode;
#line 129
::exit(___);}
#if 0
#line 124
{ 
#line 125
return (mode == (cudaRoundNearest)) ? __double2uint_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2uint_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2uint_rd(a) : __double2uint_rz(a))); 
#line 129
} 
#endif
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline __int64 double2ll(double a, cudaRoundMode mode) 
#line 132
{int volatile ___ = 1;(void)a;(void)mode;
#line 137
::exit(___);}
#if 0
#line 132
{ 
#line 133
return (mode == (cudaRoundNearest)) ? __double2ll_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ll_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ll_rd(a) : __double2ll_rz(a))); 
#line 137
} 
#endif
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline unsigned __int64 double2ull(double a, cudaRoundMode mode) 
#line 140
{int volatile ___ = 1;(void)a;(void)mode;
#line 145
::exit(___);}
#if 0
#line 140
{ 
#line 141
return (mode == (cudaRoundNearest)) ? __double2ull_rn(a) : ((mode == (cudaRoundPosInf)) ? __double2ull_ru(a) : ((mode == (cudaRoundMinInf)) ? __double2ull_rd(a) : __double2ull_rz(a))); 
#line 145
} 
#endif
#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline double ll2double(__int64 a, cudaRoundMode mode) 
#line 148
{int volatile ___ = 1;(void)a;(void)mode;
#line 153
::exit(___);}
#if 0
#line 148
{ 
#line 149
return (mode == (cudaRoundZero)) ? __ll2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ll2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ll2double_rd(a) : __ll2double_rn(a))); 
#line 153
} 
#endif
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline double ull2double(unsigned __int64 a, cudaRoundMode mode) 
#line 156
{int volatile ___ = 1;(void)a;(void)mode;
#line 161
::exit(___);}
#if 0
#line 156
{ 
#line 157
return (mode == (cudaRoundZero)) ? __ull2double_rz(a) : ((mode == (cudaRoundPosInf)) ? __ull2double_ru(a) : ((mode == (cudaRoundMinInf)) ? __ull2double_rd(a) : __ull2double_rn(a))); 
#line 161
} 
#endif
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline double int2double(int a, cudaRoundMode mode) 
#line 164
{int volatile ___ = 1;(void)a;(void)mode;
#line 166
::exit(___);}
#if 0
#line 164
{ 
#line 165
return (double)a; 
#line 166
} 
#endif
#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline double uint2double(unsigned a, cudaRoundMode mode) 
#line 169
{int volatile ___ = 1;(void)a;(void)mode;
#line 171
::exit(___);}
#if 0
#line 169
{ 
#line 170
return (double)a; 
#line 171
} 
#endif
#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_double_functions.hpp"
static __inline double float2double(float a, cudaRoundMode mode) 
#line 174
{int volatile ___ = 1;(void)a;(void)mode;
#line 176
::exit(___);}
#if 0
#line 174
{ 
#line 175
return (double)a; 
#line 176
} 
#endif
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_20_atomic_functions.h"
static __inline float atomicAdd(float * address, float val); 
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_20_atomic_functions.hpp"
static __inline float atomicAdd(float *address, float val) 
#line 77
{int volatile ___ = 1;(void)address;(void)val;
#line 79
::exit(___);}
#if 0
#line 77
{ 
#line 78
return __fAtomicAdd(address, val); 
#line 79
} 
#endif
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_atomic_functions.h"
static __inline __int64 atomicMin(__int64 * address, __int64 val); 
#line 95
static __inline __int64 atomicMax(__int64 * address, __int64 val); 
#line 97
static __inline unsigned __int64 atomicMin(unsigned __int64 * address, unsigned __int64 val); 
#line 99
static __inline unsigned __int64 atomicMax(unsigned __int64 * address, unsigned __int64 val); 
#line 101
static __inline unsigned __int64 atomicAnd(unsigned __int64 * address, unsigned __int64 val); 
#line 103
static __inline unsigned __int64 atomicOr(unsigned __int64 * address, unsigned __int64 val); 
#line 105
static __inline unsigned __int64 atomicXor(unsigned __int64 * address, unsigned __int64 val); 
#line 78 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_atomic_functions.hpp"
static __inline __int64 atomicMin(__int64 *address, __int64 val) 
#line 79
{int volatile ___ = 1;(void)address;(void)val;
#line 81
::exit(___);}
#if 0
#line 79
{ 
#line 80
return __illAtomicMin(address, val); 
#line 81
} 
#endif
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_atomic_functions.hpp"
static __inline __int64 atomicMax(__int64 *address, __int64 val) 
#line 84
{int volatile ___ = 1;(void)address;(void)val;
#line 86
::exit(___);}
#if 0
#line 84
{ 
#line 85
return __illAtomicMax(address, val); 
#line 86
} 
#endif
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_atomic_functions.hpp"
static __inline unsigned __int64 atomicMin(unsigned __int64 *address, unsigned __int64 val) 
#line 89
{int volatile ___ = 1;(void)address;(void)val;
#line 91
::exit(___);}
#if 0
#line 89
{ 
#line 90
return __ullAtomicMin(address, val); 
#line 91
} 
#endif
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_atomic_functions.hpp"
static __inline unsigned __int64 atomicMax(unsigned __int64 *address, unsigned __int64 val) 
#line 94
{int volatile ___ = 1;(void)address;(void)val;
#line 96
::exit(___);}
#if 0
#line 94
{ 
#line 95
return __ullAtomicMax(address, val); 
#line 96
} 
#endif
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_atomic_functions.hpp"
static __inline unsigned __int64 atomicAnd(unsigned __int64 *address, unsigned __int64 val) 
#line 99
{int volatile ___ = 1;(void)address;(void)val;
#line 101
::exit(___);}
#if 0
#line 99
{ 
#line 100
return __ullAtomicAnd(address, val); 
#line 101
} 
#endif
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_atomic_functions.hpp"
static __inline unsigned __int64 atomicOr(unsigned __int64 *address, unsigned __int64 val) 
#line 104
{int volatile ___ = 1;(void)address;(void)val;
#line 106
::exit(___);}
#if 0
#line 104
{ 
#line 105
return __ullAtomicOr(address, val); 
#line 106
} 
#endif
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_atomic_functions.hpp"
static __inline unsigned __int64 atomicXor(unsigned __int64 *address, unsigned __int64 val) 
#line 109
{int volatile ___ = 1;(void)address;(void)val;
#line 111
::exit(___);}
#if 0
#line 109
{ 
#line 110
return __ullAtomicXor(address, val); 
#line 111
} 
#endif
#line 415 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_20_intrinsics.h"
static __inline unsigned ballot(bool pred); 
#line 417
static __inline int syncthreads_count(bool pred); 
#line 419
static __inline bool syncthreads_and(bool pred); 
#line 421
static __inline bool syncthreads_or(bool pred); 
#line 426
static __inline unsigned __isGlobal(const void * ptr); 
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_20_intrinsics.hpp"
static __inline unsigned ballot(bool pred) 
#line 78
{int volatile ___ = 1;(void)pred;
#line 80
::exit(___);}
#if 0
#line 78
{ 
#line 79
return __ballot((int)pred); 
#line 80
} 
#endif
#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_20_intrinsics.hpp"
static __inline int syncthreads_count(bool pred) 
#line 83
{int volatile ___ = 1;(void)pred;
#line 85
::exit(___);}
#if 0
#line 83
{ 
#line 84
return __syncthreads_count((int)pred); 
#line 85
} 
#endif
#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_20_intrinsics.hpp"
static __inline bool syncthreads_and(bool pred) 
#line 88
{int volatile ___ = 1;(void)pred;
#line 90
::exit(___);}
#if 0
#line 88
{ 
#line 89
return (bool)__syncthreads_and((int)pred); 
#line 90
} 
#endif
#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_20_intrinsics.hpp"
static __inline bool syncthreads_or(bool pred) 
#line 93
{int volatile ___ = 1;(void)pred;
#line 95
::exit(___);}
#if 0
#line 93
{ 
#line 94
return (bool)__syncthreads_or((int)pred); 
#line 95
} 
#endif
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_20_intrinsics.hpp"
static __inline unsigned __isGlobal(const void *ptr) 
#line 101
{int volatile ___ = 1;(void)ptr;
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_20_intrinsics.hpp"
::exit(___);}
#if 0
#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_20_intrinsics.hpp"
{ 
#line 102
unsigned ret; 
#line 103
__asm { 
	    .reg .pred p; 
	    isspacep.global p, %1; 
	    selp.u32 %0, 1, 0, p;  
	} 
	
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_20_intrinsics.hpp"
return ret; 
#line 114
} 
#endif
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.h"
static __inline int __shfl(int var, int srcLane, int width = 32); 
#line 93
static __inline unsigned __shfl(unsigned var, int srcLane, int width = 32); 
#line 95
static __inline int __shfl_up(int var, unsigned delta, int width = 32); 
#line 96
static __inline unsigned __shfl_up(unsigned var, unsigned delta, int width = 32); 
#line 98
static __inline int __shfl_down(int var, unsigned delta, int width = 32); 
#line 100
static __inline unsigned __shfl_down(unsigned var, unsigned delta, int width = 32); 
#line 102
static __inline int __shfl_xor(int var, int laneMask, int width = 32); 
#line 104
static __inline unsigned __shfl_xor(unsigned var, int laneMask, int width = 32); 
#line 106
static __inline float __shfl(float var, int srcLane, int width = 32); 
#line 108
static __inline float __shfl_up(float var, unsigned delta, int width = 32); 
#line 110
static __inline float __shfl_down(float var, unsigned delta, int width = 32); 
#line 112
static __inline float __shfl_xor(float var, int laneMask, int width = 32); 
#line 115
static __inline __int64 __shfl(__int64 var, int srcLane, int width = 32); 
#line 117
static __inline unsigned __int64 __shfl(unsigned __int64 var, int srcLane, int width = 32); 
#line 119
static __inline __int64 __shfl_up(__int64 var, unsigned delta, int width = 32); 
#line 121
static __inline unsigned __int64 __shfl_up(unsigned __int64 var, unsigned delta, int width = 32); 
#line 123
static __inline __int64 __shfl_down(__int64 var, unsigned delta, int width = 32); 
#line 125
static __inline unsigned __int64 __shfl_down(unsigned __int64 var, unsigned delta, int width = 32); 
#line 127
static __inline __int64 __shfl_xor(__int64 var, int laneMask, int width = 32); 
#line 129
static __inline unsigned __int64 __shfl_xor(unsigned __int64 var, int laneMask, int width = 32); 
#line 131
static __inline double __shfl(double var, int srcLane, int width = 32); 
#line 133
static __inline double __shfl_up(double var, unsigned delta, int width = 32); 
#line 135
static __inline double __shfl_down(double var, unsigned delta, int width = 32); 
#line 137
static __inline double __shfl_xor(double var, int laneMask, int width = 32); 
#line 141
static __inline long __shfl(long var, int srcLane, int width = 32); 
#line 143
static __inline unsigned long __shfl(unsigned long var, int srcLane, int width = 32); 
#line 145
static __inline long __shfl_up(long var, unsigned delta, int width = 32); 
#line 147
static __inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width = 32); 
#line 149
static __inline long __shfl_down(long var, unsigned delta, int width = 32); 
#line 151
static __inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width = 32); 
#line 153
static __inline long __shfl_xor(long var, int laneMask, int width = 32); 
#line 155
static __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width = 32); 
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline int __shfl(int var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
#line 104
::exit(___);}
#if 0
#line 99
{ 
#line 100
int ret; 
#line 101
int c = ((32 - width) << 8) | 31; 
#line 102
__asm shfl.idx.b32 %0, %1, %2, %3;
return ret; 
#line 104
} 
#endif
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline unsigned __shfl(unsigned var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
#line 108
::exit(___);}
#if 0
#line 106
{ 
#line 107
return (unsigned)__shfl((int)var, srcLane, width); 
#line 108
} 
#endif
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline int __shfl_up(int var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 115
::exit(___);}
#if 0
#line 110
{ 
#line 111
int ret; 
#line 112
int c = (32 - width) << 8; 
#line 113
__asm shfl.up.b32 %0, %1, %2, %3;
return ret; 
#line 115
} 
#endif
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline unsigned __shfl_up(unsigned var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 118
::exit(___);}
#if 0
#line 116
{ 
#line 117
return (unsigned)__shfl_up((int)var, delta, width); 
#line 118
} 
#endif
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline int __shfl_down(int var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 125
::exit(___);}
#if 0
#line 120
{ 
#line 121
int ret; 
#line 122
int c = ((32 - width) << 8) | 31; 
#line 123
__asm shfl.down.b32 %0, %1, %2, %3;
return ret; 
#line 125
} 
#endif
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline unsigned __shfl_down(unsigned var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 129
::exit(___);}
#if 0
#line 127
{ 
#line 128
return (unsigned)__shfl_down((int)var, delta, width); 
#line 129
} 
#endif
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline int __shfl_xor(int var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
#line 136
::exit(___);}
#if 0
#line 131
{ 
#line 132
int ret; 
#line 133
int c = ((32 - width) << 8) | 31; 
#line 134
__asm shfl.bfly.b32 %0, %1, %2, %3;
return ret; 
#line 136
} 
#endif
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline unsigned __shfl_xor(unsigned var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
#line 140
::exit(___);}
#if 0
#line 138
{ 
#line 139
return (unsigned)__shfl_xor((int)var, laneMask, width); 
#line 140
} 
#endif
#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline float __shfl(float var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
#line 148
::exit(___);}
#if 0
#line 142
{ 
#line 143
float ret; 
#line 144
int c; 
#line 145
c = (((32 - width) << 8) | 31); 
#line 146
__asm shfl.idx.b32 %0, %1, %2, %3;
return ret; 
#line 148
} 
#endif
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline float __shfl_up(float var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 156
::exit(___);}
#if 0
#line 150
{ 
#line 151
float ret; 
#line 152
int c; 
#line 153
c = ((32 - width) << 8); 
#line 154
__asm shfl.up.b32 %0, %1, %2, %3;
return ret; 
#line 156
} 
#endif
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline float __shfl_down(float var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 164
::exit(___);}
#if 0
#line 158
{ 
#line 159
float ret; 
#line 160
int c; 
#line 161
c = (((32 - width) << 8) | 31); 
#line 162
__asm shfl.down.b32 %0, %1, %2, %3;
return ret; 
#line 164
} 
#endif
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline float __shfl_xor(float var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
#line 172
::exit(___);}
#if 0
#line 166
{ 
#line 167
float ret; 
#line 168
int c; 
#line 169
c = (((32 - width) << 8) | 31); 
#line 170
__asm shfl.bfly.b32 %0, %1, %2, %3;
return ret; 
#line 172
} 
#endif
#line 175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline __int64 __shfl(__int64 var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
#line 182
::exit(___);}
#if 0
#line 175
{ 
#line 176
int lo, hi; 
#line 177
__asm mov.b64 {%0,%1}, %2;
hi = __shfl(hi, srcLane, width); 
#line 179
lo = __shfl(lo, srcLane, width); 
#line 180
__asm mov.b64 %0, {%1,%2};
return var; 
#line 182
} 
#endif
#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline unsigned __int64 __shfl(unsigned __int64 var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
#line 186
::exit(___);}
#if 0
#line 184
{ 
#line 185
return (unsigned __int64)__shfl((__int64)var, srcLane, width); 
#line 186
} 
#endif
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline __int64 __shfl_up(__int64 var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 195
::exit(___);}
#if 0
#line 188
{ 
#line 189
int lo, hi; 
#line 190
__asm mov.b64 {%0,%1}, %2;
hi = __shfl_up(hi, delta, width); 
#line 192
lo = __shfl_up(lo, delta, width); 
#line 193
__asm mov.b64 %0, {%1,%2};
return var; 
#line 195
} 
#endif
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline unsigned __int64 __shfl_up(unsigned __int64 var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 199
::exit(___);}
#if 0
#line 197
{ 
#line 198
return (unsigned __int64)__shfl_up((__int64)var, delta, width); 
#line 199
} 
#endif
#line 201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline __int64 __shfl_down(__int64 var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 208
::exit(___);}
#if 0
#line 201
{ 
#line 202
int lo, hi; 
#line 203
__asm mov.b64 {%0,%1}, %2;
hi = __shfl_down(hi, delta, width); 
#line 205
lo = __shfl_down(lo, delta, width); 
#line 206
__asm mov.b64 %0, {%1,%2};
return var; 
#line 208
} 
#endif
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline unsigned __int64 __shfl_down(unsigned __int64 var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 212
::exit(___);}
#if 0
#line 210
{ 
#line 211
return (unsigned __int64)__shfl_down((__int64)var, delta, width); 
#line 212
} 
#endif
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline __int64 __shfl_xor(__int64 var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
#line 221
::exit(___);}
#if 0
#line 214
{ 
#line 215
int lo, hi; 
#line 216
__asm mov.b64 {%0,%1}, %2;
hi = __shfl_xor(hi, laneMask, width); 
#line 218
lo = __shfl_xor(lo, laneMask, width); 
#line 219
__asm mov.b64 %0, {%1,%2};
return var; 
#line 221
} 
#endif
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline unsigned __int64 __shfl_xor(unsigned __int64 var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
#line 225
::exit(___);}
#if 0
#line 223
{ 
#line 224
return (unsigned __int64)__shfl_xor((__int64)var, laneMask, width); 
#line 225
} 
#endif
#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline double __shfl(double var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
#line 234
::exit(___);}
#if 0
#line 227
{ 
#line 228
float lo, hi; 
#line 229
__asm mov.b64 {%0,%1}, %2;
hi = __shfl(hi, srcLane, width); 
#line 231
lo = __shfl(lo, srcLane, width); 
#line 232
__asm mov.b64 %0, {%1,%2};
return var; 
#line 234
} 
#endif
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline double __shfl_up(double var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 243
::exit(___);}
#if 0
#line 236
{ 
#line 237
float lo, hi; 
#line 238
__asm mov.b64 {%0,%1}, %2;
hi = __shfl_up(hi, delta, width); 
#line 240
lo = __shfl_up(lo, delta, width); 
#line 241
__asm mov.b64 %0, {%1,%2};
return var; 
#line 243
} 
#endif
#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline double __shfl_down(double var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 252
::exit(___);}
#if 0
#line 245
{ 
#line 246
float lo, hi; 
#line 247
__asm mov.b64 {%0,%1}, %2;
hi = __shfl_down(hi, delta, width); 
#line 249
lo = __shfl_down(lo, delta, width); 
#line 250
__asm mov.b64 %0, {%1,%2};
return var; 
#line 252
} 
#endif
#line 254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline double __shfl_xor(double var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
#line 261
::exit(___);}
#if 0
#line 254
{ 
#line 255
float lo, hi; 
#line 256
__asm mov.b64 {%0,%1}, %2;
hi = __shfl_xor(hi, laneMask, width); 
#line 258
lo = __shfl_xor(lo, laneMask, width); 
#line 259
__asm mov.b64 %0, {%1,%2};
return var; 
#line 261
} 
#endif
#line 265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline long __shfl(long var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
#line 269
::exit(___);}
#if 0
#line 265
{ 
#line 266
return (sizeof(long) == sizeof(__int64)) ? __shfl((__int64)var, srcLane, width) : (__shfl((int)var, srcLane, width)); 
#line 269
} 
#endif
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline unsigned long __shfl(unsigned long var, int srcLane, int width) {int volatile ___ = 1;(void)var;(void)srcLane;(void)width;
#line 275
::exit(___);}
#if 0
#line 271
{ 
#line 272
return (sizeof(long) == sizeof(__int64)) ? __shfl((unsigned __int64)var, srcLane, width) : (__shfl((unsigned)var, srcLane, width)); 
#line 275
} 
#endif
#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline long __shfl_up(long var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 281
::exit(___);}
#if 0
#line 277
{ 
#line 278
return (sizeof(long) == sizeof(__int64)) ? __shfl_up((__int64)var, delta, width) : (__shfl_up((int)var, delta, width)); 
#line 281
} 
#endif
#line 283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline unsigned long __shfl_up(unsigned long var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 287
::exit(___);}
#if 0
#line 283
{ 
#line 284
return (sizeof(long) == sizeof(__int64)) ? __shfl_up((unsigned __int64)var, delta, width) : (__shfl_up((unsigned)var, delta, width)); 
#line 287
} 
#endif
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline long __shfl_down(long var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 293
::exit(___);}
#if 0
#line 289
{ 
#line 290
return (sizeof(long) == sizeof(__int64)) ? __shfl_down((__int64)var, delta, width) : (__shfl_down((int)var, delta, width)); 
#line 293
} 
#endif
#line 295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline unsigned long __shfl_down(unsigned long var, unsigned delta, int width) {int volatile ___ = 1;(void)var;(void)delta;(void)width;
#line 299
::exit(___);}
#if 0
#line 295
{ 
#line 296
return (sizeof(long) == sizeof(__int64)) ? __shfl_down((unsigned __int64)var, delta, width) : (__shfl_down((unsigned)var, delta, width)); 
#line 299
} 
#endif
#line 301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline long __shfl_xor(long var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
#line 305
::exit(___);}
#if 0
#line 301
{ 
#line 302
return (sizeof(long) == sizeof(__int64)) ? __shfl_xor((__int64)var, laneMask, width) : (__shfl_xor((int)var, laneMask, width)); 
#line 305
} 
#endif
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_30_intrinsics.hpp"
static __inline unsigned long __shfl_xor(unsigned long var, int laneMask, int width) {int volatile ___ = 1;(void)var;(void)laneMask;(void)width;
#line 311
::exit(___);}
#if 0
#line 307
{ 
#line 308
return (sizeof(long) == sizeof(__int64)) ? __shfl_xor((unsigned __int64)var, laneMask, width) : (__shfl_xor((unsigned)var, laneMask, width)); 
#line 311
} 
#endif
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.h"
static __inline long __ldg(const long * ptr); 
#line 81
static __inline unsigned long __ldg(const unsigned long * ptr); 
#line 84
static __inline char __ldg(const char * ptr); 
#line 85
static __inline short __ldg(const short * ptr); 
#line 86
static __inline int __ldg(const int * ptr); 
#line 87
static __inline __int64 __ldg(const __int64 * ptr); 
#line 88
static __inline char2 __ldg(const char2 * ptr); 
#line 89
static __inline char4 __ldg(const char4 * ptr); 
#line 90
static __inline short2 __ldg(const short2 * ptr); 
#line 91
static __inline short4 __ldg(const short4 * ptr); 
#line 92
static __inline int2 __ldg(const int2 * ptr); 
#line 93
static __inline int4 __ldg(const int4 * ptr); 
#line 94
static __inline longlong2 __ldg(const longlong2 * ptr); 
#line 96
static __inline unsigned char __ldg(const unsigned char * ptr); 
#line 97
static __inline unsigned short __ldg(const unsigned short * ptr); 
#line 98
static __inline unsigned __ldg(const unsigned * ptr); 
#line 99
static __inline unsigned __int64 __ldg(const unsigned __int64 * ptr); 
#line 100
static __inline uchar2 __ldg(const uchar2 * ptr); 
#line 101
static __inline uchar4 __ldg(const uchar4 * ptr); 
#line 102
static __inline ushort2 __ldg(const ushort2 * ptr); 
#line 103
static __inline ushort4 __ldg(const ushort4 * ptr); 
#line 104
static __inline uint2 __ldg(const uint2 * ptr); 
#line 105
static __inline uint4 __ldg(const uint4 * ptr); 
#line 106
static __inline ulonglong2 __ldg(const ulonglong2 * ptr); 
#line 108
static __inline float __ldg(const float * ptr); 
#line 109
static __inline double __ldg(const double * ptr); 
#line 110
static __inline float2 __ldg(const float2 * ptr); 
#line 111
static __inline float4 __ldg(const float4 * ptr); 
#line 112
static __inline double2 __ldg(const double2 * ptr); 
#line 119
static __inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift); 
#line 120
static __inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift); 
#line 123
static __inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift); 
#line 124
static __inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift); 
#line 102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline long __ldg(const long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 102
{ unsigned long ret; __asm ld.global.nc.s32 %0, [%1];
#line 102
return (long)ret; } 
#endif
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline unsigned long __ldg(const unsigned long *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 103
{ unsigned long ret; __asm ld.global.nc.u32 %0, [%1];
#line 103
return ret; } 
#endif
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline char __ldg(const char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 107
{ unsigned ret; __asm ld.global.nc.s8 %0, [%1];
#line 107
return (char)ret; } 
#endif
#line 108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline short __ldg(const short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 108
{ unsigned short ret; __asm ld.global.nc.s16 %0, [%1];
#line 108
return (short)ret; } 
#endif
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline int __ldg(const int *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 109
{ unsigned ret; __asm ld.global.nc.s32 %0, [%1];
#line 109
return (int)ret; } 
#endif
#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline __int64 __ldg(const __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 110
{ unsigned __int64 ret; __asm ld.global.nc.s64 %0, [%1];
#line 110
return (__int64)ret; } 
#endif
#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline char2 __ldg(const char2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 111
{ char2 ret; int2 tmp; __asm ld.global.nc.v2.s8 {%0,%1}, [%2];
#line 111
(ret.x) = ((char)(tmp.x)); (ret.y) = ((char)(tmp.y)); return ret; } 
#endif
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline char4 __ldg(const char4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 112
{ char4 ret; int4 tmp; __asm ld.global.nc.v4.s8 {%0,%1,%2,%3}, [%4];
#line 112
(ret.x) = ((char)(tmp.x)); (ret.y) = ((char)(tmp.y)); (ret.z) = ((char)(tmp.z)); (ret.w) = ((char)(tmp.w)); return ret; } 
#endif
#line 113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline short2 __ldg(const short2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 113
{ short2 ret; __asm ld.global.nc.v2.s16 {%0,%1}, [%2];
#line 113
return ret; } 
#endif
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline short4 __ldg(const short4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 114
{ short4 ret; __asm ld.global.nc.v4.s16 {%0,%1,%2,%3}, [%4];
#line 114
return ret; } 
#endif
#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline int2 __ldg(const int2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 115
{ int2 ret; __asm ld.global.nc.v2.s32 {%0,%1}, [%2];
#line 115
return ret; } 
#endif
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline int4 __ldg(const int4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 116
{ int4 ret; __asm ld.global.nc.v4.s32 {%0,%1,%2,%3}, [%4];
#line 116
return ret; } 
#endif
#line 117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline longlong2 __ldg(const longlong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 117
{ longlong2 ret; __asm ld.global.nc.v2.s64 %0, [%1];
#line 117
return ret; } 
#endif
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline unsigned char __ldg(const unsigned char *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 119
{ unsigned ret; __asm ld.global.nc.u8 %0, [%1];
#line 119
return (unsigned char)ret; } 
#endif
#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline unsigned short __ldg(const unsigned short *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 120
{ unsigned short ret; __asm ld.global.nc.u16 %0, [%1];
#line 120
return ret; } 
#endif
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline unsigned __ldg(const unsigned *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 121
{ unsigned ret; __asm ld.global.nc.u32 %0, [%1];
#line 121
return ret; } 
#endif
#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline unsigned __int64 __ldg(const unsigned __int64 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 122
{ unsigned __int64 ret; __asm ld.global.nc.u64 %0, [%1];
#line 122
return ret; } 
#endif
#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline uchar2 __ldg(const uchar2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 123
{ uchar2 ret; uint2 tmp; __asm ld.global.nc.v2.u8 {%0,%1}, [%2];
#line 123
(ret.x) = ((unsigned char)(tmp.x)); (ret.y) = ((unsigned char)(tmp.y)); return ret; } 
#endif
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline uchar4 __ldg(const uchar4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 124
{ uchar4 ret; uint4 tmp; __asm ld.global.nc.v4.u8 {%0,%1,%2,%3}, [%4];
#line 124
(ret.x) = ((unsigned char)(tmp.x)); (ret.y) = ((unsigned char)(tmp.y)); (ret.z) = ((unsigned char)(tmp.z)); (ret.w) = ((unsigned char)(tmp.w)); return ret; } 
#endif
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline ushort2 __ldg(const ushort2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 125
{ ushort2 ret; __asm ld.global.nc.v2.u16 {%0,%1}, [%2];
#line 125
return ret; } 
#endif
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline ushort4 __ldg(const ushort4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 126
{ ushort4 ret; __asm ld.global.nc.v4.u16 {%0,%1,%2,%3}, [%4];
#line 126
return ret; } 
#endif
#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline uint2 __ldg(const uint2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 127
{ uint2 ret; __asm ld.global.nc.v2.u32 {%0,%1}, [%2];
#line 127
return ret; } 
#endif
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline uint4 __ldg(const uint4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 128
{ uint4 ret; __asm ld.global.nc.v4.u32 {%0,%1,%2,%3}, [%4];
#line 128
return ret; } 
#endif
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline ulonglong2 __ldg(const ulonglong2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 129
{ ulonglong2 ret; __asm ld.global.nc.v2.u64 %0, [%1];
#line 129
return ret; } 
#endif
#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline float __ldg(const float *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 131
{ float ret; __asm ld.global.nc.f32 %0, [%1];
#line 131
return ret; } 
#endif
#line 132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline double __ldg(const double *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 132
{ double ret; __asm ld.global.nc.f64 %0, [%1];
#line 132
return ret; } 
#endif
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline float2 __ldg(const float2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 133
{ float2 ret; __asm ld.global.nc.v2.f32 {%0,%1}, [%2];
#line 133
return ret; } 
#endif
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline float4 __ldg(const float4 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 134
{ float4 ret; __asm ld.global.nc.v4.f32 {%0,%1,%2,%3}, [%4];
#line 134
return ret; } 
#endif
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline double2 __ldg(const double2 *ptr) {int volatile ___ = 1;(void)ptr;::exit(___);}
#if 0
#line 135
{ double2 ret; __asm ld.global.nc.v2.f64 {%0,%1}, [%2];
#line 135
return ret; } 
#endif
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline unsigned __funnelshift_l(unsigned lo, unsigned hi, unsigned shift) 
#line 145
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;
#line 149
::exit(___);}
#if 0
#line 145
{ 
#line 146
unsigned ret; 
#line 147
__asm shf.l.wrap.b32 %0, %1, %2, %3;
return ret; 
#line 149
} 
#endif
#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline unsigned __funnelshift_lc(unsigned lo, unsigned hi, unsigned shift) 
#line 151
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;
#line 155
::exit(___);}
#if 0
#line 151
{ 
#line 152
unsigned ret; 
#line 153
__asm shf.l.clamp.b32 %0, %1, %2, %3;
return ret; 
#line 155
} 
#endif
#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline unsigned __funnelshift_r(unsigned lo, unsigned hi, unsigned shift) 
#line 159
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;
#line 163
::exit(___);}
#if 0
#line 159
{ 
#line 160
unsigned ret; 
#line 161
__asm shf.r.wrap.b32 %0, %1, %2, %3;
return ret; 
#line 163
} 
#endif
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\sm_32_intrinsics.hpp"
static __inline unsigned __funnelshift_rc(unsigned lo, unsigned hi, unsigned shift) 
#line 165
{int volatile ___ = 1;(void)lo;(void)hi;(void)shift;
#line 169
::exit(___);}
#if 0
#line 165
{ 
#line 166
unsigned ret; 
#line 167
__asm shf.r.clamp.b32 %0, %1, %2, %3;
return ret; 
#line 169
} 
#endif
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 106
surf1Dread(T *res, ::surface< void, 1>  surf, int x, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 107
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)s;(void)mode;
#line 114
::exit(___);}
#if 0
#line 107
{ 
#line 108
(s == 1) ? (void)((*((::uchar1 *)res)) = __surf1Dreadc1(surf, x, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((::ushort1 *)res)) = __surf1Dreads1(surf, x, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((::uint1 *)res)) = __surf1Dreadu1(surf, x, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((::uint2 *)res)) = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((::uint4 *)res)) = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap)) : ((void)0))))); 
#line 114
} 
#endif
#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline T 
#line 117
surf1Dread(::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 118
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 124
::exit(___);}
#if 0
#line 118
{ 
#line 119
T tmp; 
#line 121
surf1Dread(&tmp, surf, x, (int)sizeof(T), mode); 
#line 123
return tmp; 
#line 124
} 
#endif
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 127
surf1Dread(T *res, ::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 128
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)mode;
#line 130
::exit(___);}
#if 0
#line 128
{ 
#line 129
(*res) = surf1Dread< T> (surf, x, mode); 
#line 130
} 
#endif
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 134
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 136
::exit(___);}
#if 0
#line 134
{ 
#line 135
return (char)((__surf1Dreadc1(surf, x, cudaBoundaryModeTrap)).x); 
#line 136
} 
#endif
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline signed char surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 140
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 142
::exit(___);}
#if 0
#line 140
{ 
#line 141
return (signed char)((__surf1Dreadc1(surf, x, cudaBoundaryModeTrap)).x); 
#line 142
} 
#endif
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned char surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 146
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 148
::exit(___);}
#if 0
#line 146
{ 
#line 147
return (__surf1Dreadc1(surf, x, cudaBoundaryModeTrap)).x; 
#line 148
} 
#endif
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 152
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 154
::exit(___);}
#if 0
#line 152
{ 
#line 153
return make_char1((signed char)((__surf1Dreadc1(surf, x, cudaBoundaryModeTrap)).x)); 
#line 154
} 
#endif
#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 158
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 160
::exit(___);}
#if 0
#line 158
{ 
#line 159
return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap); 
#line 160
} 
#endif
#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 164
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 168
::exit(___);}
#if 0
#line 164
{ 
#line 165
uchar2 tmp = __surf1Dreadc2(surf, x, cudaBoundaryModeTrap); 
#line 167
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
#line 168
} 
#endif
#line 171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 172
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 174
::exit(___);}
#if 0
#line 172
{ 
#line 173
return __surf1Dreadc2(surf, x, cudaBoundaryModeTrap); 
#line 174
} 
#endif
#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 178
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 182
::exit(___);}
#if 0
#line 178
{ 
#line 179
uchar4 tmp = __surf1Dreadc4(surf, x, cudaBoundaryModeTrap); 
#line 181
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
#line 182
} 
#endif
#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 186
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 188
::exit(___);}
#if 0
#line 186
{ 
#line 187
return __surf1Dreadc4(surf, x, cudaBoundaryModeTrap); 
#line 188
} 
#endif
#line 191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 192
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 194
::exit(___);}
#if 0
#line 192
{ 
#line 193
return (short)((__surf1Dreads1(surf, x, cudaBoundaryModeTrap)).x); 
#line 194
} 
#endif
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned short surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 198
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 200
::exit(___);}
#if 0
#line 198
{ 
#line 199
return (__surf1Dreads1(surf, x, cudaBoundaryModeTrap)).x; 
#line 200
} 
#endif
#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 204
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 206
::exit(___);}
#if 0
#line 204
{ 
#line 205
return make_short1((signed short)((__surf1Dreads1(surf, x, cudaBoundaryModeTrap)).x)); 
#line 206
} 
#endif
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 210
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 212
::exit(___);}
#if 0
#line 210
{ 
#line 211
return __surf1Dreads1(surf, x, cudaBoundaryModeTrap); 
#line 212
} 
#endif
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 216
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 220
::exit(___);}
#if 0
#line 216
{ 
#line 217
ushort2 tmp = __surf1Dreads2(surf, x, cudaBoundaryModeTrap); 
#line 219
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
#line 220
} 
#endif
#line 223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 224
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 226
::exit(___);}
#if 0
#line 224
{ 
#line 225
return __surf1Dreads2(surf, x, cudaBoundaryModeTrap); 
#line 226
} 
#endif
#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 230
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 234
::exit(___);}
#if 0
#line 230
{ 
#line 231
ushort4 tmp = __surf1Dreads4(surf, x, cudaBoundaryModeTrap); 
#line 233
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
#line 234
} 
#endif
#line 237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 238
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 240
::exit(___);}
#if 0
#line 238
{ 
#line 239
return __surf1Dreads4(surf, x, cudaBoundaryModeTrap); 
#line 240
} 
#endif
#line 243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 244
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 246
::exit(___);}
#if 0
#line 244
{ 
#line 245
return (int)((__surf1Dreadu1(surf, x, cudaBoundaryModeTrap)).x); 
#line 246
} 
#endif
#line 249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 250
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 252
::exit(___);}
#if 0
#line 250
{ 
#line 251
return (__surf1Dreadu1(surf, x, cudaBoundaryModeTrap)).x; 
#line 252
} 
#endif
#line 255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 256
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 258
::exit(___);}
#if 0
#line 256
{ 
#line 257
return make_int1((signed int)((__surf1Dreadu1(surf, x, cudaBoundaryModeTrap)).x)); 
#line 258
} 
#endif
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 262
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 264
::exit(___);}
#if 0
#line 262
{ 
#line 263
return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap); 
#line 264
} 
#endif
#line 267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 268
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 272
::exit(___);}
#if 0
#line 268
{ 
#line 269
uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
#line 271
return make_int2((int)(tmp.x), (int)(tmp.y)); 
#line 272
} 
#endif
#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 276
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 278
::exit(___);}
#if 0
#line 276
{ 
#line 277
return __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
#line 278
} 
#endif
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 282
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 286
::exit(___);}
#if 0
#line 282
{ 
#line 283
uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
#line 285
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
#line 286
} 
#endif
#line 289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 290
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 292
::exit(___);}
#if 0
#line 290
{ 
#line 291
return __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
#line 292
} 
#endif
#line 295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline __int64 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 296
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 298
::exit(___);}
#if 0
#line 296
{ 
#line 297
return (__int64)((__surf1Dreadl1(surf, x, cudaBoundaryModeTrap)).x); 
#line 298
} 
#endif
#line 301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned __int64 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 302
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 304
::exit(___);}
#if 0
#line 302
{ 
#line 303
return (__surf1Dreadl1(surf, x, cudaBoundaryModeTrap)).x; 
#line 304
} 
#endif
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 308
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 310
::exit(___);}
#if 0
#line 308
{ 
#line 309
return make_longlong1((__int64)((__surf1Dreadl1(surf, x, cudaBoundaryModeTrap)).x)); 
#line 310
} 
#endif
#line 313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 314
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 316
::exit(___);}
#if 0
#line 314
{ 
#line 315
return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap); 
#line 316
} 
#endif
#line 319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 320
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 324
::exit(___);}
#if 0
#line 320
{ 
#line 321
ulonglong2 tmp = __surf1Dreadl2(surf, x, cudaBoundaryModeTrap); 
#line 323
return make_longlong2((__int64)(tmp.x), (__int64)(tmp.y)); 
#line 324
} 
#endif
#line 327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 328
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 330
::exit(___);}
#if 0
#line 328
{ 
#line 329
return __surf1Dreadl2(surf, x, cudaBoundaryModeTrap); 
#line 330
} 
#endif
#line 335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 336
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 338
::exit(___);}
#if 0
#line 336
{ 
#line 337
return (long)((__surf1Dreadu1(surf, x, cudaBoundaryModeTrap)).x); 
#line 338
} 
#endif
#line 341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned long surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 342
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 344
::exit(___);}
#if 0
#line 342
{ 
#line 343
return (unsigned long)((__surf1Dreadu1(surf, x, cudaBoundaryModeTrap)).x); 
#line 344
} 
#endif
#line 347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 348
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 350
::exit(___);}
#if 0
#line 348
{ 
#line 349
return make_long1((long)((__surf1Dreadu1(surf, x, cudaBoundaryModeTrap)).x)); 
#line 350
} 
#endif
#line 353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 354
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 356
::exit(___);}
#if 0
#line 354
{ 
#line 355
return make_ulong1((unsigned long)((__surf1Dreadu1(surf, x, cudaBoundaryModeTrap)).x)); 
#line 356
} 
#endif
#line 359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 360
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 364
::exit(___);}
#if 0
#line 360
{ 
#line 361
uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
#line 363
return make_long2((long)(tmp.x), (long)(tmp.y)); 
#line 364
} 
#endif
#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 368
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 372
::exit(___);}
#if 0
#line 368
{ 
#line 369
uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
#line 371
return make_ulong2((unsigned long)(tmp.x), (unsigned long)(tmp.y)); 
#line 372
} 
#endif
#line 375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 376
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 380
::exit(___);}
#if 0
#line 376
{ 
#line 377
uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
#line 379
return make_long4((long)(tmp.x), (long)(tmp.y), (long)(tmp.z), (long)(tmp.w)); 
#line 380
} 
#endif
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 384
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 388
::exit(___);}
#if 0
#line 384
{ 
#line 385
uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
#line 387
return make_ulong4((unsigned long)(tmp.x), (unsigned long)(tmp.y), (unsigned long)(tmp.z), (unsigned long)(tmp.w)); 
#line 388
} 
#endif
#line 393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 394
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 396
::exit(___);}
#if 0
#line 394
{ 
#line 395
return __int_as_float((int)((__surf1Dreadu1(surf, x, cudaBoundaryModeTrap)).x)); 
#line 396
} 
#endif
#line 399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float1 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 400
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 402
::exit(___);}
#if 0
#line 400
{ 
#line 401
return make_float1(__int_as_float((int)((__surf1Dreadu1(surf, x, cudaBoundaryModeTrap)).x))); 
#line 402
} 
#endif
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float2 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 406
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 410
::exit(___);}
#if 0
#line 406
{ 
#line 407
uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap); 
#line 409
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
#line 410
} 
#endif
#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float4 surf1Dread(surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 414
{int volatile ___ = 1;(void)surf;(void)x;(void)mode;
#line 418
::exit(___);}
#if 0
#line 414
{ 
#line 415
uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap); 
#line 417
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
#line 418
} 
#endif
#line 453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 454
surf2Dread(T *res, ::surface< void, 2>  surf, int x, int y, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 455
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)s;(void)mode;
#line 462
::exit(___);}
#if 0
#line 455
{ 
#line 456
(s == 1) ? (void)((*((::uchar1 *)res)) = __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((::ushort1 *)res)) = __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((::uint1 *)res)) = __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((::uint2 *)res)) = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((::uint4 *)res)) = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap)) : ((void)0))))); 
#line 462
} 
#endif
#line 464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline T 
#line 465
surf2Dread(::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 466
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 472
::exit(___);}
#if 0
#line 466
{ 
#line 467
T tmp; 
#line 469
surf2Dread(&tmp, surf, x, y, (int)sizeof(T), mode); 
#line 471
return tmp; 
#line 472
} 
#endif
#line 474 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 475
surf2Dread(T *res, ::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 476
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)mode;
#line 478
::exit(___);}
#if 0
#line 476
{ 
#line 477
(*res) = surf2Dread< T> (surf, x, y, mode); 
#line 478
} 
#endif
#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 482
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 484
::exit(___);}
#if 0
#line 482
{ 
#line 483
return (char)((__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap)).x); 
#line 484
} 
#endif
#line 487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline signed char surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 488
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 490
::exit(___);}
#if 0
#line 488
{ 
#line 489
return (signed char)((__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap)).x); 
#line 490
} 
#endif
#line 493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned char surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 494
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 496
::exit(___);}
#if 0
#line 494
{ 
#line 495
return (__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap)).x; 
#line 496
} 
#endif
#line 499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 500
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 502
::exit(___);}
#if 0
#line 500
{ 
#line 501
return make_char1((signed char)((__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap)).x)); 
#line 502
} 
#endif
#line 505 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 506
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 508
::exit(___);}
#if 0
#line 506
{ 
#line 507
return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap); 
#line 508
} 
#endif
#line 511 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 512
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 516
::exit(___);}
#if 0
#line 512
{ 
#line 513
uchar2 tmp = __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap); 
#line 515
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
#line 516
} 
#endif
#line 519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 520
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 522
::exit(___);}
#if 0
#line 520
{ 
#line 521
return __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap); 
#line 522
} 
#endif
#line 525 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 526
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 530
::exit(___);}
#if 0
#line 526
{ 
#line 527
uchar4 tmp = __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap); 
#line 529
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
#line 530
} 
#endif
#line 533 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 534
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 536
::exit(___);}
#if 0
#line 534
{ 
#line 535
return __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap); 
#line 536
} 
#endif
#line 539 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 540
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 542
::exit(___);}
#if 0
#line 540
{ 
#line 541
return (short)((__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap)).x); 
#line 542
} 
#endif
#line 545 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned short surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 546
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 548
::exit(___);}
#if 0
#line 546
{ 
#line 547
return (__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap)).x; 
#line 548
} 
#endif
#line 551 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 552
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 554
::exit(___);}
#if 0
#line 552
{ 
#line 553
return make_short1((signed short)((__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap)).x)); 
#line 554
} 
#endif
#line 557 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 558
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 560
::exit(___);}
#if 0
#line 558
{ 
#line 559
return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap); 
#line 560
} 
#endif
#line 563 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 564
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 568
::exit(___);}
#if 0
#line 564
{ 
#line 565
ushort2 tmp = __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap); 
#line 567
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
#line 568
} 
#endif
#line 571 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 572
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 574
::exit(___);}
#if 0
#line 572
{ 
#line 573
return __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap); 
#line 574
} 
#endif
#line 577 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 578
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 582
::exit(___);}
#if 0
#line 578
{ 
#line 579
ushort4 tmp = __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap); 
#line 581
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
#line 582
} 
#endif
#line 585 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 586
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 588
::exit(___);}
#if 0
#line 586
{ 
#line 587
return __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap); 
#line 588
} 
#endif
#line 591 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 592
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 594
::exit(___);}
#if 0
#line 592
{ 
#line 593
return (int)((__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)).x); 
#line 594
} 
#endif
#line 597 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 598
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 600
::exit(___);}
#if 0
#line 598
{ 
#line 599
return (__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)).x; 
#line 600
} 
#endif
#line 603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 604
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 606
::exit(___);}
#if 0
#line 604
{ 
#line 605
return make_int1((signed int)((__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)).x)); 
#line 606
} 
#endif
#line 609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 610
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 612
::exit(___);}
#if 0
#line 610
{ 
#line 611
return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap); 
#line 612
} 
#endif
#line 615 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 616
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 620
::exit(___);}
#if 0
#line 616
{ 
#line 617
uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
#line 619
return make_int2((int)(tmp.x), (int)(tmp.y)); 
#line 620
} 
#endif
#line 623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 624
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 626
::exit(___);}
#if 0
#line 624
{ 
#line 625
return __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
#line 626
} 
#endif
#line 629 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 630
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 634
::exit(___);}
#if 0
#line 630
{ 
#line 631
uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
#line 633
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
#line 634
} 
#endif
#line 637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 638
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 640
::exit(___);}
#if 0
#line 638
{ 
#line 639
return __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
#line 640
} 
#endif
#line 643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline __int64 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 644
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 646
::exit(___);}
#if 0
#line 644
{ 
#line 645
return (__int64)((__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap)).x); 
#line 646
} 
#endif
#line 649 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned __int64 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 650
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 652
::exit(___);}
#if 0
#line 650
{ 
#line 651
return (__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap)).x; 
#line 652
} 
#endif
#line 655 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 656
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 658
::exit(___);}
#if 0
#line 656
{ 
#line 657
return make_longlong1((__int64)((__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap)).x)); 
#line 658
} 
#endif
#line 661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 662
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 664
::exit(___);}
#if 0
#line 662
{ 
#line 663
return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap); 
#line 664
} 
#endif
#line 667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 668
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 672
::exit(___);}
#if 0
#line 668
{ 
#line 669
ulonglong2 tmp = __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap); 
#line 671
return make_longlong2((__int64)(tmp.x), (__int64)(tmp.y)); 
#line 672
} 
#endif
#line 675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 676
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 678
::exit(___);}
#if 0
#line 676
{ 
#line 677
return __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap); 
#line 678
} 
#endif
#line 683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 684
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 686
::exit(___);}
#if 0
#line 684
{ 
#line 685
return (long)((__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)).x); 
#line 686
} 
#endif
#line 689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned long surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 690
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 692
::exit(___);}
#if 0
#line 690
{ 
#line 691
return (unsigned long)((__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)).x); 
#line 692
} 
#endif
#line 695 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 696
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 698
::exit(___);}
#if 0
#line 696
{ 
#line 697
return make_long1((long)((__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)).x)); 
#line 698
} 
#endif
#line 701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 702
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 704
::exit(___);}
#if 0
#line 702
{ 
#line 703
return make_ulong1((unsigned long)((__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)).x)); 
#line 704
} 
#endif
#line 707 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 708
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 712
::exit(___);}
#if 0
#line 708
{ 
#line 709
uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
#line 711
return make_long2((long)(tmp.x), (long)(tmp.y)); 
#line 712
} 
#endif
#line 715 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 716
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 720
::exit(___);}
#if 0
#line 716
{ 
#line 717
uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
#line 719
return make_ulong2((unsigned long)(tmp.x), (unsigned long)(tmp.y)); 
#line 720
} 
#endif
#line 723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 724
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 728
::exit(___);}
#if 0
#line 724
{ 
#line 725
uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
#line 727
return make_long4((long)(tmp.x), (long)(tmp.y), (long)(tmp.z), (long)(tmp.w)); 
#line 728
} 
#endif
#line 731 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 732
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 736
::exit(___);}
#if 0
#line 732
{ 
#line 733
uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
#line 735
return make_ulong4((unsigned long)(tmp.x), (unsigned long)(tmp.y), (unsigned long)(tmp.z), (unsigned long)(tmp.w)); 
#line 736
} 
#endif
#line 741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 742
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 744
::exit(___);}
#if 0
#line 742
{ 
#line 743
return __int_as_float((int)((__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)).x)); 
#line 744
} 
#endif
#line 747 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float1 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 748
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 750
::exit(___);}
#if 0
#line 748
{ 
#line 749
return make_float1(__int_as_float((int)((__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)).x))); 
#line 750
} 
#endif
#line 753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float2 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 754
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 758
::exit(___);}
#if 0
#line 754
{ 
#line 755
uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap); 
#line 757
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
#line 758
} 
#endif
#line 761 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float4 surf2Dread(surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 762
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)mode;
#line 766
::exit(___);}
#if 0
#line 762
{ 
#line 763
uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap); 
#line 765
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
#line 766
} 
#endif
#line 801 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 802
surf3Dread(T *res, ::surface< void, 3>  surf, int x, int y, int z, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 803
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
#line 810
::exit(___);}
#if 0
#line 803
{ 
#line 804
(s == 1) ? (void)((*((::uchar1 *)res)) = __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((::ushort1 *)res)) = __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((::uint1 *)res)) = __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((::uint2 *)res)) = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((::uint4 *)res)) = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap)) : ((void)0))))); 
#line 810
} 
#endif
#line 812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline T 
#line 813
surf3Dread(::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 814
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 820
::exit(___);}
#if 0
#line 814
{ 
#line 815
T tmp; 
#line 817
surf3Dread(&tmp, surf, x, y, z, (int)sizeof(T), mode); 
#line 819
return tmp; 
#line 820
} 
#endif
#line 822 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 823
surf3Dread(T *res, ::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 824
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 826
::exit(___);}
#if 0
#line 824
{ 
#line 825
(*res) = surf3Dread< T> (surf, x, y, z, mode); 
#line 826
} 
#endif
#line 829 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 830
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 832
::exit(___);}
#if 0
#line 830
{ 
#line 831
return (char)((__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap)).x); 
#line 832
} 
#endif
#line 835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline signed char surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 836
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 838
::exit(___);}
#if 0
#line 836
{ 
#line 837
return (signed char)((__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap)).x); 
#line 838
} 
#endif
#line 841 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned char surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 842
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 844
::exit(___);}
#if 0
#line 842
{ 
#line 843
return (__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap)).x; 
#line 844
} 
#endif
#line 847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 848
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 850
::exit(___);}
#if 0
#line 848
{ 
#line 849
return make_char1((signed char)((__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap)).x)); 
#line 850
} 
#endif
#line 853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 854
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 856
::exit(___);}
#if 0
#line 854
{ 
#line 855
return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap); 
#line 856
} 
#endif
#line 859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 860
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 864
::exit(___);}
#if 0
#line 860
{ 
#line 861
uchar2 tmp = __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap); 
#line 863
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
#line 864
} 
#endif
#line 867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 868
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 870
::exit(___);}
#if 0
#line 868
{ 
#line 869
return __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap); 
#line 870
} 
#endif
#line 873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 874
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 878
::exit(___);}
#if 0
#line 874
{ 
#line 875
uchar4 tmp = __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap); 
#line 877
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
#line 878
} 
#endif
#line 881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 882
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 884
::exit(___);}
#if 0
#line 882
{ 
#line 883
return __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap); 
#line 884
} 
#endif
#line 887 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 888
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 890
::exit(___);}
#if 0
#line 888
{ 
#line 889
return (short)((__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap)).x); 
#line 890
} 
#endif
#line 893 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned short surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 894
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 896
::exit(___);}
#if 0
#line 894
{ 
#line 895
return (__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap)).x; 
#line 896
} 
#endif
#line 899 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 900
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 902
::exit(___);}
#if 0
#line 900
{ 
#line 901
return make_short1((signed short)((__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap)).x)); 
#line 902
} 
#endif
#line 905 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 906
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 908
::exit(___);}
#if 0
#line 906
{ 
#line 907
return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap); 
#line 908
} 
#endif
#line 911 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 912
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 916
::exit(___);}
#if 0
#line 912
{ 
#line 913
ushort2 tmp = __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap); 
#line 915
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
#line 916
} 
#endif
#line 919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 920
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 922
::exit(___);}
#if 0
#line 920
{ 
#line 921
return __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap); 
#line 922
} 
#endif
#line 925 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 926
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 930
::exit(___);}
#if 0
#line 926
{ 
#line 927
ushort4 tmp = __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap); 
#line 929
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
#line 930
} 
#endif
#line 933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 934
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 936
::exit(___);}
#if 0
#line 934
{ 
#line 935
return __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap); 
#line 936
} 
#endif
#line 939 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 940
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 942
::exit(___);}
#if 0
#line 940
{ 
#line 941
return (int)((__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)).x); 
#line 942
} 
#endif
#line 945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 946
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 948
::exit(___);}
#if 0
#line 946
{ 
#line 947
return (__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)).x; 
#line 948
} 
#endif
#line 951 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 952
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 954
::exit(___);}
#if 0
#line 952
{ 
#line 953
return make_int1((signed int)((__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)).x)); 
#line 954
} 
#endif
#line 957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 958
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 960
::exit(___);}
#if 0
#line 958
{ 
#line 959
return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap); 
#line 960
} 
#endif
#line 963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 964
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 968
::exit(___);}
#if 0
#line 964
{ 
#line 965
uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
#line 967
return make_int2((int)(tmp.x), (int)(tmp.y)); 
#line 968
} 
#endif
#line 971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 972
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 974
::exit(___);}
#if 0
#line 972
{ 
#line 973
return __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
#line 974
} 
#endif
#line 977 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 978
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 982
::exit(___);}
#if 0
#line 978
{ 
#line 979
uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
#line 981
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
#line 982
} 
#endif
#line 985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 986
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 988
::exit(___);}
#if 0
#line 986
{ 
#line 987
return __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
#line 988
} 
#endif
#line 991 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline __int64 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 992
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 994
::exit(___);}
#if 0
#line 992
{ 
#line 993
return (__int64)((__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap)).x); 
#line 994
} 
#endif
#line 997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned __int64 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 998
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1000
::exit(___);}
#if 0
#line 998
{ 
#line 999
return (__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap)).x; 
#line 1000
} 
#endif
#line 1003 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1004
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1006
::exit(___);}
#if 0
#line 1004
{ 
#line 1005
return make_longlong1((__int64)((__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap)).x)); 
#line 1006
} 
#endif
#line 1009 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1010
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1012
::exit(___);}
#if 0
#line 1010
{ 
#line 1011
return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap); 
#line 1012
} 
#endif
#line 1015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1016
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1020
::exit(___);}
#if 0
#line 1016
{ 
#line 1017
ulonglong2 tmp = __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap); 
#line 1019
return make_longlong2((__int64)(tmp.x), (__int64)(tmp.y)); 
#line 1020
} 
#endif
#line 1023 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1024
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1026
::exit(___);}
#if 0
#line 1024
{ 
#line 1025
return __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap); 
#line 1026
} 
#endif
#line 1031 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1032
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1034
::exit(___);}
#if 0
#line 1032
{ 
#line 1033
return (long)((__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)).x); 
#line 1034
} 
#endif
#line 1037 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned long surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1038
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1040
::exit(___);}
#if 0
#line 1038
{ 
#line 1039
return (unsigned long)((__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)).x); 
#line 1040
} 
#endif
#line 1043 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1044
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1046
::exit(___);}
#if 0
#line 1044
{ 
#line 1045
return make_long1((long)((__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)).x)); 
#line 1046
} 
#endif
#line 1049 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1050
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1052
::exit(___);}
#if 0
#line 1050
{ 
#line 1051
return make_ulong1((unsigned long)((__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)).x)); 
#line 1052
} 
#endif
#line 1055 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1056
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1060
::exit(___);}
#if 0
#line 1056
{ 
#line 1057
uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
#line 1059
return make_long2((long)(tmp.x), (long)(tmp.y)); 
#line 1060
} 
#endif
#line 1063 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1064
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1068
::exit(___);}
#if 0
#line 1064
{ 
#line 1065
uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
#line 1067
return make_ulong2((unsigned long)(tmp.x), (unsigned long)(tmp.y)); 
#line 1068
} 
#endif
#line 1071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1072
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1076
::exit(___);}
#if 0
#line 1072
{ 
#line 1073
uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
#line 1075
return make_long4((long)(tmp.x), (long)(tmp.y), (long)(tmp.z), (long)(tmp.w)); 
#line 1076
} 
#endif
#line 1079 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1080
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1084
::exit(___);}
#if 0
#line 1080
{ 
#line 1081
uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
#line 1083
return make_ulong4((unsigned long)(tmp.x), (unsigned long)(tmp.y), (unsigned long)(tmp.z), (unsigned long)(tmp.w)); 
#line 1084
} 
#endif
#line 1089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1090
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1092
::exit(___);}
#if 0
#line 1090
{ 
#line 1091
return __int_as_float((int)((__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)).x)); 
#line 1092
} 
#endif
#line 1095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float1 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1096
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1098
::exit(___);}
#if 0
#line 1096
{ 
#line 1097
return make_float1(__int_as_float((int)((__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)).x))); 
#line 1098
} 
#endif
#line 1101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float2 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1102
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1106
::exit(___);}
#if 0
#line 1102
{ 
#line 1103
uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap); 
#line 1105
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
#line 1106
} 
#endif
#line 1109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float4 surf3Dread(surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 1110
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 1114
::exit(___);}
#if 0
#line 1110
{ 
#line 1111
uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap); 
#line 1113
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
#line 1114
} 
#endif
#line 1149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1150
surf1DLayeredread(T *res, ::surface< void, 241>  surf, int x, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1151
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
#line 1158
::exit(___);}
#if 0
#line 1151
{ 
#line 1152
(s == 1) ? (void)((*((::uchar1 *)res)) = __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((::ushort1 *)res)) = __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((::uint1 *)res)) = __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((::uint2 *)res)) = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((::uint4 *)res)) = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap)) : ((void)0))))); 
#line 1158
} 
#endif
#line 1160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline T 
#line 1161
surf1DLayeredread(::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1162
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1168
::exit(___);}
#if 0
#line 1162
{ 
#line 1163
T tmp; 
#line 1165
surf1DLayeredread(&tmp, surf, x, layer, (int)sizeof(T), mode); 
#line 1167
return tmp; 
#line 1168
} 
#endif
#line 1170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1171
surf1DLayeredread(T *res, ::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1172
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)layer;(void)mode;
#line 1174
::exit(___);}
#if 0
#line 1172
{ 
#line 1173
(*res) = surf1DLayeredread< T> (surf, x, layer, mode); 
#line 1174
} 
#endif
#line 1177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1178
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1180
::exit(___);}
#if 0
#line 1178
{ 
#line 1179
return (char)((__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap)).x); 
#line 1180
} 
#endif
#line 1183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline signed char surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1184
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1186
::exit(___);}
#if 0
#line 1184
{ 
#line 1185
return (signed char)((__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap)).x); 
#line 1186
} 
#endif
#line 1189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned char surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1190
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1192
::exit(___);}
#if 0
#line 1190
{ 
#line 1191
return (__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap)).x; 
#line 1192
} 
#endif
#line 1195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1196
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1198
::exit(___);}
#if 0
#line 1196
{ 
#line 1197
return make_char1((signed char)((__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap)).x)); 
#line 1198
} 
#endif
#line 1201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1202
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1204
::exit(___);}
#if 0
#line 1202
{ 
#line 1203
return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap); 
#line 1204
} 
#endif
#line 1207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1208
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1212
::exit(___);}
#if 0
#line 1208
{ 
#line 1209
uchar2 tmp = __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap); 
#line 1211
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
#line 1212
} 
#endif
#line 1215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1216
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1218
::exit(___);}
#if 0
#line 1216
{ 
#line 1217
return __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap); 
#line 1218
} 
#endif
#line 1221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1222
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1226
::exit(___);}
#if 0
#line 1222
{ 
#line 1223
uchar4 tmp = __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap); 
#line 1225
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
#line 1226
} 
#endif
#line 1229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1230
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1232
::exit(___);}
#if 0
#line 1230
{ 
#line 1231
return __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap); 
#line 1232
} 
#endif
#line 1235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1236
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1238
::exit(___);}
#if 0
#line 1236
{ 
#line 1237
return (short)((__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap)).x); 
#line 1238
} 
#endif
#line 1241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned short surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1242
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1244
::exit(___);}
#if 0
#line 1242
{ 
#line 1243
return (__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap)).x; 
#line 1244
} 
#endif
#line 1247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1248
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1250
::exit(___);}
#if 0
#line 1248
{ 
#line 1249
return make_short1((signed short)((__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap)).x)); 
#line 1250
} 
#endif
#line 1253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1254
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1256
::exit(___);}
#if 0
#line 1254
{ 
#line 1255
return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap); 
#line 1256
} 
#endif
#line 1259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1260
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1264
::exit(___);}
#if 0
#line 1260
{ 
#line 1261
ushort2 tmp = __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap); 
#line 1263
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
#line 1264
} 
#endif
#line 1267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1268
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1270
::exit(___);}
#if 0
#line 1268
{ 
#line 1269
return __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap); 
#line 1270
} 
#endif
#line 1273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1274
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1278
::exit(___);}
#if 0
#line 1274
{ 
#line 1275
ushort4 tmp = __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap); 
#line 1277
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
#line 1278
} 
#endif
#line 1281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1282
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1284
::exit(___);}
#if 0
#line 1282
{ 
#line 1283
return __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap); 
#line 1284
} 
#endif
#line 1287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1288
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1290
::exit(___);}
#if 0
#line 1288
{ 
#line 1289
return (int)((__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)).x); 
#line 1290
} 
#endif
#line 1293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1294
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1296
::exit(___);}
#if 0
#line 1294
{ 
#line 1295
return (__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)).x; 
#line 1296
} 
#endif
#line 1299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1300
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1302
::exit(___);}
#if 0
#line 1300
{ 
#line 1301
return make_int1((signed int)((__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)).x)); 
#line 1302
} 
#endif
#line 1305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1306
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1308
::exit(___);}
#if 0
#line 1306
{ 
#line 1307
return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap); 
#line 1308
} 
#endif
#line 1311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1312
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1316
::exit(___);}
#if 0
#line 1312
{ 
#line 1313
uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
#line 1315
return make_int2((int)(tmp.x), (int)(tmp.y)); 
#line 1316
} 
#endif
#line 1319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1320
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1322
::exit(___);}
#if 0
#line 1320
{ 
#line 1321
return __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
#line 1322
} 
#endif
#line 1325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1326
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1330
::exit(___);}
#if 0
#line 1326
{ 
#line 1327
uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
#line 1329
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
#line 1330
} 
#endif
#line 1333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1334
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1336
::exit(___);}
#if 0
#line 1334
{ 
#line 1335
return __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
#line 1336
} 
#endif
#line 1339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline __int64 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1340
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1342
::exit(___);}
#if 0
#line 1340
{ 
#line 1341
return (__int64)((__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap)).x); 
#line 1342
} 
#endif
#line 1345 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned __int64 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1346
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1348
::exit(___);}
#if 0
#line 1346
{ 
#line 1347
return (__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap)).x; 
#line 1348
} 
#endif
#line 1351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1352
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1354
::exit(___);}
#if 0
#line 1352
{ 
#line 1353
return make_longlong1((__int64)((__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap)).x)); 
#line 1354
} 
#endif
#line 1357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1358
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1360
::exit(___);}
#if 0
#line 1358
{ 
#line 1359
return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap); 
#line 1360
} 
#endif
#line 1363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1364
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1368
::exit(___);}
#if 0
#line 1364
{ 
#line 1365
ulonglong2 tmp = __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap); 
#line 1367
return make_longlong2((__int64)(tmp.x), (__int64)(tmp.y)); 
#line 1368
} 
#endif
#line 1371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1372
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1374
::exit(___);}
#if 0
#line 1372
{ 
#line 1373
return __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap); 
#line 1374
} 
#endif
#line 1379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1380
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1382
::exit(___);}
#if 0
#line 1380
{ 
#line 1381
return (long)((__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)).x); 
#line 1382
} 
#endif
#line 1385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned long surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1386
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1388
::exit(___);}
#if 0
#line 1386
{ 
#line 1387
return (unsigned long)((__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)).x); 
#line 1388
} 
#endif
#line 1391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1392
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1394
::exit(___);}
#if 0
#line 1392
{ 
#line 1393
return make_long1((long)((__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)).x)); 
#line 1394
} 
#endif
#line 1397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1398
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1400
::exit(___);}
#if 0
#line 1398
{ 
#line 1399
return make_ulong1((unsigned long)((__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)).x)); 
#line 1400
} 
#endif
#line 1403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1404
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1408
::exit(___);}
#if 0
#line 1404
{ 
#line 1405
uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
#line 1407
return make_long2((long)(tmp.x), (long)(tmp.y)); 
#line 1408
} 
#endif
#line 1411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1412
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1416
::exit(___);}
#if 0
#line 1412
{ 
#line 1413
uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
#line 1415
return make_ulong2((unsigned long)(tmp.x), (unsigned long)(tmp.y)); 
#line 1416
} 
#endif
#line 1419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1420
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1424
::exit(___);}
#if 0
#line 1420
{ 
#line 1421
uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
#line 1423
return make_long4((long)(tmp.x), (long)(tmp.y), (long)(tmp.z), (long)(tmp.w)); 
#line 1424
} 
#endif
#line 1427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1428
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1432
::exit(___);}
#if 0
#line 1428
{ 
#line 1429
uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
#line 1431
return make_ulong4((unsigned long)(tmp.x), (unsigned long)(tmp.y), (unsigned long)(tmp.z), (unsigned long)(tmp.w)); 
#line 1432
} 
#endif
#line 1437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1438
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1440
::exit(___);}
#if 0
#line 1438
{ 
#line 1439
return __int_as_float((int)((__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)).x)); 
#line 1440
} 
#endif
#line 1443 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float1 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1444
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1446
::exit(___);}
#if 0
#line 1444
{ 
#line 1445
return make_float1(__int_as_float((int)((__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)).x))); 
#line 1446
} 
#endif
#line 1449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float2 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1450
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1454
::exit(___);}
#if 0
#line 1450
{ 
#line 1451
uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap); 
#line 1453
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
#line 1454
} 
#endif
#line 1457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float4 surf1DLayeredread(surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1458
{int volatile ___ = 1;(void)surf;(void)x;(void)layer;(void)mode;
#line 1462
::exit(___);}
#if 0
#line 1458
{ 
#line 1459
uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap); 
#line 1461
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
#line 1462
} 
#endif
#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1509
surf2DLayeredread(T *res, ::surface< void, 242>  surf, int x, int y, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1510
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
#line 1517
::exit(___);}
#if 0
#line 1510
{ 
#line 1511
(s == 1) ? (void)((*((::uchar1 *)res)) = __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((::ushort1 *)res)) = __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((::uint1 *)res)) = __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((::uint2 *)res)) = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((::uint4 *)res)) = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap)) : ((void)0))))); 
#line 1517
} 
#endif
#line 1519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline T 
#line 1520
surf2DLayeredread(::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1521
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1527
::exit(___);}
#if 0
#line 1521
{ 
#line 1522
T tmp; 
#line 1524
surf2DLayeredread(&tmp, surf, x, y, layer, (int)sizeof(T), mode); 
#line 1526
return tmp; 
#line 1527
} 
#endif
#line 1529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1530
surf2DLayeredread(T *res, ::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1531
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1533
::exit(___);}
#if 0
#line 1531
{ 
#line 1532
(*res) = surf2DLayeredread< T> (surf, x, y, layer, mode); 
#line 1533
} 
#endif
#line 1536 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1537
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1539
::exit(___);}
#if 0
#line 1537
{ 
#line 1538
return (char)((__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap)).x); 
#line 1539
} 
#endif
#line 1542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline signed char surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1543
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1545
::exit(___);}
#if 0
#line 1543
{ 
#line 1544
return (signed char)((__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap)).x); 
#line 1545
} 
#endif
#line 1548 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned char surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1549
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1551
::exit(___);}
#if 0
#line 1549
{ 
#line 1550
return (__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap)).x; 
#line 1551
} 
#endif
#line 1554 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1555
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1557
::exit(___);}
#if 0
#line 1555
{ 
#line 1556
return make_char1((signed char)((__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap)).x)); 
#line 1557
} 
#endif
#line 1560 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1561
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1563
::exit(___);}
#if 0
#line 1561
{ 
#line 1562
return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1563
} 
#endif
#line 1566 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1567
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1571
::exit(___);}
#if 0
#line 1567
{ 
#line 1568
uchar2 tmp = __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1570
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
#line 1571
} 
#endif
#line 1574 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1575
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1577
::exit(___);}
#if 0
#line 1575
{ 
#line 1576
return __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1577
} 
#endif
#line 1580 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1581
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1585
::exit(___);}
#if 0
#line 1581
{ 
#line 1582
uchar4 tmp = __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1584
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
#line 1585
} 
#endif
#line 1588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1589
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1591
::exit(___);}
#if 0
#line 1589
{ 
#line 1590
return __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1591
} 
#endif
#line 1594 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1595
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1597
::exit(___);}
#if 0
#line 1595
{ 
#line 1596
return (short)((__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap)).x); 
#line 1597
} 
#endif
#line 1600 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned short surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1601
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1603
::exit(___);}
#if 0
#line 1601
{ 
#line 1602
return (__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap)).x; 
#line 1603
} 
#endif
#line 1606 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1607
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1609
::exit(___);}
#if 0
#line 1607
{ 
#line 1608
return make_short1((signed short)((__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap)).x)); 
#line 1609
} 
#endif
#line 1612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1613
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1615
::exit(___);}
#if 0
#line 1613
{ 
#line 1614
return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1615
} 
#endif
#line 1618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1619
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1623
::exit(___);}
#if 0
#line 1619
{ 
#line 1620
ushort2 tmp = __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1622
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
#line 1623
} 
#endif
#line 1626 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1627
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1629
::exit(___);}
#if 0
#line 1627
{ 
#line 1628
return __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1629
} 
#endif
#line 1632 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1633
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1637
::exit(___);}
#if 0
#line 1633
{ 
#line 1634
ushort4 tmp = __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1636
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
#line 1637
} 
#endif
#line 1640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1641
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1643
::exit(___);}
#if 0
#line 1641
{ 
#line 1642
return __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1643
} 
#endif
#line 1646 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1647
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1649
::exit(___);}
#if 0
#line 1647
{ 
#line 1648
return (int)((__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)).x); 
#line 1649
} 
#endif
#line 1652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1653
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1655
::exit(___);}
#if 0
#line 1653
{ 
#line 1654
return (__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)).x; 
#line 1655
} 
#endif
#line 1658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1659
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1661
::exit(___);}
#if 0
#line 1659
{ 
#line 1660
return make_int1((signed int)((__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)).x)); 
#line 1661
} 
#endif
#line 1664 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1665
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1667
::exit(___);}
#if 0
#line 1665
{ 
#line 1666
return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1667
} 
#endif
#line 1670 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1671
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1675
::exit(___);}
#if 0
#line 1671
{ 
#line 1672
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1674
return make_int2((int)(tmp.x), (int)(tmp.y)); 
#line 1675
} 
#endif
#line 1678 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1679
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1681
::exit(___);}
#if 0
#line 1679
{ 
#line 1680
return __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1681
} 
#endif
#line 1684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1685
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1689
::exit(___);}
#if 0
#line 1685
{ 
#line 1686
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1688
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
#line 1689
} 
#endif
#line 1692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1693
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1695
::exit(___);}
#if 0
#line 1693
{ 
#line 1694
return __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1695
} 
#endif
#line 1698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline __int64 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1699
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1701
::exit(___);}
#if 0
#line 1699
{ 
#line 1700
return (__int64)((__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap)).x); 
#line 1701
} 
#endif
#line 1704 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned __int64 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1705
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1707
::exit(___);}
#if 0
#line 1705
{ 
#line 1706
return (__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap)).x; 
#line 1707
} 
#endif
#line 1710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1711
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1713
::exit(___);}
#if 0
#line 1711
{ 
#line 1712
return make_longlong1((__int64)((__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap)).x)); 
#line 1713
} 
#endif
#line 1716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1717
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1719
::exit(___);}
#if 0
#line 1717
{ 
#line 1718
return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1719
} 
#endif
#line 1722 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1723
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1727
::exit(___);}
#if 0
#line 1723
{ 
#line 1724
ulonglong2 tmp = __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1726
return make_longlong2((__int64)(tmp.x), (__int64)(tmp.y)); 
#line 1727
} 
#endif
#line 1730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1731
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1733
::exit(___);}
#if 0
#line 1731
{ 
#line 1732
return __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1733
} 
#endif
#line 1738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1739
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1741
::exit(___);}
#if 0
#line 1739
{ 
#line 1740
return (long)((__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)).x); 
#line 1741
} 
#endif
#line 1744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned long surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1745
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1747
::exit(___);}
#if 0
#line 1745
{ 
#line 1746
return (unsigned long)((__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)).x); 
#line 1747
} 
#endif
#line 1750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1751
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1753
::exit(___);}
#if 0
#line 1751
{ 
#line 1752
return make_long1((long)((__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)).x)); 
#line 1753
} 
#endif
#line 1756 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1757
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1759
::exit(___);}
#if 0
#line 1757
{ 
#line 1758
return make_ulong1((unsigned long)((__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)).x)); 
#line 1759
} 
#endif
#line 1762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1763
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1767
::exit(___);}
#if 0
#line 1763
{ 
#line 1764
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1766
return make_long2((long)(tmp.x), (long)(tmp.y)); 
#line 1767
} 
#endif
#line 1770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1771
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1775
::exit(___);}
#if 0
#line 1771
{ 
#line 1772
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1774
return make_ulong2((unsigned long)(tmp.x), (unsigned long)(tmp.y)); 
#line 1775
} 
#endif
#line 1778 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1779
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1783
::exit(___);}
#if 0
#line 1779
{ 
#line 1780
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1782
return make_long4((long)(tmp.x), (long)(tmp.y), (long)(tmp.z), (long)(tmp.w)); 
#line 1783
} 
#endif
#line 1786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1787
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1791
::exit(___);}
#if 0
#line 1787
{ 
#line 1788
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1790
return make_ulong4((unsigned long)(tmp.x), (unsigned long)(tmp.y), (unsigned long)(tmp.z), (unsigned long)(tmp.w)); 
#line 1791
} 
#endif
#line 1796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1797
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1799
::exit(___);}
#if 0
#line 1797
{ 
#line 1798
return __int_as_float((int)((__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)).x)); 
#line 1799
} 
#endif
#line 1802 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float1 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1803
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1805
::exit(___);}
#if 0
#line 1803
{ 
#line 1804
return make_float1(__int_as_float((int)((__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)).x))); 
#line 1805
} 
#endif
#line 1808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float2 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1809
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1813
::exit(___);}
#if 0
#line 1809
{ 
#line 1810
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1812
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
#line 1813
} 
#endif
#line 1816 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float4 surf2DLayeredread(surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1817
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1821
::exit(___);}
#if 0
#line 1817
{ 
#line 1818
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1820
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
#line 1821
} 
#endif
#line 1844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1845
surfCubemapread(T *res, ::surface< void, 12>  surf, int x, int y, int face, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1846
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
#line 1853
::exit(___);}
#if 0
#line 1846
{ 
#line 1847
(s == 1) ? (void)((*((::uchar1 *)res)) = __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((::ushort1 *)res)) = __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((::uint1 *)res)) = __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((::uint2 *)res)) = __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((::uint4 *)res)) = __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap)) : ((void)0))))); 
#line 1853
} 
#endif
#line 1855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline T 
#line 1856
surfCubemapread(::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1857
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1863
::exit(___);}
#if 0
#line 1857
{ 
#line 1858
T tmp; 
#line 1860
surfCubemapread(&tmp, surf, x, y, face, (int)sizeof(T), mode); 
#line 1862
return tmp; 
#line 1863
} 
#endif
#line 1865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 1866
surfCubemapread(T *res, ::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 1867
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1869
::exit(___);}
#if 0
#line 1867
{ 
#line 1868
(*res) = surfCubemapread< T> (surf, x, y, face, mode); 
#line 1869
} 
#endif
#line 1872 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1873
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1875
::exit(___);}
#if 0
#line 1873
{ 
#line 1874
return (char)((__surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap)).x); 
#line 1875
} 
#endif
#line 1878 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline signed char surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1879
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1881
::exit(___);}
#if 0
#line 1879
{ 
#line 1880
return (signed char)((__surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap)).x); 
#line 1881
} 
#endif
#line 1884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned char surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1885
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1887
::exit(___);}
#if 0
#line 1885
{ 
#line 1886
return (__surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap)).x; 
#line 1887
} 
#endif
#line 1890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1891
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1893
::exit(___);}
#if 0
#line 1891
{ 
#line 1892
return make_char1((signed char)((__surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap)).x)); 
#line 1893
} 
#endif
#line 1896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1897
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1899
::exit(___);}
#if 0
#line 1897
{ 
#line 1898
return __surf2DLayeredreadc1(surf, x, y, face, cudaBoundaryModeTrap); 
#line 1899
} 
#endif
#line 1902 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1903
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1907
::exit(___);}
#if 0
#line 1903
{ 
#line 1904
uchar2 tmp = __surf2DLayeredreadc2(surf, x, y, face, cudaBoundaryModeTrap); 
#line 1906
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
#line 1907
} 
#endif
#line 1910 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1911
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1913
::exit(___);}
#if 0
#line 1911
{ 
#line 1912
return __surf2DLayeredreadc2(surf, x, y, face, cudaBoundaryModeTrap); 
#line 1913
} 
#endif
#line 1916 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1917
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1921
::exit(___);}
#if 0
#line 1917
{ 
#line 1918
uchar4 tmp = __surf2DLayeredreadc4(surf, x, y, face, cudaBoundaryModeTrap); 
#line 1920
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
#line 1921
} 
#endif
#line 1924 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1925
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1927
::exit(___);}
#if 0
#line 1925
{ 
#line 1926
return __surf2DLayeredreadc4(surf, x, y, face, cudaBoundaryModeTrap); 
#line 1927
} 
#endif
#line 1930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1931
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1933
::exit(___);}
#if 0
#line 1931
{ 
#line 1932
return (short)((__surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap)).x); 
#line 1933
} 
#endif
#line 1936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned short surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1937
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1939
::exit(___);}
#if 0
#line 1937
{ 
#line 1938
return (__surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap)).x; 
#line 1939
} 
#endif
#line 1942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1943
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1945
::exit(___);}
#if 0
#line 1943
{ 
#line 1944
return make_short1((signed short)((__surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap)).x)); 
#line 1945
} 
#endif
#line 1948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1949
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1951
::exit(___);}
#if 0
#line 1949
{ 
#line 1950
return __surf2DLayeredreads1(surf, x, y, face, cudaBoundaryModeTrap); 
#line 1951
} 
#endif
#line 1954 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1955
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1959
::exit(___);}
#if 0
#line 1955
{ 
#line 1956
ushort2 tmp = __surf2DLayeredreads2(surf, x, y, face, cudaBoundaryModeTrap); 
#line 1958
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
#line 1959
} 
#endif
#line 1962 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1963
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1965
::exit(___);}
#if 0
#line 1963
{ 
#line 1964
return __surf2DLayeredreads2(surf, x, y, face, cudaBoundaryModeTrap); 
#line 1965
} 
#endif
#line 1968 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1969
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1973
::exit(___);}
#if 0
#line 1969
{ 
#line 1970
ushort4 tmp = __surf2DLayeredreads4(surf, x, y, face, cudaBoundaryModeTrap); 
#line 1972
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
#line 1973
} 
#endif
#line 1976 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1977
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1979
::exit(___);}
#if 0
#line 1977
{ 
#line 1978
return __surf2DLayeredreads4(surf, x, y, face, cudaBoundaryModeTrap); 
#line 1979
} 
#endif
#line 1982 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1983
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1985
::exit(___);}
#if 0
#line 1983
{ 
#line 1984
return (int)((__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap)).x); 
#line 1985
} 
#endif
#line 1988 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1989
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1991
::exit(___);}
#if 0
#line 1989
{ 
#line 1990
return (__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap)).x; 
#line 1991
} 
#endif
#line 1994 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1995
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1997
::exit(___);}
#if 0
#line 1995
{ 
#line 1996
return make_int1((signed int)((__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap)).x)); 
#line 1997
} 
#endif
#line 2000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2001
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2003
::exit(___);}
#if 0
#line 2001
{ 
#line 2002
return __surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2003
} 
#endif
#line 2006 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2007
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2011
::exit(___);}
#if 0
#line 2007
{ 
#line 2008
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2010
return make_int2((int)(tmp.x), (int)(tmp.y)); 
#line 2011
} 
#endif
#line 2014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2015
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2017
::exit(___);}
#if 0
#line 2015
{ 
#line 2016
return __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2017
} 
#endif
#line 2020 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2021
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2025
::exit(___);}
#if 0
#line 2021
{ 
#line 2022
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2024
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
#line 2025
} 
#endif
#line 2028 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2029
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2031
::exit(___);}
#if 0
#line 2029
{ 
#line 2030
return __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2031
} 
#endif
#line 2034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline __int64 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2035
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2037
::exit(___);}
#if 0
#line 2035
{ 
#line 2036
return (__int64)((__surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeTrap)).x); 
#line 2037
} 
#endif
#line 2040 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned __int64 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2041
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2043
::exit(___);}
#if 0
#line 2041
{ 
#line 2042
return (__surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeTrap)).x; 
#line 2043
} 
#endif
#line 2046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2047
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2049
::exit(___);}
#if 0
#line 2047
{ 
#line 2048
return make_longlong1((__int64)((__surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeTrap)).x)); 
#line 2049
} 
#endif
#line 2052 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2053
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2055
::exit(___);}
#if 0
#line 2053
{ 
#line 2054
return __surf2DLayeredreadl1(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2055
} 
#endif
#line 2058 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2059
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2063
::exit(___);}
#if 0
#line 2059
{ 
#line 2060
ulonglong2 tmp = __surf2DLayeredreadl2(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2062
return make_longlong2((__int64)(tmp.x), (__int64)(tmp.y)); 
#line 2063
} 
#endif
#line 2066 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2067
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2069
::exit(___);}
#if 0
#line 2067
{ 
#line 2068
return __surf2DLayeredreadl2(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2069
} 
#endif
#line 2074 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2075
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2077
::exit(___);}
#if 0
#line 2075
{ 
#line 2076
return (long)((__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap)).x); 
#line 2077
} 
#endif
#line 2080 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned long surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2081
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2083
::exit(___);}
#if 0
#line 2081
{ 
#line 2082
return (unsigned long)((__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap)).x); 
#line 2083
} 
#endif
#line 2086 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2087
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2089
::exit(___);}
#if 0
#line 2087
{ 
#line 2088
return make_long1((long)((__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap)).x)); 
#line 2089
} 
#endif
#line 2092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2093
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2095
::exit(___);}
#if 0
#line 2093
{ 
#line 2094
return make_ulong1((unsigned long)((__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap)).x)); 
#line 2095
} 
#endif
#line 2098 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2099
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2103
::exit(___);}
#if 0
#line 2099
{ 
#line 2100
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2102
return make_long2((long)(tmp.x), (long)(tmp.y)); 
#line 2103
} 
#endif
#line 2106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2107
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2111
::exit(___);}
#if 0
#line 2107
{ 
#line 2108
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2110
return make_ulong2((unsigned long)(tmp.x), (unsigned long)(tmp.y)); 
#line 2111
} 
#endif
#line 2114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2115
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2119
::exit(___);}
#if 0
#line 2115
{ 
#line 2116
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2118
return make_long4((long)(tmp.x), (long)(tmp.y), (long)(tmp.z), (long)(tmp.w)); 
#line 2119
} 
#endif
#line 2122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2123
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2127
::exit(___);}
#if 0
#line 2123
{ 
#line 2124
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2126
return make_ulong4((unsigned long)(tmp.x), (unsigned long)(tmp.y), (unsigned long)(tmp.z), (unsigned long)(tmp.w)); 
#line 2127
} 
#endif
#line 2132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2133
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2135
::exit(___);}
#if 0
#line 2133
{ 
#line 2134
return __int_as_float((int)((__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap)).x)); 
#line 2135
} 
#endif
#line 2138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float1 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2139
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2141
::exit(___);}
#if 0
#line 2139
{ 
#line 2140
return make_float1(__int_as_float((int)((__surf2DLayeredreadu1(surf, x, y, face, cudaBoundaryModeTrap)).x))); 
#line 2141
} 
#endif
#line 2144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float2 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2145
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2149
::exit(___);}
#if 0
#line 2145
{ 
#line 2146
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2148
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
#line 2149
} 
#endif
#line 2152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float4 surfCubemapread(surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 2153
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 2157
::exit(___);}
#if 0
#line 2153
{ 
#line 2154
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, face, cudaBoundaryModeTrap); 
#line 2156
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
#line 2157
} 
#endif
#line 2181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2182
surfCubemapLayeredread(T *res, ::surface< void, 252>  surf, int x, int y, int layerFace, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2183
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
#line 2190
::exit(___);}
#if 0
#line 2183
{ 
#line 2184
(s == 1) ? (void)((*((::uchar1 *)res)) = __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 2) ? (void)((*((::ushort1 *)res)) = __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 4) ? (void)((*((::uint1 *)res)) = __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 8) ? (void)((*((::uint2 *)res)) = __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((s == 16) ? (void)((*((::uint4 *)res)) = __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap)) : ((void)0))))); 
#line 2190
} 
#endif
#line 2192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline T 
#line 2193
surfCubemapLayeredread(::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2194
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2200
::exit(___);}
#if 0
#line 2194
{ 
#line 2195
T tmp; 
#line 2197
surfCubemapLayeredread(&tmp, surf, x, y, layerFace, (int)sizeof(T), mode); 
#line 2199
return tmp; 
#line 2200
} 
#endif
#line 2202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2203
surfCubemapLayeredread(T *res, ::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2204
{int volatile ___ = 1;(void)res;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2206
::exit(___);}
#if 0
#line 2204
{ 
#line 2205
(*res) = surfCubemapLayeredread< T> (surf, x, y, layerFace, mode); 
#line 2206
} 
#endif
#line 2209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2210
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2212
::exit(___);}
#if 0
#line 2210
{ 
#line 2211
return (char)((__surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x); 
#line 2212
} 
#endif
#line 2215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline signed char surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2216
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2218
::exit(___);}
#if 0
#line 2216
{ 
#line 2217
return (signed char)((__surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x); 
#line 2218
} 
#endif
#line 2221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned char surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2222
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2224
::exit(___);}
#if 0
#line 2222
{ 
#line 2223
return (__surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x; 
#line 2224
} 
#endif
#line 2227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2228
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2230
::exit(___);}
#if 0
#line 2228
{ 
#line 2229
return make_char1((signed char)((__surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x)); 
#line 2230
} 
#endif
#line 2233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2234
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2236
::exit(___);}
#if 0
#line 2234
{ 
#line 2235
return __surf2DLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2236
} 
#endif
#line 2239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2240
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2244
::exit(___);}
#if 0
#line 2240
{ 
#line 2241
uchar2 tmp = __surf2DLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2243
return make_char2((signed char)(tmp.x), (signed char)(tmp.y)); 
#line 2244
} 
#endif
#line 2247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2248
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2250
::exit(___);}
#if 0
#line 2248
{ 
#line 2249
return __surf2DLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2250
} 
#endif
#line 2253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline char4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2254
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2258
::exit(___);}
#if 0
#line 2254
{ 
#line 2255
uchar4 tmp = __surf2DLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2257
return make_char4((signed char)(tmp.x), (signed char)(tmp.y), (signed char)(tmp.z), (signed char)(tmp.w)); 
#line 2258
} 
#endif
#line 2261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uchar4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2262
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2264
::exit(___);}
#if 0
#line 2262
{ 
#line 2263
return __surf2DLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2264
} 
#endif
#line 2267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2268
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2270
::exit(___);}
#if 0
#line 2268
{ 
#line 2269
return (short)((__surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x); 
#line 2270
} 
#endif
#line 2273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned short surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2274
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2276
::exit(___);}
#if 0
#line 2274
{ 
#line 2275
return (__surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x; 
#line 2276
} 
#endif
#line 2279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2280
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2282
::exit(___);}
#if 0
#line 2280
{ 
#line 2281
return make_short1((signed short)((__surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x)); 
#line 2282
} 
#endif
#line 2285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2286
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2288
::exit(___);}
#if 0
#line 2286
{ 
#line 2287
return __surf2DLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2288
} 
#endif
#line 2291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2292
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2296
::exit(___);}
#if 0
#line 2292
{ 
#line 2293
ushort2 tmp = __surf2DLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2295
return make_short2((signed short)(tmp.x), (signed short)(tmp.y)); 
#line 2296
} 
#endif
#line 2299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2300
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2302
::exit(___);}
#if 0
#line 2300
{ 
#line 2301
return __surf2DLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2302
} 
#endif
#line 2305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline short4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2306
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2310
::exit(___);}
#if 0
#line 2306
{ 
#line 2307
ushort4 tmp = __surf2DLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2309
return make_short4((signed short)(tmp.x), (signed short)(tmp.y), (signed short)(tmp.z), (signed short)(tmp.w)); 
#line 2310
} 
#endif
#line 2313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ushort4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2314
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2316
::exit(___);}
#if 0
#line 2314
{ 
#line 2315
return __surf2DLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2316
} 
#endif
#line 2319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2320
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2322
::exit(___);}
#if 0
#line 2320
{ 
#line 2321
return (int)((__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x); 
#line 2322
} 
#endif
#line 2325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2326
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2328
::exit(___);}
#if 0
#line 2326
{ 
#line 2327
return (__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x; 
#line 2328
} 
#endif
#line 2331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2332
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2334
::exit(___);}
#if 0
#line 2332
{ 
#line 2333
return make_int1((signed int)((__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x)); 
#line 2334
} 
#endif
#line 2337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2338
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2340
::exit(___);}
#if 0
#line 2338
{ 
#line 2339
return __surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2340
} 
#endif
#line 2343 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2344
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2348
::exit(___);}
#if 0
#line 2344
{ 
#line 2345
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2347
return make_int2((int)(tmp.x), (int)(tmp.y)); 
#line 2348
} 
#endif
#line 2351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2352
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2354
::exit(___);}
#if 0
#line 2352
{ 
#line 2353
return __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2354
} 
#endif
#line 2357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline int4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2358
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2362
::exit(___);}
#if 0
#line 2358
{ 
#line 2359
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2361
return make_int4((int)(tmp.x), (int)(tmp.y), (int)(tmp.z), (int)(tmp.w)); 
#line 2362
} 
#endif
#line 2365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline uint4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2366
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2368
::exit(___);}
#if 0
#line 2366
{ 
#line 2367
return __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2368
} 
#endif
#line 2371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline __int64 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2372
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2374
::exit(___);}
#if 0
#line 2372
{ 
#line 2373
return (__int64)((__surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x); 
#line 2374
} 
#endif
#line 2377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned __int64 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2378
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2380
::exit(___);}
#if 0
#line 2378
{ 
#line 2379
return (__surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x; 
#line 2380
} 
#endif
#line 2383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2384
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2386
::exit(___);}
#if 0
#line 2384
{ 
#line 2385
return make_longlong1((__int64)((__surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x)); 
#line 2386
} 
#endif
#line 2389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2390
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2392
::exit(___);}
#if 0
#line 2390
{ 
#line 2391
return __surf2DLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2392
} 
#endif
#line 2395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline longlong2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2396
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2400
::exit(___);}
#if 0
#line 2396
{ 
#line 2397
ulonglong2 tmp = __surf2DLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2399
return make_longlong2((__int64)(tmp.x), (__int64)(tmp.y)); 
#line 2400
} 
#endif
#line 2403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulonglong2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2404
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2406
::exit(___);}
#if 0
#line 2404
{ 
#line 2405
return __surf2DLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2406
} 
#endif
#line 2411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2412
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2414
::exit(___);}
#if 0
#line 2412
{ 
#line 2413
return (long)((__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x); 
#line 2414
} 
#endif
#line 2417 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline unsigned long surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2418
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2420
::exit(___);}
#if 0
#line 2418
{ 
#line 2419
return (unsigned long)((__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x); 
#line 2420
} 
#endif
#line 2423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2424
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2426
::exit(___);}
#if 0
#line 2424
{ 
#line 2425
return make_long1((long)((__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x)); 
#line 2426
} 
#endif
#line 2429 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2430
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2432
::exit(___);}
#if 0
#line 2430
{ 
#line 2431
return make_ulong1((unsigned long)((__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x)); 
#line 2432
} 
#endif
#line 2435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2436
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2440
::exit(___);}
#if 0
#line 2436
{ 
#line 2437
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2439
return make_long2((long)(tmp.x), (long)(tmp.y)); 
#line 2440
} 
#endif
#line 2443 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2444
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2448
::exit(___);}
#if 0
#line 2444
{ 
#line 2445
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2447
return make_ulong2((unsigned long)(tmp.x), (unsigned long)(tmp.y)); 
#line 2448
} 
#endif
#line 2451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline long4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2452
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2456
::exit(___);}
#if 0
#line 2452
{ 
#line 2453
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2455
return make_long4((long)(tmp.x), (long)(tmp.y), (long)(tmp.z), (long)(tmp.w)); 
#line 2456
} 
#endif
#line 2459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline ulong4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2460
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2464
::exit(___);}
#if 0
#line 2460
{ 
#line 2461
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2463
return make_ulong4((unsigned long)(tmp.x), (unsigned long)(tmp.y), (unsigned long)(tmp.z), (unsigned long)(tmp.w)); 
#line 2464
} 
#endif
#line 2469 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2470
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2472
::exit(___);}
#if 0
#line 2470
{ 
#line 2471
return __int_as_float((int)((__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x)); 
#line 2472
} 
#endif
#line 2475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float1 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2476
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2478
::exit(___);}
#if 0
#line 2476
{ 
#line 2477
return make_float1(__int_as_float((int)((__surf2DLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)).x))); 
#line 2478
} 
#endif
#line 2481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float2 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2482
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2486
::exit(___);}
#if 0
#line 2482
{ 
#line 2483
uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2485
return make_float2(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y))); 
#line 2486
} 
#endif
#line 2489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template<> __forceinline float4 surfCubemapLayeredread(surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 2490
{int volatile ___ = 1;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 2494
::exit(___);}
#if 0
#line 2490
{ 
#line 2491
uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 2493
return make_float4(__int_as_float((int)(tmp.x)), __int_as_float((int)(tmp.y)), __int_as_float((int)(tmp.z)), __int_as_float((int)(tmp.w))); 
#line 2494
} 
#endif
#line 2530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2531
surf1Dwrite(T val, ::surface< void, 1>  surf, int x, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2532
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)s;(void)mode;
#line 2550
::exit(___);}
#if 0
#line 2532
{ 
#line 2533
union { 
#line 2534
T val; 
#line 2535
::uchar1 c1; 
#line 2536
::ushort1 s1; 
#line 2537
::uint1 u1; 
#line 2538
::uint2 u2; 
#line 2539
::uint4 u4; 
#line 2540
} tmp; 
#line 2542
(tmp.val) = val; 
#line 2544
(s == 1) ? (void)__surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeTrap) : ((void)0))))); 
#line 2550
} 
#endif
#line 2552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2553
surf1Dwrite(T val, ::surface< void, 1>  surf, int x, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2554
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 2556
::exit(___);}
#if 0
#line 2554
{ ; 
#line 2555
surf1Dwrite(val, surf, x, (int)sizeof(T), mode); 
#line 2556
} 
#endif
#line 2559 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surf1Dwrite(char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2561
static __forceinline void surf1Dwrite(signed char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2563
static __forceinline void surf1Dwrite(unsigned char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2565
static __forceinline void surf1Dwrite(char1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2567
static __forceinline void surf1Dwrite(uchar1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2569
static __forceinline void surf1Dwrite(char2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2571
static __forceinline void surf1Dwrite(uchar2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2573
static __forceinline void surf1Dwrite(char4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2575
static __forceinline void surf1Dwrite(uchar4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2577
static __forceinline void surf1Dwrite(short val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2579
static __forceinline void surf1Dwrite(unsigned short val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2581
static __forceinline void surf1Dwrite(short1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2583
static __forceinline void surf1Dwrite(ushort1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2585
static __forceinline void surf1Dwrite(short2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2587
static __forceinline void surf1Dwrite(ushort2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2589
static __forceinline void surf1Dwrite(short4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2591
static __forceinline void surf1Dwrite(ushort4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2593
static __forceinline void surf1Dwrite(int val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2595
static __forceinline void surf1Dwrite(unsigned val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2597
static __forceinline void surf1Dwrite(int1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2599
static __forceinline void surf1Dwrite(uint1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2601
static __forceinline void surf1Dwrite(int2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2603
static __forceinline void surf1Dwrite(uint2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2605
static __forceinline void surf1Dwrite(int4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2607
static __forceinline void surf1Dwrite(uint4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2609
static __forceinline void surf1Dwrite(__int64 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2611
static __forceinline void surf1Dwrite(unsigned __int64 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2613
static __forceinline void surf1Dwrite(longlong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2615
static __forceinline void surf1Dwrite(ulonglong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2617
static __forceinline void surf1Dwrite(longlong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2619
static __forceinline void surf1Dwrite(ulonglong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2623
static __forceinline void surf1Dwrite(long val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2625
static __forceinline void surf1Dwrite(unsigned long val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2627
static __forceinline void surf1Dwrite(long1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2629
static __forceinline void surf1Dwrite(ulong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2631
static __forceinline void surf1Dwrite(long2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2633
static __forceinline void surf1Dwrite(ulong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2635
static __forceinline void surf1Dwrite(long4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2637
static __forceinline void surf1Dwrite(ulong4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2641 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surf1Dwrite(float val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2643
static __forceinline void surf1Dwrite(float1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2645
static __forceinline void surf1Dwrite(float2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2647
static __forceinline void surf1Dwrite(float4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2684
surf2Dwrite(T val, ::surface< void, 2>  surf, int x, int y, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2685
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)s;(void)mode;
#line 2703
::exit(___);}
#if 0
#line 2685
{ 
#line 2686
union { 
#line 2687
T val; 
#line 2688
::uchar1 c1; 
#line 2689
::ushort1 s1; 
#line 2690
::uint1 u1; 
#line 2691
::uint2 u2; 
#line 2692
::uint4 u4; 
#line 2693
} tmp; 
#line 2695
(tmp.val) = val; 
#line 2697
(s == 1) ? (void)__surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeTrap) : ((void)0))))); 
#line 2703
} 
#endif
#line 2705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2706
surf2Dwrite(T val, ::surface< void, 2>  surf, int x, int y, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2707
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 2709
::exit(___);}
#if 0
#line 2707
{ ; 
#line 2708
surf2Dwrite(val, surf, x, y, (int)sizeof(T), mode); 
#line 2709
} 
#endif
#line 2712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surf2Dwrite(char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2714
static __forceinline void surf2Dwrite(signed char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2716
static __forceinline void surf2Dwrite(unsigned char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2718
static __forceinline void surf2Dwrite(char1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2720
static __forceinline void surf2Dwrite(uchar1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2722
static __forceinline void surf2Dwrite(char2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2724
static __forceinline void surf2Dwrite(uchar2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2726
static __forceinline void surf2Dwrite(char4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2728
static __forceinline void surf2Dwrite(uchar4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2730
static __forceinline void surf2Dwrite(short val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2732
static __forceinline void surf2Dwrite(unsigned short val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2734
static __forceinline void surf2Dwrite(short1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2736
static __forceinline void surf2Dwrite(ushort1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2738
static __forceinline void surf2Dwrite(short2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2740
static __forceinline void surf2Dwrite(ushort2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2742
static __forceinline void surf2Dwrite(short4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2744
static __forceinline void surf2Dwrite(ushort4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2746
static __forceinline void surf2Dwrite(int val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2748
static __forceinline void surf2Dwrite(unsigned val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2750
static __forceinline void surf2Dwrite(int1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2752
static __forceinline void surf2Dwrite(uint1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2754
static __forceinline void surf2Dwrite(int2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2756
static __forceinline void surf2Dwrite(uint2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2758
static __forceinline void surf2Dwrite(int4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2760
static __forceinline void surf2Dwrite(uint4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2762
static __forceinline void surf2Dwrite(__int64 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2764
static __forceinline void surf2Dwrite(unsigned __int64 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2766
static __forceinline void surf2Dwrite(longlong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2768
static __forceinline void surf2Dwrite(ulonglong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2770
static __forceinline void surf2Dwrite(longlong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2772
static __forceinline void surf2Dwrite(ulonglong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2776
static __forceinline void surf2Dwrite(long val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2778
static __forceinline void surf2Dwrite(unsigned long val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2780
static __forceinline void surf2Dwrite(long1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2782
static __forceinline void surf2Dwrite(ulong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2784
static __forceinline void surf2Dwrite(long2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2786
static __forceinline void surf2Dwrite(ulong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2788
static __forceinline void surf2Dwrite(long4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2790
static __forceinline void surf2Dwrite(ulong4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surf2Dwrite(float val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2796
static __forceinline void surf2Dwrite(float1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2798
static __forceinline void surf2Dwrite(float2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2800
static __forceinline void surf2Dwrite(float4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2837
surf3Dwrite(T val, ::surface< void, 3>  surf, int x, int y, int z, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2838
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)s;(void)mode;
#line 2856
::exit(___);}
#if 0
#line 2838
{ 
#line 2839
union { 
#line 2840
T val; 
#line 2841
::uchar1 c1; 
#line 2842
::ushort1 s1; 
#line 2843
::uint1 u1; 
#line 2844
::uint2 u2; 
#line 2845
::uint4 u4; 
#line 2846
} tmp; 
#line 2848
(tmp.val) = val; 
#line 2850
(s == 1) ? (void)__surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeTrap) : ((void)0))))); 
#line 2856
} 
#endif
#line 2858 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2859
surf3Dwrite(T val, ::surface< void, 3>  surf, int x, int y, int z, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2860
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 2862
::exit(___);}
#if 0
#line 2860
{ ; 
#line 2861
surf3Dwrite(val, surf, x, y, z, (int)sizeof(T), mode); 
#line 2862
} 
#endif
#line 2865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surf3Dwrite(char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2867
static __forceinline void surf3Dwrite(signed char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2869
static __forceinline void surf3Dwrite(unsigned char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2871
static __forceinline void surf3Dwrite(char1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2873
static __forceinline void surf3Dwrite(uchar1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2875
static __forceinline void surf3Dwrite(char2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2877
static __forceinline void surf3Dwrite(uchar2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2879
static __forceinline void surf3Dwrite(char4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2881
static __forceinline void surf3Dwrite(uchar4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2883
static __forceinline void surf3Dwrite(short val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2885
static __forceinline void surf3Dwrite(unsigned short val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2887
static __forceinline void surf3Dwrite(short1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2889
static __forceinline void surf3Dwrite(ushort1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2891
static __forceinline void surf3Dwrite(short2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2893
static __forceinline void surf3Dwrite(ushort2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2895
static __forceinline void surf3Dwrite(short4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2897
static __forceinline void surf3Dwrite(ushort4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2899
static __forceinline void surf3Dwrite(int val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2901
static __forceinline void surf3Dwrite(unsigned val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2903
static __forceinline void surf3Dwrite(int1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2905
static __forceinline void surf3Dwrite(uint1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2907
static __forceinline void surf3Dwrite(int2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2909
static __forceinline void surf3Dwrite(uint2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2911
static __forceinline void surf3Dwrite(int4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2913
static __forceinline void surf3Dwrite(uint4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2915
static __forceinline void surf3Dwrite(__int64 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2917
static __forceinline void surf3Dwrite(unsigned __int64 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2919
static __forceinline void surf3Dwrite(longlong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2921
static __forceinline void surf3Dwrite(ulonglong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2923
static __forceinline void surf3Dwrite(longlong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2925
static __forceinline void surf3Dwrite(ulonglong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2929
static __forceinline void surf3Dwrite(long val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2931
static __forceinline void surf3Dwrite(unsigned long val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2933
static __forceinline void surf3Dwrite(long1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2935
static __forceinline void surf3Dwrite(ulong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2937
static __forceinline void surf3Dwrite(long2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2939
static __forceinline void surf3Dwrite(ulong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2941
static __forceinline void surf3Dwrite(long4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2943
static __forceinline void surf3Dwrite(ulong4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2947 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surf3Dwrite(float val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2949
static __forceinline void surf3Dwrite(float1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2951
static __forceinline void surf3Dwrite(float2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2953
static __forceinline void surf3Dwrite(float4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 2989 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 2990
surf1DLayeredwrite(T val, ::surface< void, 241>  surf, int x, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 2991
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)s;(void)mode;
#line 3009
::exit(___);}
#if 0
#line 2991
{ 
#line 2992
union { 
#line 2993
T val; 
#line 2994
::uchar1 c1; 
#line 2995
::ushort1 s1; 
#line 2996
::uint1 u1; 
#line 2997
::uint2 u2; 
#line 2998
::uint4 u4; 
#line 2999
} tmp; 
#line 3001
(tmp.val) = val; 
#line 3003
(s == 1) ? (void)__surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeTrap) : ((void)0))))); 
#line 3009
} 
#endif
#line 3011 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 3012
surf1DLayeredwrite(T val, ::surface< void, 241>  surf, int x, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 3013
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 3015
::exit(___);}
#if 0
#line 3013
{ ; 
#line 3014
surf1DLayeredwrite(val, surf, x, layer, (int)sizeof(T), mode); 
#line 3015
} 
#endif
#line 3018 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surf1DLayeredwrite(char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3020
static __forceinline void surf1DLayeredwrite(signed char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3022
static __forceinline void surf1DLayeredwrite(unsigned char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3024
static __forceinline void surf1DLayeredwrite(char1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3026
static __forceinline void surf1DLayeredwrite(uchar1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3028
static __forceinline void surf1DLayeredwrite(char2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3030
static __forceinline void surf1DLayeredwrite(uchar2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3032
static __forceinline void surf1DLayeredwrite(char4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3034
static __forceinline void surf1DLayeredwrite(uchar4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3036
static __forceinline void surf1DLayeredwrite(short val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3038
static __forceinline void surf1DLayeredwrite(unsigned short val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3040
static __forceinline void surf1DLayeredwrite(short1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3042
static __forceinline void surf1DLayeredwrite(ushort1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3044
static __forceinline void surf1DLayeredwrite(short2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3046
static __forceinline void surf1DLayeredwrite(ushort2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3048
static __forceinline void surf1DLayeredwrite(short4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3050
static __forceinline void surf1DLayeredwrite(ushort4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3052
static __forceinline void surf1DLayeredwrite(int val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3054
static __forceinline void surf1DLayeredwrite(unsigned val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3056
static __forceinline void surf1DLayeredwrite(int1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3058
static __forceinline void surf1DLayeredwrite(uint1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3060
static __forceinline void surf1DLayeredwrite(int2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3062
static __forceinline void surf1DLayeredwrite(uint2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3064
static __forceinline void surf1DLayeredwrite(int4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3066
static __forceinline void surf1DLayeredwrite(uint4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3068
static __forceinline void surf1DLayeredwrite(__int64 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3070
static __forceinline void surf1DLayeredwrite(unsigned __int64 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3072
static __forceinline void surf1DLayeredwrite(longlong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3074
static __forceinline void surf1DLayeredwrite(ulonglong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3076
static __forceinline void surf1DLayeredwrite(longlong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3078
static __forceinline void surf1DLayeredwrite(ulonglong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3082
static __forceinline void surf1DLayeredwrite(long val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3084
static __forceinline void surf1DLayeredwrite(unsigned long val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3086
static __forceinline void surf1DLayeredwrite(long1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3088
static __forceinline void surf1DLayeredwrite(ulong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3090
static __forceinline void surf1DLayeredwrite(long2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3092
static __forceinline void surf1DLayeredwrite(ulong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3094
static __forceinline void surf1DLayeredwrite(long4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3096
static __forceinline void surf1DLayeredwrite(ulong4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surf1DLayeredwrite(float val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3102
static __forceinline void surf1DLayeredwrite(float1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3104
static __forceinline void surf1DLayeredwrite(float2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3106
static __forceinline void surf1DLayeredwrite(float4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 3154
surf2DLayeredwrite(T val, ::surface< void, 242>  surf, int x, int y, int layer, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 3155
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)s;(void)mode;
#line 3173
::exit(___);}
#if 0
#line 3155
{ 
#line 3156
union { 
#line 3157
T val; 
#line 3158
::uchar1 c1; 
#line 3159
::ushort1 s1; 
#line 3160
::uint1 u1; 
#line 3161
::uint2 u2; 
#line 3162
::uint4 u4; 
#line 3163
} tmp; 
#line 3165
(tmp.val) = val; 
#line 3167
(s == 1) ? (void)__surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeTrap) : ((void)0))))); 
#line 3173
} 
#endif
#line 3175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 3176
surf2DLayeredwrite(T val, ::surface< void, 242>  surf, int x, int y, int layer, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 3177
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 3179
::exit(___);}
#if 0
#line 3177
{ ; 
#line 3178
surf2DLayeredwrite(val, surf, x, y, layer, (int)sizeof(T), mode); 
#line 3179
} 
#endif
#line 3182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surf2DLayeredwrite(char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3184
static __forceinline void surf2DLayeredwrite(signed char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3186
static __forceinline void surf2DLayeredwrite(unsigned char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3188
static __forceinline void surf2DLayeredwrite(char1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3190
static __forceinline void surf2DLayeredwrite(uchar1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3192
static __forceinline void surf2DLayeredwrite(char2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3194
static __forceinline void surf2DLayeredwrite(uchar2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3196
static __forceinline void surf2DLayeredwrite(char4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3198
static __forceinline void surf2DLayeredwrite(uchar4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3200
static __forceinline void surf2DLayeredwrite(short val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3202
static __forceinline void surf2DLayeredwrite(unsigned short val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3204
static __forceinline void surf2DLayeredwrite(short1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3206
static __forceinline void surf2DLayeredwrite(ushort1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3208
static __forceinline void surf2DLayeredwrite(short2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3210
static __forceinline void surf2DLayeredwrite(ushort2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3212
static __forceinline void surf2DLayeredwrite(short4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3214
static __forceinline void surf2DLayeredwrite(ushort4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3216
static __forceinline void surf2DLayeredwrite(int val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3218
static __forceinline void surf2DLayeredwrite(unsigned val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3220
static __forceinline void surf2DLayeredwrite(int1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3222
static __forceinline void surf2DLayeredwrite(uint1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3224
static __forceinline void surf2DLayeredwrite(int2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3226
static __forceinline void surf2DLayeredwrite(uint2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3228
static __forceinline void surf2DLayeredwrite(int4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3230
static __forceinline void surf2DLayeredwrite(uint4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3232
static __forceinline void surf2DLayeredwrite(__int64 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3234
static __forceinline void surf2DLayeredwrite(unsigned __int64 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3236
static __forceinline void surf2DLayeredwrite(longlong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3238
static __forceinline void surf2DLayeredwrite(ulonglong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3240
static __forceinline void surf2DLayeredwrite(longlong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3242
static __forceinline void surf2DLayeredwrite(ulonglong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3246
static __forceinline void surf2DLayeredwrite(long val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3248
static __forceinline void surf2DLayeredwrite(unsigned long val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3250
static __forceinline void surf2DLayeredwrite(long1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3252
static __forceinline void surf2DLayeredwrite(ulong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3254
static __forceinline void surf2DLayeredwrite(long2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3256
static __forceinline void surf2DLayeredwrite(ulong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3258
static __forceinline void surf2DLayeredwrite(long4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3260
static __forceinline void surf2DLayeredwrite(ulong4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surf2DLayeredwrite(float val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3266
static __forceinline void surf2DLayeredwrite(float1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3268
static __forceinline void surf2DLayeredwrite(float2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3270
static __forceinline void surf2DLayeredwrite(float4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 3296
surfCubemapwrite(T val, ::surface< void, 12>  surf, int x, int y, int face, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 3297
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)s;(void)mode;
#line 3315
::exit(___);}
#if 0
#line 3297
{ 
#line 3298
union { 
#line 3299
T val; 
#line 3300
::uchar1 c1; 
#line 3301
::ushort1 s1; 
#line 3302
::uint1 u1; 
#line 3303
::uint2 u2; 
#line 3304
::uint4 u4; 
#line 3305
} tmp; 
#line 3307
(tmp.val) = val; 
#line 3309
(s == 1) ? (void)__surf2DLayeredwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf2DLayeredwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf2DLayeredwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf2DLayeredwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf2DLayeredwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeTrap) : ((void)0))))); 
#line 3315
} 
#endif
#line 3317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 3318
surfCubemapwrite(T val, ::surface< void, 12>  surf, int x, int y, int face, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 3319
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 3321
::exit(___);}
#if 0
#line 3319
{ 
#line 3320
surfCubemapwrite(val, surf, x, y, face, (int)sizeof(T), mode); 
#line 3321
} 
#endif
#line 3324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surfCubemapwrite(char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3326
static __forceinline void surfCubemapwrite(signed char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3328
static __forceinline void surfCubemapwrite(unsigned char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3330
static __forceinline void surfCubemapwrite(char1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3332
static __forceinline void surfCubemapwrite(uchar1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3334
static __forceinline void surfCubemapwrite(char2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3336
static __forceinline void surfCubemapwrite(uchar2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3338
static __forceinline void surfCubemapwrite(char4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3340
static __forceinline void surfCubemapwrite(uchar4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3342
static __forceinline void surfCubemapwrite(short val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3344
static __forceinline void surfCubemapwrite(unsigned short val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3346
static __forceinline void surfCubemapwrite(short1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3348
static __forceinline void surfCubemapwrite(ushort1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3350
static __forceinline void surfCubemapwrite(short2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3352
static __forceinline void surfCubemapwrite(ushort2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3354
static __forceinline void surfCubemapwrite(short4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3356
static __forceinline void surfCubemapwrite(ushort4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3358
static __forceinline void surfCubemapwrite(int val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3360
static __forceinline void surfCubemapwrite(unsigned val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3362
static __forceinline void surfCubemapwrite(int1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3364
static __forceinline void surfCubemapwrite(uint1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3366
static __forceinline void surfCubemapwrite(int2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3368
static __forceinline void surfCubemapwrite(uint2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3370
static __forceinline void surfCubemapwrite(int4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3372
static __forceinline void surfCubemapwrite(uint4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3374
static __forceinline void surfCubemapwrite(__int64 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3376
static __forceinline void surfCubemapwrite(unsigned __int64 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3378
static __forceinline void surfCubemapwrite(longlong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3380
static __forceinline void surfCubemapwrite(ulonglong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3382
static __forceinline void surfCubemapwrite(longlong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3384
static __forceinline void surfCubemapwrite(ulonglong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3388
static __forceinline void surfCubemapwrite(long val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3390
static __forceinline void surfCubemapwrite(unsigned long val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3392
static __forceinline void surfCubemapwrite(long1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3394
static __forceinline void surfCubemapwrite(ulong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3396
static __forceinline void surfCubemapwrite(long2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3398
static __forceinline void surfCubemapwrite(ulong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3400
static __forceinline void surfCubemapwrite(long4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3402
static __forceinline void surfCubemapwrite(ulong4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surfCubemapwrite(float val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3408
static __forceinline void surfCubemapwrite(float1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3410
static __forceinline void surfCubemapwrite(float2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3412
static __forceinline void surfCubemapwrite(float4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 3438
surfCubemapLayeredwrite(T val, ::surface< void, 252>  surf, int x, int y, int layerFace, int s, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 3439
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)s;(void)mode;
#line 3457
::exit(___);}
#if 0
#line 3439
{ 
#line 3440
union { 
#line 3441
T val; 
#line 3442
::uchar1 c1; 
#line 3443
::ushort1 s1; 
#line 3444
::uint1 u1; 
#line 3445
::uint2 u2; 
#line 3446
::uint4 u4; 
#line 3447
} tmp; 
#line 3449
(tmp.val) = val; 
#line 3451
(s == 1) ? (void)__surf2DLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeTrap) : ((s == 2) ? (void)__surf2DLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeTrap) : ((s == 4) ? (void)__surf2DLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeTrap) : ((s == 8) ? (void)__surf2DLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeTrap) : ((s == 16) ? (void)__surf2DLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeTrap) : ((void)0))))); 
#line 3457
} 
#endif
#line 3459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
template< class T> static __forceinline void 
#line 3460
surfCubemapLayeredwrite(T val, ::surface< void, 252>  surf, int x, int y, int layerFace, ::cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap) 
#line 3461
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 3463
::exit(___);}
#if 0
#line 3461
{ ; 
#line 3462
surfCubemapLayeredwrite(val, surf, x, y, layerFace, (int)sizeof(T), mode); 
#line 3463
} 
#endif
#line 3466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surfCubemapLayeredwrite(char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3468
static __forceinline void surfCubemapLayeredwrite(signed char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3470
static __forceinline void surfCubemapLayeredwrite(unsigned char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3472
static __forceinline void surfCubemapLayeredwrite(char1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3474
static __forceinline void surfCubemapLayeredwrite(uchar1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3476
static __forceinline void surfCubemapLayeredwrite(char2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3478
static __forceinline void surfCubemapLayeredwrite(uchar2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3480
static __forceinline void surfCubemapLayeredwrite(char4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3482
static __forceinline void surfCubemapLayeredwrite(uchar4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3484
static __forceinline void surfCubemapLayeredwrite(short val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3486
static __forceinline void surfCubemapLayeredwrite(unsigned short val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3488
static __forceinline void surfCubemapLayeredwrite(short1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3490
static __forceinline void surfCubemapLayeredwrite(ushort1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3492
static __forceinline void surfCubemapLayeredwrite(short2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3494
static __forceinline void surfCubemapLayeredwrite(ushort2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3496
static __forceinline void surfCubemapLayeredwrite(short4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3498
static __forceinline void surfCubemapLayeredwrite(ushort4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3500
static __forceinline void surfCubemapLayeredwrite(int val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3502
static __forceinline void surfCubemapLayeredwrite(unsigned val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3504
static __forceinline void surfCubemapLayeredwrite(int1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3506
static __forceinline void surfCubemapLayeredwrite(uint1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3508
static __forceinline void surfCubemapLayeredwrite(int2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3510
static __forceinline void surfCubemapLayeredwrite(uint2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3512
static __forceinline void surfCubemapLayeredwrite(int4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3514
static __forceinline void surfCubemapLayeredwrite(uint4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3516
static __forceinline void surfCubemapLayeredwrite(__int64 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3518
static __forceinline void surfCubemapLayeredwrite(unsigned __int64 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3520
static __forceinline void surfCubemapLayeredwrite(longlong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3522
static __forceinline void surfCubemapLayeredwrite(ulonglong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3524
static __forceinline void surfCubemapLayeredwrite(longlong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3526
static __forceinline void surfCubemapLayeredwrite(ulonglong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3530
static __forceinline void surfCubemapLayeredwrite(long val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3532
static __forceinline void surfCubemapLayeredwrite(unsigned long val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3534
static __forceinline void surfCubemapLayeredwrite(long1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3536
static __forceinline void surfCubemapLayeredwrite(ulong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3538
static __forceinline void surfCubemapLayeredwrite(long2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3540
static __forceinline void surfCubemapLayeredwrite(ulong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3542
static __forceinline void surfCubemapLayeredwrite(long4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3544
static __forceinline void surfCubemapLayeredwrite(ulong4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3548 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.h"
static __forceinline void surfCubemapLayeredwrite(float val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3550
static __forceinline void surfCubemapLayeredwrite(float1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3552
static __forceinline void surfCubemapLayeredwrite(float2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 3554
static __forceinline void surfCubemapLayeredwrite(float4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap); 
#line 94 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 95
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 97
::exit(___);}
#if 0
#line 95
{ 
#line 96
__surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap); 
#line 97
} 
#endif
#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(signed char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 100
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 102
::exit(___);}
#if 0
#line 100
{ 
#line 101
__surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap); 
#line 102
} 
#endif
#line 104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(unsigned char val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 105
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 107
::exit(___);}
#if 0
#line 105
{ 
#line 106
__surf1Dwritec1(make_uchar1(val), surf, x, cudaBoundaryModeTrap); 
#line 107
} 
#endif
#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(char1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 110
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 112
::exit(___);}
#if 0
#line 110
{ 
#line 111
__surf1Dwritec1(make_uchar1((unsigned char)(val.x)), surf, x, cudaBoundaryModeTrap); 
#line 112
} 
#endif
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(uchar1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 115
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 117
::exit(___);}
#if 0
#line 115
{ 
#line 116
__surf1Dwritec1(val, surf, x, cudaBoundaryModeTrap); 
#line 117
} 
#endif
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(char2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 120
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 122
::exit(___);}
#if 0
#line 120
{ 
#line 121
__surf1Dwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, cudaBoundaryModeTrap); 
#line 122
} 
#endif
#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(uchar2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 125
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 127
::exit(___);}
#if 0
#line 125
{ 
#line 126
__surf1Dwritec2(val, surf, x, cudaBoundaryModeTrap); 
#line 127
} 
#endif
#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(char4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 130
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 132
::exit(___);}
#if 0
#line 130
{ 
#line 131
__surf1Dwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, cudaBoundaryModeTrap); 
#line 132
} 
#endif
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(uchar4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 135
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 137
::exit(___);}
#if 0
#line 135
{ 
#line 136
__surf1Dwritec4(val, surf, x, cudaBoundaryModeTrap); 
#line 137
} 
#endif
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(short val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 140
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 142
::exit(___);}
#if 0
#line 140
{ 
#line 141
__surf1Dwrites1(make_ushort1((unsigned short)val), surf, x, cudaBoundaryModeTrap); 
#line 142
} 
#endif
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(unsigned short val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 145
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 147
::exit(___);}
#if 0
#line 145
{ 
#line 146
__surf1Dwrites1(make_ushort1(val), surf, x, cudaBoundaryModeTrap); 
#line 147
} 
#endif
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(short1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 150
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 152
::exit(___);}
#if 0
#line 150
{ 
#line 151
__surf1Dwrites1(make_ushort1((unsigned short)(val.x)), surf, x, cudaBoundaryModeTrap); 
#line 152
} 
#endif
#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(ushort1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 155
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 157
::exit(___);}
#if 0
#line 155
{ 
#line 156
__surf1Dwrites1(val, surf, x, cudaBoundaryModeTrap); 
#line 157
} 
#endif
#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(short2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 160
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 162
::exit(___);}
#if 0
#line 160
{ 
#line 161
__surf1Dwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, cudaBoundaryModeTrap); 
#line 162
} 
#endif
#line 164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(ushort2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 165
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 167
::exit(___);}
#if 0
#line 165
{ 
#line 166
__surf1Dwrites2(val, surf, x, cudaBoundaryModeTrap); 
#line 167
} 
#endif
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(short4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 170
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 172
::exit(___);}
#if 0
#line 170
{ 
#line 171
__surf1Dwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, cudaBoundaryModeTrap); 
#line 172
} 
#endif
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(ushort4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 175
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 177
::exit(___);}
#if 0
#line 175
{ 
#line 176
__surf1Dwrites4(val, surf, x, cudaBoundaryModeTrap); 
#line 177
} 
#endif
#line 179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(int val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 180
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 182
::exit(___);}
#if 0
#line 180
{ 
#line 181
__surf1Dwriteu1(make_uint1((unsigned)val), surf, x, cudaBoundaryModeTrap); 
#line 182
} 
#endif
#line 184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(unsigned val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 185
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 187
::exit(___);}
#if 0
#line 185
{ 
#line 186
__surf1Dwriteu1(make_uint1(val), surf, x, cudaBoundaryModeTrap); 
#line 187
} 
#endif
#line 189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(int1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 190
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 192
::exit(___);}
#if 0
#line 190
{ 
#line 191
__surf1Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, cudaBoundaryModeTrap); 
#line 192
} 
#endif
#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(uint1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 195
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 197
::exit(___);}
#if 0
#line 195
{ 
#line 196
__surf1Dwriteu1(val, surf, x, cudaBoundaryModeTrap); 
#line 197
} 
#endif
#line 199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(int2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 200
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 202
::exit(___);}
#if 0
#line 200
{ 
#line 201
__surf1Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, cudaBoundaryModeTrap); 
#line 202
} 
#endif
#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(uint2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 205
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 207
::exit(___);}
#if 0
#line 205
{ 
#line 206
__surf1Dwriteu2(val, surf, x, cudaBoundaryModeTrap); 
#line 207
} 
#endif
#line 209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(int4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 210
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 212
::exit(___);}
#if 0
#line 210
{ 
#line 211
__surf1Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, cudaBoundaryModeTrap); 
#line 212
} 
#endif
#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(uint4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 215
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 217
::exit(___);}
#if 0
#line 215
{ 
#line 216
__surf1Dwriteu4(val, surf, x, cudaBoundaryModeTrap); 
#line 217
} 
#endif
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(__int64 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 220
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 222
::exit(___);}
#if 0
#line 220
{ 
#line 221
__surf1Dwritel1(make_ulonglong1((unsigned __int64)val), surf, x, cudaBoundaryModeTrap); 
#line 222
} 
#endif
#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(unsigned __int64 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 225
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 227
::exit(___);}
#if 0
#line 225
{ 
#line 226
__surf1Dwritel1(make_ulonglong1(val), surf, x, cudaBoundaryModeTrap); 
#line 227
} 
#endif
#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(longlong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 230
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 232
::exit(___);}
#if 0
#line 230
{ 
#line 231
__surf1Dwritel1(make_ulonglong1((unsigned __int64)(val.x)), surf, x, cudaBoundaryModeTrap); 
#line 232
} 
#endif
#line 234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(ulonglong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 235
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 237
::exit(___);}
#if 0
#line 235
{ 
#line 236
__surf1Dwritel1(val, surf, x, cudaBoundaryModeTrap); 
#line 237
} 
#endif
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(longlong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 240
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 242
::exit(___);}
#if 0
#line 240
{ 
#line 241
__surf1Dwritel2(make_ulonglong2((unsigned __int64)(val.x), (unsigned __int64)(val.y)), surf, x, cudaBoundaryModeTrap); 
#line 242
} 
#endif
#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(ulonglong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 245
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 247
::exit(___);}
#if 0
#line 245
{ 
#line 246
__surf1Dwritel2(val, surf, x, cudaBoundaryModeTrap); 
#line 247
} 
#endif
#line 251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(long val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 252
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 254
::exit(___);}
#if 0
#line 252
{ 
#line 253
__surf1Dwriteu1(make_uint1((unsigned)val), surf, x, cudaBoundaryModeTrap); 
#line 254
} 
#endif
#line 256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(unsigned long val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 257
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 259
::exit(___);}
#if 0
#line 257
{ 
#line 258
__surf1Dwriteu1(make_uint1((unsigned)val), surf, x, cudaBoundaryModeTrap); 
#line 259
} 
#endif
#line 261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(long1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 262
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 264
::exit(___);}
#if 0
#line 262
{ 
#line 263
__surf1Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, cudaBoundaryModeTrap); 
#line 264
} 
#endif
#line 266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(ulong1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 267
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 269
::exit(___);}
#if 0
#line 267
{ 
#line 268
__surf1Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, cudaBoundaryModeTrap); 
#line 269
} 
#endif
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(long2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 272
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 274
::exit(___);}
#if 0
#line 272
{ 
#line 273
__surf1Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, cudaBoundaryModeTrap); 
#line 274
} 
#endif
#line 276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(ulong2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 277
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 279
::exit(___);}
#if 0
#line 277
{ 
#line 278
__surf1Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, cudaBoundaryModeTrap); 
#line 279
} 
#endif
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(long4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 282
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 284
::exit(___);}
#if 0
#line 282
{ 
#line 283
__surf1Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, cudaBoundaryModeTrap); 
#line 284
} 
#endif
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(ulong4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 287
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 289
::exit(___);}
#if 0
#line 287
{ 
#line 288
__surf1Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, cudaBoundaryModeTrap); 
#line 289
} 
#endif
#line 293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(float val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 294
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 296
::exit(___);}
#if 0
#line 294
{ 
#line 295
__surf1Dwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, cudaBoundaryModeTrap); 
#line 296
} 
#endif
#line 298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(float1 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 299
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 301
::exit(___);}
#if 0
#line 299
{ 
#line 300
__surf1Dwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, cudaBoundaryModeTrap); 
#line 301
} 
#endif
#line 303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(float2 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 304
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 306
::exit(___);}
#if 0
#line 304
{ 
#line 305
__surf1Dwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, cudaBoundaryModeTrap); 
#line 306
} 
#endif
#line 308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1Dwrite(float4 val, surface< void, 1>  surf, int x, cudaSurfaceBoundaryMode mode) 
#line 309
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)mode;
#line 311
::exit(___);}
#if 0
#line 309
{ 
#line 310
__surf1Dwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, cudaBoundaryModeTrap); 
#line 311
} 
#endif
#line 336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 337
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 339
::exit(___);}
#if 0
#line 337
{ 
#line 338
__surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap); 
#line 339
} 
#endif
#line 341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(signed char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 342
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 344
::exit(___);}
#if 0
#line 342
{ 
#line 343
__surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap); 
#line 344
} 
#endif
#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(unsigned char val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 347
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 349
::exit(___);}
#if 0
#line 347
{ 
#line 348
__surf2Dwritec1(make_uchar1(val), surf, x, y, cudaBoundaryModeTrap); 
#line 349
} 
#endif
#line 351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(char1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 352
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 354
::exit(___);}
#if 0
#line 352
{ 
#line 353
__surf2Dwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
#line 354
} 
#endif
#line 356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(uchar1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 357
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 359
::exit(___);}
#if 0
#line 357
{ 
#line 358
__surf2Dwritec1(val, surf, x, y, cudaBoundaryModeTrap); 
#line 359
} 
#endif
#line 361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(char2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 362
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 364
::exit(___);}
#if 0
#line 362
{ 
#line 363
__surf2Dwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
#line 364
} 
#endif
#line 366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(uchar2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 367
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 369
::exit(___);}
#if 0
#line 367
{ 
#line 368
__surf2Dwritec2(val, surf, x, y, cudaBoundaryModeTrap); 
#line 369
} 
#endif
#line 371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(char4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 372
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 374
::exit(___);}
#if 0
#line 372
{ 
#line 373
__surf2Dwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
#line 374
} 
#endif
#line 376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(uchar4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 377
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 379
::exit(___);}
#if 0
#line 377
{ 
#line 378
__surf2Dwritec4(val, surf, x, y, cudaBoundaryModeTrap); 
#line 379
} 
#endif
#line 381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(short val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 382
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 384
::exit(___);}
#if 0
#line 382
{ 
#line 383
__surf2Dwrites1(make_ushort1((unsigned short)val), surf, x, y, cudaBoundaryModeTrap); 
#line 384
} 
#endif
#line 386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(unsigned short val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 387
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 389
::exit(___);}
#if 0
#line 387
{ 
#line 388
__surf2Dwrites1(make_ushort1(val), surf, x, y, cudaBoundaryModeTrap); 
#line 389
} 
#endif
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(short1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 392
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 394
::exit(___);}
#if 0
#line 392
{ 
#line 393
__surf2Dwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
#line 394
} 
#endif
#line 396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(ushort1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 397
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 399
::exit(___);}
#if 0
#line 397
{ 
#line 398
__surf2Dwrites1(val, surf, x, y, cudaBoundaryModeTrap); 
#line 399
} 
#endif
#line 401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(short2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 402
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 404
::exit(___);}
#if 0
#line 402
{ 
#line 403
__surf2Dwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
#line 404
} 
#endif
#line 406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(ushort2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 407
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 409
::exit(___);}
#if 0
#line 407
{ 
#line 408
__surf2Dwrites2(val, surf, x, y, cudaBoundaryModeTrap); 
#line 409
} 
#endif
#line 411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(short4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 412
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 414
::exit(___);}
#if 0
#line 412
{ 
#line 413
__surf2Dwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
#line 414
} 
#endif
#line 416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(ushort4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 417
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 419
::exit(___);}
#if 0
#line 417
{ 
#line 418
__surf2Dwrites4(val, surf, x, y, cudaBoundaryModeTrap); 
#line 419
} 
#endif
#line 421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(int val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 422
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 424
::exit(___);}
#if 0
#line 422
{ 
#line 423
__surf2Dwriteu1(make_uint1((unsigned)val), surf, x, y, cudaBoundaryModeTrap); 
#line 424
} 
#endif
#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(unsigned val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 427
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 429
::exit(___);}
#if 0
#line 427
{ 
#line 428
__surf2Dwriteu1(make_uint1(val), surf, x, y, cudaBoundaryModeTrap); 
#line 429
} 
#endif
#line 431 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(int1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 432
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 434
::exit(___);}
#if 0
#line 432
{ 
#line 433
__surf2Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
#line 434
} 
#endif
#line 436 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(uint1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 437
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 439
::exit(___);}
#if 0
#line 437
{ 
#line 438
__surf2Dwriteu1(val, surf, x, y, cudaBoundaryModeTrap); 
#line 439
} 
#endif
#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(int2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 442
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 444
::exit(___);}
#if 0
#line 442
{ 
#line 443
__surf2Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
#line 444
} 
#endif
#line 446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(uint2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 447
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 449
::exit(___);}
#if 0
#line 447
{ 
#line 448
__surf2Dwriteu2(val, surf, x, y, cudaBoundaryModeTrap); 
#line 449
} 
#endif
#line 451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(int4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 452
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 454
::exit(___);}
#if 0
#line 452
{ 
#line 453
__surf2Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
#line 454
} 
#endif
#line 456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(uint4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 457
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 459
::exit(___);}
#if 0
#line 457
{ 
#line 458
__surf2Dwriteu4(val, surf, x, y, cudaBoundaryModeTrap); 
#line 459
} 
#endif
#line 461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(__int64 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 462
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 464
::exit(___);}
#if 0
#line 462
{ 
#line 463
__surf2Dwritel1(make_ulonglong1((unsigned __int64)val), surf, x, y, cudaBoundaryModeTrap); 
#line 464
} 
#endif
#line 466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(unsigned __int64 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 467
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 469
::exit(___);}
#if 0
#line 467
{ 
#line 468
__surf2Dwritel1(make_ulonglong1(val), surf, x, y, cudaBoundaryModeTrap); 
#line 469
} 
#endif
#line 471 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(longlong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 472
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 474
::exit(___);}
#if 0
#line 472
{ 
#line 473
__surf2Dwritel1(make_ulonglong1((unsigned __int64)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
#line 474
} 
#endif
#line 476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(ulonglong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 477
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 479
::exit(___);}
#if 0
#line 477
{ 
#line 478
__surf2Dwritel1(val, surf, x, y, cudaBoundaryModeTrap); 
#line 479
} 
#endif
#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(longlong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 482
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 484
::exit(___);}
#if 0
#line 482
{ 
#line 483
__surf2Dwritel2(make_ulonglong2((unsigned __int64)(val.x), (unsigned __int64)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
#line 484
} 
#endif
#line 486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(ulonglong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 487
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 489
::exit(___);}
#if 0
#line 487
{ 
#line 488
__surf2Dwritel2(val, surf, x, y, cudaBoundaryModeTrap); 
#line 489
} 
#endif
#line 493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(long val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 494
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 496
::exit(___);}
#if 0
#line 494
{ 
#line 495
__surf2Dwriteu1(make_uint1((unsigned)val), surf, x, y, cudaBoundaryModeTrap); 
#line 496
} 
#endif
#line 498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(unsigned long val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 499
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 501
::exit(___);}
#if 0
#line 499
{ 
#line 500
__surf2Dwriteu1(make_uint1((unsigned)val), surf, x, y, cudaBoundaryModeTrap); 
#line 501
} 
#endif
#line 503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(long1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 504
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 506
::exit(___);}
#if 0
#line 504
{ 
#line 505
__surf2Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
#line 506
} 
#endif
#line 508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(ulong1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 509
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 511
::exit(___);}
#if 0
#line 509
{ 
#line 510
__surf2Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, cudaBoundaryModeTrap); 
#line 511
} 
#endif
#line 513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(long2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 514
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 516
::exit(___);}
#if 0
#line 514
{ 
#line 515
__surf2Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
#line 516
} 
#endif
#line 518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(ulong2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 519
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 521
::exit(___);}
#if 0
#line 519
{ 
#line 520
__surf2Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, cudaBoundaryModeTrap); 
#line 521
} 
#endif
#line 523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(long4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 524
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 526
::exit(___);}
#if 0
#line 524
{ 
#line 525
__surf2Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
#line 526
} 
#endif
#line 528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(ulong4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 529
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 531
::exit(___);}
#if 0
#line 529
{ 
#line 530
__surf2Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, cudaBoundaryModeTrap); 
#line 531
} 
#endif
#line 535 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(float val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 536
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 538
::exit(___);}
#if 0
#line 536
{ 
#line 537
__surf2Dwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, cudaBoundaryModeTrap); 
#line 538
} 
#endif
#line 540 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(float1 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 541
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 543
::exit(___);}
#if 0
#line 541
{ 
#line 542
__surf2Dwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, cudaBoundaryModeTrap); 
#line 543
} 
#endif
#line 545 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(float2 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 546
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 548
::exit(___);}
#if 0
#line 546
{ 
#line 547
__surf2Dwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, y, cudaBoundaryModeTrap); 
#line 548
} 
#endif
#line 550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2Dwrite(float4 val, surface< void, 2>  surf, int x, int y, cudaSurfaceBoundaryMode mode) 
#line 551
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)mode;
#line 553
::exit(___);}
#if 0
#line 551
{ 
#line 552
__surf2Dwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, cudaBoundaryModeTrap); 
#line 553
} 
#endif
#line 578 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 579
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 581
::exit(___);}
#if 0
#line 579
{ 
#line 580
__surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap); 
#line 581
} 
#endif
#line 583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(signed char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 584
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 586
::exit(___);}
#if 0
#line 584
{ 
#line 585
__surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap); 
#line 586
} 
#endif
#line 588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(unsigned char val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 589
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 591
::exit(___);}
#if 0
#line 589
{ 
#line 590
__surf3Dwritec1(make_uchar1(val), surf, x, y, z, cudaBoundaryModeTrap); 
#line 591
} 
#endif
#line 593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(char1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 594
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 596
::exit(___);}
#if 0
#line 594
{ 
#line 595
__surf3Dwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 596
} 
#endif
#line 598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(uchar1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 599
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 601
::exit(___);}
#if 0
#line 599
{ 
#line 600
__surf3Dwritec1(val, surf, x, y, z, cudaBoundaryModeTrap); 
#line 601
} 
#endif
#line 603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(char2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 604
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 606
::exit(___);}
#if 0
#line 604
{ 
#line 605
__surf3Dwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 606
} 
#endif
#line 608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(uchar2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 609
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 611
::exit(___);}
#if 0
#line 609
{ 
#line 610
__surf3Dwritec2(val, surf, x, y, z, cudaBoundaryModeTrap); 
#line 611
} 
#endif
#line 613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(char4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 614
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 616
::exit(___);}
#if 0
#line 614
{ 
#line 615
__surf3Dwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 616
} 
#endif
#line 618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(uchar4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 619
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 621
::exit(___);}
#if 0
#line 619
{ 
#line 620
__surf3Dwritec4(val, surf, x, y, z, cudaBoundaryModeTrap); 
#line 621
} 
#endif
#line 623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(short val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 624
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 626
::exit(___);}
#if 0
#line 624
{ 
#line 625
__surf3Dwrites1(make_ushort1((unsigned short)val), surf, x, y, z, cudaBoundaryModeTrap); 
#line 626
} 
#endif
#line 628 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(unsigned short val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 629
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 631
::exit(___);}
#if 0
#line 629
{ 
#line 630
__surf3Dwrites1(make_ushort1(val), surf, x, y, z, cudaBoundaryModeTrap); 
#line 631
} 
#endif
#line 633 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(short1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 634
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 636
::exit(___);}
#if 0
#line 634
{ 
#line 635
__surf3Dwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 636
} 
#endif
#line 638 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(ushort1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 639
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 641
::exit(___);}
#if 0
#line 639
{ 
#line 640
__surf3Dwrites1(val, surf, x, y, z, cudaBoundaryModeTrap); 
#line 641
} 
#endif
#line 643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(short2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 644
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 646
::exit(___);}
#if 0
#line 644
{ 
#line 645
__surf3Dwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 646
} 
#endif
#line 648 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(ushort2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 649
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 651
::exit(___);}
#if 0
#line 649
{ 
#line 650
__surf3Dwrites2(val, surf, x, y, z, cudaBoundaryModeTrap); 
#line 651
} 
#endif
#line 653 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(short4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 654
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 656
::exit(___);}
#if 0
#line 654
{ 
#line 655
__surf3Dwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 656
} 
#endif
#line 658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(ushort4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 659
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 661
::exit(___);}
#if 0
#line 659
{ 
#line 660
__surf3Dwrites4(val, surf, x, y, z, cudaBoundaryModeTrap); 
#line 661
} 
#endif
#line 663 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(int val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 664
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 666
::exit(___);}
#if 0
#line 664
{ 
#line 665
__surf3Dwriteu1(make_uint1((unsigned)val), surf, x, y, z, cudaBoundaryModeTrap); 
#line 666
} 
#endif
#line 668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(unsigned val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 669
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 671
::exit(___);}
#if 0
#line 669
{ 
#line 670
__surf3Dwriteu1(make_uint1(val), surf, x, y, z, cudaBoundaryModeTrap); 
#line 671
} 
#endif
#line 673 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(int1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 674
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 676
::exit(___);}
#if 0
#line 674
{ 
#line 675
__surf3Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 676
} 
#endif
#line 678 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(uint1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 679
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 681
::exit(___);}
#if 0
#line 679
{ 
#line 680
__surf3Dwriteu1(val, surf, x, y, z, cudaBoundaryModeTrap); 
#line 681
} 
#endif
#line 683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(int2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 684
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 686
::exit(___);}
#if 0
#line 684
{ 
#line 685
__surf3Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 686
} 
#endif
#line 688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(uint2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 689
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 691
::exit(___);}
#if 0
#line 689
{ 
#line 690
__surf3Dwriteu2(val, surf, x, y, z, cudaBoundaryModeTrap); 
#line 691
} 
#endif
#line 693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(int4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 694
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 696
::exit(___);}
#if 0
#line 694
{ 
#line 695
__surf3Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 696
} 
#endif
#line 698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(uint4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 699
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 701
::exit(___);}
#if 0
#line 699
{ 
#line 700
__surf3Dwriteu4(val, surf, x, y, z, cudaBoundaryModeTrap); 
#line 701
} 
#endif
#line 703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(__int64 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 704
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 706
::exit(___);}
#if 0
#line 704
{ 
#line 705
__surf3Dwritel1(make_ulonglong1((unsigned __int64)val), surf, x, y, z, cudaBoundaryModeTrap); 
#line 706
} 
#endif
#line 708 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(unsigned __int64 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 709
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 711
::exit(___);}
#if 0
#line 709
{ 
#line 710
__surf3Dwritel1(make_ulonglong1(val), surf, x, y, z, cudaBoundaryModeTrap); 
#line 711
} 
#endif
#line 713 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(longlong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 714
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 716
::exit(___);}
#if 0
#line 714
{ 
#line 715
__surf3Dwritel1(make_ulonglong1((unsigned __int64)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 716
} 
#endif
#line 718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(ulonglong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 719
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 721
::exit(___);}
#if 0
#line 719
{ 
#line 720
__surf3Dwritel1(val, surf, x, y, z, cudaBoundaryModeTrap); 
#line 721
} 
#endif
#line 723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(longlong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 724
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 726
::exit(___);}
#if 0
#line 724
{ 
#line 725
__surf3Dwritel2(make_ulonglong2((unsigned __int64)(val.x), (unsigned __int64)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 726
} 
#endif
#line 728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(ulonglong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 729
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 731
::exit(___);}
#if 0
#line 729
{ 
#line 730
__surf3Dwritel2(val, surf, x, y, z, cudaBoundaryModeTrap); 
#line 731
} 
#endif
#line 735 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(long val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 736
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 738
::exit(___);}
#if 0
#line 736
{ 
#line 737
__surf3Dwriteu1(make_uint1((unsigned)val), surf, x, y, z, cudaBoundaryModeTrap); 
#line 738
} 
#endif
#line 740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(unsigned long val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 741
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 743
::exit(___);}
#if 0
#line 741
{ 
#line 742
__surf3Dwriteu1(make_uint1((unsigned)val), surf, x, y, z, cudaBoundaryModeTrap); 
#line 743
} 
#endif
#line 745 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(long1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 746
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 748
::exit(___);}
#if 0
#line 746
{ 
#line 747
__surf3Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 748
} 
#endif
#line 750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(ulong1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 751
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 753
::exit(___);}
#if 0
#line 751
{ 
#line 752
__surf3Dwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 753
} 
#endif
#line 755 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(long2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 756
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 758
::exit(___);}
#if 0
#line 756
{ 
#line 757
__surf3Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 758
} 
#endif
#line 760 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(ulong2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 761
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 763
::exit(___);}
#if 0
#line 761
{ 
#line 762
__surf3Dwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 763
} 
#endif
#line 765 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(long4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 766
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 768
::exit(___);}
#if 0
#line 766
{ 
#line 767
__surf3Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 768
} 
#endif
#line 770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(ulong4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 771
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 773
::exit(___);}
#if 0
#line 771
{ 
#line 772
__surf3Dwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 773
} 
#endif
#line 777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(float val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 778
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 780
::exit(___);}
#if 0
#line 778
{ 
#line 779
__surf3Dwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 780
} 
#endif
#line 782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(float1 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 783
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 785
::exit(___);}
#if 0
#line 783
{ 
#line 784
__surf3Dwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 785
} 
#endif
#line 787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(float2 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 788
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 790
::exit(___);}
#if 0
#line 788
{ 
#line 789
__surf3Dwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 790
} 
#endif
#line 792 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf3Dwrite(float4 val, surface< void, 3>  surf, int x, int y, int z, cudaSurfaceBoundaryMode mode) 
#line 793
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)z;(void)mode;
#line 795
::exit(___);}
#if 0
#line 793
{ 
#line 794
__surf3Dwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, z, cudaBoundaryModeTrap); 
#line 795
} 
#endif
#line 820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 821
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 823
::exit(___);}
#if 0
#line 821
{ 
#line 822
__surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap); 
#line 823
} 
#endif
#line 825 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(signed char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 826
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 828
::exit(___);}
#if 0
#line 826
{ 
#line 827
__surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap); 
#line 828
} 
#endif
#line 830 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(unsigned char val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 831
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 833
::exit(___);}
#if 0
#line 831
{ 
#line 832
__surf1DLayeredwritec1(make_uchar1(val), surf, x, layer, cudaBoundaryModeTrap); 
#line 833
} 
#endif
#line 835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(char1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 836
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 838
::exit(___);}
#if 0
#line 836
{ 
#line 837
__surf1DLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
#line 838
} 
#endif
#line 840 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(uchar1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 841
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 843
::exit(___);}
#if 0
#line 841
{ 
#line 842
__surf1DLayeredwritec1(val, surf, x, layer, cudaBoundaryModeTrap); 
#line 843
} 
#endif
#line 845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(char2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 846
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 848
::exit(___);}
#if 0
#line 846
{ 
#line 847
__surf1DLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
#line 848
} 
#endif
#line 850 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(uchar2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 851
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 853
::exit(___);}
#if 0
#line 851
{ 
#line 852
__surf1DLayeredwritec2(val, surf, x, layer, cudaBoundaryModeTrap); 
#line 853
} 
#endif
#line 855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(char4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 856
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 858
::exit(___);}
#if 0
#line 856
{ 
#line 857
__surf1DLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
#line 858
} 
#endif
#line 860 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(uchar4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 861
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 863
::exit(___);}
#if 0
#line 861
{ 
#line 862
__surf1DLayeredwritec4(val, surf, x, layer, cudaBoundaryModeTrap); 
#line 863
} 
#endif
#line 865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(short val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 866
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 868
::exit(___);}
#if 0
#line 866
{ 
#line 867
__surf1DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, layer, cudaBoundaryModeTrap); 
#line 868
} 
#endif
#line 870 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(unsigned short val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 871
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 873
::exit(___);}
#if 0
#line 871
{ 
#line 872
__surf1DLayeredwrites1(make_ushort1(val), surf, x, layer, cudaBoundaryModeTrap); 
#line 873
} 
#endif
#line 875 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(short1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 876
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 878
::exit(___);}
#if 0
#line 876
{ 
#line 877
__surf1DLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
#line 878
} 
#endif
#line 880 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(ushort1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 881
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 883
::exit(___);}
#if 0
#line 881
{ 
#line 882
__surf1DLayeredwrites1(val, surf, x, layer, cudaBoundaryModeTrap); 
#line 883
} 
#endif
#line 885 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(short2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 886
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 888
::exit(___);}
#if 0
#line 886
{ 
#line 887
__surf1DLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
#line 888
} 
#endif
#line 890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(ushort2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 891
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 893
::exit(___);}
#if 0
#line 891
{ 
#line 892
__surf1DLayeredwrites2(val, surf, x, layer, cudaBoundaryModeTrap); 
#line 893
} 
#endif
#line 895 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(short4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 896
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 898
::exit(___);}
#if 0
#line 896
{ 
#line 897
__surf1DLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
#line 898
} 
#endif
#line 900 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(ushort4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 901
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 903
::exit(___);}
#if 0
#line 901
{ 
#line 902
__surf1DLayeredwrites4(val, surf, x, layer, cudaBoundaryModeTrap); 
#line 903
} 
#endif
#line 905 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(int val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 906
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 908
::exit(___);}
#if 0
#line 906
{ 
#line 907
__surf1DLayeredwriteu1(make_uint1((unsigned)val), surf, x, layer, cudaBoundaryModeTrap); 
#line 908
} 
#endif
#line 910 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(unsigned val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 911
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 913
::exit(___);}
#if 0
#line 911
{ 
#line 912
__surf1DLayeredwriteu1(make_uint1(val), surf, x, layer, cudaBoundaryModeTrap); 
#line 913
} 
#endif
#line 915 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(int1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 916
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 918
::exit(___);}
#if 0
#line 916
{ 
#line 917
__surf1DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
#line 918
} 
#endif
#line 920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(uint1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 921
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 923
::exit(___);}
#if 0
#line 921
{ 
#line 922
__surf1DLayeredwriteu1(val, surf, x, layer, cudaBoundaryModeTrap); 
#line 923
} 
#endif
#line 925 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(int2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 926
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 928
::exit(___);}
#if 0
#line 926
{ 
#line 927
__surf1DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
#line 928
} 
#endif
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(uint2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 931
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 933
::exit(___);}
#if 0
#line 931
{ 
#line 932
__surf1DLayeredwriteu2(val, surf, x, layer, cudaBoundaryModeTrap); 
#line 933
} 
#endif
#line 935 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(int4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 936
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 938
::exit(___);}
#if 0
#line 936
{ 
#line 937
__surf1DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
#line 938
} 
#endif
#line 940 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(uint4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 941
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 943
::exit(___);}
#if 0
#line 941
{ 
#line 942
__surf1DLayeredwriteu4(val, surf, x, layer, cudaBoundaryModeTrap); 
#line 943
} 
#endif
#line 945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(__int64 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 946
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 948
::exit(___);}
#if 0
#line 946
{ 
#line 947
__surf1DLayeredwritel1(make_ulonglong1((unsigned __int64)val), surf, x, layer, cudaBoundaryModeTrap); 
#line 948
} 
#endif
#line 950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(unsigned __int64 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 951
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 953
::exit(___);}
#if 0
#line 951
{ 
#line 952
__surf1DLayeredwritel1(make_ulonglong1(val), surf, x, layer, cudaBoundaryModeTrap); 
#line 953
} 
#endif
#line 955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(longlong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 956
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 958
::exit(___);}
#if 0
#line 956
{ 
#line 957
__surf1DLayeredwritel1(make_ulonglong1((unsigned __int64)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
#line 958
} 
#endif
#line 960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(ulonglong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 961
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 963
::exit(___);}
#if 0
#line 961
{ 
#line 962
__surf1DLayeredwritel1(val, surf, x, layer, cudaBoundaryModeTrap); 
#line 963
} 
#endif
#line 965 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(longlong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 966
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 968
::exit(___);}
#if 0
#line 966
{ 
#line 967
__surf1DLayeredwritel2(make_ulonglong2((unsigned __int64)(val.x), (unsigned __int64)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
#line 968
} 
#endif
#line 970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(ulonglong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 971
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 973
::exit(___);}
#if 0
#line 971
{ 
#line 972
__surf1DLayeredwritel2(val, surf, x, layer, cudaBoundaryModeTrap); 
#line 973
} 
#endif
#line 977 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(long val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 978
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 980
::exit(___);}
#if 0
#line 978
{ 
#line 979
__surf1DLayeredwriteu1(make_uint1((unsigned)val), surf, x, layer, cudaBoundaryModeTrap); 
#line 980
} 
#endif
#line 982 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(unsigned long val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 983
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 985
::exit(___);}
#if 0
#line 983
{ 
#line 984
__surf1DLayeredwriteu1(make_uint1((unsigned)val), surf, x, layer, cudaBoundaryModeTrap); 
#line 985
} 
#endif
#line 987 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(long1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 988
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 990
::exit(___);}
#if 0
#line 988
{ 
#line 989
__surf1DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
#line 990
} 
#endif
#line 992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(ulong1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 993
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 995
::exit(___);}
#if 0
#line 993
{ 
#line 994
__surf1DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
#line 995
} 
#endif
#line 997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(long2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 998
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 1000
::exit(___);}
#if 0
#line 998
{ 
#line 999
__surf1DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
#line 1000
} 
#endif
#line 1002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(ulong2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1003
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 1005
::exit(___);}
#if 0
#line 1003
{ 
#line 1004
__surf1DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
#line 1005
} 
#endif
#line 1007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(long4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1008
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 1010
::exit(___);}
#if 0
#line 1008
{ 
#line 1009
__surf1DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
#line 1010
} 
#endif
#line 1012 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(ulong4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1013
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 1015
::exit(___);}
#if 0
#line 1013
{ 
#line 1014
__surf1DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
#line 1015
} 
#endif
#line 1019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(float val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1020
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 1022
::exit(___);}
#if 0
#line 1020
{ 
#line 1021
__surf1DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, layer, cudaBoundaryModeTrap); 
#line 1022
} 
#endif
#line 1024 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(float1 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1025
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 1027
::exit(___);}
#if 0
#line 1025
{ 
#line 1026
__surf1DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, layer, cudaBoundaryModeTrap); 
#line 1027
} 
#endif
#line 1029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(float2 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1030
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 1032
::exit(___);}
#if 0
#line 1030
{ 
#line 1031
__surf1DLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, layer, cudaBoundaryModeTrap); 
#line 1032
} 
#endif
#line 1034 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf1DLayeredwrite(float4 val, surface< void, 241>  surf, int x, int layer, cudaSurfaceBoundaryMode mode) 
#line 1035
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)layer;(void)mode;
#line 1037
::exit(___);}
#if 0
#line 1035
{ 
#line 1036
__surf1DLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, layer, cudaBoundaryModeTrap); 
#line 1037
} 
#endif
#line 1062 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1063
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1065
::exit(___);}
#if 0
#line 1063
{ 
#line 1064
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1065
} 
#endif
#line 1067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(signed char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1068
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1070
::exit(___);}
#if 0
#line 1068
{ 
#line 1069
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1070
} 
#endif
#line 1072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(unsigned char val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1073
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1075
::exit(___);}
#if 0
#line 1073
{ 
#line 1074
__surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1075
} 
#endif
#line 1077 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(char1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1078
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1080
::exit(___);}
#if 0
#line 1078
{ 
#line 1079
__surf2DLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1080
} 
#endif
#line 1082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(uchar1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1083
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1085
::exit(___);}
#if 0
#line 1083
{ 
#line 1084
__surf2DLayeredwritec1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1085
} 
#endif
#line 1087 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(char2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1088
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1090
::exit(___);}
#if 0
#line 1088
{ 
#line 1089
__surf2DLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1090
} 
#endif
#line 1092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(uchar2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1093
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1095
::exit(___);}
#if 0
#line 1093
{ 
#line 1094
__surf2DLayeredwritec2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1095
} 
#endif
#line 1097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(char4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1098
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1100
::exit(___);}
#if 0
#line 1098
{ 
#line 1099
__surf2DLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1100
} 
#endif
#line 1102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(uchar4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1103
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1105
::exit(___);}
#if 0
#line 1103
{ 
#line 1104
__surf2DLayeredwritec4(val, surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1105
} 
#endif
#line 1107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(short val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1108
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1110
::exit(___);}
#if 0
#line 1108
{ 
#line 1109
__surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1110
} 
#endif
#line 1112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(unsigned short val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1113
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1115
::exit(___);}
#if 0
#line 1113
{ 
#line 1114
__surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1115
} 
#endif
#line 1117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(short1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1118
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1120
::exit(___);}
#if 0
#line 1118
{ 
#line 1119
__surf2DLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1120
} 
#endif
#line 1122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(ushort1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1123
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1125
::exit(___);}
#if 0
#line 1123
{ 
#line 1124
__surf2DLayeredwrites1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1125
} 
#endif
#line 1127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(short2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1128
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1130
::exit(___);}
#if 0
#line 1128
{ 
#line 1129
__surf2DLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1130
} 
#endif
#line 1132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(ushort2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1133
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1135
::exit(___);}
#if 0
#line 1133
{ 
#line 1134
__surf2DLayeredwrites2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1135
} 
#endif
#line 1137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(short4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1138
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1140
::exit(___);}
#if 0
#line 1138
{ 
#line 1139
__surf2DLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1140
} 
#endif
#line 1142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(ushort4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1143
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1145
::exit(___);}
#if 0
#line 1143
{ 
#line 1144
__surf2DLayeredwrites4(val, surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1145
} 
#endif
#line 1147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(int val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1148
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1150
::exit(___);}
#if 0
#line 1148
{ 
#line 1149
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1150
} 
#endif
#line 1152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(unsigned val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1153
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1155
::exit(___);}
#if 0
#line 1153
{ 
#line 1154
__surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1155
} 
#endif
#line 1157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(int1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1158
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1160
::exit(___);}
#if 0
#line 1158
{ 
#line 1159
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1160
} 
#endif
#line 1162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(uint1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1163
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1165
::exit(___);}
#if 0
#line 1163
{ 
#line 1164
__surf2DLayeredwriteu1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1165
} 
#endif
#line 1167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(int2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1168
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1170
::exit(___);}
#if 0
#line 1168
{ 
#line 1169
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1170
} 
#endif
#line 1172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(uint2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1173
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1175
::exit(___);}
#if 0
#line 1173
{ 
#line 1174
__surf2DLayeredwriteu2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1175
} 
#endif
#line 1177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(int4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1178
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1180
::exit(___);}
#if 0
#line 1178
{ 
#line 1179
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1180
} 
#endif
#line 1182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(uint4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1183
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1185
::exit(___);}
#if 0
#line 1183
{ 
#line 1184
__surf2DLayeredwriteu4(val, surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1185
} 
#endif
#line 1187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(__int64 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1188
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1190
::exit(___);}
#if 0
#line 1188
{ 
#line 1189
__surf2DLayeredwritel1(make_ulonglong1((unsigned __int64)val), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1190
} 
#endif
#line 1192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(unsigned __int64 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1193
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1195
::exit(___);}
#if 0
#line 1193
{ 
#line 1194
__surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1195
} 
#endif
#line 1197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(longlong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1198
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1200
::exit(___);}
#if 0
#line 1198
{ 
#line 1199
__surf2DLayeredwritel1(make_ulonglong1((unsigned __int64)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1200
} 
#endif
#line 1202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(ulonglong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1203
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1205
::exit(___);}
#if 0
#line 1203
{ 
#line 1204
__surf2DLayeredwritel1(val, surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1205
} 
#endif
#line 1207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(longlong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1208
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1210
::exit(___);}
#if 0
#line 1208
{ 
#line 1209
__surf2DLayeredwritel2(make_ulonglong2((unsigned __int64)(val.x), (unsigned __int64)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1210
} 
#endif
#line 1212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(ulonglong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1213
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1215
::exit(___);}
#if 0
#line 1213
{ 
#line 1214
__surf2DLayeredwritel2(val, surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1215
} 
#endif
#line 1219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(long val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1220
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1222
::exit(___);}
#if 0
#line 1220
{ 
#line 1221
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1222
} 
#endif
#line 1224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(unsigned long val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1225
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1227
::exit(___);}
#if 0
#line 1225
{ 
#line 1226
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1227
} 
#endif
#line 1229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(long1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1230
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1232
::exit(___);}
#if 0
#line 1230
{ 
#line 1231
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1232
} 
#endif
#line 1234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(ulong1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1235
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1237
::exit(___);}
#if 0
#line 1235
{ 
#line 1236
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1237
} 
#endif
#line 1239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(long2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1240
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1242
::exit(___);}
#if 0
#line 1240
{ 
#line 1241
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1242
} 
#endif
#line 1244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(ulong2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1245
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1247
::exit(___);}
#if 0
#line 1245
{ 
#line 1246
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1247
} 
#endif
#line 1249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(long4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1250
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1252
::exit(___);}
#if 0
#line 1250
{ 
#line 1251
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1252
} 
#endif
#line 1254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(ulong4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1255
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1257
::exit(___);}
#if 0
#line 1255
{ 
#line 1256
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1257
} 
#endif
#line 1261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(float val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1262
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1264
::exit(___);}
#if 0
#line 1262
{ 
#line 1263
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1264
} 
#endif
#line 1266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(float1 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1267
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1269
::exit(___);}
#if 0
#line 1267
{ 
#line 1268
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1269
} 
#endif
#line 1271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(float2 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1272
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1274
::exit(___);}
#if 0
#line 1272
{ 
#line 1273
__surf2DLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1274
} 
#endif
#line 1276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surf2DLayeredwrite(float4 val, surface< void, 242>  surf, int x, int y, int layer, cudaSurfaceBoundaryMode mode) 
#line 1277
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layer;(void)mode;
#line 1279
::exit(___);}
#if 0
#line 1277
{ 
#line 1278
__surf2DLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, layer, cudaBoundaryModeTrap); 
#line 1279
} 
#endif
#line 1305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1306
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1308
::exit(___);}
#if 0
#line 1306
{ 
#line 1307
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1308
} 
#endif
#line 1310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(signed char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1311
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1313
::exit(___);}
#if 0
#line 1311
{ 
#line 1312
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1313
} 
#endif
#line 1315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(unsigned char val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1316
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1318
::exit(___);}
#if 0
#line 1316
{ 
#line 1317
__surf2DLayeredwritec1(make_uchar1(val), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1318
} 
#endif
#line 1320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(char1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1321
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1323
::exit(___);}
#if 0
#line 1321
{ 
#line 1322
__surf2DLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1323
} 
#endif
#line 1325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(uchar1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1326
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1328
::exit(___);}
#if 0
#line 1326
{ 
#line 1327
__surf2DLayeredwritec1(val, surf, x, y, face, cudaBoundaryModeTrap); 
#line 1328
} 
#endif
#line 1330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(char2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1331
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1333
::exit(___);}
#if 0
#line 1331
{ 
#line 1332
__surf2DLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1333
} 
#endif
#line 1335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(uchar2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1336
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1338
::exit(___);}
#if 0
#line 1336
{ 
#line 1337
__surf2DLayeredwritec2(val, surf, x, y, face, cudaBoundaryModeTrap); 
#line 1338
} 
#endif
#line 1340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(char4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1341
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1343
::exit(___);}
#if 0
#line 1341
{ 
#line 1342
__surf2DLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1343
} 
#endif
#line 1345 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(uchar4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1346
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1348
::exit(___);}
#if 0
#line 1346
{ 
#line 1347
__surf2DLayeredwritec4(val, surf, x, y, face, cudaBoundaryModeTrap); 
#line 1348
} 
#endif
#line 1350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(short val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1351
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1353
::exit(___);}
#if 0
#line 1351
{ 
#line 1352
__surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1353
} 
#endif
#line 1355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(unsigned short val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1356
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1358
::exit(___);}
#if 0
#line 1356
{ 
#line 1357
__surf2DLayeredwrites1(make_ushort1(val), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1358
} 
#endif
#line 1360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(short1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1361
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1363
::exit(___);}
#if 0
#line 1361
{ 
#line 1362
__surf2DLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1363
} 
#endif
#line 1365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(ushort1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1366
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1368
::exit(___);}
#if 0
#line 1366
{ 
#line 1367
__surf2DLayeredwrites1(val, surf, x, y, face, cudaBoundaryModeTrap); 
#line 1368
} 
#endif
#line 1370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(short2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1371
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1373
::exit(___);}
#if 0
#line 1371
{ 
#line 1372
__surf2DLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1373
} 
#endif
#line 1375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(ushort2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1376
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1378
::exit(___);}
#if 0
#line 1376
{ 
#line 1377
__surf2DLayeredwrites2(val, surf, x, y, face, cudaBoundaryModeTrap); 
#line 1378
} 
#endif
#line 1380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(short4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1381
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1383
::exit(___);}
#if 0
#line 1381
{ 
#line 1382
__surf2DLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1383
} 
#endif
#line 1385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(ushort4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1386
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1388
::exit(___);}
#if 0
#line 1386
{ 
#line 1387
__surf2DLayeredwrites4(val, surf, x, y, face, cudaBoundaryModeTrap); 
#line 1388
} 
#endif
#line 1390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(int val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1391
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1393
::exit(___);}
#if 0
#line 1391
{ 
#line 1392
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1393
} 
#endif
#line 1395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(unsigned val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1396
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1398
::exit(___);}
#if 0
#line 1396
{ 
#line 1397
__surf2DLayeredwriteu1(make_uint1(val), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1398
} 
#endif
#line 1400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(int1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1401
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1403
::exit(___);}
#if 0
#line 1401
{ 
#line 1402
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1403
} 
#endif
#line 1405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(uint1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1406
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1408
::exit(___);}
#if 0
#line 1406
{ 
#line 1407
__surf2DLayeredwriteu1(val, surf, x, y, face, cudaBoundaryModeTrap); 
#line 1408
} 
#endif
#line 1410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(int2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1411
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1413
::exit(___);}
#if 0
#line 1411
{ 
#line 1412
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1413
} 
#endif
#line 1415 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(uint2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1416
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1418
::exit(___);}
#if 0
#line 1416
{ 
#line 1417
__surf2DLayeredwriteu2(val, surf, x, y, face, cudaBoundaryModeTrap); 
#line 1418
} 
#endif
#line 1420 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(int4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1421
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1423
::exit(___);}
#if 0
#line 1421
{ 
#line 1422
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1423
} 
#endif
#line 1425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(uint4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1426
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1428
::exit(___);}
#if 0
#line 1426
{ 
#line 1427
__surf2DLayeredwriteu4(val, surf, x, y, face, cudaBoundaryModeTrap); 
#line 1428
} 
#endif
#line 1430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(__int64 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1431
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1433
::exit(___);}
#if 0
#line 1431
{ 
#line 1432
__surf2DLayeredwritel1(make_ulonglong1((unsigned __int64)val), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1433
} 
#endif
#line 1435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(unsigned __int64 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1436
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1438
::exit(___);}
#if 0
#line 1436
{ 
#line 1437
__surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1438
} 
#endif
#line 1440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(longlong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1441
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1443
::exit(___);}
#if 0
#line 1441
{ 
#line 1442
__surf2DLayeredwritel1(make_ulonglong1((unsigned __int64)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1443
} 
#endif
#line 1445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(ulonglong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1446
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1448
::exit(___);}
#if 0
#line 1446
{ 
#line 1447
__surf2DLayeredwritel1(val, surf, x, y, face, cudaBoundaryModeTrap); 
#line 1448
} 
#endif
#line 1450 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(longlong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1451
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1453
::exit(___);}
#if 0
#line 1451
{ 
#line 1452
__surf2DLayeredwritel2(make_ulonglong2((unsigned __int64)(val.x), (unsigned __int64)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1453
} 
#endif
#line 1455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(ulonglong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1456
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1458
::exit(___);}
#if 0
#line 1456
{ 
#line 1457
__surf2DLayeredwritel2(val, surf, x, y, face, cudaBoundaryModeTrap); 
#line 1458
} 
#endif
#line 1462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(long val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1463
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1465
::exit(___);}
#if 0
#line 1463
{ 
#line 1464
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1465
} 
#endif
#line 1467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(unsigned long val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1468
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1470
::exit(___);}
#if 0
#line 1468
{ 
#line 1469
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1470
} 
#endif
#line 1472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(long1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1473
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1475
::exit(___);}
#if 0
#line 1473
{ 
#line 1474
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1475
} 
#endif
#line 1477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(ulong1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1478
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1480
::exit(___);}
#if 0
#line 1478
{ 
#line 1479
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1480
} 
#endif
#line 1482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(long2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1483
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1485
::exit(___);}
#if 0
#line 1483
{ 
#line 1484
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1485
} 
#endif
#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(ulong2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1488
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1490
::exit(___);}
#if 0
#line 1488
{ 
#line 1489
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1490
} 
#endif
#line 1492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(long4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1493
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1495
::exit(___);}
#if 0
#line 1493
{ 
#line 1494
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1495
} 
#endif
#line 1497 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(ulong4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1498
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1500
::exit(___);}
#if 0
#line 1498
{ 
#line 1499
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1500
} 
#endif
#line 1504 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(float val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1505
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1507
::exit(___);}
#if 0
#line 1505
{ 
#line 1506
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1507
} 
#endif
#line 1509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(float1 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1510
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1512
::exit(___);}
#if 0
#line 1510
{ 
#line 1511
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1512
} 
#endif
#line 1514 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(float2 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1515
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1517
::exit(___);}
#if 0
#line 1515
{ 
#line 1516
__surf2DLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1517
} 
#endif
#line 1519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapwrite(float4 val, surface< void, 12>  surf, int x, int y, int face, cudaSurfaceBoundaryMode mode) 
#line 1520
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)face;(void)mode;
#line 1522
::exit(___);}
#if 0
#line 1520
{ 
#line 1521
__surf2DLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, face, cudaBoundaryModeTrap); 
#line 1522
} 
#endif
#line 1548 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1549
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1551
::exit(___);}
#if 0
#line 1549
{ 
#line 1550
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1551
} 
#endif
#line 1553 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(signed char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1554
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1556
::exit(___);}
#if 0
#line 1554
{ 
#line 1555
__surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1556
} 
#endif
#line 1558 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(unsigned char val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1559
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1561
::exit(___);}
#if 0
#line 1559
{ 
#line 1560
__surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1561
} 
#endif
#line 1563 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(char1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1564
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1566
::exit(___);}
#if 0
#line 1564
{ 
#line 1565
__surf2DLayeredwritec1(make_uchar1((unsigned char)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1566
} 
#endif
#line 1568 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(uchar1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1569
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1571
::exit(___);}
#if 0
#line 1569
{ 
#line 1570
__surf2DLayeredwritec1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1571
} 
#endif
#line 1573 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(char2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1574
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1576
::exit(___);}
#if 0
#line 1574
{ 
#line 1575
__surf2DLayeredwritec2(make_uchar2((unsigned char)(val.x), (unsigned char)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1576
} 
#endif
#line 1578 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(uchar2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1579
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1581
::exit(___);}
#if 0
#line 1579
{ 
#line 1580
__surf2DLayeredwritec2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1581
} 
#endif
#line 1583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(char4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1584
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1586
::exit(___);}
#if 0
#line 1584
{ 
#line 1585
__surf2DLayeredwritec4(make_uchar4((unsigned char)(val.x), (unsigned char)(val.y), (unsigned char)(val.z), (unsigned char)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1586
} 
#endif
#line 1588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(uchar4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1589
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1591
::exit(___);}
#if 0
#line 1589
{ 
#line 1590
__surf2DLayeredwritec4(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1591
} 
#endif
#line 1593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(short val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1594
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1596
::exit(___);}
#if 0
#line 1594
{ 
#line 1595
__surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1596
} 
#endif
#line 1598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(unsigned short val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1599
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1601
::exit(___);}
#if 0
#line 1599
{ 
#line 1600
__surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1601
} 
#endif
#line 1603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(short1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1604
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1606
::exit(___);}
#if 0
#line 1604
{ 
#line 1605
__surf2DLayeredwrites1(make_ushort1((unsigned short)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1606
} 
#endif
#line 1608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ushort1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1609
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1611
::exit(___);}
#if 0
#line 1609
{ 
#line 1610
__surf2DLayeredwrites1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1611
} 
#endif
#line 1613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(short2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1614
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1616
::exit(___);}
#if 0
#line 1614
{ 
#line 1615
__surf2DLayeredwrites2(make_ushort2((unsigned short)(val.x), (unsigned short)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1616
} 
#endif
#line 1618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ushort2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1619
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1621
::exit(___);}
#if 0
#line 1619
{ 
#line 1620
__surf2DLayeredwrites2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1621
} 
#endif
#line 1623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(short4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1624
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1626
::exit(___);}
#if 0
#line 1624
{ 
#line 1625
__surf2DLayeredwrites4(make_ushort4((unsigned short)(val.x), (unsigned short)(val.y), (unsigned short)(val.z), (unsigned short)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1626
} 
#endif
#line 1628 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ushort4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1629
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1631
::exit(___);}
#if 0
#line 1629
{ 
#line 1630
__surf2DLayeredwrites4(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1631
} 
#endif
#line 1633 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(int val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1634
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1636
::exit(___);}
#if 0
#line 1634
{ 
#line 1635
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1636
} 
#endif
#line 1638 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(unsigned val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1639
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1641
::exit(___);}
#if 0
#line 1639
{ 
#line 1640
__surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1641
} 
#endif
#line 1643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(int1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1644
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1646
::exit(___);}
#if 0
#line 1644
{ 
#line 1645
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1646
} 
#endif
#line 1648 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(uint1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1649
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1651
::exit(___);}
#if 0
#line 1649
{ 
#line 1650
__surf2DLayeredwriteu1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1651
} 
#endif
#line 1653 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(int2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1654
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1656
::exit(___);}
#if 0
#line 1654
{ 
#line 1655
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1656
} 
#endif
#line 1658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(uint2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1659
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1661
::exit(___);}
#if 0
#line 1659
{ 
#line 1660
__surf2DLayeredwriteu2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1661
} 
#endif
#line 1663 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(int4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1664
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1666
::exit(___);}
#if 0
#line 1664
{ 
#line 1665
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1666
} 
#endif
#line 1668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(uint4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1669
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1671
::exit(___);}
#if 0
#line 1669
{ 
#line 1670
__surf2DLayeredwriteu4(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1671
} 
#endif
#line 1673 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(__int64 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1674
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1676
::exit(___);}
#if 0
#line 1674
{ 
#line 1675
__surf2DLayeredwritel1(make_ulonglong1((unsigned __int64)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1676
} 
#endif
#line 1678 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(unsigned __int64 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1679
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1681
::exit(___);}
#if 0
#line 1679
{ 
#line 1680
__surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1681
} 
#endif
#line 1683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(longlong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1684
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1686
::exit(___);}
#if 0
#line 1684
{ 
#line 1685
__surf2DLayeredwritel1(make_ulonglong1((unsigned __int64)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1686
} 
#endif
#line 1688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ulonglong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1689
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1691
::exit(___);}
#if 0
#line 1689
{ 
#line 1690
__surf2DLayeredwritel1(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1691
} 
#endif
#line 1693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(longlong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1694
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1696
::exit(___);}
#if 0
#line 1694
{ 
#line 1695
__surf2DLayeredwritel2(make_ulonglong2((unsigned __int64)(val.x), (unsigned __int64)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1696
} 
#endif
#line 1698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ulonglong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1699
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1701
::exit(___);}
#if 0
#line 1699
{ 
#line 1700
__surf2DLayeredwritel2(val, surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1701
} 
#endif
#line 1705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(long val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1706
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1708
::exit(___);}
#if 0
#line 1706
{ 
#line 1707
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1708
} 
#endif
#line 1710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(unsigned long val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1711
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1713
::exit(___);}
#if 0
#line 1711
{ 
#line 1712
__surf2DLayeredwriteu1(make_uint1((unsigned)val), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1713
} 
#endif
#line 1715 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(long1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1716
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1718
::exit(___);}
#if 0
#line 1716
{ 
#line 1717
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1718
} 
#endif
#line 1720 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ulong1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1721
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1723
::exit(___);}
#if 0
#line 1721
{ 
#line 1722
__surf2DLayeredwriteu1(make_uint1((unsigned)(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1723
} 
#endif
#line 1725 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(long2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1726
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1728
::exit(___);}
#if 0
#line 1726
{ 
#line 1727
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1728
} 
#endif
#line 1730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ulong2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1731
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1733
::exit(___);}
#if 0
#line 1731
{ 
#line 1732
__surf2DLayeredwriteu2(make_uint2((unsigned)(val.x), (unsigned)(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1733
} 
#endif
#line 1735 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(long4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1736
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1738
::exit(___);}
#if 0
#line 1736
{ 
#line 1737
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1738
} 
#endif
#line 1740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ulong4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1741
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1743
::exit(___);}
#if 0
#line 1741
{ 
#line 1742
__surf2DLayeredwriteu4(make_uint4((unsigned)(val.x), (unsigned)(val.y), (unsigned)(val.z), (unsigned)(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1743
} 
#endif
#line 1747 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(float val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1748
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1750
::exit(___);}
#if 0
#line 1748
{ 
#line 1749
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1750
} 
#endif
#line 1752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(float1 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1753
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1755
::exit(___);}
#if 0
#line 1753
{ 
#line 1754
__surf2DLayeredwriteu1(make_uint1((unsigned)__float_as_int(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1755
} 
#endif
#line 1757 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(float2 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1758
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1760
::exit(___);}
#if 0
#line 1758
{ 
#line 1759
__surf2DLayeredwriteu2(make_uint2((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1760
} 
#endif
#line 1762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(float4 val, surface< void, 252>  surf, int x, int y, int layerFace, cudaSurfaceBoundaryMode mode) 
#line 1763
{int volatile ___ = 1;(void)val;(void)surf;(void)x;(void)y;(void)layerFace;(void)mode;
#line 1765
::exit(___);}
#if 0
#line 1763
{ 
#line 1764
__surf2DLayeredwriteu4(make_uint4((unsigned)__float_as_int(val.x), (unsigned)__float_as_int(val.y), (unsigned)__float_as_int(val.z), (unsigned)__float_as_int(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap); 
#line 1765
} 
#endif
#line 141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, cudaTextureReadMode readMode> static __forceinline ::uint4 
#line 143
__utexfetchi(texture< T, 1, readMode>  t, ::int4 i) 
#line 144
{int volatile ___ = 1;(void)t;(void)i;
#line 146
::exit(___);}
#if 0
#line 144
{ 
#line 145
return __utexfetchi1D(t, i); 
#line 146
} 
#endif
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, cudaTextureReadMode readMode> static __forceinline ::int4 
#line 150
__itexfetchi(texture< T, 1, readMode>  t, ::int4 i) 
#line 151
{int volatile ___ = 1;(void)t;(void)i;
#line 153
::exit(___);}
#if 0
#line 151
{ 
#line 152
return __itexfetchi1D(t, i); 
#line 153
} 
#endif
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, cudaTextureReadMode readMode> static __forceinline ::float4 
#line 157
__ftexfetchi(texture< T, 1, readMode>  t, ::int4 i) 
#line 158
{int volatile ___ = 1;(void)t;(void)i;
#line 160
::exit(___);}
#if 0
#line 158
{ 
#line 159
return __ftexfetchi1D(t, i); 
#line 160
} 
#endif
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::uint4 
#line 164
__utexfetch(texture< T, texType, readMode>  t, ::float4 i, int d = texType) 
#line 165
{int volatile ___ = 1;(void)t;(void)i;(void)d;
#line 172
::exit(___);}
#if 0
#line 165
{ 
#line 166
switch (d) { 
#line 167
case 1:  return __utexfetch1D(t, i); 
#line 168
case 2:  return __utexfetch2D(t, i); 
#line 170
default:  return __utexfetch3D(t, i); 
#line 171
}  
#line 172
} 
#endif
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::int4 
#line 176
__itexfetch(texture< T, texType, readMode>  t, ::float4 i, int d = texType) 
#line 177
{int volatile ___ = 1;(void)t;(void)i;(void)d;
#line 184
::exit(___);}
#if 0
#line 177
{ 
#line 178
switch (d) { 
#line 179
case 1:  return __itexfetch1D(t, i); 
#line 180
case 2:  return __itexfetch2D(t, i); 
#line 182
default:  return __itexfetch3D(t, i); 
#line 183
}  
#line 184
} 
#endif
#line 186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::float4 
#line 188
__ftexfetch(texture< T, texType, readMode>  t, ::float4 i, int d = texType) 
#line 189
{int volatile ___ = 1;(void)t;(void)i;(void)d;
#line 196
::exit(___);}
#if 0
#line 189
{ 
#line 190
switch (d) { 
#line 191
case 1:  return __ftexfetch1D(t, i); 
#line 192
case 2:  return __ftexfetch2D(t, i); 
#line 194
default:  return __ftexfetch3D(t, i); 
#line 195
}  
#line 196
} 
#endif
#line 198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::uint4 
#line 200
__utexfetchc(texture< T, texType, readMode>  t, ::float4 i) 
#line 201
{int volatile ___ = 1;(void)t;(void)i;
#line 203
::exit(___);}
#if 0
#line 201
{ 
#line 202
return __utexfetchcube(t, i); 
#line 203
} 
#endif
#line 205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::int4 
#line 207
__itexfetchc(texture< T, texType, readMode>  t, ::float4 i) 
#line 208
{int volatile ___ = 1;(void)t;(void)i;
#line 210
::exit(___);}
#if 0
#line 208
{ 
#line 209
return __itexfetchcube(t, i); 
#line 210
} 
#endif
#line 212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::float4 
#line 214
__ftexfetchc(texture< T, texType, readMode>  t, ::float4 i) 
#line 215
{int volatile ___ = 1;(void)t;(void)i;
#line 217
::exit(___);}
#if 0
#line 215
{ 
#line 216
return __ftexfetchcube(t, i); 
#line 217
} 
#endif
#line 219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::uint4 
#line 221
__utexfetchl(texture< T, texType, readMode>  t, ::float4 i, int l, int d = texType & 15) 
#line 222
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)d;
#line 228
::exit(___);}
#if 0
#line 222
{ 
#line 223
switch (d) { 
#line 224
case 1:  return __utexfetchl1D(t, i, l); 
#line 226
default:  return __utexfetchl2D(t, i, l); 
#line 227
}  
#line 228
} 
#endif
#line 230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::int4 
#line 232
__itexfetchl(texture< T, texType, readMode>  t, ::float4 i, int l, int d = texType & 15) 
#line 233
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)d;
#line 239
::exit(___);}
#if 0
#line 233
{ 
#line 234
switch (d) { 
#line 235
case 1:  return __itexfetchl1D(t, i, l); 
#line 237
default:  return __itexfetchl2D(t, i, l); 
#line 238
}  
#line 239
} 
#endif
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::float4 
#line 243
__ftexfetchl(texture< T, texType, readMode>  t, ::float4 i, int l, int d = texType & 15) 
#line 244
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)d;
#line 250
::exit(___);}
#if 0
#line 244
{ 
#line 245
switch (d) { 
#line 246
case 1:  return __ftexfetchl1D(t, i, l); 
#line 248
default:  return __ftexfetchl2D(t, i, l); 
#line 249
}  
#line 250
} 
#endif
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::uint4 
#line 254
__utexfetchlc(texture< T, texType, readMode>  t, ::float4 i, int l) 
#line 255
{int volatile ___ = 1;(void)t;(void)i;(void)l;
#line 257
::exit(___);}
#if 0
#line 255
{ 
#line 256
return __utexfetchlcube(t, i, l); 
#line 257
} 
#endif
#line 259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::int4 
#line 261
__itexfetchlc(texture< T, texType, readMode>  t, ::float4 i, int l) 
#line 262
{int volatile ___ = 1;(void)t;(void)i;(void)l;
#line 264
::exit(___);}
#if 0
#line 262
{ 
#line 263
return __itexfetchlcube(t, i, l); 
#line 264
} 
#endif
#line 266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::float4 
#line 268
__ftexfetchlc(texture< T, texType, readMode>  t, ::float4 i, int l) 
#line 269
{int volatile ___ = 1;(void)t;(void)i;(void)l;
#line 271
::exit(___);}
#if 0
#line 269
{ 
#line 270
return __ftexfetchlcube(t, i, l); 
#line 271
} 
#endif
#line 280 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline char tex1Dfetch(texture< char, 1, cudaReadModeElementType>  t, int x); 
#line 282
static __forceinline signed char tex1Dfetch(texture< signed char, 1, cudaReadModeElementType>  t, int x); 
#line 284
static __forceinline unsigned char tex1Dfetch(texture< unsigned char, 1, cudaReadModeElementType>  t, int x); 
#line 286
static __forceinline char1 tex1Dfetch(texture< char1, 1, cudaReadModeElementType>  t, int x); 
#line 288
static __forceinline uchar1 tex1Dfetch(texture< uchar1, 1, cudaReadModeElementType>  t, int x); 
#line 290
static __forceinline char2 tex1Dfetch(texture< char2, 1, cudaReadModeElementType>  t, int x); 
#line 292
static __forceinline uchar2 tex1Dfetch(texture< uchar2, 1, cudaReadModeElementType>  t, int x); 
#line 294
static __forceinline char4 tex1Dfetch(texture< char4, 1, cudaReadModeElementType>  t, int x); 
#line 296
static __forceinline uchar4 tex1Dfetch(texture< uchar4, 1, cudaReadModeElementType>  t, int x); 
#line 304
static __forceinline short tex1Dfetch(texture< short, 1, cudaReadModeElementType>  t, int x); 
#line 306
static __forceinline unsigned short tex1Dfetch(texture< unsigned short, 1, cudaReadModeElementType>  t, int x); 
#line 308
static __forceinline short1 tex1Dfetch(texture< short1, 1, cudaReadModeElementType>  t, int x); 
#line 310
static __forceinline ushort1 tex1Dfetch(texture< ushort1, 1, cudaReadModeElementType>  t, int x); 
#line 312
static __forceinline short2 tex1Dfetch(texture< short2, 1, cudaReadModeElementType>  t, int x); 
#line 314
static __forceinline ushort2 tex1Dfetch(texture< ushort2, 1, cudaReadModeElementType>  t, int x); 
#line 316
static __forceinline short4 tex1Dfetch(texture< short4, 1, cudaReadModeElementType>  t, int x); 
#line 318
static __forceinline ushort4 tex1Dfetch(texture< ushort4, 1, cudaReadModeElementType>  t, int x); 
#line 326
static __forceinline int tex1Dfetch(texture< int, 1, cudaReadModeElementType>  t, int x); 
#line 328
static __forceinline unsigned tex1Dfetch(texture< unsigned, 1, cudaReadModeElementType>  t, int x); 
#line 330
static __forceinline int1 tex1Dfetch(texture< int1, 1, cudaReadModeElementType>  t, int x); 
#line 332
static __forceinline uint1 tex1Dfetch(texture< uint1, 1, cudaReadModeElementType>  t, int x); 
#line 334
static __forceinline int2 tex1Dfetch(texture< int2, 1, cudaReadModeElementType>  t, int x); 
#line 336
static __forceinline uint2 tex1Dfetch(texture< uint2, 1, cudaReadModeElementType>  t, int x); 
#line 338
static __forceinline int4 tex1Dfetch(texture< int4, 1, cudaReadModeElementType>  t, int x); 
#line 340
static __forceinline uint4 tex1Dfetch(texture< uint4, 1, cudaReadModeElementType>  t, int x); 
#line 350
static __forceinline long tex1Dfetch(texture< long, 1, cudaReadModeElementType>  t, int x); 
#line 352
static __forceinline unsigned long tex1Dfetch(texture< unsigned long, 1, cudaReadModeElementType>  t, int x); 
#line 354
static __forceinline long1 tex1Dfetch(texture< long1, 1, cudaReadModeElementType>  t, int x); 
#line 356
static __forceinline ulong1 tex1Dfetch(texture< ulong1, 1, cudaReadModeElementType>  t, int x); 
#line 358
static __forceinline long2 tex1Dfetch(texture< long2, 1, cudaReadModeElementType>  t, int x); 
#line 360
static __forceinline ulong2 tex1Dfetch(texture< ulong2, 1, cudaReadModeElementType>  t, int x); 
#line 362
static __forceinline long4 tex1Dfetch(texture< long4, 1, cudaReadModeElementType>  t, int x); 
#line 364
static __forceinline ulong4 tex1Dfetch(texture< ulong4, 1, cudaReadModeElementType>  t, int x); 
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex1Dfetch(texture< float, 1, cudaReadModeElementType>  t, int x); 
#line 376
static __forceinline float1 tex1Dfetch(texture< float1, 1, cudaReadModeElementType>  t, int x); 
#line 378
static __forceinline float2 tex1Dfetch(texture< float2, 1, cudaReadModeElementType>  t, int x); 
#line 380
static __forceinline float4 tex1Dfetch(texture< float4, 1, cudaReadModeElementType>  t, int x); 
#line 388
static __forceinline float tex1Dfetch(texture< char, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 390
static __forceinline float tex1Dfetch(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 392
static __forceinline float tex1Dfetch(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 394
static __forceinline float1 tex1Dfetch(texture< char1, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 396
static __forceinline float1 tex1Dfetch(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 398
static __forceinline float2 tex1Dfetch(texture< char2, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 400
static __forceinline float2 tex1Dfetch(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 402
static __forceinline float4 tex1Dfetch(texture< char4, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 404
static __forceinline float4 tex1Dfetch(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 412
static __forceinline float tex1Dfetch(texture< short, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 414
static __forceinline float tex1Dfetch(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 416
static __forceinline float1 tex1Dfetch(texture< short1, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 418
static __forceinline float1 tex1Dfetch(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 420
static __forceinline float2 tex1Dfetch(texture< short2, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 422
static __forceinline float2 tex1Dfetch(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 424
static __forceinline float4 tex1Dfetch(texture< short4, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 426
static __forceinline float4 tex1Dfetch(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, int x); 
#line 434
static __forceinline char tex1D(texture< char, 1, cudaReadModeElementType>  t, float x); 
#line 436
static __forceinline signed char tex1D(texture< signed char, 1, cudaReadModeElementType>  t, float x); 
#line 438
static __forceinline unsigned char tex1D(texture< unsigned char, 1, cudaReadModeElementType>  t, float x); 
#line 440
static __forceinline char1 tex1D(texture< char1, 1, cudaReadModeElementType>  t, float x); 
#line 442
static __forceinline uchar1 tex1D(texture< uchar1, 1, cudaReadModeElementType>  t, float x); 
#line 444
static __forceinline char2 tex1D(texture< char2, 1, cudaReadModeElementType>  t, float x); 
#line 446
static __forceinline uchar2 tex1D(texture< uchar2, 1, cudaReadModeElementType>  t, float x); 
#line 448
static __forceinline char4 tex1D(texture< char4, 1, cudaReadModeElementType>  t, float x); 
#line 450
static __forceinline uchar4 tex1D(texture< uchar4, 1, cudaReadModeElementType>  t, float x); 
#line 458
static __forceinline short tex1D(texture< short, 1, cudaReadModeElementType>  t, float x); 
#line 460
static __forceinline unsigned short tex1D(texture< unsigned short, 1, cudaReadModeElementType>  t, float x); 
#line 462
static __forceinline short1 tex1D(texture< short1, 1, cudaReadModeElementType>  t, float x); 
#line 464
static __forceinline ushort1 tex1D(texture< ushort1, 1, cudaReadModeElementType>  t, float x); 
#line 466
static __forceinline short2 tex1D(texture< short2, 1, cudaReadModeElementType>  t, float x); 
#line 468
static __forceinline ushort2 tex1D(texture< ushort2, 1, cudaReadModeElementType>  t, float x); 
#line 470
static __forceinline short4 tex1D(texture< short4, 1, cudaReadModeElementType>  t, float x); 
#line 472
static __forceinline ushort4 tex1D(texture< ushort4, 1, cudaReadModeElementType>  t, float x); 
#line 480
static __forceinline int tex1D(texture< int, 1, cudaReadModeElementType>  t, float x); 
#line 482
static __forceinline unsigned tex1D(texture< unsigned, 1, cudaReadModeElementType>  t, float x); 
#line 484
static __forceinline int1 tex1D(texture< int1, 1, cudaReadModeElementType>  t, float x); 
#line 486
static __forceinline uint1 tex1D(texture< uint1, 1, cudaReadModeElementType>  t, float x); 
#line 488
static __forceinline int2 tex1D(texture< int2, 1, cudaReadModeElementType>  t, float x); 
#line 490
static __forceinline uint2 tex1D(texture< uint2, 1, cudaReadModeElementType>  t, float x); 
#line 492
static __forceinline int4 tex1D(texture< int4, 1, cudaReadModeElementType>  t, float x); 
#line 494
static __forceinline uint4 tex1D(texture< uint4, 1, cudaReadModeElementType>  t, float x); 
#line 510
static __forceinline long tex1D(texture< long, 1, cudaReadModeElementType>  t, float x); 
#line 512
static __forceinline unsigned long tex1D(texture< unsigned long, 1, cudaReadModeElementType>  t, float x); 
#line 514
static __forceinline long1 tex1D(texture< long1, 1, cudaReadModeElementType>  t, float x); 
#line 516
static __forceinline ulong1 tex1D(texture< ulong1, 1, cudaReadModeElementType>  t, float x); 
#line 518
static __forceinline long2 tex1D(texture< long2, 1, cudaReadModeElementType>  t, float x); 
#line 520
static __forceinline ulong2 tex1D(texture< ulong2, 1, cudaReadModeElementType>  t, float x); 
#line 522
static __forceinline long4 tex1D(texture< long4, 1, cudaReadModeElementType>  t, float x); 
#line 524
static __forceinline ulong4 tex1D(texture< ulong4, 1, cudaReadModeElementType>  t, float x); 
#line 534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex1D(texture< float, 1, cudaReadModeElementType>  t, float x); 
#line 536
static __forceinline float1 tex1D(texture< float1, 1, cudaReadModeElementType>  t, float x); 
#line 538
static __forceinline float2 tex1D(texture< float2, 1, cudaReadModeElementType>  t, float x); 
#line 540
static __forceinline float4 tex1D(texture< float4, 1, cudaReadModeElementType>  t, float x); 
#line 548
static __forceinline float tex1D(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 550
static __forceinline float tex1D(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 552
static __forceinline float tex1D(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 554
static __forceinline float1 tex1D(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 556
static __forceinline float1 tex1D(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 558
static __forceinline float2 tex1D(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 560
static __forceinline float2 tex1D(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 562
static __forceinline float4 tex1D(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 564
static __forceinline float4 tex1D(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 572
static __forceinline float tex1D(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 574
static __forceinline float tex1D(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 576
static __forceinline float1 tex1D(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 578
static __forceinline float1 tex1D(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 580
static __forceinline float2 tex1D(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 582
static __forceinline float2 tex1D(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 584
static __forceinline float4 tex1D(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 586
static __forceinline float4 tex1D(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x); 
#line 594
static __forceinline char tex2D(texture< char, 2, cudaReadModeElementType>  t, float x, float y); 
#line 596
static __forceinline signed char tex2D(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y); 
#line 598
static __forceinline unsigned char tex2D(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y); 
#line 600
static __forceinline char1 tex2D(texture< char1, 2, cudaReadModeElementType>  t, float x, float y); 
#line 602
static __forceinline uchar1 tex2D(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y); 
#line 604
static __forceinline char2 tex2D(texture< char2, 2, cudaReadModeElementType>  t, float x, float y); 
#line 606
static __forceinline uchar2 tex2D(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y); 
#line 608
static __forceinline char4 tex2D(texture< char4, 2, cudaReadModeElementType>  t, float x, float y); 
#line 610
static __forceinline uchar4 tex2D(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y); 
#line 618
static __forceinline short tex2D(texture< short, 2, cudaReadModeElementType>  t, float x, float y); 
#line 620
static __forceinline unsigned short tex2D(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y); 
#line 622
static __forceinline short1 tex2D(texture< short1, 2, cudaReadModeElementType>  t, float x, float y); 
#line 624
static __forceinline ushort1 tex2D(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y); 
#line 626
static __forceinline short2 tex2D(texture< short2, 2, cudaReadModeElementType>  t, float x, float y); 
#line 628
static __forceinline ushort2 tex2D(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y); 
#line 630
static __forceinline short4 tex2D(texture< short4, 2, cudaReadModeElementType>  t, float x, float y); 
#line 632
static __forceinline ushort4 tex2D(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y); 
#line 640
static __forceinline int tex2D(texture< int, 2, cudaReadModeElementType>  t, float x, float y); 
#line 642
static __forceinline unsigned tex2D(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y); 
#line 644
static __forceinline int1 tex2D(texture< int1, 2, cudaReadModeElementType>  t, float x, float y); 
#line 646
static __forceinline uint1 tex2D(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y); 
#line 648
static __forceinline int2 tex2D(texture< int2, 2, cudaReadModeElementType>  t, float x, float y); 
#line 650
static __forceinline uint2 tex2D(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y); 
#line 652
static __forceinline int4 tex2D(texture< int4, 2, cudaReadModeElementType>  t, float x, float y); 
#line 654
static __forceinline uint4 tex2D(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y); 
#line 664
static __forceinline long tex2D(texture< long, 2, cudaReadModeElementType>  t, float x, float y); 
#line 666
static __forceinline unsigned long tex2D(texture< unsigned long, 2, cudaReadModeElementType>  t, float x, float y); 
#line 668
static __forceinline long1 tex2D(texture< long1, 2, cudaReadModeElementType>  t, float x, float y); 
#line 670
static __forceinline ulong1 tex2D(texture< ulong1, 2, cudaReadModeElementType>  t, float x, float y); 
#line 672
static __forceinline long2 tex2D(texture< long2, 2, cudaReadModeElementType>  t, float x, float y); 
#line 674
static __forceinline ulong2 tex2D(texture< ulong2, 2, cudaReadModeElementType>  t, float x, float y); 
#line 676
static __forceinline long4 tex2D(texture< long4, 2, cudaReadModeElementType>  t, float x, float y); 
#line 678
static __forceinline ulong4 tex2D(texture< ulong4, 2, cudaReadModeElementType>  t, float x, float y); 
#line 688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex2D(texture< float, 2, cudaReadModeElementType>  t, float x, float y); 
#line 690
static __forceinline float1 tex2D(texture< float1, 2, cudaReadModeElementType>  t, float x, float y); 
#line 692
static __forceinline float2 tex2D(texture< float2, 2, cudaReadModeElementType>  t, float x, float y); 
#line 694
static __forceinline float4 tex2D(texture< float4, 2, cudaReadModeElementType>  t, float x, float y); 
#line 702
static __forceinline float tex2D(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 704
static __forceinline float tex2D(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 706
static __forceinline float tex2D(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 708
static __forceinline float1 tex2D(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 710
static __forceinline float1 tex2D(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 712
static __forceinline float2 tex2D(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 714
static __forceinline float2 tex2D(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 716
static __forceinline float4 tex2D(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 718
static __forceinline float4 tex2D(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 726
static __forceinline float tex2D(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 728
static __forceinline float tex2D(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 730
static __forceinline float1 tex2D(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 732
static __forceinline float1 tex2D(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 734
static __forceinline float2 tex2D(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 736
static __forceinline float2 tex2D(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 738
static __forceinline float4 tex2D(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 740
static __forceinline float4 tex2D(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y); 
#line 748
static __forceinline char tex1DLayered(texture< char, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 750
static __forceinline signed char tex1DLayered(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 752
static __forceinline unsigned char tex1DLayered(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 754
static __forceinline char1 tex1DLayered(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 756
static __forceinline uchar1 tex1DLayered(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 758
static __forceinline char2 tex1DLayered(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 760
static __forceinline uchar2 tex1DLayered(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 762
static __forceinline char4 tex1DLayered(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 764
static __forceinline uchar4 tex1DLayered(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 772
static __forceinline short tex1DLayered(texture< short, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 774
static __forceinline unsigned short tex1DLayered(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 776
static __forceinline short1 tex1DLayered(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 778
static __forceinline ushort1 tex1DLayered(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 780
static __forceinline short2 tex1DLayered(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 782
static __forceinline ushort2 tex1DLayered(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 784
static __forceinline short4 tex1DLayered(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 786
static __forceinline ushort4 tex1DLayered(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 794
static __forceinline int tex1DLayered(texture< int, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 796
static __forceinline unsigned tex1DLayered(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 798
static __forceinline int1 tex1DLayered(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 800
static __forceinline uint1 tex1DLayered(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 802
static __forceinline int2 tex1DLayered(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 804
static __forceinline uint2 tex1DLayered(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 806
static __forceinline int4 tex1DLayered(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 808
static __forceinline uint4 tex1DLayered(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 818
static __forceinline long tex1DLayered(texture< long, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 820
static __forceinline unsigned long tex1DLayered(texture< unsigned long, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 822
static __forceinline long1 tex1DLayered(texture< long1, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 824
static __forceinline ulong1 tex1DLayered(texture< ulong1, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 826
static __forceinline long2 tex1DLayered(texture< long2, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 828
static __forceinline ulong2 tex1DLayered(texture< ulong2, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 830
static __forceinline long4 tex1DLayered(texture< long4, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 832
static __forceinline ulong4 tex1DLayered(texture< ulong4, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 842 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex1DLayered(texture< float, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 844
static __forceinline float1 tex1DLayered(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 846
static __forceinline float2 tex1DLayered(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 848
static __forceinline float4 tex1DLayered(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer); 
#line 856
static __forceinline float tex1DLayered(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 858
static __forceinline float tex1DLayered(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 860
static __forceinline float tex1DLayered(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 862
static __forceinline float1 tex1DLayered(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 864
static __forceinline float1 tex1DLayered(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 866
static __forceinline float2 tex1DLayered(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 868
static __forceinline float2 tex1DLayered(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 870
static __forceinline float4 tex1DLayered(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 872
static __forceinline float4 tex1DLayered(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 880
static __forceinline float tex1DLayered(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 882
static __forceinline float tex1DLayered(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 884
static __forceinline float1 tex1DLayered(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 886
static __forceinline float1 tex1DLayered(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 888
static __forceinline float2 tex1DLayered(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 890
static __forceinline float2 tex1DLayered(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 892
static __forceinline float4 tex1DLayered(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 894
static __forceinline float4 tex1DLayered(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer); 
#line 902
static __forceinline char tex2DLayered(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 904
static __forceinline signed char tex2DLayered(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 906
static __forceinline unsigned char tex2DLayered(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 908
static __forceinline char1 tex2DLayered(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 910
static __forceinline uchar1 tex2DLayered(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 912
static __forceinline char2 tex2DLayered(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 914
static __forceinline uchar2 tex2DLayered(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 916
static __forceinline char4 tex2DLayered(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 918
static __forceinline uchar4 tex2DLayered(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 926
static __forceinline short tex2DLayered(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 928
static __forceinline unsigned short tex2DLayered(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 930
static __forceinline short1 tex2DLayered(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 932
static __forceinline ushort1 tex2DLayered(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 934
static __forceinline short2 tex2DLayered(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 936
static __forceinline ushort2 tex2DLayered(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 938
static __forceinline short4 tex2DLayered(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 940
static __forceinline ushort4 tex2DLayered(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 948
static __forceinline int tex2DLayered(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 950
static __forceinline unsigned tex2DLayered(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 952
static __forceinline int1 tex2DLayered(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 954
static __forceinline uint1 tex2DLayered(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 956
static __forceinline int2 tex2DLayered(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 958
static __forceinline uint2 tex2DLayered(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 960
static __forceinline int4 tex2DLayered(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 962
static __forceinline uint4 tex2DLayered(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 972
static __forceinline long tex2DLayered(texture< long, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 974
static __forceinline unsigned long tex2DLayered(texture< unsigned long, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 976
static __forceinline long1 tex2DLayered(texture< long1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 978
static __forceinline ulong1 tex2DLayered(texture< ulong1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 980
static __forceinline long2 tex2DLayered(texture< long2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 982
static __forceinline ulong2 tex2DLayered(texture< ulong2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 984
static __forceinline long4 tex2DLayered(texture< long4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 986
static __forceinline ulong4 tex2DLayered(texture< ulong4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex2DLayered(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 998
static __forceinline float1 tex2DLayered(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 1000
static __forceinline float2 tex2DLayered(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 1002
static __forceinline float4 tex2DLayered(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer); 
#line 1010
static __forceinline float tex2DLayered(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1012
static __forceinline float tex2DLayered(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1014
static __forceinline float tex2DLayered(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1016
static __forceinline float1 tex2DLayered(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1018
static __forceinline float1 tex2DLayered(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1020
static __forceinline float2 tex2DLayered(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1022
static __forceinline float2 tex2DLayered(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1024
static __forceinline float4 tex2DLayered(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1026
static __forceinline float4 tex2DLayered(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1034
static __forceinline float tex2DLayered(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1036
static __forceinline float tex2DLayered(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1038
static __forceinline float1 tex2DLayered(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1040
static __forceinline float1 tex2DLayered(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1042
static __forceinline float2 tex2DLayered(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1044
static __forceinline float2 tex2DLayered(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1046
static __forceinline float4 tex2DLayered(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1048
static __forceinline float4 tex2DLayered(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer); 
#line 1056
static __forceinline char tex3D(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1058
static __forceinline signed char tex3D(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1060
static __forceinline unsigned char tex3D(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1062
static __forceinline char1 tex3D(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1064
static __forceinline uchar1 tex3D(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1066
static __forceinline char2 tex3D(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1068
static __forceinline uchar2 tex3D(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1070
static __forceinline char4 tex3D(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1072
static __forceinline uchar4 tex3D(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1080
static __forceinline short tex3D(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1082
static __forceinline unsigned short tex3D(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1084
static __forceinline short1 tex3D(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1086
static __forceinline ushort1 tex3D(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1088
static __forceinline short2 tex3D(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1090
static __forceinline ushort2 tex3D(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1092
static __forceinline short4 tex3D(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1094
static __forceinline ushort4 tex3D(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1102
static __forceinline int tex3D(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1104
static __forceinline unsigned tex3D(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1106
static __forceinline int1 tex3D(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1108
static __forceinline uint1 tex3D(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1110
static __forceinline int2 tex3D(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1112
static __forceinline uint2 tex3D(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1114
static __forceinline int4 tex3D(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1116
static __forceinline uint4 tex3D(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1126
static __forceinline long tex3D(texture< long, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1128
static __forceinline unsigned long tex3D(texture< unsigned long, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1130
static __forceinline long1 tex3D(texture< long1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1132
static __forceinline ulong1 tex3D(texture< ulong1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1134
static __forceinline long2 tex3D(texture< long2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1136
static __forceinline ulong2 tex3D(texture< ulong2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1138
static __forceinline long4 tex3D(texture< long4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1140
static __forceinline ulong4 tex3D(texture< ulong4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex3D(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1152
static __forceinline float1 tex3D(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1154
static __forceinline float2 tex3D(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1156
static __forceinline float4 tex3D(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1164
static __forceinline float tex3D(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1166
static __forceinline float tex3D(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1168
static __forceinline float tex3D(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1170
static __forceinline float1 tex3D(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1172
static __forceinline float1 tex3D(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1174
static __forceinline float2 tex3D(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1176
static __forceinline float2 tex3D(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1178
static __forceinline float4 tex3D(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1180
static __forceinline float4 tex3D(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1188
static __forceinline float tex3D(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1190
static __forceinline float tex3D(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1192
static __forceinline float1 tex3D(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1194
static __forceinline float1 tex3D(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1196
static __forceinline float2 tex3D(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1198
static __forceinline float2 tex3D(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1200
static __forceinline float4 tex3D(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1202
static __forceinline float4 tex3D(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1210
static __forceinline char texCubemap(texture< char, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1212
static __forceinline signed char texCubemap(texture< signed char, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1214
static __forceinline unsigned char texCubemap(texture< unsigned char, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1216
static __forceinline char1 texCubemap(texture< char1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1218
static __forceinline uchar1 texCubemap(texture< uchar1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1220
static __forceinline char2 texCubemap(texture< char2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1222
static __forceinline uchar2 texCubemap(texture< uchar2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1224
static __forceinline char4 texCubemap(texture< char4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1226
static __forceinline uchar4 texCubemap(texture< uchar4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1234
static __forceinline short texCubemap(texture< short, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1236
static __forceinline unsigned short texCubemap(texture< unsigned short, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1238
static __forceinline short1 texCubemap(texture< short1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1240
static __forceinline ushort1 texCubemap(texture< ushort1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1242
static __forceinline short2 texCubemap(texture< short2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1244
static __forceinline ushort2 texCubemap(texture< ushort2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1246
static __forceinline short4 texCubemap(texture< short4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1248
static __forceinline ushort4 texCubemap(texture< ushort4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1256
static __forceinline int texCubemap(texture< int, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1258
static __forceinline unsigned texCubemap(texture< unsigned, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1260
static __forceinline int1 texCubemap(texture< int1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1262
static __forceinline uint1 texCubemap(texture< uint1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1264
static __forceinline int2 texCubemap(texture< int2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1266
static __forceinline uint2 texCubemap(texture< uint2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1268
static __forceinline int4 texCubemap(texture< int4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1270
static __forceinline uint4 texCubemap(texture< uint4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1280
static __forceinline long texCubemap(texture< long, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1282
static __forceinline unsigned long texCubemap(texture< unsigned long, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1284
static __forceinline long1 texCubemap(texture< long1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1286
static __forceinline ulong1 texCubemap(texture< ulong1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1288
static __forceinline long2 texCubemap(texture< long2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1290
static __forceinline ulong2 texCubemap(texture< ulong2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1292
static __forceinline long4 texCubemap(texture< long4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1294
static __forceinline ulong4 texCubemap(texture< ulong4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1304 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float texCubemap(texture< float, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1306
static __forceinline float1 texCubemap(texture< float1, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1308
static __forceinline float2 texCubemap(texture< float2, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1310
static __forceinline float4 texCubemap(texture< float4, 12, cudaReadModeElementType>  t, float x, float y, float z); 
#line 1318
static __forceinline float texCubemap(texture< char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1320
static __forceinline float texCubemap(texture< signed char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1322
static __forceinline float texCubemap(texture< unsigned char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1324
static __forceinline float1 texCubemap(texture< char1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1326
static __forceinline float1 texCubemap(texture< uchar1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1328
static __forceinline float2 texCubemap(texture< char2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1330
static __forceinline float2 texCubemap(texture< uchar2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1332
static __forceinline float4 texCubemap(texture< char4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1334
static __forceinline float4 texCubemap(texture< uchar4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1342
static __forceinline float texCubemap(texture< short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1344
static __forceinline float texCubemap(texture< unsigned short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1346
static __forceinline float1 texCubemap(texture< short1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1348
static __forceinline float1 texCubemap(texture< ushort1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1350
static __forceinline float2 texCubemap(texture< short2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1352
static __forceinline float2 texCubemap(texture< ushort2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1354
static __forceinline float4 texCubemap(texture< short4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1356
static __forceinline float4 texCubemap(texture< ushort4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z); 
#line 1364
static __forceinline char texCubemapLayered(texture< char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1366
static __forceinline signed char texCubemapLayered(texture< signed char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1368
static __forceinline unsigned char texCubemapLayered(texture< unsigned char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1370
static __forceinline char1 texCubemapLayered(texture< char1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1372
static __forceinline uchar1 texCubemapLayered(texture< uchar1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1374
static __forceinline char2 texCubemapLayered(texture< char2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1376
static __forceinline uchar2 texCubemapLayered(texture< uchar2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1378
static __forceinline char4 texCubemapLayered(texture< char4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1380
static __forceinline uchar4 texCubemapLayered(texture< uchar4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1388
static __forceinline short texCubemapLayered(texture< short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1390
static __forceinline unsigned short texCubemapLayered(texture< unsigned short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1392
static __forceinline short1 texCubemapLayered(texture< short1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1394
static __forceinline ushort1 texCubemapLayered(texture< ushort1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1396
static __forceinline short2 texCubemapLayered(texture< short2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1398
static __forceinline ushort2 texCubemapLayered(texture< ushort2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1400
static __forceinline short4 texCubemapLayered(texture< short4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1402
static __forceinline ushort4 texCubemapLayered(texture< ushort4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1410
static __forceinline int texCubemapLayered(texture< int, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1412
static __forceinline unsigned texCubemapLayered(texture< unsigned, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1414
static __forceinline int1 texCubemapLayered(texture< int1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1416
static __forceinline uint1 texCubemapLayered(texture< uint1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1418
static __forceinline int2 texCubemapLayered(texture< int2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1420
static __forceinline uint2 texCubemapLayered(texture< uint2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1422
static __forceinline int4 texCubemapLayered(texture< int4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1424
static __forceinline uint4 texCubemapLayered(texture< uint4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1434
static __forceinline long texCubemapLayered(texture< long, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1436
static __forceinline unsigned long texCubemapLayered(texture< unsigned long, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1438
static __forceinline long1 texCubemapLayered(texture< long1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1440
static __forceinline ulong1 texCubemapLayered(texture< ulong1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1442
static __forceinline long2 texCubemapLayered(texture< long2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1444
static __forceinline ulong2 texCubemapLayered(texture< ulong2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1446
static __forceinline long4 texCubemapLayered(texture< long4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1448
static __forceinline ulong4 texCubemapLayered(texture< ulong4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float texCubemapLayered(texture< float, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1460
static __forceinline float1 texCubemapLayered(texture< float1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1462
static __forceinline float2 texCubemapLayered(texture< float2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1464
static __forceinline float4 texCubemapLayered(texture< float4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer); 
#line 1472
static __forceinline float texCubemapLayered(texture< char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1474
static __forceinline float texCubemapLayered(texture< signed char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1476
static __forceinline float texCubemapLayered(texture< unsigned char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1478
static __forceinline float1 texCubemapLayered(texture< char1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1480
static __forceinline float1 texCubemapLayered(texture< uchar1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1482
static __forceinline float2 texCubemapLayered(texture< char2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1484
static __forceinline float2 texCubemapLayered(texture< uchar2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1486
static __forceinline float4 texCubemapLayered(texture< char4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1488
static __forceinline float4 texCubemapLayered(texture< uchar4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1496
static __forceinline float texCubemapLayered(texture< short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1498
static __forceinline float texCubemapLayered(texture< unsigned short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1500
static __forceinline float1 texCubemapLayered(texture< short1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1502
static __forceinline float1 texCubemapLayered(texture< ushort1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1504
static __forceinline float2 texCubemapLayered(texture< short2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1506
static __forceinline float2 texCubemapLayered(texture< ushort2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1508
static __forceinline float4 texCubemapLayered(texture< short4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1510
static __forceinline float4 texCubemapLayered(texture< ushort4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer); 
#line 1581 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< int comp, class T, cudaTextureReadMode readMode> static __forceinline ::int4 
#line 1583
__itex2Dgather(texture< T, 2, readMode>  t, ::float2 i, int 
#line 1584
c = comp) 
#line 1585
{int volatile ___ = 1;(void)t;(void)i;(void)c;
#line 1593
::exit(___);}
#if 0
#line 1585
{ 
#line 1586
switch (c) { 
#line 1587
case 0:  return __itex2Dgather0(t, i); 
#line 1588
case 1:  return __itex2Dgather1(t, i); 
#line 1589
case 2:  return __itex2Dgather2(t, i); 
#line 1591
default:  return __itex2Dgather3(t, i); 
#line 1592
}  
#line 1593
} 
#endif
#line 1595 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< int comp, class T, cudaTextureReadMode readMode> static __forceinline ::uint4 
#line 1597
__utex2Dgather(texture< T, 2, readMode>  t, ::float2 i, int 
#line 1598
c = comp) 
#line 1599
{int volatile ___ = 1;(void)t;(void)i;(void)c;
#line 1607
::exit(___);}
#if 0
#line 1599
{ 
#line 1600
switch (c) { 
#line 1601
case 0:  return __utex2Dgather0(t, i); 
#line 1602
case 1:  return __utex2Dgather1(t, i); 
#line 1603
case 2:  return __utex2Dgather2(t, i); 
#line 1605
default:  return __utex2Dgather3(t, i); 
#line 1606
}  
#line 1607
} 
#endif
#line 1609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< int comp, class T, cudaTextureReadMode readMode> static __forceinline ::float4 
#line 1611
__ftex2Dgather(texture< T, 2, readMode>  t, ::float2 i, int 
#line 1612
c = comp) 
#line 1613
{int volatile ___ = 1;(void)t;(void)i;(void)c;
#line 1621
::exit(___);}
#if 0
#line 1613
{ 
#line 1614
switch (c) { 
#line 1615
case 0:  return __ftex2Dgather0(t, i); 
#line 1616
case 1:  return __ftex2Dgather1(t, i); 
#line 1617
case 2:  return __ftex2Dgather2(t, i); 
#line 1619
default:  return __ftex2Dgather3(t, i); 
#line 1620
}  
#line 1621
} 
#endif
#line 1623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline char4 tex2Dgather(texture< char, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1625
static __forceinline char4 tex2Dgather(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1627
static __forceinline uchar4 tex2Dgather(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1629
static __forceinline char4 tex2Dgather(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1631
static __forceinline uchar4 tex2Dgather(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1633
static __forceinline char4 tex2Dgather(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1635
static __forceinline uchar4 tex2Dgather(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1637
static __forceinline char4 tex2Dgather(texture< char3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1639
static __forceinline uchar4 tex2Dgather(texture< uchar3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1641
static __forceinline char4 tex2Dgather(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1643
static __forceinline uchar4 tex2Dgather(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1645
static __forceinline short4 tex2Dgather(texture< short, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1647
static __forceinline ushort4 tex2Dgather(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1649
static __forceinline short4 tex2Dgather(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1651
static __forceinline ushort4 tex2Dgather(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1653
static __forceinline short4 tex2Dgather(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1655
static __forceinline ushort4 tex2Dgather(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1657
static __forceinline short4 tex2Dgather(texture< short3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1659
static __forceinline ushort4 tex2Dgather(texture< ushort3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1661
static __forceinline short4 tex2Dgather(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1663
static __forceinline ushort4 tex2Dgather(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1665
static __forceinline int4 tex2Dgather(texture< int, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1667
static __forceinline uint4 tex2Dgather(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1669
static __forceinline int4 tex2Dgather(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1671
static __forceinline uint4 tex2Dgather(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1673
static __forceinline int4 tex2Dgather(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1675
static __forceinline uint4 tex2Dgather(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1677
static __forceinline int4 tex2Dgather(texture< int3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1679
static __forceinline uint4 tex2Dgather(texture< uint3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1681
static __forceinline int4 tex2Dgather(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1683
static __forceinline uint4 tex2Dgather(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1685
static __forceinline float4 tex2Dgather(texture< float, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1687
static __forceinline float4 tex2Dgather(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1689
static __forceinline float4 tex2Dgather(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1691
static __forceinline float4 tex2Dgather(texture< float3, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1693
static __forceinline float4 tex2Dgather(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, int comp = 0); 
#line 1702
static __forceinline float4 tex2Dgather(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1704
static __forceinline float4 tex2Dgather(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1706
static __forceinline float4 tex2Dgather(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1708
static __forceinline float4 tex2Dgather(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1710
static __forceinline float4 tex2Dgather(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1712
static __forceinline float4 tex2Dgather(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1714
static __forceinline float4 tex2Dgather(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1716
static __forceinline float4 tex2Dgather(texture< char3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1718
static __forceinline float4 tex2Dgather(texture< uchar3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1720
static __forceinline float4 tex2Dgather(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1722
static __forceinline float4 tex2Dgather(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1724
static __forceinline float4 tex2Dgather(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1726
static __forceinline float4 tex2Dgather(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1728
static __forceinline float4 tex2Dgather(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1730
static __forceinline float4 tex2Dgather(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1732
static __forceinline float4 tex2Dgather(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1734
static __forceinline float4 tex2Dgather(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1736
static __forceinline float4 tex2Dgather(texture< short3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1738
static __forceinline float4 tex2Dgather(texture< ushort3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1740
static __forceinline float4 tex2Dgather(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1742
static __forceinline float4 tex2Dgather(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp = 0); 
#line 1834
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::uint4 
#line 1836
__utexfetchlod(texture< T, texType, readMode>  t, ::float4 i, float level, int 
#line 1837
d = texType) 
#line 1838
{int volatile ___ = 1;(void)t;(void)i;(void)level;(void)d;
#line 1845
::exit(___);}
#if 0
#line 1838
{ 
#line 1839
switch (d) { 
#line 1840
case 1:  return __utexfetchlod1D(t, i, level); 
#line 1841
case 2:  return __utexfetchlod2D(t, i, level); 
#line 1843
default:  return __utexfetchlod3D(t, i, level); 
#line 1844
}  
#line 1845
} 
#endif
#line 1847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::int4 
#line 1849
__itexfetchlod(texture< T, texType, readMode>  t, ::float4 i, float level, int 
#line 1850
d = texType) 
#line 1851
{int volatile ___ = 1;(void)t;(void)i;(void)level;(void)d;
#line 1858
::exit(___);}
#if 0
#line 1851
{ 
#line 1852
switch (d) { 
#line 1853
case 1:  return __itexfetchlod1D(t, i, level); 
#line 1854
case 2:  return __itexfetchlod2D(t, i, level); 
#line 1856
default:  return __itexfetchlod3D(t, i, level); 
#line 1857
}  
#line 1858
} 
#endif
#line 1860 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::float4 
#line 1862
__ftexfetchlod(texture< T, texType, readMode>  t, ::float4 i, float level, int 
#line 1863
d = texType) 
#line 1864
{int volatile ___ = 1;(void)t;(void)i;(void)level;(void)d;
#line 1871
::exit(___);}
#if 0
#line 1864
{ 
#line 1865
switch (d) { 
#line 1866
case 1:  return __ftexfetchlod1D(t, i, level); 
#line 1867
case 2:  return __ftexfetchlod2D(t, i, level); 
#line 1869
default:  return __ftexfetchlod3D(t, i, level); 
#line 1870
}  
#line 1871
} 
#endif
#line 1874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::uint4 
#line 1876
__utexfetchlodc(texture< T, texType, readMode>  t, ::float4 i, float level) 
#line 1877
{int volatile ___ = 1;(void)t;(void)i;(void)level;
#line 1879
::exit(___);}
#if 0
#line 1877
{ 
#line 1878
return __utexfetchlodcube(t, i, level); 
#line 1879
} 
#endif
#line 1881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::int4 
#line 1883
__itexfetchlodc(texture< T, texType, readMode>  t, ::float4 i, float level) 
#line 1884
{int volatile ___ = 1;(void)t;(void)i;(void)level;
#line 1886
::exit(___);}
#if 0
#line 1884
{ 
#line 1885
return __itexfetchlodcube(t, i, level); 
#line 1886
} 
#endif
#line 1888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::float4 
#line 1890
__ftexfetchlodc(texture< T, texType, readMode>  t, ::float4 i, float level) 
#line 1891
{int volatile ___ = 1;(void)t;(void)i;(void)level;
#line 1893
::exit(___);}
#if 0
#line 1891
{ 
#line 1892
return __ftexfetchlodcube(t, i, level); 
#line 1893
} 
#endif
#line 1895 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::uint4 
#line 1897
__utexfetchlodl(texture< T, texType, readMode>  t, ::float4 i, int l, float 
#line 1898
level, int d = texType & 15) 
#line 1899
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)level;(void)d;
#line 1905
::exit(___);}
#if 0
#line 1899
{ 
#line 1900
switch (d) { 
#line 1901
case 1:  return __utexfetchlodl1D(t, i, l, level); 
#line 1903
default:  return __utexfetchlodl2D(t, i, l, level); 
#line 1904
}  
#line 1905
} 
#endif
#line 1907 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::int4 
#line 1909
__itexfetchlodl(texture< T, texType, readMode>  t, ::float4 i, int l, float 
#line 1910
level, int d = texType & 15) 
#line 1911
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)level;(void)d;
#line 1917
::exit(___);}
#if 0
#line 1911
{ 
#line 1912
switch (d) { 
#line 1913
case 1:  return __itexfetchlodl1D(t, i, l, level); 
#line 1915
default:  return __itexfetchlodl2D(t, i, l, level); 
#line 1916
}  
#line 1917
} 
#endif
#line 1919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::float4 
#line 1921
__ftexfetchlodl(texture< T, texType, readMode>  t, ::float4 i, int l, float 
#line 1922
level, int d = texType & 15) 
#line 1923
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)level;(void)d;
#line 1929
::exit(___);}
#if 0
#line 1923
{ 
#line 1924
switch (d) { 
#line 1925
case 1:  return __ftexfetchlodl1D(t, i, l, level); 
#line 1927
default:  return __ftexfetchlodl2D(t, i, l, level); 
#line 1928
}  
#line 1929
} 
#endif
#line 1932 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::uint4 
#line 1934
__utexfetchlodlc(texture< T, texType, readMode>  t, ::float4 i, int l, float 
#line 1935
level) 
#line 1936
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)level;
#line 1938
::exit(___);}
#if 0
#line 1936
{ 
#line 1937
return __utexfetchlodlcube(t, i, l, level); 
#line 1938
} 
#endif
#line 1940 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::int4 
#line 1942
__itexfetchlodlc(texture< T, texType, readMode>  t, ::float4 i, int l, float 
#line 1943
level) 
#line 1944
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)level;
#line 1946
::exit(___);}
#if 0
#line 1944
{ 
#line 1945
return __itexfetchlodlcube(t, i, l, level); 
#line 1946
} 
#endif
#line 1948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::float4 
#line 1950
__ftexfetchlodlc(texture< T, texType, readMode>  t, ::float4 i, int l, float 
#line 1951
level) 
#line 1952
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)level;
#line 1954
::exit(___);}
#if 0
#line 1952
{ 
#line 1953
return __ftexfetchlodlcube(t, i, l, level); 
#line 1954
} 
#endif
#line 1963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline char tex1DLod(texture< char, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1965
static __forceinline signed char tex1DLod(texture< signed char, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1967
static __forceinline unsigned char tex1DLod(texture< unsigned char, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1969
static __forceinline char1 tex1DLod(texture< char1, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1971
static __forceinline uchar1 tex1DLod(texture< uchar1, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1973
static __forceinline char2 tex1DLod(texture< char2, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1975
static __forceinline uchar2 tex1DLod(texture< uchar2, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1977
static __forceinline char4 tex1DLod(texture< char4, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1979
static __forceinline uchar4 tex1DLod(texture< uchar4, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1987
static __forceinline short tex1DLod(texture< short, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1989
static __forceinline unsigned short tex1DLod(texture< unsigned short, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1991
static __forceinline short1 tex1DLod(texture< short1, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1993
static __forceinline ushort1 tex1DLod(texture< ushort1, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1995
static __forceinline short2 tex1DLod(texture< short2, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1997
static __forceinline ushort2 tex1DLod(texture< ushort2, 1, cudaReadModeElementType>  t, float x, float level); 
#line 1999
static __forceinline short4 tex1DLod(texture< short4, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2001
static __forceinline ushort4 tex1DLod(texture< ushort4, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2009
static __forceinline int tex1DLod(texture< int, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2011
static __forceinline unsigned tex1DLod(texture< unsigned, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2013
static __forceinline int1 tex1DLod(texture< int1, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2015
static __forceinline uint1 tex1DLod(texture< uint1, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2017
static __forceinline int2 tex1DLod(texture< int2, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2019
static __forceinline uint2 tex1DLod(texture< uint2, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2021
static __forceinline int4 tex1DLod(texture< int4, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2023
static __forceinline uint4 tex1DLod(texture< uint4, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2039
static __forceinline long tex1DLod(texture< long, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2041
static __forceinline unsigned long tex1DLod(texture< unsigned long, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2043
static __forceinline long1 tex1DLod(texture< long1, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2045
static __forceinline ulong1 tex1DLod(texture< ulong1, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2047
static __forceinline long2 tex1DLod(texture< long2, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2049
static __forceinline ulong2 tex1DLod(texture< ulong2, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2051
static __forceinline long4 tex1DLod(texture< long4, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2053
static __forceinline ulong4 tex1DLod(texture< ulong4, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2063 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex1DLod(texture< float, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2065
static __forceinline float1 tex1DLod(texture< float1, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2067
static __forceinline float2 tex1DLod(texture< float2, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2069
static __forceinline float4 tex1DLod(texture< float4, 1, cudaReadModeElementType>  t, float x, float level); 
#line 2077
static __forceinline float tex1DLod(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2079
static __forceinline float tex1DLod(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2081
static __forceinline float tex1DLod(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2083
static __forceinline float1 tex1DLod(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2085
static __forceinline float1 tex1DLod(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2087
static __forceinline float2 tex1DLod(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2089
static __forceinline float2 tex1DLod(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2091
static __forceinline float4 tex1DLod(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2093
static __forceinline float4 tex1DLod(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2101
static __forceinline float tex1DLod(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2103
static __forceinline float tex1DLod(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2105
static __forceinline float1 tex1DLod(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2107
static __forceinline float1 tex1DLod(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2109
static __forceinline float2 tex1DLod(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2111
static __forceinline float2 tex1DLod(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2113
static __forceinline float4 tex1DLod(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2115
static __forceinline float4 tex1DLod(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x, float level); 
#line 2123
static __forceinline char tex2DLod(texture< char, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2125
static __forceinline signed char tex2DLod(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2127
static __forceinline unsigned char tex2DLod(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2129
static __forceinline char1 tex2DLod(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2131
static __forceinline uchar1 tex2DLod(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2133
static __forceinline char2 tex2DLod(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2135
static __forceinline uchar2 tex2DLod(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2137
static __forceinline char4 tex2DLod(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2139
static __forceinline uchar4 tex2DLod(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2147
static __forceinline short tex2DLod(texture< short, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2149
static __forceinline unsigned short tex2DLod(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2151
static __forceinline short1 tex2DLod(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2153
static __forceinline ushort1 tex2DLod(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2155
static __forceinline short2 tex2DLod(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2157
static __forceinline ushort2 tex2DLod(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2159
static __forceinline short4 tex2DLod(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2161
static __forceinline ushort4 tex2DLod(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2169
static __forceinline int tex2DLod(texture< int, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2171
static __forceinline unsigned tex2DLod(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2173
static __forceinline int1 tex2DLod(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2175
static __forceinline uint1 tex2DLod(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2177
static __forceinline int2 tex2DLod(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2179
static __forceinline uint2 tex2DLod(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2181
static __forceinline int4 tex2DLod(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2183
static __forceinline uint4 tex2DLod(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2193
static __forceinline long tex2DLod(texture< long, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2195
static __forceinline unsigned long tex2DLod(texture< unsigned long, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2197
static __forceinline long1 tex2DLod(texture< long1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2199
static __forceinline ulong1 tex2DLod(texture< ulong1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2201
static __forceinline long2 tex2DLod(texture< long2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2203
static __forceinline ulong2 tex2DLod(texture< ulong2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2205
static __forceinline long4 tex2DLod(texture< long4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2207
static __forceinline ulong4 tex2DLod(texture< ulong4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex2DLod(texture< float, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2219
static __forceinline float1 tex2DLod(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2221
static __forceinline float2 tex2DLod(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2223
static __forceinline float4 tex2DLod(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, float level); 
#line 2231
static __forceinline float tex2DLod(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2233
static __forceinline float tex2DLod(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2235
static __forceinline float tex2DLod(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2237
static __forceinline float1 tex2DLod(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2239
static __forceinline float1 tex2DLod(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2241
static __forceinline float2 tex2DLod(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2243
static __forceinline float2 tex2DLod(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2245
static __forceinline float4 tex2DLod(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2247
static __forceinline float4 tex2DLod(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2255
static __forceinline float tex2DLod(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2257
static __forceinline float tex2DLod(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2259
static __forceinline float1 tex2DLod(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2261
static __forceinline float1 tex2DLod(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2263
static __forceinline float2 tex2DLod(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2265
static __forceinline float2 tex2DLod(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2267
static __forceinline float4 tex2DLod(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2269
static __forceinline float4 tex2DLod(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level); 
#line 2277
static __forceinline char tex1DLayeredLod(texture< char, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2279
static __forceinline signed char tex1DLayeredLod(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2281
static __forceinline unsigned char tex1DLayeredLod(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2283
static __forceinline char1 tex1DLayeredLod(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2285
static __forceinline uchar1 tex1DLayeredLod(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2287
static __forceinline char2 tex1DLayeredLod(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2289
static __forceinline uchar2 tex1DLayeredLod(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2291
static __forceinline char4 tex1DLayeredLod(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2293
static __forceinline uchar4 tex1DLayeredLod(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2301
static __forceinline short tex1DLayeredLod(texture< short, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2303
static __forceinline unsigned short tex1DLayeredLod(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2305
static __forceinline short1 tex1DLayeredLod(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2307
static __forceinline ushort1 tex1DLayeredLod(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2309
static __forceinline short2 tex1DLayeredLod(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2311
static __forceinline ushort2 tex1DLayeredLod(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2313
static __forceinline short4 tex1DLayeredLod(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2315
static __forceinline ushort4 tex1DLayeredLod(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2323
static __forceinline int tex1DLayeredLod(texture< int, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2325
static __forceinline unsigned tex1DLayeredLod(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2327
static __forceinline int1 tex1DLayeredLod(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2329
static __forceinline uint1 tex1DLayeredLod(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2331
static __forceinline int2 tex1DLayeredLod(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2333
static __forceinline uint2 tex1DLayeredLod(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2335
static __forceinline int4 tex1DLayeredLod(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2337
static __forceinline uint4 tex1DLayeredLod(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2347
static __forceinline long tex1DLayeredLod(texture< long, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2349
static __forceinline unsigned long tex1DLayeredLod(texture< unsigned long, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2351
static __forceinline long1 tex1DLayeredLod(texture< long1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2353
static __forceinline ulong1 tex1DLayeredLod(texture< ulong1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2355
static __forceinline long2 tex1DLayeredLod(texture< long2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2357
static __forceinline ulong2 tex1DLayeredLod(texture< ulong2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2359
static __forceinline long4 tex1DLayeredLod(texture< long4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2361
static __forceinline ulong4 tex1DLayeredLod(texture< ulong4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex1DLayeredLod(texture< float, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2373
static __forceinline float1 tex1DLayeredLod(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2375
static __forceinline float2 tex1DLayeredLod(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2377
static __forceinline float4 tex1DLayeredLod(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer, float level); 
#line 2385
static __forceinline float tex1DLayeredLod(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2387
static __forceinline float tex1DLayeredLod(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2389
static __forceinline float tex1DLayeredLod(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2391
static __forceinline float1 tex1DLayeredLod(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2393
static __forceinline float1 tex1DLayeredLod(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2395
static __forceinline float2 tex1DLayeredLod(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2397
static __forceinline float2 tex1DLayeredLod(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2399
static __forceinline float4 tex1DLayeredLod(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2401
static __forceinline float4 tex1DLayeredLod(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2409
static __forceinline float tex1DLayeredLod(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2411
static __forceinline float tex1DLayeredLod(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2413
static __forceinline float1 tex1DLayeredLod(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2415
static __forceinline float1 tex1DLayeredLod(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2417
static __forceinline float2 tex1DLayeredLod(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2419
static __forceinline float2 tex1DLayeredLod(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2421
static __forceinline float4 tex1DLayeredLod(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2423
static __forceinline float4 tex1DLayeredLod(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level); 
#line 2431
static __forceinline char tex2DLayeredLod(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2433
static __forceinline signed char tex2DLayeredLod(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2435
static __forceinline unsigned char tex2DLayeredLod(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2437
static __forceinline char1 tex2DLayeredLod(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2439
static __forceinline uchar1 tex2DLayeredLod(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2441
static __forceinline char2 tex2DLayeredLod(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2443
static __forceinline uchar2 tex2DLayeredLod(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2445
static __forceinline char4 tex2DLayeredLod(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2447
static __forceinline uchar4 tex2DLayeredLod(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2455
static __forceinline short tex2DLayeredLod(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2457
static __forceinline unsigned short tex2DLayeredLod(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2459
static __forceinline short1 tex2DLayeredLod(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2461
static __forceinline ushort1 tex2DLayeredLod(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2463
static __forceinline short2 tex2DLayeredLod(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2465
static __forceinline ushort2 tex2DLayeredLod(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2467
static __forceinline short4 tex2DLayeredLod(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2469
static __forceinline ushort4 tex2DLayeredLod(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2477
static __forceinline int tex2DLayeredLod(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2479
static __forceinline unsigned tex2DLayeredLod(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2481
static __forceinline int1 tex2DLayeredLod(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2483
static __forceinline uint1 tex2DLayeredLod(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2485
static __forceinline int2 tex2DLayeredLod(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2487
static __forceinline uint2 tex2DLayeredLod(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2489
static __forceinline int4 tex2DLayeredLod(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2491
static __forceinline uint4 tex2DLayeredLod(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2501
static __forceinline long tex2DLayeredLod(texture< long, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2503
static __forceinline unsigned long tex2DLayeredLod(texture< unsigned long, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2505
static __forceinline long1 tex2DLayeredLod(texture< long1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2507
static __forceinline ulong1 tex2DLayeredLod(texture< ulong1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2509
static __forceinline long2 tex2DLayeredLod(texture< long2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2511
static __forceinline ulong2 tex2DLayeredLod(texture< ulong2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2513
static __forceinline long4 tex2DLayeredLod(texture< long4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2515
static __forceinline ulong4 tex2DLayeredLod(texture< ulong4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2525 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex2DLayeredLod(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2527
static __forceinline float1 tex2DLayeredLod(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2529
static __forceinline float2 tex2DLayeredLod(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2531
static __forceinline float4 tex2DLayeredLod(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level); 
#line 2539
static __forceinline float tex2DLayeredLod(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2541
static __forceinline float tex2DLayeredLod(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2543
static __forceinline float tex2DLayeredLod(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2545
static __forceinline float1 tex2DLayeredLod(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2547
static __forceinline float1 tex2DLayeredLod(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2549
static __forceinline float2 tex2DLayeredLod(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2551
static __forceinline float2 tex2DLayeredLod(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2553
static __forceinline float4 tex2DLayeredLod(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2555
static __forceinline float4 tex2DLayeredLod(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2563
static __forceinline float tex2DLayeredLod(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2565
static __forceinline float tex2DLayeredLod(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2567
static __forceinline float1 tex2DLayeredLod(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2569
static __forceinline float1 tex2DLayeredLod(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2571
static __forceinline float2 tex2DLayeredLod(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2573
static __forceinline float2 tex2DLayeredLod(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2575
static __forceinline float4 tex2DLayeredLod(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2577
static __forceinline float4 tex2DLayeredLod(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level); 
#line 2585
static __forceinline char tex3DLod(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2587
static __forceinline signed char tex3DLod(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2589
static __forceinline unsigned char tex3DLod(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2591
static __forceinline char1 tex3DLod(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2593
static __forceinline uchar1 tex3DLod(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2595
static __forceinline char2 tex3DLod(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2597
static __forceinline uchar2 tex3DLod(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2599
static __forceinline char4 tex3DLod(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2601
static __forceinline uchar4 tex3DLod(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2609
static __forceinline short tex3DLod(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2611
static __forceinline unsigned short tex3DLod(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2613
static __forceinline short1 tex3DLod(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2615
static __forceinline ushort1 tex3DLod(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2617
static __forceinline short2 tex3DLod(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2619
static __forceinline ushort2 tex3DLod(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2621
static __forceinline short4 tex3DLod(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2623
static __forceinline ushort4 tex3DLod(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2631
static __forceinline int tex3DLod(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2633
static __forceinline unsigned tex3DLod(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2635
static __forceinline int1 tex3DLod(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2637
static __forceinline uint1 tex3DLod(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2639
static __forceinline int2 tex3DLod(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2641
static __forceinline uint2 tex3DLod(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2643
static __forceinline int4 tex3DLod(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2645
static __forceinline uint4 tex3DLod(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2655
static __forceinline long tex3DLod(texture< long, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2657
static __forceinline unsigned long tex3DLod(texture< unsigned long, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2659
static __forceinline long1 tex3DLod(texture< long1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2661
static __forceinline ulong1 tex3DLod(texture< ulong1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2663
static __forceinline long2 tex3DLod(texture< long2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2665
static __forceinline ulong2 tex3DLod(texture< ulong2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2667
static __forceinline long4 tex3DLod(texture< long4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2669
static __forceinline ulong4 tex3DLod(texture< ulong4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2679 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex3DLod(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2681
static __forceinline float1 tex3DLod(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2683
static __forceinline float2 tex3DLod(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2685
static __forceinline float4 tex3DLod(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2693
static __forceinline float tex3DLod(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2695
static __forceinline float tex3DLod(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2697
static __forceinline float tex3DLod(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2699
static __forceinline float1 tex3DLod(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2701
static __forceinline float1 tex3DLod(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2703
static __forceinline float2 tex3DLod(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2705
static __forceinline float2 tex3DLod(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2707
static __forceinline float4 tex3DLod(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2709
static __forceinline float4 tex3DLod(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2717
static __forceinline float tex3DLod(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2719
static __forceinline float tex3DLod(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2721
static __forceinline float1 tex3DLod(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2723
static __forceinline float1 tex3DLod(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2725
static __forceinline float2 tex3DLod(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2727
static __forceinline float2 tex3DLod(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2729
static __forceinline float4 tex3DLod(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2731
static __forceinline float4 tex3DLod(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2739
static __forceinline char texCubemapLod(texture< char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2741
static __forceinline signed char texCubemapLod(texture< signed char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2743
static __forceinline unsigned char texCubemapLod(texture< unsigned char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2745
static __forceinline char1 texCubemapLod(texture< char1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2747
static __forceinline uchar1 texCubemapLod(texture< uchar1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2749
static __forceinline char2 texCubemapLod(texture< char2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2751
static __forceinline uchar2 texCubemapLod(texture< uchar2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2753
static __forceinline char4 texCubemapLod(texture< char4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2755
static __forceinline uchar4 texCubemapLod(texture< uchar4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2763
static __forceinline short texCubemapLod(texture< short, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2765
static __forceinline unsigned short texCubemapLod(texture< unsigned short, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2767
static __forceinline short1 texCubemapLod(texture< short1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2769
static __forceinline ushort1 texCubemapLod(texture< ushort1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2771
static __forceinline short2 texCubemapLod(texture< short2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2773
static __forceinline ushort2 texCubemapLod(texture< ushort2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2775
static __forceinline short4 texCubemapLod(texture< short4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2777
static __forceinline ushort4 texCubemapLod(texture< ushort4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2785
static __forceinline int texCubemapLod(texture< int, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2787
static __forceinline unsigned texCubemapLod(texture< unsigned, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2789
static __forceinline int1 texCubemapLod(texture< int1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2791
static __forceinline uint1 texCubemapLod(texture< uint1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2793
static __forceinline int2 texCubemapLod(texture< int2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2795
static __forceinline uint2 texCubemapLod(texture< uint2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2797
static __forceinline int4 texCubemapLod(texture< int4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2799
static __forceinline uint4 texCubemapLod(texture< uint4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2809
static __forceinline long texCubemapLod(texture< long, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2811
static __forceinline unsigned long texCubemapLod(texture< unsigned long, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2813
static __forceinline long1 texCubemapLod(texture< long1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2815
static __forceinline ulong1 texCubemapLod(texture< ulong1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2817
static __forceinline long2 texCubemapLod(texture< long2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2819
static __forceinline ulong2 texCubemapLod(texture< ulong2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2821
static __forceinline long4 texCubemapLod(texture< long4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2823
static __forceinline ulong4 texCubemapLod(texture< ulong4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2833 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float texCubemapLod(texture< float, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2835
static __forceinline float1 texCubemapLod(texture< float1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2837
static __forceinline float2 texCubemapLod(texture< float2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2839
static __forceinline float4 texCubemapLod(texture< float4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level); 
#line 2847
static __forceinline float texCubemapLod(texture< char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2849
static __forceinline float texCubemapLod(texture< signed char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2851
static __forceinline float texCubemapLod(texture< unsigned char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2853
static __forceinline float1 texCubemapLod(texture< char1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2855
static __forceinline float1 texCubemapLod(texture< uchar1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2857
static __forceinline float2 texCubemapLod(texture< char2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2859
static __forceinline float2 texCubemapLod(texture< uchar2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2861
static __forceinline float4 texCubemapLod(texture< char4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2863
static __forceinline float4 texCubemapLod(texture< uchar4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2871
static __forceinline float texCubemapLod(texture< short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2873
static __forceinline float texCubemapLod(texture< unsigned short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2875
static __forceinline float1 texCubemapLod(texture< short1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2877
static __forceinline float1 texCubemapLod(texture< ushort1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2879
static __forceinline float2 texCubemapLod(texture< short2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2881
static __forceinline float2 texCubemapLod(texture< ushort2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2883
static __forceinline float4 texCubemapLod(texture< short4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2885
static __forceinline float4 texCubemapLod(texture< ushort4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level); 
#line 2893
static __forceinline char texCubemapLayeredLod(texture< char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2895
static __forceinline signed char texCubemapLayeredLod(texture< signed char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2897
static __forceinline unsigned char texCubemapLayeredLod(texture< unsigned char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2899
static __forceinline char1 texCubemapLayeredLod(texture< char1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2901
static __forceinline uchar1 texCubemapLayeredLod(texture< uchar1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2903
static __forceinline char2 texCubemapLayeredLod(texture< char2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2905
static __forceinline uchar2 texCubemapLayeredLod(texture< uchar2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2907
static __forceinline char4 texCubemapLayeredLod(texture< char4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2909
static __forceinline uchar4 texCubemapLayeredLod(texture< uchar4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2917
static __forceinline short texCubemapLayeredLod(texture< short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2919
static __forceinline unsigned short texCubemapLayeredLod(texture< unsigned short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2921
static __forceinline short1 texCubemapLayeredLod(texture< short1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2923
static __forceinline ushort1 texCubemapLayeredLod(texture< ushort1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2925
static __forceinline short2 texCubemapLayeredLod(texture< short2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2927
static __forceinline ushort2 texCubemapLayeredLod(texture< ushort2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2929
static __forceinline short4 texCubemapLayeredLod(texture< short4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2931
static __forceinline ushort4 texCubemapLayeredLod(texture< ushort4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2939
static __forceinline int texCubemapLayeredLod(texture< int, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2941
static __forceinline unsigned texCubemapLayeredLod(texture< unsigned, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2943
static __forceinline int1 texCubemapLayeredLod(texture< int1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2945
static __forceinline uint1 texCubemapLayeredLod(texture< uint1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2947
static __forceinline int2 texCubemapLayeredLod(texture< int2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2949
static __forceinline uint2 texCubemapLayeredLod(texture< uint2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2951
static __forceinline int4 texCubemapLayeredLod(texture< int4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2953
static __forceinline uint4 texCubemapLayeredLod(texture< uint4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2963
static __forceinline long texCubemapLayeredLod(texture< long, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2965
static __forceinline unsigned long texCubemapLayeredLod(texture< unsigned long, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2967
static __forceinline long1 texCubemapLayeredLod(texture< long1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2969
static __forceinline ulong1 texCubemapLayeredLod(texture< ulong1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2971
static __forceinline long2 texCubemapLayeredLod(texture< long2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2973
static __forceinline ulong2 texCubemapLayeredLod(texture< ulong2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2975
static __forceinline long4 texCubemapLayeredLod(texture< long4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2977
static __forceinline ulong4 texCubemapLayeredLod(texture< ulong4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2987 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float texCubemapLayeredLod(texture< float, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2989
static __forceinline float1 texCubemapLayeredLod(texture< float1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2991
static __forceinline float2 texCubemapLayeredLod(texture< float2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 2993
static __forceinline float4 texCubemapLayeredLod(texture< float4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level); 
#line 3001
static __forceinline float texCubemapLayeredLod(texture< char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3003
static __forceinline float texCubemapLayeredLod(texture< signed char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3005
static __forceinline float texCubemapLayeredLod(texture< unsigned char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3007
static __forceinline float1 texCubemapLayeredLod(texture< char1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3009
static __forceinline float1 texCubemapLayeredLod(texture< uchar1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3011
static __forceinline float2 texCubemapLayeredLod(texture< char2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3013
static __forceinline float2 texCubemapLayeredLod(texture< uchar2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3015
static __forceinline float4 texCubemapLayeredLod(texture< char4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3017
static __forceinline float4 texCubemapLayeredLod(texture< uchar4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3025
static __forceinline float texCubemapLayeredLod(texture< short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3027
static __forceinline float texCubemapLayeredLod(texture< unsigned short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3029
static __forceinline float1 texCubemapLayeredLod(texture< short1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3031
static __forceinline float1 texCubemapLayeredLod(texture< ushort1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3033
static __forceinline float2 texCubemapLayeredLod(texture< short2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3035
static __forceinline float2 texCubemapLayeredLod(texture< ushort2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3037
static __forceinline float4 texCubemapLayeredLod(texture< short4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3039
static __forceinline float4 texCubemapLayeredLod(texture< ushort4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level); 
#line 3042
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::uint4 
#line 3044
__utexfetchgrad(texture< T, texType, readMode>  t, ::float4 i, ::float4 dPdx, ::float4 dPdy, int d = texType) 
#line 3045
{int volatile ___ = 1;(void)t;(void)i;(void)dPdx;(void)dPdy;(void)d;
#line 3052
::exit(___);}
#if 0
#line 3045
{ 
#line 3046
switch (d) { 
#line 3047
case 1:  return __utexfetchgrad1D(t, i, dPdx, dPdy); 
#line 3048
case 2:  return __utexfetchgrad2D(t, i, dPdx, dPdy); 
#line 3050
default:  return __utexfetchgrad3D(t, i, dPdx, dPdy); 
#line 3051
}  
#line 3052
} 
#endif
#line 3054 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::int4 
#line 3056
__itexfetchgrad(texture< T, texType, readMode>  t, ::float4 i, ::float4 dPdx, ::float4 dPdy, int d = texType) 
#line 3057
{int volatile ___ = 1;(void)t;(void)i;(void)dPdx;(void)dPdy;(void)d;
#line 3064
::exit(___);}
#if 0
#line 3057
{ 
#line 3058
switch (d) { 
#line 3059
case 1:  return __itexfetchgrad1D(t, i, dPdx, dPdy); 
#line 3060
case 2:  return __itexfetchgrad2D(t, i, dPdx, dPdy); 
#line 3062
default:  return __itexfetchgrad3D(t, i, dPdx, dPdy); 
#line 3063
}  
#line 3064
} 
#endif
#line 3066 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::float4 
#line 3068
__ftexfetchgrad(texture< T, texType, readMode>  t, ::float4 i, ::float4 dPdx, ::float4 dPdy, int d = texType) 
#line 3069
{int volatile ___ = 1;(void)t;(void)i;(void)dPdx;(void)dPdy;(void)d;
#line 3076
::exit(___);}
#if 0
#line 3069
{ 
#line 3070
switch (d) { 
#line 3071
case 1:  return __ftexfetchgrad1D(t, i, dPdx, dPdy); 
#line 3072
case 2:  return __ftexfetchgrad2D(t, i, dPdx, dPdy); 
#line 3074
default:  return __ftexfetchgrad3D(t, i, dPdx, dPdy); 
#line 3075
}  
#line 3076
} 
#endif
#line 3078 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::uint4 
#line 3080
__utexfetchgradl(texture< T, texType, readMode>  t, ::float4 i, int l, ::float4 dPdx, ::float4 dPdy, int d = texType & 15) 
#line 3081
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)dPdx;(void)dPdy;(void)d;
#line 3087
::exit(___);}
#if 0
#line 3081
{ 
#line 3082
switch (d) { 
#line 3083
case 1:  return __utexfetchgradl1D(t, i, l, dPdx, dPdy); 
#line 3085
default:  return __utexfetchgradl2D(t, i, l, dPdx, dPdy); 
#line 3086
}  
#line 3087
} 
#endif
#line 3089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::int4 
#line 3091
__itexfetchgradl(texture< T, texType, readMode>  t, ::float4 i, int l, ::float4 dPdx, ::float4 dPdy, int d = texType & 15) 
#line 3092
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)dPdx;(void)dPdy;(void)d;
#line 3098
::exit(___);}
#if 0
#line 3092
{ 
#line 3093
switch (d) { 
#line 3094
case 1:  return __itexfetchgradl1D(t, i, l, dPdx, dPdy); 
#line 3096
default:  return __itexfetchgradl2D(t, i, l, dPdx, dPdy); 
#line 3097
}  
#line 3098
} 
#endif
#line 3100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
template< class T, int texType, cudaTextureReadMode readMode> static __forceinline ::float4 
#line 3102
__ftexfetchgradl(texture< T, texType, readMode>  t, ::float4 i, int l, ::float4 dPdx, ::float4 dPdy, int d = texType & 15) 
#line 3103
{int volatile ___ = 1;(void)t;(void)i;(void)l;(void)dPdx;(void)dPdy;(void)d;
#line 3109
::exit(___);}
#if 0
#line 3103
{ 
#line 3104
switch (d) { 
#line 3105
case 1:  return __ftexfetchgradl1D(t, i, l, dPdx, dPdy); 
#line 3107
default:  return __ftexfetchgradl2D(t, i, l, dPdx, dPdy); 
#line 3108
}  
#line 3109
} 
#endif
#line 3118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline char tex1DGrad(texture< char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3120
static __forceinline signed char tex1DGrad(texture< signed char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3122
static __forceinline unsigned char tex1DGrad(texture< unsigned char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3124
static __forceinline char1 tex1DGrad(texture< char1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3126
static __forceinline uchar1 tex1DGrad(texture< uchar1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3128
static __forceinline char2 tex1DGrad(texture< char2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3130
static __forceinline uchar2 tex1DGrad(texture< uchar2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3132
static __forceinline char4 tex1DGrad(texture< char4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3134
static __forceinline uchar4 tex1DGrad(texture< uchar4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3142
static __forceinline short tex1DGrad(texture< short, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3144
static __forceinline unsigned short tex1DGrad(texture< unsigned short, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3146
static __forceinline short1 tex1DGrad(texture< short1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3148
static __forceinline ushort1 tex1DGrad(texture< ushort1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3150
static __forceinline short2 tex1DGrad(texture< short2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3152
static __forceinline ushort2 tex1DGrad(texture< ushort2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3154
static __forceinline short4 tex1DGrad(texture< short4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3156
static __forceinline ushort4 tex1DGrad(texture< ushort4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3164
static __forceinline int tex1DGrad(texture< int, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3166
static __forceinline unsigned tex1DGrad(texture< unsigned, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3168
static __forceinline int1 tex1DGrad(texture< int1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3170
static __forceinline uint1 tex1DGrad(texture< uint1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3172
static __forceinline int2 tex1DGrad(texture< int2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3174
static __forceinline uint2 tex1DGrad(texture< uint2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3176
static __forceinline int4 tex1DGrad(texture< int4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3178
static __forceinline uint4 tex1DGrad(texture< uint4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3194
static __forceinline long tex1DGrad(texture< long, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3196
static __forceinline unsigned long tex1DGrad(texture< unsigned long, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3198
static __forceinline long1 tex1DGrad(texture< long1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3200
static __forceinline ulong1 tex1DGrad(texture< ulong1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3202
static __forceinline long2 tex1DGrad(texture< long2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3204
static __forceinline ulong2 tex1DGrad(texture< ulong2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3206
static __forceinline long4 tex1DGrad(texture< long4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3208
static __forceinline ulong4 tex1DGrad(texture< ulong4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex1DGrad(texture< float, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3220
static __forceinline float1 tex1DGrad(texture< float1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3222
static __forceinline float2 tex1DGrad(texture< float2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3224
static __forceinline float4 tex1DGrad(texture< float4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy); 
#line 3232
static __forceinline float tex1DGrad(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3234
static __forceinline float tex1DGrad(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3236
static __forceinline float tex1DGrad(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3238
static __forceinline float1 tex1DGrad(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3240
static __forceinline float1 tex1DGrad(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3242
static __forceinline float2 tex1DGrad(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3244
static __forceinline float2 tex1DGrad(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3246
static __forceinline float4 tex1DGrad(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3248
static __forceinline float4 tex1DGrad(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3256
static __forceinline float tex1DGrad(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3258
static __forceinline float tex1DGrad(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3260
static __forceinline float1 tex1DGrad(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3262
static __forceinline float1 tex1DGrad(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3264
static __forceinline float2 tex1DGrad(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3266
static __forceinline float2 tex1DGrad(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3268
static __forceinline float4 tex1DGrad(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3270
static __forceinline float4 tex1DGrad(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy); 
#line 3278
static __forceinline char tex2DGrad(texture< char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3280
static __forceinline signed char tex2DGrad(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3282
static __forceinline unsigned char tex2DGrad(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3284
static __forceinline char1 tex2DGrad(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3286
static __forceinline uchar1 tex2DGrad(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3288
static __forceinline char2 tex2DGrad(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3290
static __forceinline uchar2 tex2DGrad(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3292
static __forceinline char4 tex2DGrad(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3294
static __forceinline uchar4 tex2DGrad(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3302
static __forceinline short tex2DGrad(texture< short, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3304
static __forceinline unsigned short tex2DGrad(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3306
static __forceinline short1 tex2DGrad(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3308
static __forceinline ushort1 tex2DGrad(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3310
static __forceinline short2 tex2DGrad(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3312
static __forceinline ushort2 tex2DGrad(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3314
static __forceinline short4 tex2DGrad(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3316
static __forceinline ushort4 tex2DGrad(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3324
static __forceinline int tex2DGrad(texture< int, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3326
static __forceinline unsigned tex2DGrad(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3328
static __forceinline int1 tex2DGrad(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3330
static __forceinline uint1 tex2DGrad(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3332
static __forceinline int2 tex2DGrad(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3334
static __forceinline uint2 tex2DGrad(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3336
static __forceinline int4 tex2DGrad(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3338
static __forceinline uint4 tex2DGrad(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3348
static __forceinline long tex2DGrad(texture< long, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3350
static __forceinline unsigned long tex2DGrad(texture< unsigned long, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3352
static __forceinline long1 tex2DGrad(texture< long1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3354
static __forceinline ulong1 tex2DGrad(texture< ulong1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3356
static __forceinline long2 tex2DGrad(texture< long2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3358
static __forceinline ulong2 tex2DGrad(texture< ulong2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3360
static __forceinline long4 tex2DGrad(texture< long4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3362
static __forceinline ulong4 tex2DGrad(texture< ulong4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex2DGrad(texture< float, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3374
static __forceinline float1 tex2DGrad(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3376
static __forceinline float2 tex2DGrad(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3378
static __forceinline float4 tex2DGrad(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3386
static __forceinline float tex2DGrad(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3388
static __forceinline float tex2DGrad(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3390
static __forceinline float tex2DGrad(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3392
static __forceinline float1 tex2DGrad(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3394
static __forceinline float1 tex2DGrad(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3396
static __forceinline float2 tex2DGrad(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3398
static __forceinline float2 tex2DGrad(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3400
static __forceinline float4 tex2DGrad(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3402
static __forceinline float4 tex2DGrad(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3410
static __forceinline float tex2DGrad(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3412
static __forceinline float tex2DGrad(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3414
static __forceinline float1 tex2DGrad(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3416
static __forceinline float1 tex2DGrad(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3418
static __forceinline float2 tex2DGrad(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3420
static __forceinline float2 tex2DGrad(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3422
static __forceinline float4 tex2DGrad(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3424
static __forceinline float4 tex2DGrad(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy); 
#line 3432
static __forceinline char tex1DLayeredGrad(texture< char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3434
static __forceinline signed char tex1DLayeredGrad(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3436
static __forceinline unsigned char tex1DLayeredGrad(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3438
static __forceinline char1 tex1DLayeredGrad(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3440
static __forceinline uchar1 tex1DLayeredGrad(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3442
static __forceinline char2 tex1DLayeredGrad(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3444
static __forceinline uchar2 tex1DLayeredGrad(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3446
static __forceinline char4 tex1DLayeredGrad(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3448
static __forceinline uchar4 tex1DLayeredGrad(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3456
static __forceinline short tex1DLayeredGrad(texture< short, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3458
static __forceinline unsigned short tex1DLayeredGrad(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3460
static __forceinline short1 tex1DLayeredGrad(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3462
static __forceinline ushort1 tex1DLayeredGrad(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3464
static __forceinline short2 tex1DLayeredGrad(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3466
static __forceinline ushort2 tex1DLayeredGrad(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3468
static __forceinline short4 tex1DLayeredGrad(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3470
static __forceinline ushort4 tex1DLayeredGrad(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3478
static __forceinline int tex1DLayeredGrad(texture< int, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3480
static __forceinline unsigned tex1DLayeredGrad(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3482
static __forceinline int1 tex1DLayeredGrad(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3484
static __forceinline uint1 tex1DLayeredGrad(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3486
static __forceinline int2 tex1DLayeredGrad(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3488
static __forceinline uint2 tex1DLayeredGrad(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3490
static __forceinline int4 tex1DLayeredGrad(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3492
static __forceinline uint4 tex1DLayeredGrad(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3502
static __forceinline long tex1DLayeredGrad(texture< long, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3504
static __forceinline unsigned long tex1DLayeredGrad(texture< unsigned long, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3506
static __forceinline long1 tex1DLayeredGrad(texture< long1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3508
static __forceinline ulong1 tex1DLayeredGrad(texture< ulong1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3510
static __forceinline long2 tex1DLayeredGrad(texture< long2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3512
static __forceinline ulong2 tex1DLayeredGrad(texture< ulong2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3514
static __forceinline long4 tex1DLayeredGrad(texture< long4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3516
static __forceinline ulong4 tex1DLayeredGrad(texture< ulong4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3526 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex1DLayeredGrad(texture< float, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3528
static __forceinline float1 tex1DLayeredGrad(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3530
static __forceinline float2 tex1DLayeredGrad(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3532
static __forceinline float4 tex1DLayeredGrad(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy); 
#line 3540
static __forceinline float tex1DLayeredGrad(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3542
static __forceinline float tex1DLayeredGrad(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3544
static __forceinline float tex1DLayeredGrad(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3546
static __forceinline float1 tex1DLayeredGrad(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3548
static __forceinline float1 tex1DLayeredGrad(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3550
static __forceinline float2 tex1DLayeredGrad(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3552
static __forceinline float2 tex1DLayeredGrad(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3554
static __forceinline float4 tex1DLayeredGrad(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3556
static __forceinline float4 tex1DLayeredGrad(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3564
static __forceinline float tex1DLayeredGrad(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3566
static __forceinline float tex1DLayeredGrad(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3568
static __forceinline float1 tex1DLayeredGrad(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3570
static __forceinline float1 tex1DLayeredGrad(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3572
static __forceinline float2 tex1DLayeredGrad(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3574
static __forceinline float2 tex1DLayeredGrad(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3576
static __forceinline float4 tex1DLayeredGrad(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3578
static __forceinline float4 tex1DLayeredGrad(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy); 
#line 3586
static __forceinline char tex2DLayeredGrad(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3588
static __forceinline signed char tex2DLayeredGrad(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3590
static __forceinline unsigned char tex2DLayeredGrad(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3592
static __forceinline char1 tex2DLayeredGrad(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3594
static __forceinline uchar1 tex2DLayeredGrad(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3596
static __forceinline char2 tex2DLayeredGrad(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3598
static __forceinline uchar2 tex2DLayeredGrad(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3600
static __forceinline char4 tex2DLayeredGrad(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3602
static __forceinline uchar4 tex2DLayeredGrad(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3610
static __forceinline short tex2DLayeredGrad(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3612
static __forceinline unsigned short tex2DLayeredGrad(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3614
static __forceinline short1 tex2DLayeredGrad(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3616
static __forceinline ushort1 tex2DLayeredGrad(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3618
static __forceinline short2 tex2DLayeredGrad(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3620
static __forceinline ushort2 tex2DLayeredGrad(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3622
static __forceinline short4 tex2DLayeredGrad(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3624
static __forceinline ushort4 tex2DLayeredGrad(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3632
static __forceinline int tex2DLayeredGrad(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3634
static __forceinline unsigned tex2DLayeredGrad(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3636
static __forceinline int1 tex2DLayeredGrad(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3638
static __forceinline uint1 tex2DLayeredGrad(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3640
static __forceinline int2 tex2DLayeredGrad(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3642
static __forceinline uint2 tex2DLayeredGrad(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3644
static __forceinline int4 tex2DLayeredGrad(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3646
static __forceinline uint4 tex2DLayeredGrad(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3656
static __forceinline long tex2DLayeredGrad(texture< long, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3658
static __forceinline unsigned long tex2DLayeredGrad(texture< unsigned long, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3660
static __forceinline long1 tex2DLayeredGrad(texture< long1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3662
static __forceinline ulong1 tex2DLayeredGrad(texture< ulong1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3664
static __forceinline long2 tex2DLayeredGrad(texture< long2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3666
static __forceinline ulong2 tex2DLayeredGrad(texture< ulong2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3668
static __forceinline long4 tex2DLayeredGrad(texture< long4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3670
static __forceinline ulong4 tex2DLayeredGrad(texture< ulong4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex2DLayeredGrad(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3682
static __forceinline float1 tex2DLayeredGrad(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3684
static __forceinline float2 tex2DLayeredGrad(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3686
static __forceinline float4 tex2DLayeredGrad(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3694
static __forceinline float tex2DLayeredGrad(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3696
static __forceinline float tex2DLayeredGrad(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3698
static __forceinline float tex2DLayeredGrad(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3700
static __forceinline float1 tex2DLayeredGrad(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3702
static __forceinline float1 tex2DLayeredGrad(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3704
static __forceinline float2 tex2DLayeredGrad(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3706
static __forceinline float2 tex2DLayeredGrad(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3708
static __forceinline float4 tex2DLayeredGrad(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3710
static __forceinline float4 tex2DLayeredGrad(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3718
static __forceinline float tex2DLayeredGrad(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3720
static __forceinline float tex2DLayeredGrad(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3722
static __forceinline float1 tex2DLayeredGrad(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3724
static __forceinline float1 tex2DLayeredGrad(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3726
static __forceinline float2 tex2DLayeredGrad(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3728
static __forceinline float2 tex2DLayeredGrad(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3730
static __forceinline float4 tex2DLayeredGrad(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3732
static __forceinline float4 tex2DLayeredGrad(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 3740
static __forceinline char tex3DGrad(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3742
static __forceinline signed char tex3DGrad(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3744
static __forceinline unsigned char tex3DGrad(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3746
static __forceinline char1 tex3DGrad(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3748
static __forceinline uchar1 tex3DGrad(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3750
static __forceinline char2 tex3DGrad(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3752
static __forceinline uchar2 tex3DGrad(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3754
static __forceinline char4 tex3DGrad(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3756
static __forceinline uchar4 tex3DGrad(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3764
static __forceinline short tex3DGrad(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3766
static __forceinline unsigned short tex3DGrad(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3768
static __forceinline short1 tex3DGrad(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3770
static __forceinline ushort1 tex3DGrad(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3772
static __forceinline short2 tex3DGrad(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3774
static __forceinline ushort2 tex3DGrad(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3776
static __forceinline short4 tex3DGrad(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3778
static __forceinline ushort4 tex3DGrad(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3786
static __forceinline int tex3DGrad(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3788
static __forceinline unsigned tex3DGrad(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3790
static __forceinline int1 tex3DGrad(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3792
static __forceinline uint1 tex3DGrad(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3794
static __forceinline int2 tex3DGrad(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3796
static __forceinline uint2 tex3DGrad(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3798
static __forceinline int4 tex3DGrad(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3800
static __forceinline uint4 tex3DGrad(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3810
static __forceinline long tex3DGrad(texture< long, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3812
static __forceinline unsigned long tex3DGrad(texture< unsigned long, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3814
static __forceinline long1 tex3DGrad(texture< long1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3816
static __forceinline ulong1 tex3DGrad(texture< ulong1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3818
static __forceinline long2 tex3DGrad(texture< long2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3820
static __forceinline ulong2 tex3DGrad(texture< ulong2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3822
static __forceinline long4 tex3DGrad(texture< long4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3824
static __forceinline ulong4 tex3DGrad(texture< ulong4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.h"
static __forceinline float tex3DGrad(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3836
static __forceinline float1 tex3DGrad(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3838
static __forceinline float2 tex3DGrad(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3840
static __forceinline float4 tex3DGrad(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3848
static __forceinline float tex3DGrad(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3850
static __forceinline float tex3DGrad(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3852
static __forceinline float tex3DGrad(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3854
static __forceinline float1 tex3DGrad(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3856
static __forceinline float1 tex3DGrad(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3858
static __forceinline float2 tex3DGrad(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3860
static __forceinline float2 tex3DGrad(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3862
static __forceinline float4 tex3DGrad(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3864
static __forceinline float4 tex3DGrad(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3872
static __forceinline float tex3DGrad(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3874
static __forceinline float tex3DGrad(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3876
static __forceinline float1 tex3DGrad(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3878
static __forceinline float1 tex3DGrad(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3880
static __forceinline float2 tex3DGrad(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3882
static __forceinline float2 tex3DGrad(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3884
static __forceinline float4 tex3DGrad(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 3886
static __forceinline float4 tex3DGrad(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 80 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex1Dfetch(texture< char, 1, cudaReadModeElementType>  t, int x) 
#line 81
{int volatile ___ = 1;(void)t;(void)x;
#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 88 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 89
} 
#endif
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex1Dfetch(texture< signed char, 1, cudaReadModeElementType>  t, int x) 
#line 92
{int volatile ___ = 1;(void)t;(void)x;
#line 96
::exit(___);}
#if 0
#line 92
{ 
#line 93
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 95
return (signed char)(v.x); 
#line 96
} 
#endif
#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex1Dfetch(texture< unsigned char, 1, cudaReadModeElementType>  t, int x) 
#line 99
{int volatile ___ = 1;(void)t;(void)x;
#line 103
::exit(___);}
#if 0
#line 99
{ 
#line 100
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 102
return (unsigned char)(v.x); 
#line 103
} 
#endif
#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex1Dfetch(texture< char1, 1, cudaReadModeElementType>  t, int x) 
#line 106
{int volatile ___ = 1;(void)t;(void)x;
#line 110
::exit(___);}
#if 0
#line 106
{ 
#line 107
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 109
return make_char1(v.x); 
#line 110
} 
#endif
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex1Dfetch(texture< uchar1, 1, cudaReadModeElementType>  t, int x) 
#line 113
{int volatile ___ = 1;(void)t;(void)x;
#line 117
::exit(___);}
#if 0
#line 113
{ 
#line 114
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 116
return make_uchar1(v.x); 
#line 117
} 
#endif
#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex1Dfetch(texture< char2, 1, cudaReadModeElementType>  t, int x) 
#line 120
{int volatile ___ = 1;(void)t;(void)x;
#line 124
::exit(___);}
#if 0
#line 120
{ 
#line 121
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 123
return make_char2(v.x, v.y); 
#line 124
} 
#endif
#line 126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex1Dfetch(texture< uchar2, 1, cudaReadModeElementType>  t, int x) 
#line 127
{int volatile ___ = 1;(void)t;(void)x;
#line 131
::exit(___);}
#if 0
#line 127
{ 
#line 128
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 130
return make_uchar2(v.x, v.y); 
#line 131
} 
#endif
#line 133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex1Dfetch(texture< char4, 1, cudaReadModeElementType>  t, int x) 
#line 134
{int volatile ___ = 1;(void)t;(void)x;
#line 138
::exit(___);}
#if 0
#line 134
{ 
#line 135
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 137
return make_char4(v.x, v.y, v.z, v.w); 
#line 138
} 
#endif
#line 140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex1Dfetch(texture< uchar4, 1, cudaReadModeElementType>  t, int x) 
#line 141
{int volatile ___ = 1;(void)t;(void)x;
#line 145
::exit(___);}
#if 0
#line 141
{ 
#line 142
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 144
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 145
} 
#endif
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex1Dfetch(texture< short, 1, cudaReadModeElementType>  t, int x) 
#line 154
{int volatile ___ = 1;(void)t;(void)x;
#line 158
::exit(___);}
#if 0
#line 154
{ 
#line 155
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 157
return (short)(v.x); 
#line 158
} 
#endif
#line 160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex1Dfetch(texture< unsigned short, 1, cudaReadModeElementType>  t, int x) 
#line 161
{int volatile ___ = 1;(void)t;(void)x;
#line 165
::exit(___);}
#if 0
#line 161
{ 
#line 162
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 164
return (unsigned short)(v.x); 
#line 165
} 
#endif
#line 167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex1Dfetch(texture< short1, 1, cudaReadModeElementType>  t, int x) 
#line 168
{int volatile ___ = 1;(void)t;(void)x;
#line 172
::exit(___);}
#if 0
#line 168
{ 
#line 169
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 171
return make_short1(v.x); 
#line 172
} 
#endif
#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex1Dfetch(texture< ushort1, 1, cudaReadModeElementType>  t, int x) 
#line 175
{int volatile ___ = 1;(void)t;(void)x;
#line 179
::exit(___);}
#if 0
#line 175
{ 
#line 176
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 178
return make_ushort1(v.x); 
#line 179
} 
#endif
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex1Dfetch(texture< short2, 1, cudaReadModeElementType>  t, int x) 
#line 182
{int volatile ___ = 1;(void)t;(void)x;
#line 186
::exit(___);}
#if 0
#line 182
{ 
#line 183
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 185
return make_short2(v.x, v.y); 
#line 186
} 
#endif
#line 188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex1Dfetch(texture< ushort2, 1, cudaReadModeElementType>  t, int x) 
#line 189
{int volatile ___ = 1;(void)t;(void)x;
#line 193
::exit(___);}
#if 0
#line 189
{ 
#line 190
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 192
return make_ushort2(v.x, v.y); 
#line 193
} 
#endif
#line 195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex1Dfetch(texture< short4, 1, cudaReadModeElementType>  t, int x) 
#line 196
{int volatile ___ = 1;(void)t;(void)x;
#line 200
::exit(___);}
#if 0
#line 196
{ 
#line 197
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 199
return make_short4(v.x, v.y, v.z, v.w); 
#line 200
} 
#endif
#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex1Dfetch(texture< ushort4, 1, cudaReadModeElementType>  t, int x) 
#line 203
{int volatile ___ = 1;(void)t;(void)x;
#line 207
::exit(___);}
#if 0
#line 203
{ 
#line 204
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 206
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 207
} 
#endif
#line 215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex1Dfetch(texture< int, 1, cudaReadModeElementType>  t, int x) 
#line 216
{int volatile ___ = 1;(void)t;(void)x;
#line 220
::exit(___);}
#if 0
#line 216
{ 
#line 217
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 219
return v.x; 
#line 220
} 
#endif
#line 222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex1Dfetch(texture< unsigned, 1, cudaReadModeElementType>  t, int x) 
#line 223
{int volatile ___ = 1;(void)t;(void)x;
#line 227
::exit(___);}
#if 0
#line 223
{ 
#line 224
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 226
return v.x; 
#line 227
} 
#endif
#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex1Dfetch(texture< int1, 1, cudaReadModeElementType>  t, int x) 
#line 230
{int volatile ___ = 1;(void)t;(void)x;
#line 234
::exit(___);}
#if 0
#line 230
{ 
#line 231
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 233
return make_int1(v.x); 
#line 234
} 
#endif
#line 236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex1Dfetch(texture< uint1, 1, cudaReadModeElementType>  t, int x) 
#line 237
{int volatile ___ = 1;(void)t;(void)x;
#line 241
::exit(___);}
#if 0
#line 237
{ 
#line 238
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 240
return make_uint1(v.x); 
#line 241
} 
#endif
#line 243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex1Dfetch(texture< int2, 1, cudaReadModeElementType>  t, int x) 
#line 244
{int volatile ___ = 1;(void)t;(void)x;
#line 248
::exit(___);}
#if 0
#line 244
{ 
#line 245
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 247
return make_int2(v.x, v.y); 
#line 248
} 
#endif
#line 250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex1Dfetch(texture< uint2, 1, cudaReadModeElementType>  t, int x) 
#line 251
{int volatile ___ = 1;(void)t;(void)x;
#line 255
::exit(___);}
#if 0
#line 251
{ 
#line 252
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 254
return make_uint2(v.x, v.y); 
#line 255
} 
#endif
#line 257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex1Dfetch(texture< int4, 1, cudaReadModeElementType>  t, int x) 
#line 258
{int volatile ___ = 1;(void)t;(void)x;
#line 262
::exit(___);}
#if 0
#line 258
{ 
#line 259
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 261
return make_int4(v.x, v.y, v.z, v.w); 
#line 262
} 
#endif
#line 264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex1Dfetch(texture< uint4, 1, cudaReadModeElementType>  t, int x) 
#line 265
{int volatile ___ = 1;(void)t;(void)x;
#line 269
::exit(___);}
#if 0
#line 265
{ 
#line 266
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 268
return make_uint4(v.x, v.y, v.z, v.w); 
#line 269
} 
#endif
#line 279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex1Dfetch(texture< long, 1, cudaReadModeElementType>  t, int x) 
#line 280
{int volatile ___ = 1;(void)t;(void)x;
#line 284
::exit(___);}
#if 0
#line 280
{ 
#line 281
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 283
return (long)(v.x); 
#line 284
} 
#endif
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex1Dfetch(texture< unsigned long, 1, cudaReadModeElementType>  t, int x) 
#line 287
{int volatile ___ = 1;(void)t;(void)x;
#line 291
::exit(___);}
#if 0
#line 287
{ 
#line 288
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 290
return (unsigned long)(v.x); 
#line 291
} 
#endif
#line 293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex1Dfetch(texture< long1, 1, cudaReadModeElementType>  t, int x) 
#line 294
{int volatile ___ = 1;(void)t;(void)x;
#line 298
::exit(___);}
#if 0
#line 294
{ 
#line 295
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 297
return make_long1(v.x); 
#line 298
} 
#endif
#line 300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex1Dfetch(texture< ulong1, 1, cudaReadModeElementType>  t, int x) 
#line 301
{int volatile ___ = 1;(void)t;(void)x;
#line 305
::exit(___);}
#if 0
#line 301
{ 
#line 302
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 304
return make_ulong1(v.x); 
#line 305
} 
#endif
#line 307 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex1Dfetch(texture< long2, 1, cudaReadModeElementType>  t, int x) 
#line 308
{int volatile ___ = 1;(void)t;(void)x;
#line 312
::exit(___);}
#if 0
#line 308
{ 
#line 309
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 311
return make_long2(v.x, v.y); 
#line 312
} 
#endif
#line 314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex1Dfetch(texture< ulong2, 1, cudaReadModeElementType>  t, int x) 
#line 315
{int volatile ___ = 1;(void)t;(void)x;
#line 319
::exit(___);}
#if 0
#line 315
{ 
#line 316
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 318
return make_ulong2(v.x, v.y); 
#line 319
} 
#endif
#line 321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex1Dfetch(texture< long4, 1, cudaReadModeElementType>  t, int x) 
#line 322
{int volatile ___ = 1;(void)t;(void)x;
#line 326
::exit(___);}
#if 0
#line 322
{ 
#line 323
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 325
return make_long4(v.x, v.y, v.z, v.w); 
#line 326
} 
#endif
#line 328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex1Dfetch(texture< ulong4, 1, cudaReadModeElementType>  t, int x) 
#line 329
{int volatile ___ = 1;(void)t;(void)x;
#line 333
::exit(___);}
#if 0
#line 329
{ 
#line 330
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 332
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 333
} 
#endif
#line 343 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1Dfetch(texture< float, 1, cudaReadModeElementType>  t, int x) 
#line 344
{int volatile ___ = 1;(void)t;(void)x;
#line 348
::exit(___);}
#if 0
#line 344
{ 
#line 345
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 347
return v.x; 
#line 348
} 
#endif
#line 350 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1Dfetch(texture< float1, 1, cudaReadModeElementType>  t, int x) 
#line 351
{int volatile ___ = 1;(void)t;(void)x;
#line 355
::exit(___);}
#if 0
#line 351
{ 
#line 352
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 354
return make_float1(v.x); 
#line 355
} 
#endif
#line 357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1Dfetch(texture< float2, 1, cudaReadModeElementType>  t, int x) 
#line 358
{int volatile ___ = 1;(void)t;(void)x;
#line 362
::exit(___);}
#if 0
#line 358
{ 
#line 359
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 361
return make_float2(v.x, v.y); 
#line 362
} 
#endif
#line 364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1Dfetch(texture< float4, 1, cudaReadModeElementType>  t, int x) 
#line 365
{int volatile ___ = 1;(void)t;(void)x;
#line 369
::exit(___);}
#if 0
#line 365
{ 
#line 366
float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 368
return make_float4(v.x, v.y, v.z, v.w); 
#line 369
} 
#endif
#line 377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1Dfetch(texture< char, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 378
{int volatile ___ = 1;(void)t;(void)x;
#line 387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 386
return w.x; 
#line 387
} 
#endif
#line 389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1Dfetch(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 390
{int volatile ___ = 1;(void)t;(void)x;
#line 395
::exit(___);}
#if 0
#line 390
{ 
#line 391
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 392
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 394
return w.x; 
#line 395
} 
#endif
#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1Dfetch(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 398
{int volatile ___ = 1;(void)t;(void)x;
#line 403
::exit(___);}
#if 0
#line 398
{ 
#line 399
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 400
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 402
return w.x; 
#line 403
} 
#endif
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1Dfetch(texture< char1, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 406
{int volatile ___ = 1;(void)t;(void)x;
#line 411
::exit(___);}
#if 0
#line 406
{ 
#line 407
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 408
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 410
return make_float1(w.x); 
#line 411
} 
#endif
#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1Dfetch(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 414
{int volatile ___ = 1;(void)t;(void)x;
#line 419
::exit(___);}
#if 0
#line 414
{ 
#line 415
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 416
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 418
return make_float1(w.x); 
#line 419
} 
#endif
#line 421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1Dfetch(texture< char2, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 422
{int volatile ___ = 1;(void)t;(void)x;
#line 427
::exit(___);}
#if 0
#line 422
{ 
#line 423
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 424
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 426
return make_float2(w.x, w.y); 
#line 427
} 
#endif
#line 429 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1Dfetch(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 430
{int volatile ___ = 1;(void)t;(void)x;
#line 435
::exit(___);}
#if 0
#line 430
{ 
#line 431
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 432
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 434
return make_float2(w.x, w.y); 
#line 435
} 
#endif
#line 437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1Dfetch(texture< char4, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 438
{int volatile ___ = 1;(void)t;(void)x;
#line 443
::exit(___);}
#if 0
#line 438
{ 
#line 439
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 440
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 442
return make_float4(w.x, w.y, w.z, w.w); 
#line 443
} 
#endif
#line 445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1Dfetch(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 446
{int volatile ___ = 1;(void)t;(void)x;
#line 451
::exit(___);}
#if 0
#line 446
{ 
#line 447
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 448
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 450
return make_float4(w.x, w.y, w.z, w.w); 
#line 451
} 
#endif
#line 459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1Dfetch(texture< short, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 460
{int volatile ___ = 1;(void)t;(void)x;
#line 465
::exit(___);}
#if 0
#line 460
{ 
#line 461
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 462
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 464
return w.x; 
#line 465
} 
#endif
#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1Dfetch(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 468
{int volatile ___ = 1;(void)t;(void)x;
#line 473
::exit(___);}
#if 0
#line 468
{ 
#line 469
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 470
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 472
return w.x; 
#line 473
} 
#endif
#line 475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1Dfetch(texture< short1, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 476
{int volatile ___ = 1;(void)t;(void)x;
#line 481
::exit(___);}
#if 0
#line 476
{ 
#line 477
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 478
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 480
return make_float1(w.x); 
#line 481
} 
#endif
#line 483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1Dfetch(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 484
{int volatile ___ = 1;(void)t;(void)x;
#line 489
::exit(___);}
#if 0
#line 484
{ 
#line 485
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 486
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 488
return make_float1(w.x); 
#line 489
} 
#endif
#line 491 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1Dfetch(texture< short2, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 492
{int volatile ___ = 1;(void)t;(void)x;
#line 497
::exit(___);}
#if 0
#line 492
{ 
#line 493
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 494
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 496
return make_float2(w.x, w.y); 
#line 497
} 
#endif
#line 499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1Dfetch(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 500
{int volatile ___ = 1;(void)t;(void)x;
#line 505
::exit(___);}
#if 0
#line 500
{ 
#line 501
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 502
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 504
return make_float2(w.x, w.y); 
#line 505
} 
#endif
#line 507 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1Dfetch(texture< short4, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 508
{int volatile ___ = 1;(void)t;(void)x;
#line 513
::exit(___);}
#if 0
#line 508
{ 
#line 509
int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 510
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 512
return make_float4(w.x, w.y, w.z, w.w); 
#line 513
} 
#endif
#line 515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1Dfetch(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, int x) 
#line 516
{int volatile ___ = 1;(void)t;(void)x;
#line 521
::exit(___);}
#if 0
#line 516
{ 
#line 517
uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0)); 
#line 518
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 520
return make_float4(w.x, w.y, w.z, w.w); 
#line 521
} 
#endif
#line 529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex1D(texture< char, 1, cudaReadModeElementType>  t, float x) 
#line 530
{int volatile ___ = 1;(void)t;(void)x;
#line 538 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 537 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 538
} 
#endif
#line 540 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex1D(texture< signed char, 1, cudaReadModeElementType>  t, float x) 
#line 541
{int volatile ___ = 1;(void)t;(void)x;
#line 545
::exit(___);}
#if 0
#line 541
{ 
#line 542
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 544
return (signed char)(v.x); 
#line 545
} 
#endif
#line 547 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex1D(texture< unsigned char, 1, cudaReadModeElementType>  t, float x) 
#line 548
{int volatile ___ = 1;(void)t;(void)x;
#line 552
::exit(___);}
#if 0
#line 548
{ 
#line 549
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 551
return (unsigned char)(v.x); 
#line 552
} 
#endif
#line 554 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex1D(texture< char1, 1, cudaReadModeElementType>  t, float x) 
#line 555
{int volatile ___ = 1;(void)t;(void)x;
#line 559
::exit(___);}
#if 0
#line 555
{ 
#line 556
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 558
return make_char1(v.x); 
#line 559
} 
#endif
#line 561 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex1D(texture< uchar1, 1, cudaReadModeElementType>  t, float x) 
#line 562
{int volatile ___ = 1;(void)t;(void)x;
#line 566
::exit(___);}
#if 0
#line 562
{ 
#line 563
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 565
return make_uchar1(v.x); 
#line 566
} 
#endif
#line 568 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex1D(texture< char2, 1, cudaReadModeElementType>  t, float x) 
#line 569
{int volatile ___ = 1;(void)t;(void)x;
#line 573
::exit(___);}
#if 0
#line 569
{ 
#line 570
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 572
return make_char2(v.x, v.y); 
#line 573
} 
#endif
#line 575 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex1D(texture< uchar2, 1, cudaReadModeElementType>  t, float x) 
#line 576
{int volatile ___ = 1;(void)t;(void)x;
#line 580
::exit(___);}
#if 0
#line 576
{ 
#line 577
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 579
return make_uchar2(v.x, v.y); 
#line 580
} 
#endif
#line 582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex1D(texture< char4, 1, cudaReadModeElementType>  t, float x) 
#line 583
{int volatile ___ = 1;(void)t;(void)x;
#line 587
::exit(___);}
#if 0
#line 583
{ 
#line 584
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 586
return make_char4(v.x, v.y, v.z, v.w); 
#line 587
} 
#endif
#line 589 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex1D(texture< uchar4, 1, cudaReadModeElementType>  t, float x) 
#line 590
{int volatile ___ = 1;(void)t;(void)x;
#line 594
::exit(___);}
#if 0
#line 590
{ 
#line 591
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 593
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 594
} 
#endif
#line 602 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex1D(texture< short, 1, cudaReadModeElementType>  t, float x) 
#line 603
{int volatile ___ = 1;(void)t;(void)x;
#line 607
::exit(___);}
#if 0
#line 603
{ 
#line 604
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 606
return (short)(v.x); 
#line 607
} 
#endif
#line 609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex1D(texture< unsigned short, 1, cudaReadModeElementType>  t, float x) 
#line 610
{int volatile ___ = 1;(void)t;(void)x;
#line 614
::exit(___);}
#if 0
#line 610
{ 
#line 611
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 613
return (unsigned short)(v.x); 
#line 614
} 
#endif
#line 616 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex1D(texture< short1, 1, cudaReadModeElementType>  t, float x) 
#line 617
{int volatile ___ = 1;(void)t;(void)x;
#line 621
::exit(___);}
#if 0
#line 617
{ 
#line 618
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 620
return make_short1(v.x); 
#line 621
} 
#endif
#line 623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex1D(texture< ushort1, 1, cudaReadModeElementType>  t, float x) 
#line 624
{int volatile ___ = 1;(void)t;(void)x;
#line 628
::exit(___);}
#if 0
#line 624
{ 
#line 625
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 627
return make_ushort1(v.x); 
#line 628
} 
#endif
#line 630 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex1D(texture< short2, 1, cudaReadModeElementType>  t, float x) 
#line 631
{int volatile ___ = 1;(void)t;(void)x;
#line 635
::exit(___);}
#if 0
#line 631
{ 
#line 632
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 634
return make_short2(v.x, v.y); 
#line 635
} 
#endif
#line 637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex1D(texture< ushort2, 1, cudaReadModeElementType>  t, float x) 
#line 638
{int volatile ___ = 1;(void)t;(void)x;
#line 642
::exit(___);}
#if 0
#line 638
{ 
#line 639
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 641
return make_ushort2(v.x, v.y); 
#line 642
} 
#endif
#line 644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex1D(texture< short4, 1, cudaReadModeElementType>  t, float x) 
#line 645
{int volatile ___ = 1;(void)t;(void)x;
#line 649
::exit(___);}
#if 0
#line 645
{ 
#line 646
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 648
return make_short4(v.x, v.y, v.z, v.w); 
#line 649
} 
#endif
#line 651 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex1D(texture< ushort4, 1, cudaReadModeElementType>  t, float x) 
#line 652
{int volatile ___ = 1;(void)t;(void)x;
#line 656
::exit(___);}
#if 0
#line 652
{ 
#line 653
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 655
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 656
} 
#endif
#line 664 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex1D(texture< int, 1, cudaReadModeElementType>  t, float x) 
#line 665
{int volatile ___ = 1;(void)t;(void)x;
#line 669
::exit(___);}
#if 0
#line 665
{ 
#line 666
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 668
return v.x; 
#line 669
} 
#endif
#line 671 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex1D(texture< unsigned, 1, cudaReadModeElementType>  t, float x) 
#line 672
{int volatile ___ = 1;(void)t;(void)x;
#line 676
::exit(___);}
#if 0
#line 672
{ 
#line 673
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 675
return v.x; 
#line 676
} 
#endif
#line 678 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex1D(texture< int1, 1, cudaReadModeElementType>  t, float x) 
#line 679
{int volatile ___ = 1;(void)t;(void)x;
#line 683
::exit(___);}
#if 0
#line 679
{ 
#line 680
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 682
return make_int1(v.x); 
#line 683
} 
#endif
#line 685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex1D(texture< uint1, 1, cudaReadModeElementType>  t, float x) 
#line 686
{int volatile ___ = 1;(void)t;(void)x;
#line 690
::exit(___);}
#if 0
#line 686
{ 
#line 687
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 689
return make_uint1(v.x); 
#line 690
} 
#endif
#line 692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex1D(texture< int2, 1, cudaReadModeElementType>  t, float x) 
#line 693
{int volatile ___ = 1;(void)t;(void)x;
#line 697
::exit(___);}
#if 0
#line 693
{ 
#line 694
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 696
return make_int2(v.x, v.y); 
#line 697
} 
#endif
#line 699 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex1D(texture< uint2, 1, cudaReadModeElementType>  t, float x) 
#line 700
{int volatile ___ = 1;(void)t;(void)x;
#line 704
::exit(___);}
#if 0
#line 700
{ 
#line 701
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 703
return make_uint2(v.x, v.y); 
#line 704
} 
#endif
#line 706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex1D(texture< int4, 1, cudaReadModeElementType>  t, float x) 
#line 707
{int volatile ___ = 1;(void)t;(void)x;
#line 711
::exit(___);}
#if 0
#line 707
{ 
#line 708
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 710
return make_int4(v.x, v.y, v.z, v.w); 
#line 711
} 
#endif
#line 713 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex1D(texture< uint4, 1, cudaReadModeElementType>  t, float x) 
#line 714
{int volatile ___ = 1;(void)t;(void)x;
#line 718
::exit(___);}
#if 0
#line 714
{ 
#line 715
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 717
return make_uint4(v.x, v.y, v.z, v.w); 
#line 718
} 
#endif
#line 734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex1D(texture< long, 1, cudaReadModeElementType>  t, float x) 
#line 735
{int volatile ___ = 1;(void)t;(void)x;
#line 739
::exit(___);}
#if 0
#line 735
{ 
#line 736
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 738
return (long)(v.x); 
#line 739
} 
#endif
#line 741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex1D(texture< unsigned long, 1, cudaReadModeElementType>  t, float x) 
#line 742
{int volatile ___ = 1;(void)t;(void)x;
#line 746
::exit(___);}
#if 0
#line 742
{ 
#line 743
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 745
return (unsigned long)(v.x); 
#line 746
} 
#endif
#line 748 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex1D(texture< long1, 1, cudaReadModeElementType>  t, float x) 
#line 749
{int volatile ___ = 1;(void)t;(void)x;
#line 753
::exit(___);}
#if 0
#line 749
{ 
#line 750
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 752
return make_long1(v.x); 
#line 753
} 
#endif
#line 755 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex1D(texture< ulong1, 1, cudaReadModeElementType>  t, float x) 
#line 756
{int volatile ___ = 1;(void)t;(void)x;
#line 760
::exit(___);}
#if 0
#line 756
{ 
#line 757
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 759
return make_ulong1(v.x); 
#line 760
} 
#endif
#line 762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex1D(texture< long2, 1, cudaReadModeElementType>  t, float x) 
#line 763
{int volatile ___ = 1;(void)t;(void)x;
#line 767
::exit(___);}
#if 0
#line 763
{ 
#line 764
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 766
return make_long2(v.x, v.y); 
#line 767
} 
#endif
#line 769 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex1D(texture< ulong2, 1, cudaReadModeElementType>  t, float x) 
#line 770
{int volatile ___ = 1;(void)t;(void)x;
#line 774
::exit(___);}
#if 0
#line 770
{ 
#line 771
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 773
return make_ulong2(v.x, v.y); 
#line 774
} 
#endif
#line 776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex1D(texture< long4, 1, cudaReadModeElementType>  t, float x) 
#line 777
{int volatile ___ = 1;(void)t;(void)x;
#line 781
::exit(___);}
#if 0
#line 777
{ 
#line 778
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 780
return make_long4(v.x, v.y, v.z, v.w); 
#line 781
} 
#endif
#line 783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex1D(texture< ulong4, 1, cudaReadModeElementType>  t, float x) 
#line 784
{int volatile ___ = 1;(void)t;(void)x;
#line 788
::exit(___);}
#if 0
#line 784
{ 
#line 785
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 787
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 788
} 
#endif
#line 798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1D(texture< float, 1, cudaReadModeElementType>  t, float x) 
#line 799
{int volatile ___ = 1;(void)t;(void)x;
#line 803
::exit(___);}
#if 0
#line 799
{ 
#line 800
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
#line 802
return v.x; 
#line 803
} 
#endif
#line 805 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1D(texture< float1, 1, cudaReadModeElementType>  t, float x) 
#line 806
{int volatile ___ = 1;(void)t;(void)x;
#line 810
::exit(___);}
#if 0
#line 806
{ 
#line 807
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
#line 809
return make_float1(v.x); 
#line 810
} 
#endif
#line 812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1D(texture< float2, 1, cudaReadModeElementType>  t, float x) 
#line 813
{int volatile ___ = 1;(void)t;(void)x;
#line 817
::exit(___);}
#if 0
#line 813
{ 
#line 814
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
#line 816
return make_float2(v.x, v.y); 
#line 817
} 
#endif
#line 819 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1D(texture< float4, 1, cudaReadModeElementType>  t, float x) 
#line 820
{int volatile ___ = 1;(void)t;(void)x;
#line 824
::exit(___);}
#if 0
#line 820
{ 
#line 821
float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0)); 
#line 823
return make_float4(v.x, v.y, v.z, v.w); 
#line 824
} 
#endif
#line 832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1D(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 833
{int volatile ___ = 1;(void)t;(void)x;
#line 842 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 833 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 837 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 839 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 841
return w.x; 
#line 842
} 
#endif
#line 844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1D(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 845
{int volatile ___ = 1;(void)t;(void)x;
#line 850
::exit(___);}
#if 0
#line 845
{ 
#line 846
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 847
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 849
return w.x; 
#line 850
} 
#endif
#line 852 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1D(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 853
{int volatile ___ = 1;(void)t;(void)x;
#line 858
::exit(___);}
#if 0
#line 853
{ 
#line 854
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 855
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 857
return w.x; 
#line 858
} 
#endif
#line 860 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1D(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 861
{int volatile ___ = 1;(void)t;(void)x;
#line 866
::exit(___);}
#if 0
#line 861
{ 
#line 862
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 863
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 865
return make_float1(w.x); 
#line 866
} 
#endif
#line 868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1D(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 869
{int volatile ___ = 1;(void)t;(void)x;
#line 874
::exit(___);}
#if 0
#line 869
{ 
#line 870
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 871
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 873
return make_float1(w.x); 
#line 874
} 
#endif
#line 876 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1D(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 877
{int volatile ___ = 1;(void)t;(void)x;
#line 882
::exit(___);}
#if 0
#line 877
{ 
#line 878
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 879
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 881
return make_float2(w.x, w.y); 
#line 882
} 
#endif
#line 884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1D(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 885
{int volatile ___ = 1;(void)t;(void)x;
#line 890
::exit(___);}
#if 0
#line 885
{ 
#line 886
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 887
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 889
return make_float2(w.x, w.y); 
#line 890
} 
#endif
#line 892 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1D(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 893
{int volatile ___ = 1;(void)t;(void)x;
#line 898
::exit(___);}
#if 0
#line 893
{ 
#line 894
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 895
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 897
return make_float4(w.x, w.y, w.z, w.w); 
#line 898
} 
#endif
#line 900 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1D(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 901
{int volatile ___ = 1;(void)t;(void)x;
#line 906
::exit(___);}
#if 0
#line 901
{ 
#line 902
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 903
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 905
return make_float4(w.x, w.y, w.z, w.w); 
#line 906
} 
#endif
#line 914 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1D(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 915
{int volatile ___ = 1;(void)t;(void)x;
#line 920
::exit(___);}
#if 0
#line 915
{ 
#line 916
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 917
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 919
return w.x; 
#line 920
} 
#endif
#line 922 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1D(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 923
{int volatile ___ = 1;(void)t;(void)x;
#line 928
::exit(___);}
#if 0
#line 923
{ 
#line 924
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 925
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 927
return w.x; 
#line 928
} 
#endif
#line 930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1D(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 931
{int volatile ___ = 1;(void)t;(void)x;
#line 936
::exit(___);}
#if 0
#line 931
{ 
#line 932
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 933
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 935
return make_float1(w.x); 
#line 936
} 
#endif
#line 938 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1D(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 939
{int volatile ___ = 1;(void)t;(void)x;
#line 944
::exit(___);}
#if 0
#line 939
{ 
#line 940
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 941
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 943
return make_float1(w.x); 
#line 944
} 
#endif
#line 946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1D(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 947
{int volatile ___ = 1;(void)t;(void)x;
#line 952
::exit(___);}
#if 0
#line 947
{ 
#line 948
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 949
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 951
return make_float2(w.x, w.y); 
#line 952
} 
#endif
#line 954 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1D(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 955
{int volatile ___ = 1;(void)t;(void)x;
#line 960
::exit(___);}
#if 0
#line 955
{ 
#line 956
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 957
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 959
return make_float2(w.x, w.y); 
#line 960
} 
#endif
#line 962 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1D(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 963
{int volatile ___ = 1;(void)t;(void)x;
#line 968
::exit(___);}
#if 0
#line 963
{ 
#line 964
int4 v = __itexfetch(t, make_float4(x, 0, 0, 0)); 
#line 965
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 967
return make_float4(w.x, w.y, w.z, w.w); 
#line 968
} 
#endif
#line 970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1D(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x) 
#line 971
{int volatile ___ = 1;(void)t;(void)x;
#line 976
::exit(___);}
#if 0
#line 971
{ 
#line 972
uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0)); 
#line 973
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 975
return make_float4(w.x, w.y, w.z, w.w); 
#line 976
} 
#endif
#line 984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex2D(texture< char, 2, cudaReadModeElementType>  t, float x, float y) 
#line 985
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 993 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 989 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 993
} 
#endif
#line 995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex2D(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y) 
#line 996
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1000
::exit(___);}
#if 0
#line 996
{ 
#line 997
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 999
return (signed char)(v.x); 
#line 1000
} 
#endif
#line 1002 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex2D(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1003
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1007
::exit(___);}
#if 0
#line 1003
{ 
#line 1004
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1006
return (unsigned char)(v.x); 
#line 1007
} 
#endif
#line 1009 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex2D(texture< char1, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1010
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1014
::exit(___);}
#if 0
#line 1010
{ 
#line 1011
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1013
return make_char1(v.x); 
#line 1014
} 
#endif
#line 1016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex2D(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1017
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1021
::exit(___);}
#if 0
#line 1017
{ 
#line 1018
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1020
return make_uchar1(v.x); 
#line 1021
} 
#endif
#line 1023 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex2D(texture< char2, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1024
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1028
::exit(___);}
#if 0
#line 1024
{ 
#line 1025
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1027
return make_char2(v.x, v.y); 
#line 1028
} 
#endif
#line 1030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex2D(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1031
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1035
::exit(___);}
#if 0
#line 1031
{ 
#line 1032
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1034
return make_uchar2(v.x, v.y); 
#line 1035
} 
#endif
#line 1037 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex2D(texture< char4, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1038
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1042
::exit(___);}
#if 0
#line 1038
{ 
#line 1039
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1041
return make_char4(v.x, v.y, v.z, v.w); 
#line 1042
} 
#endif
#line 1044 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex2D(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1045
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1049
::exit(___);}
#if 0
#line 1045
{ 
#line 1046
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1048
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 1049
} 
#endif
#line 1057 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex2D(texture< short, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1058
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1062
::exit(___);}
#if 0
#line 1058
{ 
#line 1059
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1061
return (short)(v.x); 
#line 1062
} 
#endif
#line 1064 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex2D(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1065
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1069
::exit(___);}
#if 0
#line 1065
{ 
#line 1066
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1068
return (unsigned short)(v.x); 
#line 1069
} 
#endif
#line 1071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex2D(texture< short1, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1072
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1076
::exit(___);}
#if 0
#line 1072
{ 
#line 1073
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1075
return make_short1(v.x); 
#line 1076
} 
#endif
#line 1078 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex2D(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1079
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1083
::exit(___);}
#if 0
#line 1079
{ 
#line 1080
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1082
return make_ushort1(v.x); 
#line 1083
} 
#endif
#line 1085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex2D(texture< short2, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1086
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1090
::exit(___);}
#if 0
#line 1086
{ 
#line 1087
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1089
return make_short2(v.x, v.y); 
#line 1090
} 
#endif
#line 1092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex2D(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1093
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1097
::exit(___);}
#if 0
#line 1093
{ 
#line 1094
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1096
return make_ushort2(v.x, v.y); 
#line 1097
} 
#endif
#line 1099 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex2D(texture< short4, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1100
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1104
::exit(___);}
#if 0
#line 1100
{ 
#line 1101
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1103
return make_short4(v.x, v.y, v.z, v.w); 
#line 1104
} 
#endif
#line 1106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex2D(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1107
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1111
::exit(___);}
#if 0
#line 1107
{ 
#line 1108
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1110
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 1111
} 
#endif
#line 1119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex2D(texture< int, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1120
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1124
::exit(___);}
#if 0
#line 1120
{ 
#line 1121
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1123
return v.x; 
#line 1124
} 
#endif
#line 1126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex2D(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1127
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1131
::exit(___);}
#if 0
#line 1127
{ 
#line 1128
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1130
return v.x; 
#line 1131
} 
#endif
#line 1133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex2D(texture< int1, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1134
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1138
::exit(___);}
#if 0
#line 1134
{ 
#line 1135
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1137
return make_int1(v.x); 
#line 1138
} 
#endif
#line 1140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex2D(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1141
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1145
::exit(___);}
#if 0
#line 1141
{ 
#line 1142
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1144
return make_uint1(v.x); 
#line 1145
} 
#endif
#line 1147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex2D(texture< int2, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1148
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1152
::exit(___);}
#if 0
#line 1148
{ 
#line 1149
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1151
return make_int2(v.x, v.y); 
#line 1152
} 
#endif
#line 1154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex2D(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1155
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1159
::exit(___);}
#if 0
#line 1155
{ 
#line 1156
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1158
return make_uint2(v.x, v.y); 
#line 1159
} 
#endif
#line 1161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex2D(texture< int4, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1162
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1166
::exit(___);}
#if 0
#line 1162
{ 
#line 1163
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1165
return make_int4(v.x, v.y, v.z, v.w); 
#line 1166
} 
#endif
#line 1168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex2D(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1169
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1173
::exit(___);}
#if 0
#line 1169
{ 
#line 1170
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1172
return make_uint4(v.x, v.y, v.z, v.w); 
#line 1173
} 
#endif
#line 1183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex2D(texture< long, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1184
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1188
::exit(___);}
#if 0
#line 1184
{ 
#line 1185
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1187
return (long)(v.x); 
#line 1188
} 
#endif
#line 1190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex2D(texture< unsigned long, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1191
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1195
::exit(___);}
#if 0
#line 1191
{ 
#line 1192
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1194
return (unsigned long)(v.x); 
#line 1195
} 
#endif
#line 1197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex2D(texture< long1, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1198
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1202
::exit(___);}
#if 0
#line 1198
{ 
#line 1199
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1201
return make_long1(v.x); 
#line 1202
} 
#endif
#line 1204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex2D(texture< ulong1, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1205
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1209
::exit(___);}
#if 0
#line 1205
{ 
#line 1206
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1208
return make_ulong1(v.x); 
#line 1209
} 
#endif
#line 1211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex2D(texture< long2, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1212
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1216
::exit(___);}
#if 0
#line 1212
{ 
#line 1213
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1215
return make_long2(v.x, v.y); 
#line 1216
} 
#endif
#line 1218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex2D(texture< ulong2, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1219
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1223
::exit(___);}
#if 0
#line 1219
{ 
#line 1220
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1222
return make_ulong2(v.x, v.y); 
#line 1223
} 
#endif
#line 1225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex2D(texture< long4, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1226
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1230
::exit(___);}
#if 0
#line 1226
{ 
#line 1227
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1229
return make_long4(v.x, v.y, v.z, v.w); 
#line 1230
} 
#endif
#line 1232 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex2D(texture< ulong4, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1233
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1237
::exit(___);}
#if 0
#line 1233
{ 
#line 1234
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1236
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 1237
} 
#endif
#line 1247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2D(texture< float, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1248
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1252
::exit(___);}
#if 0
#line 1248
{ 
#line 1249
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
#line 1251
return v.x; 
#line 1252
} 
#endif
#line 1254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2D(texture< float1, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1255
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1259
::exit(___);}
#if 0
#line 1255
{ 
#line 1256
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
#line 1258
return make_float1(v.x); 
#line 1259
} 
#endif
#line 1261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2D(texture< float2, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1262
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1266
::exit(___);}
#if 0
#line 1262
{ 
#line 1263
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
#line 1265
return make_float2(v.x, v.y); 
#line 1266
} 
#endif
#line 1268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2D(texture< float4, 2, cudaReadModeElementType>  t, float x, float y) 
#line 1269
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1273
::exit(___);}
#if 0
#line 1269
{ 
#line 1270
float4 v = __ftexfetch(t, make_float4(x, y, 0, 0)); 
#line 1272
return make_float4(v.x, v.y, v.z, v.w); 
#line 1273
} 
#endif
#line 1281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2D(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1282
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 1282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 1286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1290
return w.x; 
#line 1291
} 
#endif
#line 1293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2D(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1294
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1299
::exit(___);}
#if 0
#line 1294
{ 
#line 1295
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1296
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1298
return w.x; 
#line 1299
} 
#endif
#line 1301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2D(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1302
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1307
::exit(___);}
#if 0
#line 1302
{ 
#line 1303
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1304
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1306
return w.x; 
#line 1307
} 
#endif
#line 1309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2D(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1310
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1315
::exit(___);}
#if 0
#line 1310
{ 
#line 1311
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1312
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1314
return make_float1(w.x); 
#line 1315
} 
#endif
#line 1317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2D(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1318
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1323
::exit(___);}
#if 0
#line 1318
{ 
#line 1319
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1320
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1322
return make_float1(w.x); 
#line 1323
} 
#endif
#line 1325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2D(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1326
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1331
::exit(___);}
#if 0
#line 1326
{ 
#line 1327
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1328
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1330
return make_float2(w.x, w.y); 
#line 1331
} 
#endif
#line 1333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2D(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1334
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1339
::exit(___);}
#if 0
#line 1334
{ 
#line 1335
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1336
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1338
return make_float2(w.x, w.y); 
#line 1339
} 
#endif
#line 1341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2D(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1342
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1347
::exit(___);}
#if 0
#line 1342
{ 
#line 1343
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1344
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1346
return make_float4(w.x, w.y, w.z, w.w); 
#line 1347
} 
#endif
#line 1349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2D(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1350
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1355
::exit(___);}
#if 0
#line 1350
{ 
#line 1351
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1352
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1354
return make_float4(w.x, w.y, w.z, w.w); 
#line 1355
} 
#endif
#line 1363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2D(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1364
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1369
::exit(___);}
#if 0
#line 1364
{ 
#line 1365
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1366
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1368
return w.x; 
#line 1369
} 
#endif
#line 1371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2D(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1372
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1377
::exit(___);}
#if 0
#line 1372
{ 
#line 1373
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1374
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1376
return w.x; 
#line 1377
} 
#endif
#line 1379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2D(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1380
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1385
::exit(___);}
#if 0
#line 1380
{ 
#line 1381
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1382
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1384
return make_float1(w.x); 
#line 1385
} 
#endif
#line 1387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2D(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1388
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1393
::exit(___);}
#if 0
#line 1388
{ 
#line 1389
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1390
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1392
return make_float1(w.x); 
#line 1393
} 
#endif
#line 1395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2D(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1396
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1401
::exit(___);}
#if 0
#line 1396
{ 
#line 1397
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1398
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1400
return make_float2(w.x, w.y); 
#line 1401
} 
#endif
#line 1403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2D(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1404
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1409
::exit(___);}
#if 0
#line 1404
{ 
#line 1405
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1406
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1408
return make_float2(w.x, w.y); 
#line 1409
} 
#endif
#line 1411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2D(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1412
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1417
::exit(___);}
#if 0
#line 1412
{ 
#line 1413
int4 v = __itexfetch(t, make_float4(x, y, 0, 0)); 
#line 1414
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1416
return make_float4(w.x, w.y, w.z, w.w); 
#line 1417
} 
#endif
#line 1419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2D(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y) 
#line 1420
{int volatile ___ = 1;(void)t;(void)x;(void)y;
#line 1425
::exit(___);}
#if 0
#line 1420
{ 
#line 1421
uint4 v = __utexfetch(t, make_float4(x, y, 0, 0)); 
#line 1422
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1424
return make_float4(w.x, w.y, w.z, w.w); 
#line 1425
} 
#endif
#line 1433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex1DLayered(texture< char, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1434
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1442 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 1434 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 1438 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 1442
} 
#endif
#line 1444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex1DLayered(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1445
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1449
::exit(___);}
#if 0
#line 1445
{ 
#line 1446
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1448
return (signed char)(v.x); 
#line 1449
} 
#endif
#line 1451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex1DLayered(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1452
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1456
::exit(___);}
#if 0
#line 1452
{ 
#line 1453
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1455
return (unsigned char)(v.x); 
#line 1456
} 
#endif
#line 1458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex1DLayered(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1459
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1463
::exit(___);}
#if 0
#line 1459
{ 
#line 1460
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1462
return make_char1(v.x); 
#line 1463
} 
#endif
#line 1465 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex1DLayered(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1466
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1470
::exit(___);}
#if 0
#line 1466
{ 
#line 1467
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1469
return make_uchar1(v.x); 
#line 1470
} 
#endif
#line 1472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex1DLayered(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1473
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1477
::exit(___);}
#if 0
#line 1473
{ 
#line 1474
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1476
return make_char2(v.x, v.y); 
#line 1477
} 
#endif
#line 1479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex1DLayered(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1480
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1484
::exit(___);}
#if 0
#line 1480
{ 
#line 1481
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1483
return make_uchar2(v.x, v.y); 
#line 1484
} 
#endif
#line 1486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex1DLayered(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1487
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1491
::exit(___);}
#if 0
#line 1487
{ 
#line 1488
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1490
return make_char4(v.x, v.y, v.z, v.w); 
#line 1491
} 
#endif
#line 1493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex1DLayered(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1494
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1498
::exit(___);}
#if 0
#line 1494
{ 
#line 1495
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1497
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 1498
} 
#endif
#line 1506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex1DLayered(texture< short, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1507
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1511
::exit(___);}
#if 0
#line 1507
{ 
#line 1508
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1510
return (short)(v.x); 
#line 1511
} 
#endif
#line 1513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex1DLayered(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1514
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1518
::exit(___);}
#if 0
#line 1514
{ 
#line 1515
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1517
return (unsigned short)(v.x); 
#line 1518
} 
#endif
#line 1520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex1DLayered(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1521
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1525
::exit(___);}
#if 0
#line 1521
{ 
#line 1522
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1524
return make_short1(v.x); 
#line 1525
} 
#endif
#line 1527 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex1DLayered(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1528
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1532
::exit(___);}
#if 0
#line 1528
{ 
#line 1529
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1531
return make_ushort1(v.x); 
#line 1532
} 
#endif
#line 1534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex1DLayered(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1535
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1539
::exit(___);}
#if 0
#line 1535
{ 
#line 1536
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1538
return make_short2(v.x, v.y); 
#line 1539
} 
#endif
#line 1541 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex1DLayered(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1542
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1546
::exit(___);}
#if 0
#line 1542
{ 
#line 1543
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1545
return make_ushort2(v.x, v.y); 
#line 1546
} 
#endif
#line 1548 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex1DLayered(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1549
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1553
::exit(___);}
#if 0
#line 1549
{ 
#line 1550
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1552
return make_short4(v.x, v.y, v.z, v.w); 
#line 1553
} 
#endif
#line 1555 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex1DLayered(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1556
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1560
::exit(___);}
#if 0
#line 1556
{ 
#line 1557
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1559
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 1560
} 
#endif
#line 1568 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex1DLayered(texture< int, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1569
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1573
::exit(___);}
#if 0
#line 1569
{ 
#line 1570
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1572
return v.x; 
#line 1573
} 
#endif
#line 1575 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex1DLayered(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1576
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1580
::exit(___);}
#if 0
#line 1576
{ 
#line 1577
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1579
return v.x; 
#line 1580
} 
#endif
#line 1582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex1DLayered(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1583
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1587
::exit(___);}
#if 0
#line 1583
{ 
#line 1584
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1586
return make_int1(v.x); 
#line 1587
} 
#endif
#line 1589 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex1DLayered(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1590
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1594
::exit(___);}
#if 0
#line 1590
{ 
#line 1591
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1593
return make_uint1(v.x); 
#line 1594
} 
#endif
#line 1596 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex1DLayered(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1597
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1601
::exit(___);}
#if 0
#line 1597
{ 
#line 1598
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1600
return make_int2(v.x, v.y); 
#line 1601
} 
#endif
#line 1603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex1DLayered(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1604
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1608
::exit(___);}
#if 0
#line 1604
{ 
#line 1605
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1607
return make_uint2(v.x, v.y); 
#line 1608
} 
#endif
#line 1610 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex1DLayered(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1611
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1615
::exit(___);}
#if 0
#line 1611
{ 
#line 1612
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1614
return make_int4(v.x, v.y, v.z, v.w); 
#line 1615
} 
#endif
#line 1617 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex1DLayered(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1618
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1622
::exit(___);}
#if 0
#line 1618
{ 
#line 1619
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1621
return make_uint4(v.x, v.y, v.z, v.w); 
#line 1622
} 
#endif
#line 1632 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex1DLayered(texture< long, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1633
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1637
::exit(___);}
#if 0
#line 1633
{ 
#line 1634
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1636
return (long)(v.x); 
#line 1637
} 
#endif
#line 1639 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex1DLayered(texture< unsigned long, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1640
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1644
::exit(___);}
#if 0
#line 1640
{ 
#line 1641
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1643
return (unsigned long)(v.x); 
#line 1644
} 
#endif
#line 1646 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex1DLayered(texture< long1, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1647
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1651
::exit(___);}
#if 0
#line 1647
{ 
#line 1648
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1650
return make_long1(v.x); 
#line 1651
} 
#endif
#line 1653 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex1DLayered(texture< ulong1, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1654
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1658
::exit(___);}
#if 0
#line 1654
{ 
#line 1655
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1657
return make_ulong1(v.x); 
#line 1658
} 
#endif
#line 1660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex1DLayered(texture< long2, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1661
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1665
::exit(___);}
#if 0
#line 1661
{ 
#line 1662
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1664
return make_long2(v.x, v.y); 
#line 1665
} 
#endif
#line 1667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex1DLayered(texture< ulong2, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1668
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1672
::exit(___);}
#if 0
#line 1668
{ 
#line 1669
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1671
return make_ulong2(v.x, v.y); 
#line 1672
} 
#endif
#line 1674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex1DLayered(texture< long4, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1675
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1679
::exit(___);}
#if 0
#line 1675
{ 
#line 1676
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1678
return make_long4(v.x, v.y, v.z, v.w); 
#line 1679
} 
#endif
#line 1681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex1DLayered(texture< ulong4, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1682
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1686
::exit(___);}
#if 0
#line 1682
{ 
#line 1683
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1685
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 1686
} 
#endif
#line 1696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayered(texture< float, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1697
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1701
::exit(___);}
#if 0
#line 1697
{ 
#line 1698
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1700
return v.x; 
#line 1701
} 
#endif
#line 1703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayered(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1704
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1708
::exit(___);}
#if 0
#line 1704
{ 
#line 1705
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1707
return make_float1(v.x); 
#line 1708
} 
#endif
#line 1710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayered(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1711
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1715
::exit(___);}
#if 0
#line 1711
{ 
#line 1712
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1714
return make_float2(v.x, v.y); 
#line 1715
} 
#endif
#line 1717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayered(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer) 
#line 1718
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1722
::exit(___);}
#if 0
#line 1718
{ 
#line 1719
float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1721
return make_float4(v.x, v.y, v.z, v.w); 
#line 1722
} 
#endif
#line 1730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayered(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1731
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 1731 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 1735 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1737 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1739
return w.x; 
#line 1740
} 
#endif
#line 1742 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayered(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1743
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1748
::exit(___);}
#if 0
#line 1743
{ 
#line 1744
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1745
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1747
return w.x; 
#line 1748
} 
#endif
#line 1750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayered(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1751
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1756
::exit(___);}
#if 0
#line 1751
{ 
#line 1752
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1753
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1755
return w.x; 
#line 1756
} 
#endif
#line 1758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayered(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1759
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1764
::exit(___);}
#if 0
#line 1759
{ 
#line 1760
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1761
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1763
return make_float1(w.x); 
#line 1764
} 
#endif
#line 1766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayered(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1767
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1772
::exit(___);}
#if 0
#line 1767
{ 
#line 1768
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1769
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1771
return make_float1(w.x); 
#line 1772
} 
#endif
#line 1774 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayered(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1775
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1780
::exit(___);}
#if 0
#line 1775
{ 
#line 1776
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1777
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1779
return make_float2(w.x, w.y); 
#line 1780
} 
#endif
#line 1782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayered(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1783
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1788
::exit(___);}
#if 0
#line 1783
{ 
#line 1784
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1785
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1787
return make_float2(w.x, w.y); 
#line 1788
} 
#endif
#line 1790 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayered(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1791
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1796
::exit(___);}
#if 0
#line 1791
{ 
#line 1792
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1793
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1795
return make_float4(w.x, w.y, w.z, w.w); 
#line 1796
} 
#endif
#line 1798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayered(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1799
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1804
::exit(___);}
#if 0
#line 1799
{ 
#line 1800
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1801
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1803
return make_float4(w.x, w.y, w.z, w.w); 
#line 1804
} 
#endif
#line 1812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayered(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1813
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1818
::exit(___);}
#if 0
#line 1813
{ 
#line 1814
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1815
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1817
return w.x; 
#line 1818
} 
#endif
#line 1820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayered(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1821
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1826
::exit(___);}
#if 0
#line 1821
{ 
#line 1822
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1823
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1825
return w.x; 
#line 1826
} 
#endif
#line 1828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayered(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1829
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1834
::exit(___);}
#if 0
#line 1829
{ 
#line 1830
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1831
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1833
return make_float1(w.x); 
#line 1834
} 
#endif
#line 1836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayered(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1837
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1842
::exit(___);}
#if 0
#line 1837
{ 
#line 1838
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1839
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1841
return make_float1(w.x); 
#line 1842
} 
#endif
#line 1844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayered(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1845
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1850
::exit(___);}
#if 0
#line 1845
{ 
#line 1846
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1847
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1849
return make_float2(w.x, w.y); 
#line 1850
} 
#endif
#line 1852 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayered(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1853
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1858
::exit(___);}
#if 0
#line 1853
{ 
#line 1854
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1855
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1857
return make_float2(w.x, w.y); 
#line 1858
} 
#endif
#line 1860 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayered(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1861
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1866
::exit(___);}
#if 0
#line 1861
{ 
#line 1862
int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1863
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1865
return make_float4(w.x, w.y, w.z, w.w); 
#line 1866
} 
#endif
#line 1868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayered(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer) 
#line 1869
{int volatile ___ = 1;(void)t;(void)x;(void)layer;
#line 1874
::exit(___);}
#if 0
#line 1869
{ 
#line 1870
uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer); 
#line 1871
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 1873
return make_float4(w.x, w.y, w.z, w.w); 
#line 1874
} 
#endif
#line 1882 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex2DLayered(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1883
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1891 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 1883 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 1887 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 1891
} 
#endif
#line 1893 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex2DLayered(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1894
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1898
::exit(___);}
#if 0
#line 1894
{ 
#line 1895
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1897
return (signed char)(v.x); 
#line 1898
} 
#endif
#line 1900 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex2DLayered(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1901
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1905
::exit(___);}
#if 0
#line 1901
{ 
#line 1902
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1904
return (unsigned char)(v.x); 
#line 1905
} 
#endif
#line 1907 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex2DLayered(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1908
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1912
::exit(___);}
#if 0
#line 1908
{ 
#line 1909
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1911
return make_char1(v.x); 
#line 1912
} 
#endif
#line 1914 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex2DLayered(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1915
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1919
::exit(___);}
#if 0
#line 1915
{ 
#line 1916
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1918
return make_uchar1(v.x); 
#line 1919
} 
#endif
#line 1921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex2DLayered(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1922
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1926
::exit(___);}
#if 0
#line 1922
{ 
#line 1923
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1925
return make_char2(v.x, v.y); 
#line 1926
} 
#endif
#line 1928 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex2DLayered(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1929
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1933
::exit(___);}
#if 0
#line 1929
{ 
#line 1930
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1932
return make_uchar2(v.x, v.y); 
#line 1933
} 
#endif
#line 1935 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex2DLayered(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1936
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1940
::exit(___);}
#if 0
#line 1936
{ 
#line 1937
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1939
return make_char4(v.x, v.y, v.z, v.w); 
#line 1940
} 
#endif
#line 1942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex2DLayered(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1943
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1947
::exit(___);}
#if 0
#line 1943
{ 
#line 1944
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1946
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 1947
} 
#endif
#line 1955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex2DLayered(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1956
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1960
::exit(___);}
#if 0
#line 1956
{ 
#line 1957
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1959
return (short)(v.x); 
#line 1960
} 
#endif
#line 1962 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex2DLayered(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1963
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1967
::exit(___);}
#if 0
#line 1963
{ 
#line 1964
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1966
return (unsigned short)(v.x); 
#line 1967
} 
#endif
#line 1969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex2DLayered(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1970
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1974
::exit(___);}
#if 0
#line 1970
{ 
#line 1971
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1973
return make_short1(v.x); 
#line 1974
} 
#endif
#line 1976 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex2DLayered(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1977
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1981
::exit(___);}
#if 0
#line 1977
{ 
#line 1978
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1980
return make_ushort1(v.x); 
#line 1981
} 
#endif
#line 1983 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex2DLayered(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1984
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1988
::exit(___);}
#if 0
#line 1984
{ 
#line 1985
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1987
return make_short2(v.x, v.y); 
#line 1988
} 
#endif
#line 1990 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex2DLayered(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1991
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 1995
::exit(___);}
#if 0
#line 1991
{ 
#line 1992
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 1994
return make_ushort2(v.x, v.y); 
#line 1995
} 
#endif
#line 1997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex2DLayered(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 1998
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2002
::exit(___);}
#if 0
#line 1998
{ 
#line 1999
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2001
return make_short4(v.x, v.y, v.z, v.w); 
#line 2002
} 
#endif
#line 2004 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex2DLayered(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2005
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2009
::exit(___);}
#if 0
#line 2005
{ 
#line 2006
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2008
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 2009
} 
#endif
#line 2017 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex2DLayered(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2018
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2022
::exit(___);}
#if 0
#line 2018
{ 
#line 2019
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2021
return v.x; 
#line 2022
} 
#endif
#line 2024 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex2DLayered(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2025
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2029
::exit(___);}
#if 0
#line 2025
{ 
#line 2026
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2028
return v.x; 
#line 2029
} 
#endif
#line 2031 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex2DLayered(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2032
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2036
::exit(___);}
#if 0
#line 2032
{ 
#line 2033
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2035
return make_int1(v.x); 
#line 2036
} 
#endif
#line 2038 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex2DLayered(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2039
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2043
::exit(___);}
#if 0
#line 2039
{ 
#line 2040
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2042
return make_uint1(v.x); 
#line 2043
} 
#endif
#line 2045 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex2DLayered(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2046
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2050
::exit(___);}
#if 0
#line 2046
{ 
#line 2047
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2049
return make_int2(v.x, v.y); 
#line 2050
} 
#endif
#line 2052 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex2DLayered(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2053
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2057
::exit(___);}
#if 0
#line 2053
{ 
#line 2054
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2056
return make_uint2(v.x, v.y); 
#line 2057
} 
#endif
#line 2059 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex2DLayered(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2060
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2064
::exit(___);}
#if 0
#line 2060
{ 
#line 2061
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2063
return make_int4(v.x, v.y, v.z, v.w); 
#line 2064
} 
#endif
#line 2066 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex2DLayered(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2067
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2071
::exit(___);}
#if 0
#line 2067
{ 
#line 2068
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2070
return make_uint4(v.x, v.y, v.z, v.w); 
#line 2071
} 
#endif
#line 2081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex2DLayered(texture< long, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2082
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2086
::exit(___);}
#if 0
#line 2082
{ 
#line 2083
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2085
return (long)(v.x); 
#line 2086
} 
#endif
#line 2088 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex2DLayered(texture< unsigned long, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2089
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2093
::exit(___);}
#if 0
#line 2089
{ 
#line 2090
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2092
return (unsigned long)(v.x); 
#line 2093
} 
#endif
#line 2095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex2DLayered(texture< long1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2096
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2100
::exit(___);}
#if 0
#line 2096
{ 
#line 2097
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2099
return make_long1(v.x); 
#line 2100
} 
#endif
#line 2102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex2DLayered(texture< ulong1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2103
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2107
::exit(___);}
#if 0
#line 2103
{ 
#line 2104
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2106
return make_ulong1(v.x); 
#line 2107
} 
#endif
#line 2109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex2DLayered(texture< long2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2110
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2114
::exit(___);}
#if 0
#line 2110
{ 
#line 2111
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2113
return make_long2(v.x, v.y); 
#line 2114
} 
#endif
#line 2116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex2DLayered(texture< ulong2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2117
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2121
::exit(___);}
#if 0
#line 2117
{ 
#line 2118
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2120
return make_ulong2(v.x, v.y); 
#line 2121
} 
#endif
#line 2123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex2DLayered(texture< long4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2124
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2128
::exit(___);}
#if 0
#line 2124
{ 
#line 2125
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2127
return make_long4(v.x, v.y, v.z, v.w); 
#line 2128
} 
#endif
#line 2130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex2DLayered(texture< ulong4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2131
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2135
::exit(___);}
#if 0
#line 2131
{ 
#line 2132
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2134
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 2135
} 
#endif
#line 2145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayered(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2146
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2150
::exit(___);}
#if 0
#line 2146
{ 
#line 2147
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2149
return v.x; 
#line 2150
} 
#endif
#line 2152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayered(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2153
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2157
::exit(___);}
#if 0
#line 2153
{ 
#line 2154
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2156
return make_float1(v.x); 
#line 2157
} 
#endif
#line 2159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayered(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2160
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2164
::exit(___);}
#if 0
#line 2160
{ 
#line 2161
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2163
return make_float2(v.x, v.y); 
#line 2164
} 
#endif
#line 2166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayered(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer) 
#line 2167
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2171
::exit(___);}
#if 0
#line 2167
{ 
#line 2168
float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2170
return make_float4(v.x, v.y, v.z, v.w); 
#line 2171
} 
#endif
#line 2179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayered(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2180
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 2180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 2184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2188
return w.x; 
#line 2189
} 
#endif
#line 2191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayered(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2192
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2197
::exit(___);}
#if 0
#line 2192
{ 
#line 2193
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2194
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2196
return w.x; 
#line 2197
} 
#endif
#line 2199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayered(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2200
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2205
::exit(___);}
#if 0
#line 2200
{ 
#line 2201
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2202
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2204
return w.x; 
#line 2205
} 
#endif
#line 2207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayered(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2208
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2213
::exit(___);}
#if 0
#line 2208
{ 
#line 2209
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2210
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2212
return make_float1(w.x); 
#line 2213
} 
#endif
#line 2215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayered(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2216
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2221
::exit(___);}
#if 0
#line 2216
{ 
#line 2217
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2218
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2220
return make_float1(w.x); 
#line 2221
} 
#endif
#line 2223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayered(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2224
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2229
::exit(___);}
#if 0
#line 2224
{ 
#line 2225
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2226
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2228
return make_float2(w.x, w.y); 
#line 2229
} 
#endif
#line 2231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayered(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2232
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2237
::exit(___);}
#if 0
#line 2232
{ 
#line 2233
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2234
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2236
return make_float2(w.x, w.y); 
#line 2237
} 
#endif
#line 2239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayered(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2240
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2245
::exit(___);}
#if 0
#line 2240
{ 
#line 2241
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2242
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2244
return make_float4(w.x, w.y, w.z, w.w); 
#line 2245
} 
#endif
#line 2247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayered(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2248
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2253
::exit(___);}
#if 0
#line 2248
{ 
#line 2249
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2250
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2252
return make_float4(w.x, w.y, w.z, w.w); 
#line 2253
} 
#endif
#line 2261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayered(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2262
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2267
::exit(___);}
#if 0
#line 2262
{ 
#line 2263
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2264
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2266
return w.x; 
#line 2267
} 
#endif
#line 2269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayered(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2270
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2275
::exit(___);}
#if 0
#line 2270
{ 
#line 2271
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2272
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2274
return w.x; 
#line 2275
} 
#endif
#line 2277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayered(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2278
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2283
::exit(___);}
#if 0
#line 2278
{ 
#line 2279
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2280
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2282
return make_float1(w.x); 
#line 2283
} 
#endif
#line 2285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayered(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2286
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2291
::exit(___);}
#if 0
#line 2286
{ 
#line 2287
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2288
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2290
return make_float1(w.x); 
#line 2291
} 
#endif
#line 2293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayered(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2294
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2299
::exit(___);}
#if 0
#line 2294
{ 
#line 2295
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2296
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2298
return make_float2(w.x, w.y); 
#line 2299
} 
#endif
#line 2301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayered(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2302
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2307
::exit(___);}
#if 0
#line 2302
{ 
#line 2303
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2304
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2306
return make_float2(w.x, w.y); 
#line 2307
} 
#endif
#line 2309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayered(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2310
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2315
::exit(___);}
#if 0
#line 2310
{ 
#line 2311
int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2312
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2314
return make_float4(w.x, w.y, w.z, w.w); 
#line 2315
} 
#endif
#line 2317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayered(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer) 
#line 2318
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;
#line 2323
::exit(___);}
#if 0
#line 2318
{ 
#line 2319
uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer); 
#line 2320
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2322
return make_float4(w.x, w.y, w.z, w.w); 
#line 2323
} 
#endif
#line 2331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex3D(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2332
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 2332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 2336 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 2340
} 
#endif
#line 2342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex3D(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2343
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2347
::exit(___);}
#if 0
#line 2343
{ 
#line 2344
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2346
return (signed char)(v.x); 
#line 2347
} 
#endif
#line 2349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex3D(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2350
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2354
::exit(___);}
#if 0
#line 2350
{ 
#line 2351
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2353
return (unsigned char)(v.x); 
#line 2354
} 
#endif
#line 2356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex3D(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2357
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2361
::exit(___);}
#if 0
#line 2357
{ 
#line 2358
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2360
return make_char1(v.x); 
#line 2361
} 
#endif
#line 2363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex3D(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2364
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2368
::exit(___);}
#if 0
#line 2364
{ 
#line 2365
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2367
return make_uchar1(v.x); 
#line 2368
} 
#endif
#line 2370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex3D(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2371
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2375
::exit(___);}
#if 0
#line 2371
{ 
#line 2372
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2374
return make_char2(v.x, v.y); 
#line 2375
} 
#endif
#line 2377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex3D(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2378
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2382
::exit(___);}
#if 0
#line 2378
{ 
#line 2379
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2381
return make_uchar2(v.x, v.y); 
#line 2382
} 
#endif
#line 2384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex3D(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2385
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2389
::exit(___);}
#if 0
#line 2385
{ 
#line 2386
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2388
return make_char4(v.x, v.y, v.z, v.w); 
#line 2389
} 
#endif
#line 2391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex3D(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2392
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2396
::exit(___);}
#if 0
#line 2392
{ 
#line 2393
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2395
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 2396
} 
#endif
#line 2404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex3D(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2405
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2409
::exit(___);}
#if 0
#line 2405
{ 
#line 2406
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2408
return (short)(v.x); 
#line 2409
} 
#endif
#line 2411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex3D(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2412
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2416
::exit(___);}
#if 0
#line 2412
{ 
#line 2413
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2415
return (unsigned short)(v.x); 
#line 2416
} 
#endif
#line 2418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex3D(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2419
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2423
::exit(___);}
#if 0
#line 2419
{ 
#line 2420
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2422
return make_short1(v.x); 
#line 2423
} 
#endif
#line 2425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex3D(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2426
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2430
::exit(___);}
#if 0
#line 2426
{ 
#line 2427
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2429
return make_ushort1(v.x); 
#line 2430
} 
#endif
#line 2432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex3D(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2433
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2437
::exit(___);}
#if 0
#line 2433
{ 
#line 2434
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2436
return make_short2(v.x, v.y); 
#line 2437
} 
#endif
#line 2439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex3D(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2440
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2444
::exit(___);}
#if 0
#line 2440
{ 
#line 2441
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2443
return make_ushort2(v.x, v.y); 
#line 2444
} 
#endif
#line 2446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex3D(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2447
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2451
::exit(___);}
#if 0
#line 2447
{ 
#line 2448
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2450
return make_short4(v.x, v.y, v.z, v.w); 
#line 2451
} 
#endif
#line 2453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex3D(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2454
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2458
::exit(___);}
#if 0
#line 2454
{ 
#line 2455
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2457
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 2458
} 
#endif
#line 2466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex3D(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2467
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2471
::exit(___);}
#if 0
#line 2467
{ 
#line 2468
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2470
return v.x; 
#line 2471
} 
#endif
#line 2473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex3D(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2474
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2478
::exit(___);}
#if 0
#line 2474
{ 
#line 2475
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2477
return v.x; 
#line 2478
} 
#endif
#line 2480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex3D(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2481
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2485
::exit(___);}
#if 0
#line 2481
{ 
#line 2482
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2484
return make_int1(v.x); 
#line 2485
} 
#endif
#line 2487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex3D(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2488
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2492
::exit(___);}
#if 0
#line 2488
{ 
#line 2489
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2491
return make_uint1(v.x); 
#line 2492
} 
#endif
#line 2494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex3D(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2495
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2499
::exit(___);}
#if 0
#line 2495
{ 
#line 2496
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2498
return make_int2(v.x, v.y); 
#line 2499
} 
#endif
#line 2501 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex3D(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2502
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2506
::exit(___);}
#if 0
#line 2502
{ 
#line 2503
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2505
return make_uint2(v.x, v.y); 
#line 2506
} 
#endif
#line 2508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex3D(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2509
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2513
::exit(___);}
#if 0
#line 2509
{ 
#line 2510
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2512
return make_int4(v.x, v.y, v.z, v.w); 
#line 2513
} 
#endif
#line 2515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex3D(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2516
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2520
::exit(___);}
#if 0
#line 2516
{ 
#line 2517
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2519
return make_uint4(v.x, v.y, v.z, v.w); 
#line 2520
} 
#endif
#line 2530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex3D(texture< long, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2531
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2535
::exit(___);}
#if 0
#line 2531
{ 
#line 2532
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2534
return (long)(v.x); 
#line 2535
} 
#endif
#line 2537 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex3D(texture< unsigned long, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2538
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2542
::exit(___);}
#if 0
#line 2538
{ 
#line 2539
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2541
return (unsigned long)(v.x); 
#line 2542
} 
#endif
#line 2544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex3D(texture< long1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2545
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2549
::exit(___);}
#if 0
#line 2545
{ 
#line 2546
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2548
return make_long1(v.x); 
#line 2549
} 
#endif
#line 2551 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex3D(texture< ulong1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2552
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2556
::exit(___);}
#if 0
#line 2552
{ 
#line 2553
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2555
return make_ulong1(v.x); 
#line 2556
} 
#endif
#line 2558 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex3D(texture< long2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2559
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2563
::exit(___);}
#if 0
#line 2559
{ 
#line 2560
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2562
return make_long2(v.x, v.y); 
#line 2563
} 
#endif
#line 2565 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex3D(texture< ulong2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2566
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2570
::exit(___);}
#if 0
#line 2566
{ 
#line 2567
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2569
return make_ulong2(v.x, v.y); 
#line 2570
} 
#endif
#line 2572 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex3D(texture< long4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2573
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2577
::exit(___);}
#if 0
#line 2573
{ 
#line 2574
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2576
return make_long4(v.x, v.y, v.z, v.w); 
#line 2577
} 
#endif
#line 2579 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex3D(texture< ulong4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2580
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2584
::exit(___);}
#if 0
#line 2580
{ 
#line 2581
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2583
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 2584
} 
#endif
#line 2594 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3D(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2595
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2599
::exit(___);}
#if 0
#line 2595
{ 
#line 2596
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
#line 2598
return v.x; 
#line 2599
} 
#endif
#line 2601 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3D(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2602
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2606
::exit(___);}
#if 0
#line 2602
{ 
#line 2603
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
#line 2605
return make_float1(v.x); 
#line 2606
} 
#endif
#line 2608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3D(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2609
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2613
::exit(___);}
#if 0
#line 2609
{ 
#line 2610
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
#line 2612
return make_float2(v.x, v.y); 
#line 2613
} 
#endif
#line 2615 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3D(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2616
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2620
::exit(___);}
#if 0
#line 2616
{ 
#line 2617
float4 v = __ftexfetch(t, make_float4(x, y, z, 0)); 
#line 2619
return make_float4(v.x, v.y, v.z, v.w); 
#line 2620
} 
#endif
#line 2628 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3D(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2629
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2638 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 2629 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 2633 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2635 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2637
return w.x; 
#line 2638
} 
#endif
#line 2640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3D(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2641
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2646
::exit(___);}
#if 0
#line 2641
{ 
#line 2642
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2643
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2645
return w.x; 
#line 2646
} 
#endif
#line 2648 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3D(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2649
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2654
::exit(___);}
#if 0
#line 2649
{ 
#line 2650
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2651
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2653
return w.x; 
#line 2654
} 
#endif
#line 2656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3D(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2657
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2662
::exit(___);}
#if 0
#line 2657
{ 
#line 2658
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2659
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2661
return make_float1(w.x); 
#line 2662
} 
#endif
#line 2664 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3D(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2665
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2670
::exit(___);}
#if 0
#line 2665
{ 
#line 2666
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2667
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2669
return make_float1(w.x); 
#line 2670
} 
#endif
#line 2672 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3D(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2673
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2678
::exit(___);}
#if 0
#line 2673
{ 
#line 2674
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2675
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2677
return make_float2(w.x, w.y); 
#line 2678
} 
#endif
#line 2680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3D(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2681
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2686
::exit(___);}
#if 0
#line 2681
{ 
#line 2682
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2683
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2685
return make_float2(w.x, w.y); 
#line 2686
} 
#endif
#line 2688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3D(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2689
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2694
::exit(___);}
#if 0
#line 2689
{ 
#line 2690
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2691
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2693
return make_float4(w.x, w.y, w.z, w.w); 
#line 2694
} 
#endif
#line 2696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3D(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2697
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2702
::exit(___);}
#if 0
#line 2697
{ 
#line 2698
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2699
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2701
return make_float4(w.x, w.y, w.z, w.w); 
#line 2702
} 
#endif
#line 2710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3D(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2711
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2716
::exit(___);}
#if 0
#line 2711
{ 
#line 2712
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2713
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2715
return w.x; 
#line 2716
} 
#endif
#line 2718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3D(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2719
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2724
::exit(___);}
#if 0
#line 2719
{ 
#line 2720
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2721
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2723
return w.x; 
#line 2724
} 
#endif
#line 2726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3D(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2727
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2732
::exit(___);}
#if 0
#line 2727
{ 
#line 2728
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2729
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2731
return make_float1(w.x); 
#line 2732
} 
#endif
#line 2734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3D(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2735
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2740
::exit(___);}
#if 0
#line 2735
{ 
#line 2736
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2737
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2739
return make_float1(w.x); 
#line 2740
} 
#endif
#line 2742 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3D(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2743
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2748
::exit(___);}
#if 0
#line 2743
{ 
#line 2744
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2745
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2747
return make_float2(w.x, w.y); 
#line 2748
} 
#endif
#line 2750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3D(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2751
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2756
::exit(___);}
#if 0
#line 2751
{ 
#line 2752
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2753
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2755
return make_float2(w.x, w.y); 
#line 2756
} 
#endif
#line 2758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3D(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2759
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2764
::exit(___);}
#if 0
#line 2759
{ 
#line 2760
int4 v = __itexfetch(t, make_float4(x, y, z, 0)); 
#line 2761
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2763
return make_float4(w.x, w.y, w.z, w.w); 
#line 2764
} 
#endif
#line 2766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3D(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 2767
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2772
::exit(___);}
#if 0
#line 2767
{ 
#line 2768
uint4 v = __utexfetch(t, make_float4(x, y, z, 0)); 
#line 2769
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 2771
return make_float4(w.x, w.y, w.z, w.w); 
#line 2772
} 
#endif
#line 2780 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char texCubemap(texture< char, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2781
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 2781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 2785 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2788 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 2789
} 
#endif
#line 2791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char texCubemap(texture< signed char, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2792
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2796
::exit(___);}
#if 0
#line 2792
{ 
#line 2793
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2795
return (signed char)(v.x); 
#line 2796
} 
#endif
#line 2798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char texCubemap(texture< unsigned char, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2799
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2803
::exit(___);}
#if 0
#line 2799
{ 
#line 2800
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2802
return (unsigned char)(v.x); 
#line 2803
} 
#endif
#line 2805 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 texCubemap(texture< char1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2806
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2810
::exit(___);}
#if 0
#line 2806
{ 
#line 2807
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2809
return make_char1(v.x); 
#line 2810
} 
#endif
#line 2812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 texCubemap(texture< uchar1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2813
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2817
::exit(___);}
#if 0
#line 2813
{ 
#line 2814
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2816
return make_uchar1(v.x); 
#line 2817
} 
#endif
#line 2819 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 texCubemap(texture< char2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2820
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2824
::exit(___);}
#if 0
#line 2820
{ 
#line 2821
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2823
return make_char2(v.x, v.y); 
#line 2824
} 
#endif
#line 2826 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 texCubemap(texture< uchar2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2827
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2831
::exit(___);}
#if 0
#line 2827
{ 
#line 2828
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2830
return make_uchar2(v.x, v.y); 
#line 2831
} 
#endif
#line 2833 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 texCubemap(texture< char4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2834
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2838
::exit(___);}
#if 0
#line 2834
{ 
#line 2835
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2837
return make_char4(v.x, v.y, v.z, v.w); 
#line 2838
} 
#endif
#line 2840 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 texCubemap(texture< uchar4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2841
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2845
::exit(___);}
#if 0
#line 2841
{ 
#line 2842
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2844
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 2845
} 
#endif
#line 2853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short texCubemap(texture< short, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2854
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2858
::exit(___);}
#if 0
#line 2854
{ 
#line 2855
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2857
return (short)(v.x); 
#line 2858
} 
#endif
#line 2860 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short texCubemap(texture< unsigned short, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2861
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2865
::exit(___);}
#if 0
#line 2861
{ 
#line 2862
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2864
return (unsigned short)(v.x); 
#line 2865
} 
#endif
#line 2867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 texCubemap(texture< short1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2868
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2872
::exit(___);}
#if 0
#line 2868
{ 
#line 2869
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2871
return make_short1(v.x); 
#line 2872
} 
#endif
#line 2874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 texCubemap(texture< ushort1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2875
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2879
::exit(___);}
#if 0
#line 2875
{ 
#line 2876
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2878
return make_ushort1(v.x); 
#line 2879
} 
#endif
#line 2881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 texCubemap(texture< short2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2882
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2886
::exit(___);}
#if 0
#line 2882
{ 
#line 2883
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2885
return make_short2(v.x, v.y); 
#line 2886
} 
#endif
#line 2888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 texCubemap(texture< ushort2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2889
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2893
::exit(___);}
#if 0
#line 2889
{ 
#line 2890
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2892
return make_ushort2(v.x, v.y); 
#line 2893
} 
#endif
#line 2895 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 texCubemap(texture< short4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2896
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2900
::exit(___);}
#if 0
#line 2896
{ 
#line 2897
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2899
return make_short4(v.x, v.y, v.z, v.w); 
#line 2900
} 
#endif
#line 2902 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 texCubemap(texture< ushort4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2903
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2907
::exit(___);}
#if 0
#line 2903
{ 
#line 2904
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2906
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 2907
} 
#endif
#line 2915 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int texCubemap(texture< int, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2916
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2920
::exit(___);}
#if 0
#line 2916
{ 
#line 2917
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2919
return v.x; 
#line 2920
} 
#endif
#line 2922 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned texCubemap(texture< unsigned, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2923
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2927
::exit(___);}
#if 0
#line 2923
{ 
#line 2924
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2926
return v.x; 
#line 2927
} 
#endif
#line 2929 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 texCubemap(texture< int1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2930
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2934
::exit(___);}
#if 0
#line 2930
{ 
#line 2931
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2933
return make_int1(v.x); 
#line 2934
} 
#endif
#line 2936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 texCubemap(texture< uint1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2937
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2941
::exit(___);}
#if 0
#line 2937
{ 
#line 2938
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2940
return make_uint1(v.x); 
#line 2941
} 
#endif
#line 2943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 texCubemap(texture< int2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2944
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2948
::exit(___);}
#if 0
#line 2944
{ 
#line 2945
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2947
return make_int2(v.x, v.y); 
#line 2948
} 
#endif
#line 2950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 texCubemap(texture< uint2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2951
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2955
::exit(___);}
#if 0
#line 2951
{ 
#line 2952
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2954
return make_uint2(v.x, v.y); 
#line 2955
} 
#endif
#line 2957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 texCubemap(texture< int4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2958
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2962
::exit(___);}
#if 0
#line 2958
{ 
#line 2959
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2961
return make_int4(v.x, v.y, v.z, v.w); 
#line 2962
} 
#endif
#line 2964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 texCubemap(texture< uint4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2965
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2969
::exit(___);}
#if 0
#line 2965
{ 
#line 2966
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2968
return make_uint4(v.x, v.y, v.z, v.w); 
#line 2969
} 
#endif
#line 2979 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long texCubemap(texture< long, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2980
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2984
::exit(___);}
#if 0
#line 2980
{ 
#line 2981
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2983
return (long)(v.x); 
#line 2984
} 
#endif
#line 2986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long texCubemap(texture< unsigned long, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2987
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2991
::exit(___);}
#if 0
#line 2987
{ 
#line 2988
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 2990
return (unsigned long)(v.x); 
#line 2991
} 
#endif
#line 2993 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 texCubemap(texture< long1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 2994
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 2998
::exit(___);}
#if 0
#line 2994
{ 
#line 2995
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 2997
return make_long1(v.x); 
#line 2998
} 
#endif
#line 3000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 texCubemap(texture< ulong1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 3001
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3005
::exit(___);}
#if 0
#line 3001
{ 
#line 3002
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 3004
return make_ulong1(v.x); 
#line 3005
} 
#endif
#line 3007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 texCubemap(texture< long2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 3008
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3012
::exit(___);}
#if 0
#line 3008
{ 
#line 3009
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 3011
return make_long2(v.x, v.y); 
#line 3012
} 
#endif
#line 3014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 texCubemap(texture< ulong2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 3015
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3019
::exit(___);}
#if 0
#line 3015
{ 
#line 3016
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 3018
return make_ulong2(v.x, v.y); 
#line 3019
} 
#endif
#line 3021 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 texCubemap(texture< long4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 3022
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3026
::exit(___);}
#if 0
#line 3022
{ 
#line 3023
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 3025
return make_long4(v.x, v.y, v.z, v.w); 
#line 3026
} 
#endif
#line 3028 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 texCubemap(texture< ulong4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 3029
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3033
::exit(___);}
#if 0
#line 3029
{ 
#line 3030
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 3032
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 3033
} 
#endif
#line 3043 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemap(texture< float, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 3044
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3048
::exit(___);}
#if 0
#line 3044
{ 
#line 3045
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
#line 3047
return v.x; 
#line 3048
} 
#endif
#line 3050 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemap(texture< float1, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 3051
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3055
::exit(___);}
#if 0
#line 3051
{ 
#line 3052
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
#line 3054
return make_float1(v.x); 
#line 3055
} 
#endif
#line 3057 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemap(texture< float2, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 3058
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3062
::exit(___);}
#if 0
#line 3058
{ 
#line 3059
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
#line 3061
return make_float2(v.x, v.y); 
#line 3062
} 
#endif
#line 3064 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemap(texture< float4, 12, cudaReadModeElementType>  t, float x, float y, float z) 
#line 3065
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3069
::exit(___);}
#if 0
#line 3065
{ 
#line 3066
float4 v = __ftexfetchc(t, make_float4(x, y, z, 0)); 
#line 3068
return make_float4(v.x, v.y, v.z, v.w); 
#line 3069
} 
#endif
#line 3077 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemap(texture< char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3078
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3087 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 3078 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 3082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 3084 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3086
return w.x; 
#line 3087
} 
#endif
#line 3089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemap(texture< signed char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3090
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3095
::exit(___);}
#if 0
#line 3090
{ 
#line 3091
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 3092
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3094
return w.x; 
#line 3095
} 
#endif
#line 3097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemap(texture< unsigned char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3098
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3103
::exit(___);}
#if 0
#line 3098
{ 
#line 3099
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 3100
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3102
return w.x; 
#line 3103
} 
#endif
#line 3105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemap(texture< char1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3106
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3111
::exit(___);}
#if 0
#line 3106
{ 
#line 3107
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 3108
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3110
return make_float1(w.x); 
#line 3111
} 
#endif
#line 3113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemap(texture< uchar1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3114
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3119
::exit(___);}
#if 0
#line 3114
{ 
#line 3115
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 3116
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3118
return make_float1(w.x); 
#line 3119
} 
#endif
#line 3121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemap(texture< char2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3122
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3127
::exit(___);}
#if 0
#line 3122
{ 
#line 3123
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 3124
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3126
return make_float2(w.x, w.y); 
#line 3127
} 
#endif
#line 3129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemap(texture< uchar2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3130
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3135
::exit(___);}
#if 0
#line 3130
{ 
#line 3131
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 3132
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3134
return make_float2(w.x, w.y); 
#line 3135
} 
#endif
#line 3137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemap(texture< char4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3138
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3143
::exit(___);}
#if 0
#line 3138
{ 
#line 3139
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 3140
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3142
return make_float4(w.x, w.y, w.z, w.w); 
#line 3143
} 
#endif
#line 3145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemap(texture< uchar4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3146
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3151
::exit(___);}
#if 0
#line 3146
{ 
#line 3147
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 3148
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3150
return make_float4(w.x, w.y, w.z, w.w); 
#line 3151
} 
#endif
#line 3159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemap(texture< short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3160
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3165
::exit(___);}
#if 0
#line 3160
{ 
#line 3161
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 3162
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3164
return w.x; 
#line 3165
} 
#endif
#line 3167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemap(texture< unsigned short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3168
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3173
::exit(___);}
#if 0
#line 3168
{ 
#line 3169
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 3170
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3172
return w.x; 
#line 3173
} 
#endif
#line 3175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemap(texture< short1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3176
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3181
::exit(___);}
#if 0
#line 3176
{ 
#line 3177
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 3178
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3180
return make_float1(w.x); 
#line 3181
} 
#endif
#line 3183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemap(texture< ushort1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3184
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3189
::exit(___);}
#if 0
#line 3184
{ 
#line 3185
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 3186
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3188
return make_float1(w.x); 
#line 3189
} 
#endif
#line 3191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemap(texture< short2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3192
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3197
::exit(___);}
#if 0
#line 3192
{ 
#line 3193
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 3194
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3196
return make_float2(w.x, w.y); 
#line 3197
} 
#endif
#line 3199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemap(texture< ushort2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3200
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3205
::exit(___);}
#if 0
#line 3200
{ 
#line 3201
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 3202
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3204
return make_float2(w.x, w.y); 
#line 3205
} 
#endif
#line 3207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemap(texture< short4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3208
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3213
::exit(___);}
#if 0
#line 3208
{ 
#line 3209
int4 v = __itexfetchc(t, make_float4(x, y, z, 0)); 
#line 3210
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3212
return make_float4(w.x, w.y, w.z, w.w); 
#line 3213
} 
#endif
#line 3215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemap(texture< ushort4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z) 
#line 3216
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;
#line 3221
::exit(___);}
#if 0
#line 3216
{ 
#line 3217
uint4 v = __utexfetchc(t, make_float4(x, y, z, 0)); 
#line 3218
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3220
return make_float4(w.x, w.y, w.z, w.w); 
#line 3221
} 
#endif
#line 3229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char texCubemapLayered(texture< char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3230
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 3230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 3234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 3238
} 
#endif
#line 3240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char texCubemapLayered(texture< signed char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3241
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3245
::exit(___);}
#if 0
#line 3241
{ 
#line 3242
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3244
return (signed char)(v.x); 
#line 3245
} 
#endif
#line 3247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char texCubemapLayered(texture< unsigned char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3248
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3252
::exit(___);}
#if 0
#line 3248
{ 
#line 3249
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3251
return (unsigned char)(v.x); 
#line 3252
} 
#endif
#line 3254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 texCubemapLayered(texture< char1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3255
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3259
::exit(___);}
#if 0
#line 3255
{ 
#line 3256
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3258
return make_char1(v.x); 
#line 3259
} 
#endif
#line 3261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 texCubemapLayered(texture< uchar1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3262
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3266
::exit(___);}
#if 0
#line 3262
{ 
#line 3263
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3265
return make_uchar1(v.x); 
#line 3266
} 
#endif
#line 3268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 texCubemapLayered(texture< char2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3269
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3273
::exit(___);}
#if 0
#line 3269
{ 
#line 3270
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3272
return make_char2(v.x, v.y); 
#line 3273
} 
#endif
#line 3275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 texCubemapLayered(texture< uchar2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3276
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3280
::exit(___);}
#if 0
#line 3276
{ 
#line 3277
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3279
return make_uchar2(v.x, v.y); 
#line 3280
} 
#endif
#line 3282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 texCubemapLayered(texture< char4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3283
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3287
::exit(___);}
#if 0
#line 3283
{ 
#line 3284
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3286
return make_char4(v.x, v.y, v.z, v.w); 
#line 3287
} 
#endif
#line 3289 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 texCubemapLayered(texture< uchar4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3290
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3294
::exit(___);}
#if 0
#line 3290
{ 
#line 3291
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3293
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 3294
} 
#endif
#line 3302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short texCubemapLayered(texture< short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3303
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3307
::exit(___);}
#if 0
#line 3303
{ 
#line 3304
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3306
return (short)(v.x); 
#line 3307
} 
#endif
#line 3309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short texCubemapLayered(texture< unsigned short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3310
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3314
::exit(___);}
#if 0
#line 3310
{ 
#line 3311
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3313
return (unsigned short)(v.x); 
#line 3314
} 
#endif
#line 3316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 texCubemapLayered(texture< short1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3317
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3321
::exit(___);}
#if 0
#line 3317
{ 
#line 3318
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3320
return make_short1(v.x); 
#line 3321
} 
#endif
#line 3323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 texCubemapLayered(texture< ushort1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3324
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3328
::exit(___);}
#if 0
#line 3324
{ 
#line 3325
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3327
return make_ushort1(v.x); 
#line 3328
} 
#endif
#line 3330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 texCubemapLayered(texture< short2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3331
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3335
::exit(___);}
#if 0
#line 3331
{ 
#line 3332
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3334
return make_short2(v.x, v.y); 
#line 3335
} 
#endif
#line 3337 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 texCubemapLayered(texture< ushort2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3338
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3342
::exit(___);}
#if 0
#line 3338
{ 
#line 3339
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3341
return make_ushort2(v.x, v.y); 
#line 3342
} 
#endif
#line 3344 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 texCubemapLayered(texture< short4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3345
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3349
::exit(___);}
#if 0
#line 3345
{ 
#line 3346
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3348
return make_short4(v.x, v.y, v.z, v.w); 
#line 3349
} 
#endif
#line 3351 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 texCubemapLayered(texture< ushort4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3352
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3356
::exit(___);}
#if 0
#line 3352
{ 
#line 3353
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3355
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 3356
} 
#endif
#line 3364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int texCubemapLayered(texture< int, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3365
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3369
::exit(___);}
#if 0
#line 3365
{ 
#line 3366
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3368
return v.x; 
#line 3369
} 
#endif
#line 3371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned texCubemapLayered(texture< unsigned, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3372
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3376
::exit(___);}
#if 0
#line 3372
{ 
#line 3373
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3375
return v.x; 
#line 3376
} 
#endif
#line 3378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 texCubemapLayered(texture< int1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3379
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3383
::exit(___);}
#if 0
#line 3379
{ 
#line 3380
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3382
return make_int1(v.x); 
#line 3383
} 
#endif
#line 3385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 texCubemapLayered(texture< uint1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3386
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3390
::exit(___);}
#if 0
#line 3386
{ 
#line 3387
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3389
return make_uint1(v.x); 
#line 3390
} 
#endif
#line 3392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 texCubemapLayered(texture< int2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3393
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3397
::exit(___);}
#if 0
#line 3393
{ 
#line 3394
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3396
return make_int2(v.x, v.y); 
#line 3397
} 
#endif
#line 3399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 texCubemapLayered(texture< uint2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3400
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3404
::exit(___);}
#if 0
#line 3400
{ 
#line 3401
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3403
return make_uint2(v.x, v.y); 
#line 3404
} 
#endif
#line 3406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 texCubemapLayered(texture< int4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3407
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3411
::exit(___);}
#if 0
#line 3407
{ 
#line 3408
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3410
return make_int4(v.x, v.y, v.z, v.w); 
#line 3411
} 
#endif
#line 3413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 texCubemapLayered(texture< uint4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3414
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3418
::exit(___);}
#if 0
#line 3414
{ 
#line 3415
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3417
return make_uint4(v.x, v.y, v.z, v.w); 
#line 3418
} 
#endif
#line 3428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long texCubemapLayered(texture< long, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3429
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3433
::exit(___);}
#if 0
#line 3429
{ 
#line 3430
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3432
return (long)(v.x); 
#line 3433
} 
#endif
#line 3435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long texCubemapLayered(texture< unsigned long, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3436
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3440
::exit(___);}
#if 0
#line 3436
{ 
#line 3437
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3439
return (unsigned long)(v.x); 
#line 3440
} 
#endif
#line 3442 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 texCubemapLayered(texture< long1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3443
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3447
::exit(___);}
#if 0
#line 3443
{ 
#line 3444
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3446
return make_long1(v.x); 
#line 3447
} 
#endif
#line 3449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 texCubemapLayered(texture< ulong1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3450
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3454
::exit(___);}
#if 0
#line 3450
{ 
#line 3451
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3453
return make_ulong1(v.x); 
#line 3454
} 
#endif
#line 3456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 texCubemapLayered(texture< long2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3457
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3461
::exit(___);}
#if 0
#line 3457
{ 
#line 3458
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3460
return make_long2(v.x, v.y); 
#line 3461
} 
#endif
#line 3463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 texCubemapLayered(texture< ulong2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3464
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3468
::exit(___);}
#if 0
#line 3464
{ 
#line 3465
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3467
return make_ulong2(v.x, v.y); 
#line 3468
} 
#endif
#line 3470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 texCubemapLayered(texture< long4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3471
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3475
::exit(___);}
#if 0
#line 3471
{ 
#line 3472
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3474
return make_long4(v.x, v.y, v.z, v.w); 
#line 3475
} 
#endif
#line 3477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 texCubemapLayered(texture< ulong4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3478
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3482
::exit(___);}
#if 0
#line 3478
{ 
#line 3479
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3481
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 3482
} 
#endif
#line 3492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLayered(texture< float, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3493
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3497
::exit(___);}
#if 0
#line 3493
{ 
#line 3494
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3496
return v.x; 
#line 3497
} 
#endif
#line 3499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLayered(texture< float1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3500
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3504
::exit(___);}
#if 0
#line 3500
{ 
#line 3501
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3503
return make_float1(v.x); 
#line 3504
} 
#endif
#line 3506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLayered(texture< float2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3507
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3511
::exit(___);}
#if 0
#line 3507
{ 
#line 3508
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3510
return make_float2(v.x, v.y); 
#line 3511
} 
#endif
#line 3513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLayered(texture< float4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer) 
#line 3514
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3518
::exit(___);}
#if 0
#line 3514
{ 
#line 3515
float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3517
return make_float4(v.x, v.y, v.z, v.w); 
#line 3518
} 
#endif
#line 3526 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLayered(texture< char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3527
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3536 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 3527 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 3531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3533 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3535
return w.x; 
#line 3536
} 
#endif
#line 3538 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLayered(texture< signed char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3539
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3544
::exit(___);}
#if 0
#line 3539
{ 
#line 3540
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3541
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3543
return w.x; 
#line 3544
} 
#endif
#line 3546 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLayered(texture< unsigned char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3547
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3552
::exit(___);}
#if 0
#line 3547
{ 
#line 3548
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3549
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3551
return w.x; 
#line 3552
} 
#endif
#line 3554 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLayered(texture< char1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3555
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3560
::exit(___);}
#if 0
#line 3555
{ 
#line 3556
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3557
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3559
return make_float1(w.x); 
#line 3560
} 
#endif
#line 3562 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLayered(texture< uchar1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3563
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3568
::exit(___);}
#if 0
#line 3563
{ 
#line 3564
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3565
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3567
return make_float1(w.x); 
#line 3568
} 
#endif
#line 3570 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLayered(texture< char2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3571
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3576
::exit(___);}
#if 0
#line 3571
{ 
#line 3572
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3573
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3575
return make_float2(w.x, w.y); 
#line 3576
} 
#endif
#line 3578 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLayered(texture< uchar2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3579
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3584
::exit(___);}
#if 0
#line 3579
{ 
#line 3580
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3581
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3583
return make_float2(w.x, w.y); 
#line 3584
} 
#endif
#line 3586 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLayered(texture< char4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3587
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3592
::exit(___);}
#if 0
#line 3587
{ 
#line 3588
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3589
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3591
return make_float4(w.x, w.y, w.z, w.w); 
#line 3592
} 
#endif
#line 3594 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLayered(texture< uchar4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3595
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3600
::exit(___);}
#if 0
#line 3595
{ 
#line 3596
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3597
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3599
return make_float4(w.x, w.y, w.z, w.w); 
#line 3600
} 
#endif
#line 3608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLayered(texture< short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3609
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3614
::exit(___);}
#if 0
#line 3609
{ 
#line 3610
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3611
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3613
return w.x; 
#line 3614
} 
#endif
#line 3616 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLayered(texture< unsigned short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3617
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3622
::exit(___);}
#if 0
#line 3617
{ 
#line 3618
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3619
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3621
return w.x; 
#line 3622
} 
#endif
#line 3624 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLayered(texture< short1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3625
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3630
::exit(___);}
#if 0
#line 3625
{ 
#line 3626
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3627
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3629
return make_float1(w.x); 
#line 3630
} 
#endif
#line 3632 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLayered(texture< ushort1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3633
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3638
::exit(___);}
#if 0
#line 3633
{ 
#line 3634
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3635
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3637
return make_float1(w.x); 
#line 3638
} 
#endif
#line 3640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLayered(texture< short2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3641
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3646
::exit(___);}
#if 0
#line 3641
{ 
#line 3642
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3643
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3645
return make_float2(w.x, w.y); 
#line 3646
} 
#endif
#line 3648 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLayered(texture< ushort2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3649
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3654
::exit(___);}
#if 0
#line 3649
{ 
#line 3650
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3651
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3653
return make_float2(w.x, w.y); 
#line 3654
} 
#endif
#line 3656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLayered(texture< short4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3657
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3662
::exit(___);}
#if 0
#line 3657
{ 
#line 3658
int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3659
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3661
return make_float4(w.x, w.y, w.z, w.w); 
#line 3662
} 
#endif
#line 3664 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLayered(texture< ushort4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer) 
#line 3665
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;
#line 3670
::exit(___);}
#if 0
#line 3665
{ 
#line 3666
uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer); 
#line 3667
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 3669
return make_float4(w.x, w.y, w.z, w.w); 
#line 3670
} 
#endif
#line 3703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex2Dgather(texture< char, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3704
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3706
::exit(___);}
#if 0
#line 3704
{ 
#line 3705
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } ; 
#line 3706
} 
#endif
#line 3708 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex2Dgather(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3709
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3711
::exit(___);}
#if 0
#line 3709
{ 
#line 3710
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } ; 
#line 3711
} 
#endif
#line 3713 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex2Dgather(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3714
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3716
::exit(___);}
#if 0
#line 3714
{ 
#line 3715
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } ; 
#line 3716
} 
#endif
#line 3718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex2Dgather(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3719
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3721
::exit(___);}
#if 0
#line 3719
{ 
#line 3720
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } ; 
#line 3721
} 
#endif
#line 3723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex2Dgather(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3724
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3726
::exit(___);}
#if 0
#line 3724
{ 
#line 3725
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } ; 
#line 3726
} 
#endif
#line 3728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex2Dgather(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3729
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3731
::exit(___);}
#if 0
#line 3729
{ 
#line 3730
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); }  ; 
#line 3731
} 
#endif
#line 3733 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex2Dgather(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3734
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3736
::exit(___);}
#if 0
#line 3734
{ 
#line 3735
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); }  ; 
#line 3736
} 
#endif
#line 3738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex2Dgather(texture< char3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3739
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3741
::exit(___);}
#if 0
#line 3739
{ 
#line 3740
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); }  }  ; 
#line 3741
} 
#endif
#line 3743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex2Dgather(texture< uchar3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3744
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3746
::exit(___);}
#if 0
#line 3744
{ 
#line 3745
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); }  }  ; 
#line 3746
} 
#endif
#line 3748 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex2Dgather(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3749
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3751
::exit(___);}
#if 0
#line 3749
{ 
#line 3750
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); }  }  }  ; 
#line 3751
} 
#endif
#line 3753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex2Dgather(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3754
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3756
::exit(___);}
#if 0
#line 3754
{ 
#line 3755
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); }  }  }  ; 
#line 3756
} 
#endif
#line 3758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex2Dgather(texture< short, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3759
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3761
::exit(___);}
#if 0
#line 3759
{ 
#line 3760
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } ; 
#line 3761
} 
#endif
#line 3763 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex2Dgather(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3764
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3766
::exit(___);}
#if 0
#line 3764
{ 
#line 3765
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } ; 
#line 3766
} 
#endif
#line 3768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex2Dgather(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3769
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3771
::exit(___);}
#if 0
#line 3769
{ 
#line 3770
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } ; 
#line 3771
} 
#endif
#line 3773 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex2Dgather(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3774
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3776
::exit(___);}
#if 0
#line 3774
{ 
#line 3775
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } ; 
#line 3776
} 
#endif
#line 3778 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex2Dgather(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3779
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3781
::exit(___);}
#if 0
#line 3779
{ 
#line 3780
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); }  ; 
#line 3781
} 
#endif
#line 3783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex2Dgather(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3784
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3786
::exit(___);}
#if 0
#line 3784
{ 
#line 3785
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); }  ; 
#line 3786
} 
#endif
#line 3788 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex2Dgather(texture< short3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3789
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3791
::exit(___);}
#if 0
#line 3789
{ 
#line 3790
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); }  }  ; 
#line 3791
} 
#endif
#line 3793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex2Dgather(texture< ushort3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3794
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3796
::exit(___);}
#if 0
#line 3794
{ 
#line 3795
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); }  }  ; 
#line 3796
} 
#endif
#line 3798 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex2Dgather(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3799
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3801
::exit(___);}
#if 0
#line 3799
{ 
#line 3800
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); }  }  }  ; 
#line 3801
} 
#endif
#line 3803 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex2Dgather(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3804
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3806
::exit(___);}
#if 0
#line 3804
{ 
#line 3805
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); }  }  }  ; 
#line 3806
} 
#endif
#line 3808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex2Dgather(texture< int, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3809
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3811
::exit(___);}
#if 0
#line 3809
{ 
#line 3810
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
#line 3811
} 
#endif
#line 3813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex2Dgather(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3814
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3816
::exit(___);}
#if 0
#line 3814
{ 
#line 3815
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
#line 3816
} 
#endif
#line 3818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex2Dgather(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3819
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3821
::exit(___);}
#if 0
#line 3819
{ 
#line 3820
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
#line 3821
} 
#endif
#line 3823 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex2Dgather(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3824
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3826
::exit(___);}
#if 0
#line 3824
{ 
#line 3825
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
#line 3826
} 
#endif
#line 3828 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex2Dgather(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3829
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3831
::exit(___);}
#if 0
#line 3829
{ 
#line 3830
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; }  ; 
#line 3831
} 
#endif
#line 3833 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex2Dgather(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3834
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3836
::exit(___);}
#if 0
#line 3834
{ 
#line 3835
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; }  ; 
#line 3836
} 
#endif
#line 3838 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex2Dgather(texture< int3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3839
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3841
::exit(___);}
#if 0
#line 3839
{ 
#line 3840
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  ; 
#line 3841
} 
#endif
#line 3843 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex2Dgather(texture< uint3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3844
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3846
::exit(___);}
#if 0
#line 3844
{ 
#line 3845
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  ; 
#line 3846
} 
#endif
#line 3848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex2Dgather(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3849
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3851
::exit(___);}
#if 0
#line 3849
{ 
#line 3850
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return v; } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  }  ; 
#line 3851
} 
#endif
#line 3853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex2Dgather(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3854
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3856
::exit(___);}
#if 0
#line 3854
{ 
#line 3855
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return v; } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  }  ; 
#line 3856
} 
#endif
#line 3858 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< float, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3859
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3861
::exit(___);}
#if 0
#line 3859
{ 
#line 3860
{ float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
#line 3861
} 
#endif
#line 3863 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3864
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3866
::exit(___);}
#if 0
#line 3864
{ 
#line 3865
{ float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; } ; 
#line 3866
} 
#endif
#line 3868 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3869
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3871
::exit(___);}
#if 0
#line 3869
{ 
#line 3870
if (comp == 1) { float4 v = __ftex2Dgather< 1> (t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; }  ; 
#line 3871
} 
#endif
#line 3873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< float3, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3874
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3876
::exit(___);}
#if 0
#line 3874
{ 
#line 3875
if (comp == 2) { float4 v = __ftex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { float4 v = __ftex2Dgather< 1> (t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  ; 
#line 3876
} 
#endif
#line 3878 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, int comp) 
#line 3879
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3881
::exit(___);}
#if 0
#line 3879
{ 
#line 3880
if (comp == 3) { float4 v = __ftex2Dgather< 3> (t, make_float2(x, y)); return v; } else { if (comp == 2) { float4 v = __ftex2Dgather< 2> (t, make_float2(x, y)); return v; } else { if (comp == 1) { float4 v = __ftex2Dgather< 1> (t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather< 0> (t, make_float2(x, y)); return v; }  }  }  ; 
#line 3881
} 
#endif
#line 3890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3891
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3893
::exit(___);}
#if 0
#line 3891
{ 
#line 3892
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
#line 3893
} 
#endif
#line 3895 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3896
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3898
::exit(___);}
#if 0
#line 3896
{ 
#line 3897
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
#line 3898
} 
#endif
#line 3900 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3901
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3903
::exit(___);}
#if 0
#line 3901
{ 
#line 3902
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
#line 3903
} 
#endif
#line 3905 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3906
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3908
::exit(___);}
#if 0
#line 3906
{ 
#line 3907
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
#line 3908
} 
#endif
#line 3910 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3911
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3913
::exit(___);}
#if 0
#line 3911
{ 
#line 3912
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
#line 3913
} 
#endif
#line 3915 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3916
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3918
::exit(___);}
#if 0
#line 3916
{ 
#line 3917
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
#line 3918
} 
#endif
#line 3920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3921
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3923
::exit(___);}
#if 0
#line 3921
{ 
#line 3922
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
#line 3923
} 
#endif
#line 3925 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< char3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3926
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3928
::exit(___);}
#if 0
#line 3926
{ 
#line 3927
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
#line 3928
} 
#endif
#line 3930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< uchar3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3931
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3933
::exit(___);}
#if 0
#line 3931
{ 
#line 3932
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
#line 3933
} 
#endif
#line 3935 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3936
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3938
::exit(___);}
#if 0
#line 3936
{ 
#line 3937
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
#line 3938
} 
#endif
#line 3940 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3941
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3943
::exit(___);}
#if 0
#line 3941
{ 
#line 3942
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
#line 3943
} 
#endif
#line 3945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3946
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3948
::exit(___);}
#if 0
#line 3946
{ 
#line 3947
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
#line 3948
} 
#endif
#line 3950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3951
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3953
::exit(___);}
#if 0
#line 3951
{ 
#line 3952
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
#line 3953
} 
#endif
#line 3955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3956
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3958
::exit(___);}
#if 0
#line 3956
{ 
#line 3957
{ int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
#line 3958
} 
#endif
#line 3960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3961
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3963
::exit(___);}
#if 0
#line 3961
{ 
#line 3962
{ uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } ; 
#line 3963
} 
#endif
#line 3965 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3966
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3968
::exit(___);}
#if 0
#line 3966
{ 
#line 3967
if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
#line 3968
} 
#endif
#line 3970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3971
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3973
::exit(___);}
#if 0
#line 3971
{ 
#line 3972
if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  ; 
#line 3973
} 
#endif
#line 3975 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< short3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3976
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3978
::exit(___);}
#if 0
#line 3976
{ 
#line 3977
if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
#line 3978
} 
#endif
#line 3980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< ushort3, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3981
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3983
::exit(___);}
#if 0
#line 3981
{ 
#line 3982
if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  ; 
#line 3983
} 
#endif
#line 3985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3986
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3988
::exit(___);}
#if 0
#line 3986
{ 
#line 3987
if (comp == 3) { int4 v = __itex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { int4 v = __itex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { int4 v = __itex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
#line 3988
} 
#endif
#line 3990 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2Dgather(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, int comp) 
#line 3991
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)comp;
#line 3993
::exit(___);}
#if 0
#line 3991
{ 
#line 3992
if (comp == 3) { uint4 v = __utex2Dgather< 3> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 2) { uint4 v = __utex2Dgather< 2> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { if (comp == 1) { uint4 v = __utex2Dgather< 1> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather< 0> (t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); }  }  }  ; 
#line 3993
} 
#endif
#line 4007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex1DLod(texture< char, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4008
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 4008 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 4012 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 4016
} 
#endif
#line 4018 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex1DLod(texture< signed char, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4019
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4023
::exit(___);}
#if 0
#line 4019
{ 
#line 4020
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4022
return (signed char)(v.x); 
#line 4023
} 
#endif
#line 4025 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex1DLod(texture< unsigned char, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4026
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4030
::exit(___);}
#if 0
#line 4026
{ 
#line 4027
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4029
return (unsigned char)(v.x); 
#line 4030
} 
#endif
#line 4032 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex1DLod(texture< char1, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4033
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4037
::exit(___);}
#if 0
#line 4033
{ 
#line 4034
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4036
return make_char1(v.x); 
#line 4037
} 
#endif
#line 4039 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex1DLod(texture< uchar1, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4040
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4044
::exit(___);}
#if 0
#line 4040
{ 
#line 4041
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4043
return make_uchar1(v.x); 
#line 4044
} 
#endif
#line 4046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex1DLod(texture< char2, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4047
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4051
::exit(___);}
#if 0
#line 4047
{ 
#line 4048
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4050
return make_char2(v.x, v.y); 
#line 4051
} 
#endif
#line 4053 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex1DLod(texture< uchar2, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4054
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4058
::exit(___);}
#if 0
#line 4054
{ 
#line 4055
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4057
return make_uchar2(v.x, v.y); 
#line 4058
} 
#endif
#line 4060 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex1DLod(texture< char4, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4061
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4065
::exit(___);}
#if 0
#line 4061
{ 
#line 4062
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4064
return make_char4(v.x, v.y, v.z, v.w); 
#line 4065
} 
#endif
#line 4067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex1DLod(texture< uchar4, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4068
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4072
::exit(___);}
#if 0
#line 4068
{ 
#line 4069
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4071
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 4072
} 
#endif
#line 4080 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex1DLod(texture< short, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4081
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4085
::exit(___);}
#if 0
#line 4081
{ 
#line 4082
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4084
return (short)(v.x); 
#line 4085
} 
#endif
#line 4087 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex1DLod(texture< unsigned short, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4088
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4092
::exit(___);}
#if 0
#line 4088
{ 
#line 4089
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4091
return (unsigned short)(v.x); 
#line 4092
} 
#endif
#line 4094 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex1DLod(texture< short1, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4095
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4099
::exit(___);}
#if 0
#line 4095
{ 
#line 4096
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4098
return make_short1(v.x); 
#line 4099
} 
#endif
#line 4101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex1DLod(texture< ushort1, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4102
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4106
::exit(___);}
#if 0
#line 4102
{ 
#line 4103
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4105
return make_ushort1(v.x); 
#line 4106
} 
#endif
#line 4108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex1DLod(texture< short2, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4109
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4113
::exit(___);}
#if 0
#line 4109
{ 
#line 4110
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4112
return make_short2(v.x, v.y); 
#line 4113
} 
#endif
#line 4115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex1DLod(texture< ushort2, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4116
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4120
::exit(___);}
#if 0
#line 4116
{ 
#line 4117
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4119
return make_ushort2(v.x, v.y); 
#line 4120
} 
#endif
#line 4122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex1DLod(texture< short4, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4123
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4127
::exit(___);}
#if 0
#line 4123
{ 
#line 4124
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4126
return make_short4(v.x, v.y, v.z, v.w); 
#line 4127
} 
#endif
#line 4129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex1DLod(texture< ushort4, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4130
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4134
::exit(___);}
#if 0
#line 4130
{ 
#line 4131
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4133
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 4134
} 
#endif
#line 4142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex1DLod(texture< int, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4143
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4147
::exit(___);}
#if 0
#line 4143
{ 
#line 4144
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4146
return v.x; 
#line 4147
} 
#endif
#line 4149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex1DLod(texture< unsigned, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4150
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4154
::exit(___);}
#if 0
#line 4150
{ 
#line 4151
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4153
return v.x; 
#line 4154
} 
#endif
#line 4156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex1DLod(texture< int1, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4157
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4161
::exit(___);}
#if 0
#line 4157
{ 
#line 4158
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4160
return make_int1(v.x); 
#line 4161
} 
#endif
#line 4163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex1DLod(texture< uint1, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4164
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4168
::exit(___);}
#if 0
#line 4164
{ 
#line 4165
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4167
return make_uint1(v.x); 
#line 4168
} 
#endif
#line 4170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex1DLod(texture< int2, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4171
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4175
::exit(___);}
#if 0
#line 4171
{ 
#line 4172
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4174
return make_int2(v.x, v.y); 
#line 4175
} 
#endif
#line 4177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex1DLod(texture< uint2, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4178
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4182
::exit(___);}
#if 0
#line 4178
{ 
#line 4179
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4181
return make_uint2(v.x, v.y); 
#line 4182
} 
#endif
#line 4184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex1DLod(texture< int4, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4185
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4189
::exit(___);}
#if 0
#line 4185
{ 
#line 4186
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4188
return make_int4(v.x, v.y, v.z, v.w); 
#line 4189
} 
#endif
#line 4191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex1DLod(texture< uint4, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4192
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4196
::exit(___);}
#if 0
#line 4192
{ 
#line 4193
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4195
return make_uint4(v.x, v.y, v.z, v.w); 
#line 4196
} 
#endif
#line 4212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex1DLod(texture< long, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4213
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4217
::exit(___);}
#if 0
#line 4213
{ 
#line 4214
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4216
return (long)(v.x); 
#line 4217
} 
#endif
#line 4219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex1DLod(texture< unsigned long, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4220
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4224
::exit(___);}
#if 0
#line 4220
{ 
#line 4221
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4223
return (unsigned long)(v.x); 
#line 4224
} 
#endif
#line 4226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex1DLod(texture< long1, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4227
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4231
::exit(___);}
#if 0
#line 4227
{ 
#line 4228
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4230
return make_long1(v.x); 
#line 4231
} 
#endif
#line 4233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex1DLod(texture< ulong1, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4234
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4238
::exit(___);}
#if 0
#line 4234
{ 
#line 4235
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4237
return make_ulong1(v.x); 
#line 4238
} 
#endif
#line 4240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex1DLod(texture< long2, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4241
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4245
::exit(___);}
#if 0
#line 4241
{ 
#line 4242
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4244
return make_long2(v.x, v.y); 
#line 4245
} 
#endif
#line 4247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex1DLod(texture< ulong2, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4248
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4252
::exit(___);}
#if 0
#line 4248
{ 
#line 4249
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4251
return make_ulong2(v.x, v.y); 
#line 4252
} 
#endif
#line 4254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex1DLod(texture< long4, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4255
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4259
::exit(___);}
#if 0
#line 4255
{ 
#line 4256
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4258
return make_long4(v.x, v.y, v.z, v.w); 
#line 4259
} 
#endif
#line 4261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex1DLod(texture< ulong4, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4262
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4266
::exit(___);}
#if 0
#line 4262
{ 
#line 4263
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4265
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 4266
} 
#endif
#line 4276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLod(texture< float, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4277
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4281
::exit(___);}
#if 0
#line 4277
{ 
#line 4278
float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4280
return v.x; 
#line 4281
} 
#endif
#line 4283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLod(texture< float1, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4284
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4288
::exit(___);}
#if 0
#line 4284
{ 
#line 4285
float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4287
return make_float1(v.x); 
#line 4288
} 
#endif
#line 4290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLod(texture< float2, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4291
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4295
::exit(___);}
#if 0
#line 4291
{ 
#line 4292
float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4294
return make_float2(v.x, v.y); 
#line 4295
} 
#endif
#line 4297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLod(texture< float4, 1, cudaReadModeElementType>  t, float x, float level) 
#line 4298
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4302
::exit(___);}
#if 0
#line 4298
{ 
#line 4299
float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4301
return make_float4(v.x, v.y, v.z, v.w); 
#line 4302
} 
#endif
#line 4310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLod(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4311
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 4311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 4315 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4319
return w.x; 
#line 4320
} 
#endif
#line 4322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLod(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4323
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4328
::exit(___);}
#if 0
#line 4323
{ 
#line 4324
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4325
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4327
return w.x; 
#line 4328
} 
#endif
#line 4330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLod(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4331
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4336
::exit(___);}
#if 0
#line 4331
{ 
#line 4332
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4333
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4335
return w.x; 
#line 4336
} 
#endif
#line 4338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLod(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4339
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4344
::exit(___);}
#if 0
#line 4339
{ 
#line 4340
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4341
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4343
return make_float1(w.x); 
#line 4344
} 
#endif
#line 4346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLod(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4347
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4352
::exit(___);}
#if 0
#line 4347
{ 
#line 4348
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4349
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4351
return make_float1(w.x); 
#line 4352
} 
#endif
#line 4354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLod(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4355
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4360
::exit(___);}
#if 0
#line 4355
{ 
#line 4356
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4357
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4359
return make_float2(w.x, w.y); 
#line 4360
} 
#endif
#line 4362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLod(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4363
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4368
::exit(___);}
#if 0
#line 4363
{ 
#line 4364
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4365
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4367
return make_float2(w.x, w.y); 
#line 4368
} 
#endif
#line 4370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLod(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4371
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4376
::exit(___);}
#if 0
#line 4371
{ 
#line 4372
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4373
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4375
return make_float4(w.x, w.y, w.z, w.w); 
#line 4376
} 
#endif
#line 4378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLod(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4379
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4384
::exit(___);}
#if 0
#line 4379
{ 
#line 4380
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4381
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4383
return make_float4(w.x, w.y, w.z, w.w); 
#line 4384
} 
#endif
#line 4392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLod(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4393
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4398
::exit(___);}
#if 0
#line 4393
{ 
#line 4394
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4395
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4397
return w.x; 
#line 4398
} 
#endif
#line 4400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLod(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4401
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4406
::exit(___);}
#if 0
#line 4401
{ 
#line 4402
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4403
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4405
return w.x; 
#line 4406
} 
#endif
#line 4408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLod(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4409
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4414
::exit(___);}
#if 0
#line 4409
{ 
#line 4410
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4411
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4413
return make_float1(w.x); 
#line 4414
} 
#endif
#line 4416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLod(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4417
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4422
::exit(___);}
#if 0
#line 4417
{ 
#line 4418
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4419
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4421
return make_float1(w.x); 
#line 4422
} 
#endif
#line 4424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLod(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4425
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4430
::exit(___);}
#if 0
#line 4425
{ 
#line 4426
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4427
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4429
return make_float2(w.x, w.y); 
#line 4430
} 
#endif
#line 4432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLod(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4433
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4438
::exit(___);}
#if 0
#line 4433
{ 
#line 4434
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4435
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4437
return make_float2(w.x, w.y); 
#line 4438
} 
#endif
#line 4440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLod(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4441
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4446
::exit(___);}
#if 0
#line 4441
{ 
#line 4442
int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4443
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4445
return make_float4(w.x, w.y, w.z, w.w); 
#line 4446
} 
#endif
#line 4448 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLod(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x, float level) 
#line 4449
{int volatile ___ = 1;(void)t;(void)x;(void)level;
#line 4454
::exit(___);}
#if 0
#line 4449
{ 
#line 4450
uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level); 
#line 4451
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4453
return make_float4(w.x, w.y, w.z, w.w); 
#line 4454
} 
#endif
#line 4462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex2DLod(texture< char, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4463
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4471 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 4463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 4467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 4471
} 
#endif
#line 4473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex2DLod(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4474
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4478
::exit(___);}
#if 0
#line 4474
{ 
#line 4475
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4477
return (signed char)(v.x); 
#line 4478
} 
#endif
#line 4480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex2DLod(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4481
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4485
::exit(___);}
#if 0
#line 4481
{ 
#line 4482
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4484
return (unsigned char)(v.x); 
#line 4485
} 
#endif
#line 4487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex2DLod(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4488
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4492
::exit(___);}
#if 0
#line 4488
{ 
#line 4489
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4491
return make_char1(v.x); 
#line 4492
} 
#endif
#line 4494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex2DLod(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4495
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4499
::exit(___);}
#if 0
#line 4495
{ 
#line 4496
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4498
return make_uchar1(v.x); 
#line 4499
} 
#endif
#line 4501 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex2DLod(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4502
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4506
::exit(___);}
#if 0
#line 4502
{ 
#line 4503
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4505
return make_char2(v.x, v.y); 
#line 4506
} 
#endif
#line 4508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex2DLod(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4509
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4513
::exit(___);}
#if 0
#line 4509
{ 
#line 4510
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4512
return make_uchar2(v.x, v.y); 
#line 4513
} 
#endif
#line 4515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex2DLod(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4516
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4520
::exit(___);}
#if 0
#line 4516
{ 
#line 4517
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4519
return make_char4(v.x, v.y, v.z, v.w); 
#line 4520
} 
#endif
#line 4522 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex2DLod(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4523
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4527
::exit(___);}
#if 0
#line 4523
{ 
#line 4524
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4526
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 4527
} 
#endif
#line 4535 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex2DLod(texture< short, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4536
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4540
::exit(___);}
#if 0
#line 4536
{ 
#line 4537
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4539
return (short)(v.x); 
#line 4540
} 
#endif
#line 4542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex2DLod(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4543
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4547
::exit(___);}
#if 0
#line 4543
{ 
#line 4544
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4546
return (unsigned short)(v.x); 
#line 4547
} 
#endif
#line 4549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex2DLod(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4550
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4554
::exit(___);}
#if 0
#line 4550
{ 
#line 4551
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4553
return make_short1(v.x); 
#line 4554
} 
#endif
#line 4556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex2DLod(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4557
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4561
::exit(___);}
#if 0
#line 4557
{ 
#line 4558
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4560
return make_ushort1(v.x); 
#line 4561
} 
#endif
#line 4563 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex2DLod(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4564
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4568
::exit(___);}
#if 0
#line 4564
{ 
#line 4565
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4567
return make_short2(v.x, v.y); 
#line 4568
} 
#endif
#line 4570 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex2DLod(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4571
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4575
::exit(___);}
#if 0
#line 4571
{ 
#line 4572
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4574
return make_ushort2(v.x, v.y); 
#line 4575
} 
#endif
#line 4577 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex2DLod(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4578
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4582
::exit(___);}
#if 0
#line 4578
{ 
#line 4579
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4581
return make_short4(v.x, v.y, v.z, v.w); 
#line 4582
} 
#endif
#line 4584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex2DLod(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4585
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4589
::exit(___);}
#if 0
#line 4585
{ 
#line 4586
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4588
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 4589
} 
#endif
#line 4597 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex2DLod(texture< int, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4598
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4602
::exit(___);}
#if 0
#line 4598
{ 
#line 4599
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4601
return v.x; 
#line 4602
} 
#endif
#line 4604 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex2DLod(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4605
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4609
::exit(___);}
#if 0
#line 4605
{ 
#line 4606
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4608
return v.x; 
#line 4609
} 
#endif
#line 4611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex2DLod(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4612
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4616
::exit(___);}
#if 0
#line 4612
{ 
#line 4613
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4615
return make_int1(v.x); 
#line 4616
} 
#endif
#line 4618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex2DLod(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4619
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4623
::exit(___);}
#if 0
#line 4619
{ 
#line 4620
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4622
return make_uint1(v.x); 
#line 4623
} 
#endif
#line 4625 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex2DLod(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4626
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4630
::exit(___);}
#if 0
#line 4626
{ 
#line 4627
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4629
return make_int2(v.x, v.y); 
#line 4630
} 
#endif
#line 4632 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex2DLod(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4633
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4637
::exit(___);}
#if 0
#line 4633
{ 
#line 4634
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4636
return make_uint2(v.x, v.y); 
#line 4637
} 
#endif
#line 4639 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex2DLod(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4640
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4644
::exit(___);}
#if 0
#line 4640
{ 
#line 4641
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4643
return make_int4(v.x, v.y, v.z, v.w); 
#line 4644
} 
#endif
#line 4646 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex2DLod(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4647
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4651
::exit(___);}
#if 0
#line 4647
{ 
#line 4648
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4650
return make_uint4(v.x, v.y, v.z, v.w); 
#line 4651
} 
#endif
#line 4661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex2DLod(texture< long, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4662
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4666
::exit(___);}
#if 0
#line 4662
{ 
#line 4663
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4665
return (long)(v.x); 
#line 4666
} 
#endif
#line 4668 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex2DLod(texture< unsigned long, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4669
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4673
::exit(___);}
#if 0
#line 4669
{ 
#line 4670
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4672
return (unsigned long)(v.x); 
#line 4673
} 
#endif
#line 4675 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex2DLod(texture< long1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4676
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4680
::exit(___);}
#if 0
#line 4676
{ 
#line 4677
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4679
return make_long1(v.x); 
#line 4680
} 
#endif
#line 4682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex2DLod(texture< ulong1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4683
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4687
::exit(___);}
#if 0
#line 4683
{ 
#line 4684
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4686
return make_ulong1(v.x); 
#line 4687
} 
#endif
#line 4689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex2DLod(texture< long2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4690
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4694
::exit(___);}
#if 0
#line 4690
{ 
#line 4691
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4693
return make_long2(v.x, v.y); 
#line 4694
} 
#endif
#line 4696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex2DLod(texture< ulong2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4697
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4701
::exit(___);}
#if 0
#line 4697
{ 
#line 4698
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4700
return make_ulong2(v.x, v.y); 
#line 4701
} 
#endif
#line 4703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex2DLod(texture< long4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4704
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4708
::exit(___);}
#if 0
#line 4704
{ 
#line 4705
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4707
return make_long4(v.x, v.y, v.z, v.w); 
#line 4708
} 
#endif
#line 4710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex2DLod(texture< ulong4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4711
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4715
::exit(___);}
#if 0
#line 4711
{ 
#line 4712
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4714
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 4715
} 
#endif
#line 4725 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLod(texture< float, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4726
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4730
::exit(___);}
#if 0
#line 4726
{ 
#line 4727
float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4729
return v.x; 
#line 4730
} 
#endif
#line 4732 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLod(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4733
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4737
::exit(___);}
#if 0
#line 4733
{ 
#line 4734
float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4736
return make_float1(v.x); 
#line 4737
} 
#endif
#line 4739 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLod(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4740
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4744
::exit(___);}
#if 0
#line 4740
{ 
#line 4741
float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4743
return make_float2(v.x, v.y); 
#line 4744
} 
#endif
#line 4746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLod(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, float level) 
#line 4747
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4751
::exit(___);}
#if 0
#line 4747
{ 
#line 4748
float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4750
return make_float4(v.x, v.y, v.z, v.w); 
#line 4751
} 
#endif
#line 4759 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLod(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4760
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4769 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 4760 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 4764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4768
return w.x; 
#line 4769
} 
#endif
#line 4771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLod(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4772
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4777
::exit(___);}
#if 0
#line 4772
{ 
#line 4773
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4774
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4776
return w.x; 
#line 4777
} 
#endif
#line 4779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLod(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4780
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4785
::exit(___);}
#if 0
#line 4780
{ 
#line 4781
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4782
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4784
return w.x; 
#line 4785
} 
#endif
#line 4787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLod(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4788
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4793
::exit(___);}
#if 0
#line 4788
{ 
#line 4789
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4790
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4792
return make_float1(w.x); 
#line 4793
} 
#endif
#line 4795 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLod(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4796
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4801
::exit(___);}
#if 0
#line 4796
{ 
#line 4797
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4798
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4800
return make_float1(w.x); 
#line 4801
} 
#endif
#line 4803 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLod(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4804
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4809
::exit(___);}
#if 0
#line 4804
{ 
#line 4805
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4806
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4808
return make_float2(w.x, w.y); 
#line 4809
} 
#endif
#line 4811 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLod(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4812
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4817
::exit(___);}
#if 0
#line 4812
{ 
#line 4813
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4814
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4816
return make_float2(w.x, w.y); 
#line 4817
} 
#endif
#line 4819 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLod(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4820
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4825
::exit(___);}
#if 0
#line 4820
{ 
#line 4821
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4822
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4824
return make_float4(w.x, w.y, w.z, w.w); 
#line 4825
} 
#endif
#line 4827 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLod(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4828
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4833
::exit(___);}
#if 0
#line 4828
{ 
#line 4829
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4830
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4832
return make_float4(w.x, w.y, w.z, w.w); 
#line 4833
} 
#endif
#line 4841 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLod(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4842
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4847
::exit(___);}
#if 0
#line 4842
{ 
#line 4843
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4844
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4846
return w.x; 
#line 4847
} 
#endif
#line 4849 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLod(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4850
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4855
::exit(___);}
#if 0
#line 4850
{ 
#line 4851
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4852
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4854
return w.x; 
#line 4855
} 
#endif
#line 4857 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLod(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4858
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4863
::exit(___);}
#if 0
#line 4858
{ 
#line 4859
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4860
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4862
return make_float1(w.x); 
#line 4863
} 
#endif
#line 4865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLod(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4866
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4871
::exit(___);}
#if 0
#line 4866
{ 
#line 4867
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4868
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4870
return make_float1(w.x); 
#line 4871
} 
#endif
#line 4873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLod(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4874
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4879
::exit(___);}
#if 0
#line 4874
{ 
#line 4875
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4876
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4878
return make_float2(w.x, w.y); 
#line 4879
} 
#endif
#line 4881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLod(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4882
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4887
::exit(___);}
#if 0
#line 4882
{ 
#line 4883
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4884
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4886
return make_float2(w.x, w.y); 
#line 4887
} 
#endif
#line 4889 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLod(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4890
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4895
::exit(___);}
#if 0
#line 4890
{ 
#line 4891
int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4892
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4894
return make_float4(w.x, w.y, w.z, w.w); 
#line 4895
} 
#endif
#line 4897 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLod(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float level) 
#line 4898
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)level;
#line 4903
::exit(___);}
#if 0
#line 4898
{ 
#line 4899
uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level); 
#line 4900
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 4902
return make_float4(w.x, w.y, w.z, w.w); 
#line 4903
} 
#endif
#line 4911 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex1DLayeredLod(texture< char, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 4912
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 4920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 4912 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 4916 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 4919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 4920
} 
#endif
#line 4922 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex1DLayeredLod(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 4923
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 4927
::exit(___);}
#if 0
#line 4923
{ 
#line 4924
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 4926
return (signed char)(v.x); 
#line 4927
} 
#endif
#line 4929 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex1DLayeredLod(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 4930
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 4934
::exit(___);}
#if 0
#line 4930
{ 
#line 4931
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 4933
return (unsigned char)(v.x); 
#line 4934
} 
#endif
#line 4936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex1DLayeredLod(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 4937
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 4941
::exit(___);}
#if 0
#line 4937
{ 
#line 4938
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 4940
return make_char1(v.x); 
#line 4941
} 
#endif
#line 4943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex1DLayeredLod(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 4944
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 4948
::exit(___);}
#if 0
#line 4944
{ 
#line 4945
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 4947
return make_uchar1(v.x); 
#line 4948
} 
#endif
#line 4950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex1DLayeredLod(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 4951
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 4955
::exit(___);}
#if 0
#line 4951
{ 
#line 4952
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 4954
return make_char2(v.x, v.y); 
#line 4955
} 
#endif
#line 4957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex1DLayeredLod(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 4958
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 4962
::exit(___);}
#if 0
#line 4958
{ 
#line 4959
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 4961
return make_uchar2(v.x, v.y); 
#line 4962
} 
#endif
#line 4964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex1DLayeredLod(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 4965
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 4969
::exit(___);}
#if 0
#line 4965
{ 
#line 4966
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 4968
return make_char4(v.x, v.y, v.z, v.w); 
#line 4969
} 
#endif
#line 4971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex1DLayeredLod(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 4972
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 4976
::exit(___);}
#if 0
#line 4972
{ 
#line 4973
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 4975
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 4976
} 
#endif
#line 4984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex1DLayeredLod(texture< short, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 4985
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 4989
::exit(___);}
#if 0
#line 4985
{ 
#line 4986
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 4988
return (short)(v.x); 
#line 4989
} 
#endif
#line 4991 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex1DLayeredLod(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 4992
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 4996
::exit(___);}
#if 0
#line 4992
{ 
#line 4993
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 4995
return (unsigned short)(v.x); 
#line 4996
} 
#endif
#line 4998 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex1DLayeredLod(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 4999
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5003
::exit(___);}
#if 0
#line 4999
{ 
#line 5000
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5002
return make_short1(v.x); 
#line 5003
} 
#endif
#line 5005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex1DLayeredLod(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5006
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5010
::exit(___);}
#if 0
#line 5006
{ 
#line 5007
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5009
return make_ushort1(v.x); 
#line 5010
} 
#endif
#line 5012 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex1DLayeredLod(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5013
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5017
::exit(___);}
#if 0
#line 5013
{ 
#line 5014
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5016
return make_short2(v.x, v.y); 
#line 5017
} 
#endif
#line 5019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex1DLayeredLod(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5020
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5024
::exit(___);}
#if 0
#line 5020
{ 
#line 5021
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5023
return make_ushort2(v.x, v.y); 
#line 5024
} 
#endif
#line 5026 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex1DLayeredLod(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5027
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5031
::exit(___);}
#if 0
#line 5027
{ 
#line 5028
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5030
return make_short4(v.x, v.y, v.z, v.w); 
#line 5031
} 
#endif
#line 5033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex1DLayeredLod(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5034
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5038
::exit(___);}
#if 0
#line 5034
{ 
#line 5035
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5037
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 5038
} 
#endif
#line 5046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex1DLayeredLod(texture< int, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5047
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5051
::exit(___);}
#if 0
#line 5047
{ 
#line 5048
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5050
return v.x; 
#line 5051
} 
#endif
#line 5053 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex1DLayeredLod(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5054
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5058
::exit(___);}
#if 0
#line 5054
{ 
#line 5055
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5057
return v.x; 
#line 5058
} 
#endif
#line 5060 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex1DLayeredLod(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5061
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5065
::exit(___);}
#if 0
#line 5061
{ 
#line 5062
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5064
return make_int1(v.x); 
#line 5065
} 
#endif
#line 5067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex1DLayeredLod(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5068
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5072
::exit(___);}
#if 0
#line 5068
{ 
#line 5069
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5071
return make_uint1(v.x); 
#line 5072
} 
#endif
#line 5074 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex1DLayeredLod(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5075
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5079
::exit(___);}
#if 0
#line 5075
{ 
#line 5076
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5078
return make_int2(v.x, v.y); 
#line 5079
} 
#endif
#line 5081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex1DLayeredLod(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5082
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5086
::exit(___);}
#if 0
#line 5082
{ 
#line 5083
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5085
return make_uint2(v.x, v.y); 
#line 5086
} 
#endif
#line 5088 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex1DLayeredLod(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5089
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5093
::exit(___);}
#if 0
#line 5089
{ 
#line 5090
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5092
return make_int4(v.x, v.y, v.z, v.w); 
#line 5093
} 
#endif
#line 5095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex1DLayeredLod(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5096
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5100
::exit(___);}
#if 0
#line 5096
{ 
#line 5097
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5099
return make_uint4(v.x, v.y, v.z, v.w); 
#line 5100
} 
#endif
#line 5110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex1DLayeredLod(texture< long, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5111
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5115
::exit(___);}
#if 0
#line 5111
{ 
#line 5112
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5114
return (long)(v.x); 
#line 5115
} 
#endif
#line 5117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex1DLayeredLod(texture< unsigned long, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5118
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5122
::exit(___);}
#if 0
#line 5118
{ 
#line 5119
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5121
return (unsigned long)(v.x); 
#line 5122
} 
#endif
#line 5124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex1DLayeredLod(texture< long1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5125
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5129
::exit(___);}
#if 0
#line 5125
{ 
#line 5126
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5128
return make_long1(v.x); 
#line 5129
} 
#endif
#line 5131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex1DLayeredLod(texture< ulong1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5132
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5136
::exit(___);}
#if 0
#line 5132
{ 
#line 5133
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5135
return make_ulong1(v.x); 
#line 5136
} 
#endif
#line 5138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex1DLayeredLod(texture< long2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5139
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5143
::exit(___);}
#if 0
#line 5139
{ 
#line 5140
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5142
return make_long2(v.x, v.y); 
#line 5143
} 
#endif
#line 5145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex1DLayeredLod(texture< ulong2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5146
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5150
::exit(___);}
#if 0
#line 5146
{ 
#line 5147
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5149
return make_ulong2(v.x, v.y); 
#line 5150
} 
#endif
#line 5152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex1DLayeredLod(texture< long4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5153
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5157
::exit(___);}
#if 0
#line 5153
{ 
#line 5154
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5156
return make_long4(v.x, v.y, v.z, v.w); 
#line 5157
} 
#endif
#line 5159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex1DLayeredLod(texture< ulong4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5160
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5164
::exit(___);}
#if 0
#line 5160
{ 
#line 5161
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5163
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 5164
} 
#endif
#line 5174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayeredLod(texture< float, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5175
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5179
::exit(___);}
#if 0
#line 5175
{ 
#line 5176
float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5178
return v.x; 
#line 5179
} 
#endif
#line 5181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayeredLod(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5182
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5186
::exit(___);}
#if 0
#line 5182
{ 
#line 5183
float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5185
return make_float1(v.x); 
#line 5186
} 
#endif
#line 5188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayeredLod(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5189
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5193
::exit(___);}
#if 0
#line 5189
{ 
#line 5190
float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5192
return make_float2(v.x, v.y); 
#line 5193
} 
#endif
#line 5195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayeredLod(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer, float level) 
#line 5196
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5200
::exit(___);}
#if 0
#line 5196
{ 
#line 5197
float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5199
return make_float4(v.x, v.y, v.z, v.w); 
#line 5200
} 
#endif
#line 5208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayeredLod(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5209
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 5209 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 5213 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5217
return w.x; 
#line 5218
} 
#endif
#line 5220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayeredLod(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5221
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5226
::exit(___);}
#if 0
#line 5221
{ 
#line 5222
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5223
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5225
return w.x; 
#line 5226
} 
#endif
#line 5228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayeredLod(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5229
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5234
::exit(___);}
#if 0
#line 5229
{ 
#line 5230
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5231
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5233
return w.x; 
#line 5234
} 
#endif
#line 5236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayeredLod(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5237
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5242
::exit(___);}
#if 0
#line 5237
{ 
#line 5238
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5239
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5241
return make_float1(w.x); 
#line 5242
} 
#endif
#line 5244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayeredLod(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5245
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5250
::exit(___);}
#if 0
#line 5245
{ 
#line 5246
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5247
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5249
return make_float1(w.x); 
#line 5250
} 
#endif
#line 5252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayeredLod(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5253
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5258
::exit(___);}
#if 0
#line 5253
{ 
#line 5254
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5255
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5257
return make_float2(w.x, w.y); 
#line 5258
} 
#endif
#line 5260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayeredLod(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5261
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5266
::exit(___);}
#if 0
#line 5261
{ 
#line 5262
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5263
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5265
return make_float2(w.x, w.y); 
#line 5266
} 
#endif
#line 5268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayeredLod(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5269
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5274
::exit(___);}
#if 0
#line 5269
{ 
#line 5270
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5271
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5273
return make_float4(w.x, w.y, w.z, w.w); 
#line 5274
} 
#endif
#line 5276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayeredLod(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5277
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5282
::exit(___);}
#if 0
#line 5277
{ 
#line 5278
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5279
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5281
return make_float4(w.x, w.y, w.z, w.w); 
#line 5282
} 
#endif
#line 5290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayeredLod(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5291
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5296
::exit(___);}
#if 0
#line 5291
{ 
#line 5292
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5293
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5295
return w.x; 
#line 5296
} 
#endif
#line 5298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayeredLod(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5299
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5304
::exit(___);}
#if 0
#line 5299
{ 
#line 5300
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5301
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5303
return w.x; 
#line 5304
} 
#endif
#line 5306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayeredLod(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5307
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5312
::exit(___);}
#if 0
#line 5307
{ 
#line 5308
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5309
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5311
return make_float1(w.x); 
#line 5312
} 
#endif
#line 5314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayeredLod(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5315
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5320
::exit(___);}
#if 0
#line 5315
{ 
#line 5316
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5317
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5319
return make_float1(w.x); 
#line 5320
} 
#endif
#line 5322 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayeredLod(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5323
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5328
::exit(___);}
#if 0
#line 5323
{ 
#line 5324
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5325
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5327
return make_float2(w.x, w.y); 
#line 5328
} 
#endif
#line 5330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayeredLod(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5331
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5336
::exit(___);}
#if 0
#line 5331
{ 
#line 5332
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5333
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5335
return make_float2(w.x, w.y); 
#line 5336
} 
#endif
#line 5338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayeredLod(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5339
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5344
::exit(___);}
#if 0
#line 5339
{ 
#line 5340
int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5341
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5343
return make_float4(w.x, w.y, w.z, w.w); 
#line 5344
} 
#endif
#line 5346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayeredLod(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float level) 
#line 5347
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)level;
#line 5352
::exit(___);}
#if 0
#line 5347
{ 
#line 5348
uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level); 
#line 5349
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5351
return make_float4(w.x, w.y, w.z, w.w); 
#line 5352
} 
#endif
#line 5360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex2DLayeredLod(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5361
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 5361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 5365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 5369
} 
#endif
#line 5371 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex2DLayeredLod(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5372
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5376
::exit(___);}
#if 0
#line 5372
{ 
#line 5373
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5375
return (signed char)(v.x); 
#line 5376
} 
#endif
#line 5378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex2DLayeredLod(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5379
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5383
::exit(___);}
#if 0
#line 5379
{ 
#line 5380
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5382
return (unsigned char)(v.x); 
#line 5383
} 
#endif
#line 5385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex2DLayeredLod(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5386
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5390
::exit(___);}
#if 0
#line 5386
{ 
#line 5387
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5389
return make_char1(v.x); 
#line 5390
} 
#endif
#line 5392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex2DLayeredLod(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5393
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5397
::exit(___);}
#if 0
#line 5393
{ 
#line 5394
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5396
return make_uchar1(v.x); 
#line 5397
} 
#endif
#line 5399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex2DLayeredLod(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5400
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5404
::exit(___);}
#if 0
#line 5400
{ 
#line 5401
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5403
return make_char2(v.x, v.y); 
#line 5404
} 
#endif
#line 5406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex2DLayeredLod(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5407
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5411
::exit(___);}
#if 0
#line 5407
{ 
#line 5408
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5410
return make_uchar2(v.x, v.y); 
#line 5411
} 
#endif
#line 5413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex2DLayeredLod(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5414
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5418
::exit(___);}
#if 0
#line 5414
{ 
#line 5415
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5417
return make_char4(v.x, v.y, v.z, v.w); 
#line 5418
} 
#endif
#line 5420 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex2DLayeredLod(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5421
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5425
::exit(___);}
#if 0
#line 5421
{ 
#line 5422
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5424
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 5425
} 
#endif
#line 5433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex2DLayeredLod(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5434
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5438
::exit(___);}
#if 0
#line 5434
{ 
#line 5435
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5437
return (short)(v.x); 
#line 5438
} 
#endif
#line 5440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex2DLayeredLod(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5441
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5445
::exit(___);}
#if 0
#line 5441
{ 
#line 5442
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5444
return (unsigned short)(v.x); 
#line 5445
} 
#endif
#line 5447 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex2DLayeredLod(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5448
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5452
::exit(___);}
#if 0
#line 5448
{ 
#line 5449
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5451
return make_short1(v.x); 
#line 5452
} 
#endif
#line 5454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex2DLayeredLod(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5455
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5459
::exit(___);}
#if 0
#line 5455
{ 
#line 5456
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5458
return make_ushort1(v.x); 
#line 5459
} 
#endif
#line 5461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex2DLayeredLod(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5462
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5466
::exit(___);}
#if 0
#line 5462
{ 
#line 5463
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5465
return make_short2(v.x, v.y); 
#line 5466
} 
#endif
#line 5468 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex2DLayeredLod(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5469
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5473
::exit(___);}
#if 0
#line 5469
{ 
#line 5470
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5472
return make_ushort2(v.x, v.y); 
#line 5473
} 
#endif
#line 5475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex2DLayeredLod(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5476
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5480
::exit(___);}
#if 0
#line 5476
{ 
#line 5477
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5479
return make_short4(v.x, v.y, v.z, v.w); 
#line 5480
} 
#endif
#line 5482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex2DLayeredLod(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5483
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5487
::exit(___);}
#if 0
#line 5483
{ 
#line 5484
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5486
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 5487
} 
#endif
#line 5495 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex2DLayeredLod(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5496
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5500
::exit(___);}
#if 0
#line 5496
{ 
#line 5497
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5499
return v.x; 
#line 5500
} 
#endif
#line 5502 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex2DLayeredLod(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5503
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5507
::exit(___);}
#if 0
#line 5503
{ 
#line 5504
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5506
return v.x; 
#line 5507
} 
#endif
#line 5509 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex2DLayeredLod(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5510
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5514
::exit(___);}
#if 0
#line 5510
{ 
#line 5511
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5513
return make_int1(v.x); 
#line 5514
} 
#endif
#line 5516 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex2DLayeredLod(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5517
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5521
::exit(___);}
#if 0
#line 5517
{ 
#line 5518
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5520
return make_uint1(v.x); 
#line 5521
} 
#endif
#line 5523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex2DLayeredLod(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5524
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5528
::exit(___);}
#if 0
#line 5524
{ 
#line 5525
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5527
return make_int2(v.x, v.y); 
#line 5528
} 
#endif
#line 5530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex2DLayeredLod(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5531
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5535
::exit(___);}
#if 0
#line 5531
{ 
#line 5532
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5534
return make_uint2(v.x, v.y); 
#line 5535
} 
#endif
#line 5537 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex2DLayeredLod(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5538
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5542
::exit(___);}
#if 0
#line 5538
{ 
#line 5539
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5541
return make_int4(v.x, v.y, v.z, v.w); 
#line 5542
} 
#endif
#line 5544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex2DLayeredLod(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5545
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5549
::exit(___);}
#if 0
#line 5545
{ 
#line 5546
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5548
return make_uint4(v.x, v.y, v.z, v.w); 
#line 5549
} 
#endif
#line 5559 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex2DLayeredLod(texture< long, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5560
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5564
::exit(___);}
#if 0
#line 5560
{ 
#line 5561
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5563
return (long)(v.x); 
#line 5564
} 
#endif
#line 5566 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex2DLayeredLod(texture< unsigned long, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5567
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5571
::exit(___);}
#if 0
#line 5567
{ 
#line 5568
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5570
return (unsigned long)(v.x); 
#line 5571
} 
#endif
#line 5573 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex2DLayeredLod(texture< long1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5574
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5578
::exit(___);}
#if 0
#line 5574
{ 
#line 5575
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5577
return make_long1(v.x); 
#line 5578
} 
#endif
#line 5580 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex2DLayeredLod(texture< ulong1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5581
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5585
::exit(___);}
#if 0
#line 5581
{ 
#line 5582
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5584
return make_ulong1(v.x); 
#line 5585
} 
#endif
#line 5587 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex2DLayeredLod(texture< long2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5588
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5592
::exit(___);}
#if 0
#line 5588
{ 
#line 5589
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5591
return make_long2(v.x, v.y); 
#line 5592
} 
#endif
#line 5594 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex2DLayeredLod(texture< ulong2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5595
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5599
::exit(___);}
#if 0
#line 5595
{ 
#line 5596
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5598
return make_ulong2(v.x, v.y); 
#line 5599
} 
#endif
#line 5601 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex2DLayeredLod(texture< long4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5602
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5606
::exit(___);}
#if 0
#line 5602
{ 
#line 5603
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5605
return make_long4(v.x, v.y, v.z, v.w); 
#line 5606
} 
#endif
#line 5608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex2DLayeredLod(texture< ulong4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5609
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5613
::exit(___);}
#if 0
#line 5609
{ 
#line 5610
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5612
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 5613
} 
#endif
#line 5623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayeredLod(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5624
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5628
::exit(___);}
#if 0
#line 5624
{ 
#line 5625
float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5627
return v.x; 
#line 5628
} 
#endif
#line 5630 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayeredLod(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5631
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5635
::exit(___);}
#if 0
#line 5631
{ 
#line 5632
float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5634
return make_float1(v.x); 
#line 5635
} 
#endif
#line 5637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayeredLod(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5638
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5642
::exit(___);}
#if 0
#line 5638
{ 
#line 5639
float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5641
return make_float2(v.x, v.y); 
#line 5642
} 
#endif
#line 5644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayeredLod(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float level) 
#line 5645
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5649
::exit(___);}
#if 0
#line 5645
{ 
#line 5646
float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5648
return make_float4(v.x, v.y, v.z, v.w); 
#line 5649
} 
#endif
#line 5657 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayeredLod(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5658
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 5658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 5662 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5664 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5666
return w.x; 
#line 5667
} 
#endif
#line 5669 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayeredLod(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5670
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5675
::exit(___);}
#if 0
#line 5670
{ 
#line 5671
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5672
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5674
return w.x; 
#line 5675
} 
#endif
#line 5677 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayeredLod(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5678
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5683
::exit(___);}
#if 0
#line 5678
{ 
#line 5679
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5680
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5682
return w.x; 
#line 5683
} 
#endif
#line 5685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayeredLod(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5686
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5691
::exit(___);}
#if 0
#line 5686
{ 
#line 5687
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5688
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5690
return make_float1(w.x); 
#line 5691
} 
#endif
#line 5693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayeredLod(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5694
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5699
::exit(___);}
#if 0
#line 5694
{ 
#line 5695
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5696
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5698
return make_float1(w.x); 
#line 5699
} 
#endif
#line 5701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayeredLod(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5702
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5707
::exit(___);}
#if 0
#line 5702
{ 
#line 5703
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5704
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5706
return make_float2(w.x, w.y); 
#line 5707
} 
#endif
#line 5709 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayeredLod(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5710
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5715
::exit(___);}
#if 0
#line 5710
{ 
#line 5711
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5712
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5714
return make_float2(w.x, w.y); 
#line 5715
} 
#endif
#line 5717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayeredLod(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5718
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5723
::exit(___);}
#if 0
#line 5718
{ 
#line 5719
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5720
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5722
return make_float4(w.x, w.y, w.z, w.w); 
#line 5723
} 
#endif
#line 5725 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayeredLod(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5726
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5731
::exit(___);}
#if 0
#line 5726
{ 
#line 5727
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5728
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5730
return make_float4(w.x, w.y, w.z, w.w); 
#line 5731
} 
#endif
#line 5739 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayeredLod(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5740
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5745
::exit(___);}
#if 0
#line 5740
{ 
#line 5741
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5742
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5744
return w.x; 
#line 5745
} 
#endif
#line 5747 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayeredLod(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5748
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5753
::exit(___);}
#if 0
#line 5748
{ 
#line 5749
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5750
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5752
return w.x; 
#line 5753
} 
#endif
#line 5755 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayeredLod(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5756
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5761
::exit(___);}
#if 0
#line 5756
{ 
#line 5757
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5758
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5760
return make_float1(w.x); 
#line 5761
} 
#endif
#line 5763 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayeredLod(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5764
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5769
::exit(___);}
#if 0
#line 5764
{ 
#line 5765
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5766
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5768
return make_float1(w.x); 
#line 5769
} 
#endif
#line 5771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayeredLod(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5772
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5777
::exit(___);}
#if 0
#line 5772
{ 
#line 5773
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5774
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5776
return make_float2(w.x, w.y); 
#line 5777
} 
#endif
#line 5779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayeredLod(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5780
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5785
::exit(___);}
#if 0
#line 5780
{ 
#line 5781
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5782
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5784
return make_float2(w.x, w.y); 
#line 5785
} 
#endif
#line 5787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayeredLod(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5788
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5793
::exit(___);}
#if 0
#line 5788
{ 
#line 5789
int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5790
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5792
return make_float4(w.x, w.y, w.z, w.w); 
#line 5793
} 
#endif
#line 5795 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayeredLod(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float level) 
#line 5796
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)level;
#line 5801
::exit(___);}
#if 0
#line 5796
{ 
#line 5797
uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level); 
#line 5798
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 5800
return make_float4(w.x, w.y, w.z, w.w); 
#line 5801
} 
#endif
#line 5809 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex3DLod(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5810
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 5810 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 5814 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5817 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 5818
} 
#endif
#line 5820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex3DLod(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5821
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5825
::exit(___);}
#if 0
#line 5821
{ 
#line 5822
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5824
return (signed char)(v.x); 
#line 5825
} 
#endif
#line 5827 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex3DLod(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5828
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5832
::exit(___);}
#if 0
#line 5828
{ 
#line 5829
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5831
return (unsigned char)(v.x); 
#line 5832
} 
#endif
#line 5834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex3DLod(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5835
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5839
::exit(___);}
#if 0
#line 5835
{ 
#line 5836
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5838
return make_char1(v.x); 
#line 5839
} 
#endif
#line 5841 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex3DLod(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5842
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5846
::exit(___);}
#if 0
#line 5842
{ 
#line 5843
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5845
return make_uchar1(v.x); 
#line 5846
} 
#endif
#line 5848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex3DLod(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5849
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5853
::exit(___);}
#if 0
#line 5849
{ 
#line 5850
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5852
return make_char2(v.x, v.y); 
#line 5853
} 
#endif
#line 5855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex3DLod(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5856
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5860
::exit(___);}
#if 0
#line 5856
{ 
#line 5857
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5859
return make_uchar2(v.x, v.y); 
#line 5860
} 
#endif
#line 5862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex3DLod(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5863
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5867
::exit(___);}
#if 0
#line 5863
{ 
#line 5864
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5866
return make_char4(v.x, v.y, v.z, v.w); 
#line 5867
} 
#endif
#line 5869 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex3DLod(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5870
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5874
::exit(___);}
#if 0
#line 5870
{ 
#line 5871
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5873
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 5874
} 
#endif
#line 5882 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex3DLod(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5883
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5887
::exit(___);}
#if 0
#line 5883
{ 
#line 5884
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5886
return (short)(v.x); 
#line 5887
} 
#endif
#line 5889 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex3DLod(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5890
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5894
::exit(___);}
#if 0
#line 5890
{ 
#line 5891
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5893
return (unsigned short)(v.x); 
#line 5894
} 
#endif
#line 5896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex3DLod(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5897
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5901
::exit(___);}
#if 0
#line 5897
{ 
#line 5898
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5900
return make_short1(v.x); 
#line 5901
} 
#endif
#line 5903 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex3DLod(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5904
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5908
::exit(___);}
#if 0
#line 5904
{ 
#line 5905
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5907
return make_ushort1(v.x); 
#line 5908
} 
#endif
#line 5910 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex3DLod(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5911
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5915
::exit(___);}
#if 0
#line 5911
{ 
#line 5912
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5914
return make_short2(v.x, v.y); 
#line 5915
} 
#endif
#line 5917 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex3DLod(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5918
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5922
::exit(___);}
#if 0
#line 5918
{ 
#line 5919
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5921
return make_ushort2(v.x, v.y); 
#line 5922
} 
#endif
#line 5924 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex3DLod(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5925
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5929
::exit(___);}
#if 0
#line 5925
{ 
#line 5926
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5928
return make_short4(v.x, v.y, v.z, v.w); 
#line 5929
} 
#endif
#line 5931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex3DLod(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5932
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5936
::exit(___);}
#if 0
#line 5932
{ 
#line 5933
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5935
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 5936
} 
#endif
#line 5944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex3DLod(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5945
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5949
::exit(___);}
#if 0
#line 5945
{ 
#line 5946
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5948
return v.x; 
#line 5949
} 
#endif
#line 5951 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex3DLod(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5952
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5956
::exit(___);}
#if 0
#line 5952
{ 
#line 5953
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5955
return v.x; 
#line 5956
} 
#endif
#line 5958 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex3DLod(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5959
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5963
::exit(___);}
#if 0
#line 5959
{ 
#line 5960
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5962
return make_int1(v.x); 
#line 5963
} 
#endif
#line 5965 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex3DLod(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5966
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5970
::exit(___);}
#if 0
#line 5966
{ 
#line 5967
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5969
return make_uint1(v.x); 
#line 5970
} 
#endif
#line 5972 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex3DLod(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5973
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5977
::exit(___);}
#if 0
#line 5973
{ 
#line 5974
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5976
return make_int2(v.x, v.y); 
#line 5977
} 
#endif
#line 5979 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex3DLod(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5980
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5984
::exit(___);}
#if 0
#line 5980
{ 
#line 5981
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5983
return make_uint2(v.x, v.y); 
#line 5984
} 
#endif
#line 5986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex3DLod(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5987
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5991
::exit(___);}
#if 0
#line 5987
{ 
#line 5988
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5990
return make_int4(v.x, v.y, v.z, v.w); 
#line 5991
} 
#endif
#line 5993 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex3DLod(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 5994
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 5998
::exit(___);}
#if 0
#line 5994
{ 
#line 5995
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 5997
return make_uint4(v.x, v.y, v.z, v.w); 
#line 5998
} 
#endif
#line 6008 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex3DLod(texture< long, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6009
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6013
::exit(___);}
#if 0
#line 6009
{ 
#line 6010
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6012
return (long)(v.x); 
#line 6013
} 
#endif
#line 6015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex3DLod(texture< unsigned long, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6016
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6020
::exit(___);}
#if 0
#line 6016
{ 
#line 6017
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6019
return (unsigned long)(v.x); 
#line 6020
} 
#endif
#line 6022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex3DLod(texture< long1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6023
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6027
::exit(___);}
#if 0
#line 6023
{ 
#line 6024
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6026
return make_long1(v.x); 
#line 6027
} 
#endif
#line 6029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex3DLod(texture< ulong1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6030
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6034
::exit(___);}
#if 0
#line 6030
{ 
#line 6031
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6033
return make_ulong1(v.x); 
#line 6034
} 
#endif
#line 6036 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex3DLod(texture< long2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6037
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6041
::exit(___);}
#if 0
#line 6037
{ 
#line 6038
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6040
return make_long2(v.x, v.y); 
#line 6041
} 
#endif
#line 6043 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex3DLod(texture< ulong2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6044
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6048
::exit(___);}
#if 0
#line 6044
{ 
#line 6045
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6047
return make_ulong2(v.x, v.y); 
#line 6048
} 
#endif
#line 6050 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex3DLod(texture< long4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6051
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6055
::exit(___);}
#if 0
#line 6051
{ 
#line 6052
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6054
return make_long4(v.x, v.y, v.z, v.w); 
#line 6055
} 
#endif
#line 6057 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex3DLod(texture< ulong4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6058
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6062
::exit(___);}
#if 0
#line 6058
{ 
#line 6059
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6061
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 6062
} 
#endif
#line 6072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3DLod(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6073
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6077
::exit(___);}
#if 0
#line 6073
{ 
#line 6074
float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6076
return v.x; 
#line 6077
} 
#endif
#line 6079 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3DLod(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6080
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6084
::exit(___);}
#if 0
#line 6080
{ 
#line 6081
float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6083
return make_float1(v.x); 
#line 6084
} 
#endif
#line 6086 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3DLod(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6087
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6091
::exit(___);}
#if 0
#line 6087
{ 
#line 6088
float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6090
return make_float2(v.x, v.y); 
#line 6091
} 
#endif
#line 6093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3DLod(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6094
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6098
::exit(___);}
#if 0
#line 6094
{ 
#line 6095
float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6097
return make_float4(v.x, v.y, v.z, v.w); 
#line 6098
} 
#endif
#line 6106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3DLod(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6107
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 6107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 6111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6115
return w.x; 
#line 6116
} 
#endif
#line 6118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3DLod(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6119
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6124
::exit(___);}
#if 0
#line 6119
{ 
#line 6120
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6121
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6123
return w.x; 
#line 6124
} 
#endif
#line 6126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3DLod(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6127
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6132
::exit(___);}
#if 0
#line 6127
{ 
#line 6128
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6129
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6131
return w.x; 
#line 6132
} 
#endif
#line 6134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3DLod(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6135
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6140
::exit(___);}
#if 0
#line 6135
{ 
#line 6136
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6137
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6139
return make_float1(w.x); 
#line 6140
} 
#endif
#line 6142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3DLod(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6143
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6148
::exit(___);}
#if 0
#line 6143
{ 
#line 6144
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6145
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6147
return make_float1(w.x); 
#line 6148
} 
#endif
#line 6150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3DLod(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6151
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6156
::exit(___);}
#if 0
#line 6151
{ 
#line 6152
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6153
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6155
return make_float2(w.x, w.y); 
#line 6156
} 
#endif
#line 6158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3DLod(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6159
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6164
::exit(___);}
#if 0
#line 6159
{ 
#line 6160
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6161
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6163
return make_float2(w.x, w.y); 
#line 6164
} 
#endif
#line 6166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3DLod(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6167
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6172
::exit(___);}
#if 0
#line 6167
{ 
#line 6168
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6169
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6171
return make_float4(w.x, w.y, w.z, w.w); 
#line 6172
} 
#endif
#line 6174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3DLod(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6175
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6180
::exit(___);}
#if 0
#line 6175
{ 
#line 6176
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6177
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6179
return make_float4(w.x, w.y, w.z, w.w); 
#line 6180
} 
#endif
#line 6188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3DLod(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6189
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6194
::exit(___);}
#if 0
#line 6189
{ 
#line 6190
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6191
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6193
return w.x; 
#line 6194
} 
#endif
#line 6196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3DLod(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6197
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6202
::exit(___);}
#if 0
#line 6197
{ 
#line 6198
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6199
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6201
return w.x; 
#line 6202
} 
#endif
#line 6204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3DLod(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6205
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6210
::exit(___);}
#if 0
#line 6205
{ 
#line 6206
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6207
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6209
return make_float1(w.x); 
#line 6210
} 
#endif
#line 6212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3DLod(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6213
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6218
::exit(___);}
#if 0
#line 6213
{ 
#line 6214
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6215
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6217
return make_float1(w.x); 
#line 6218
} 
#endif
#line 6220 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3DLod(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6221
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6226
::exit(___);}
#if 0
#line 6221
{ 
#line 6222
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6223
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6225
return make_float2(w.x, w.y); 
#line 6226
} 
#endif
#line 6228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3DLod(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6229
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6234
::exit(___);}
#if 0
#line 6229
{ 
#line 6230
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6231
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6233
return make_float2(w.x, w.y); 
#line 6234
} 
#endif
#line 6236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3DLod(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6237
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6242
::exit(___);}
#if 0
#line 6237
{ 
#line 6238
int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6239
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6241
return make_float4(w.x, w.y, w.z, w.w); 
#line 6242
} 
#endif
#line 6244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3DLod(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6245
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6250
::exit(___);}
#if 0
#line 6245
{ 
#line 6246
uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level); 
#line 6247
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6249
return make_float4(w.x, w.y, w.z, w.w); 
#line 6250
} 
#endif
#line 6258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char texCubemapLod(texture< char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6259
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 6259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 6263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 6267
} 
#endif
#line 6269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char texCubemapLod(texture< signed char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6270
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6274
::exit(___);}
#if 0
#line 6270
{ 
#line 6271
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6273
return (signed char)(v.x); 
#line 6274
} 
#endif
#line 6276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char texCubemapLod(texture< unsigned char, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6277
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6281
::exit(___);}
#if 0
#line 6277
{ 
#line 6278
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6280
return (unsigned char)(v.x); 
#line 6281
} 
#endif
#line 6283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 texCubemapLod(texture< char1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6284
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6288
::exit(___);}
#if 0
#line 6284
{ 
#line 6285
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6287
return make_char1(v.x); 
#line 6288
} 
#endif
#line 6290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 texCubemapLod(texture< uchar1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6291
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6295
::exit(___);}
#if 0
#line 6291
{ 
#line 6292
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6294
return make_uchar1(v.x); 
#line 6295
} 
#endif
#line 6297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 texCubemapLod(texture< char2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6298
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6302
::exit(___);}
#if 0
#line 6298
{ 
#line 6299
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6301
return make_char2(v.x, v.y); 
#line 6302
} 
#endif
#line 6304 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 texCubemapLod(texture< uchar2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6305
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6309
::exit(___);}
#if 0
#line 6305
{ 
#line 6306
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6308
return make_uchar2(v.x, v.y); 
#line 6309
} 
#endif
#line 6311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 texCubemapLod(texture< char4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6312
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6316
::exit(___);}
#if 0
#line 6312
{ 
#line 6313
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6315
return make_char4(v.x, v.y, v.z, v.w); 
#line 6316
} 
#endif
#line 6318 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 texCubemapLod(texture< uchar4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6319
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6323
::exit(___);}
#if 0
#line 6319
{ 
#line 6320
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6322
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 6323
} 
#endif
#line 6331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short texCubemapLod(texture< short, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6332
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6336
::exit(___);}
#if 0
#line 6332
{ 
#line 6333
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6335
return (short)(v.x); 
#line 6336
} 
#endif
#line 6338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short texCubemapLod(texture< unsigned short, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6339
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6343
::exit(___);}
#if 0
#line 6339
{ 
#line 6340
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6342
return (unsigned short)(v.x); 
#line 6343
} 
#endif
#line 6345 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 texCubemapLod(texture< short1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6346
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6350
::exit(___);}
#if 0
#line 6346
{ 
#line 6347
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6349
return make_short1(v.x); 
#line 6350
} 
#endif
#line 6352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 texCubemapLod(texture< ushort1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6353
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6357
::exit(___);}
#if 0
#line 6353
{ 
#line 6354
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6356
return make_ushort1(v.x); 
#line 6357
} 
#endif
#line 6359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 texCubemapLod(texture< short2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6360
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6364
::exit(___);}
#if 0
#line 6360
{ 
#line 6361
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6363
return make_short2(v.x, v.y); 
#line 6364
} 
#endif
#line 6366 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 texCubemapLod(texture< ushort2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6367
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6371
::exit(___);}
#if 0
#line 6367
{ 
#line 6368
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6370
return make_ushort2(v.x, v.y); 
#line 6371
} 
#endif
#line 6373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 texCubemapLod(texture< short4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6374
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6378
::exit(___);}
#if 0
#line 6374
{ 
#line 6375
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6377
return make_short4(v.x, v.y, v.z, v.w); 
#line 6378
} 
#endif
#line 6380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 texCubemapLod(texture< ushort4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6381
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6385
::exit(___);}
#if 0
#line 6381
{ 
#line 6382
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6384
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 6385
} 
#endif
#line 6393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int texCubemapLod(texture< int, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6394
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6398
::exit(___);}
#if 0
#line 6394
{ 
#line 6395
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6397
return v.x; 
#line 6398
} 
#endif
#line 6400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned texCubemapLod(texture< unsigned, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6401
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6405
::exit(___);}
#if 0
#line 6401
{ 
#line 6402
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6404
return v.x; 
#line 6405
} 
#endif
#line 6407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 texCubemapLod(texture< int1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6408
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6412
::exit(___);}
#if 0
#line 6408
{ 
#line 6409
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6411
return make_int1(v.x); 
#line 6412
} 
#endif
#line 6414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 texCubemapLod(texture< uint1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6415
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6419
::exit(___);}
#if 0
#line 6415
{ 
#line 6416
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6418
return make_uint1(v.x); 
#line 6419
} 
#endif
#line 6421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 texCubemapLod(texture< int2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6422
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6426
::exit(___);}
#if 0
#line 6422
{ 
#line 6423
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6425
return make_int2(v.x, v.y); 
#line 6426
} 
#endif
#line 6428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 texCubemapLod(texture< uint2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6429
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6433
::exit(___);}
#if 0
#line 6429
{ 
#line 6430
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6432
return make_uint2(v.x, v.y); 
#line 6433
} 
#endif
#line 6435 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 texCubemapLod(texture< int4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6436
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6440
::exit(___);}
#if 0
#line 6436
{ 
#line 6437
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6439
return make_int4(v.x, v.y, v.z, v.w); 
#line 6440
} 
#endif
#line 6442 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 texCubemapLod(texture< uint4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6443
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6447
::exit(___);}
#if 0
#line 6443
{ 
#line 6444
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6446
return make_uint4(v.x, v.y, v.z, v.w); 
#line 6447
} 
#endif
#line 6457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long texCubemapLod(texture< long, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6458
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6462
::exit(___);}
#if 0
#line 6458
{ 
#line 6459
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6461
return (long)(v.x); 
#line 6462
} 
#endif
#line 6464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long texCubemapLod(texture< unsigned long, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6465
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6469
::exit(___);}
#if 0
#line 6465
{ 
#line 6466
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6468
return (unsigned long)(v.x); 
#line 6469
} 
#endif
#line 6471 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 texCubemapLod(texture< long1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6472
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6476
::exit(___);}
#if 0
#line 6472
{ 
#line 6473
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6475
return make_long1(v.x); 
#line 6476
} 
#endif
#line 6478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 texCubemapLod(texture< ulong1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6479
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6483
::exit(___);}
#if 0
#line 6479
{ 
#line 6480
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6482
return make_ulong1(v.x); 
#line 6483
} 
#endif
#line 6485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 texCubemapLod(texture< long2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6486
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6490
::exit(___);}
#if 0
#line 6486
{ 
#line 6487
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6489
return make_long2(v.x, v.y); 
#line 6490
} 
#endif
#line 6492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 texCubemapLod(texture< ulong2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6493
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6497
::exit(___);}
#if 0
#line 6493
{ 
#line 6494
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6496
return make_ulong2(v.x, v.y); 
#line 6497
} 
#endif
#line 6499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 texCubemapLod(texture< long4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6500
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6504
::exit(___);}
#if 0
#line 6500
{ 
#line 6501
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6503
return make_long4(v.x, v.y, v.z, v.w); 
#line 6504
} 
#endif
#line 6506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 texCubemapLod(texture< ulong4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6507
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6511
::exit(___);}
#if 0
#line 6507
{ 
#line 6508
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6510
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 6511
} 
#endif
#line 6521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLod(texture< float, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6522
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6526
::exit(___);}
#if 0
#line 6522
{ 
#line 6523
float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6525
return v.x; 
#line 6526
} 
#endif
#line 6528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLod(texture< float1, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6529
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6533
::exit(___);}
#if 0
#line 6529
{ 
#line 6530
float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6532
return make_float1(v.x); 
#line 6533
} 
#endif
#line 6535 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLod(texture< float2, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6536
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6540
::exit(___);}
#if 0
#line 6536
{ 
#line 6537
float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6539
return make_float2(v.x, v.y); 
#line 6540
} 
#endif
#line 6542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLod(texture< float4, 12, cudaReadModeElementType>  t, float x, float y, float z, float level) 
#line 6543
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6547
::exit(___);}
#if 0
#line 6543
{ 
#line 6544
float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6546
return make_float4(v.x, v.y, v.z, v.w); 
#line 6547
} 
#endif
#line 6555 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLod(texture< char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6556
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6565 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 6556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 6560 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6562 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6564
return w.x; 
#line 6565
} 
#endif
#line 6567 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLod(texture< signed char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6568
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6573
::exit(___);}
#if 0
#line 6568
{ 
#line 6569
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6570
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6572
return w.x; 
#line 6573
} 
#endif
#line 6575 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLod(texture< unsigned char, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6576
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6581
::exit(___);}
#if 0
#line 6576
{ 
#line 6577
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6578
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6580
return w.x; 
#line 6581
} 
#endif
#line 6583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLod(texture< char1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6584
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6589
::exit(___);}
#if 0
#line 6584
{ 
#line 6585
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6586
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6588
return make_float1(w.x); 
#line 6589
} 
#endif
#line 6591 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLod(texture< uchar1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6592
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6597
::exit(___);}
#if 0
#line 6592
{ 
#line 6593
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6594
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6596
return make_float1(w.x); 
#line 6597
} 
#endif
#line 6599 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLod(texture< char2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6600
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6605
::exit(___);}
#if 0
#line 6600
{ 
#line 6601
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6602
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6604
return make_float2(w.x, w.y); 
#line 6605
} 
#endif
#line 6607 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLod(texture< uchar2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6608
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6613
::exit(___);}
#if 0
#line 6608
{ 
#line 6609
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6610
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6612
return make_float2(w.x, w.y); 
#line 6613
} 
#endif
#line 6615 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLod(texture< char4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6616
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6621
::exit(___);}
#if 0
#line 6616
{ 
#line 6617
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6618
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6620
return make_float4(w.x, w.y, w.z, w.w); 
#line 6621
} 
#endif
#line 6623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLod(texture< uchar4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6624
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6629
::exit(___);}
#if 0
#line 6624
{ 
#line 6625
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6626
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6628
return make_float4(w.x, w.y, w.z, w.w); 
#line 6629
} 
#endif
#line 6637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLod(texture< short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6638
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6643
::exit(___);}
#if 0
#line 6638
{ 
#line 6639
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6640
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6642
return w.x; 
#line 6643
} 
#endif
#line 6645 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLod(texture< unsigned short, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6646
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6651
::exit(___);}
#if 0
#line 6646
{ 
#line 6647
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6648
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6650
return w.x; 
#line 6651
} 
#endif
#line 6653 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLod(texture< short1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6654
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6659
::exit(___);}
#if 0
#line 6654
{ 
#line 6655
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6656
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6658
return make_float1(w.x); 
#line 6659
} 
#endif
#line 6661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLod(texture< ushort1, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6662
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6667
::exit(___);}
#if 0
#line 6662
{ 
#line 6663
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6664
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6666
return make_float1(w.x); 
#line 6667
} 
#endif
#line 6669 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLod(texture< short2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6670
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6675
::exit(___);}
#if 0
#line 6670
{ 
#line 6671
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6672
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6674
return make_float2(w.x, w.y); 
#line 6675
} 
#endif
#line 6677 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLod(texture< ushort2, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6678
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6683
::exit(___);}
#if 0
#line 6678
{ 
#line 6679
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6680
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6682
return make_float2(w.x, w.y); 
#line 6683
} 
#endif
#line 6685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLod(texture< short4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6686
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6691
::exit(___);}
#if 0
#line 6686
{ 
#line 6687
int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6688
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6690
return make_float4(w.x, w.y, w.z, w.w); 
#line 6691
} 
#endif
#line 6693 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLod(texture< ushort4, 12, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float level) 
#line 6694
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)level;
#line 6699
::exit(___);}
#if 0
#line 6694
{ 
#line 6695
uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level); 
#line 6696
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 6698
return make_float4(w.x, w.y, w.z, w.w); 
#line 6699
} 
#endif
#line 6707 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char texCubemapLayeredLod(texture< char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6708
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 6708 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 6712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6715 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 6716
} 
#endif
#line 6718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char texCubemapLayeredLod(texture< signed char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6719
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6723
::exit(___);}
#if 0
#line 6719
{ 
#line 6720
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6722
return (signed char)(v.x); 
#line 6723
} 
#endif
#line 6725 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char texCubemapLayeredLod(texture< unsigned char, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6726
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6730
::exit(___);}
#if 0
#line 6726
{ 
#line 6727
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6729
return (unsigned char)(v.x); 
#line 6730
} 
#endif
#line 6732 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 texCubemapLayeredLod(texture< char1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6733
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6737
::exit(___);}
#if 0
#line 6733
{ 
#line 6734
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6736
return make_char1(v.x); 
#line 6737
} 
#endif
#line 6739 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 texCubemapLayeredLod(texture< uchar1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6740
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6744
::exit(___);}
#if 0
#line 6740
{ 
#line 6741
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6743
return make_uchar1(v.x); 
#line 6744
} 
#endif
#line 6746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 texCubemapLayeredLod(texture< char2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6747
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6751
::exit(___);}
#if 0
#line 6747
{ 
#line 6748
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6750
return make_char2(v.x, v.y); 
#line 6751
} 
#endif
#line 6753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 texCubemapLayeredLod(texture< uchar2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6754
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6758
::exit(___);}
#if 0
#line 6754
{ 
#line 6755
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6757
return make_uchar2(v.x, v.y); 
#line 6758
} 
#endif
#line 6760 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 texCubemapLayeredLod(texture< char4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6761
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6765
::exit(___);}
#if 0
#line 6761
{ 
#line 6762
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6764
return make_char4(v.x, v.y, v.z, v.w); 
#line 6765
} 
#endif
#line 6767 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 texCubemapLayeredLod(texture< uchar4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6768
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6772
::exit(___);}
#if 0
#line 6768
{ 
#line 6769
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6771
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 6772
} 
#endif
#line 6780 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short texCubemapLayeredLod(texture< short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6781
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6785
::exit(___);}
#if 0
#line 6781
{ 
#line 6782
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6784
return (short)(v.x); 
#line 6785
} 
#endif
#line 6787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short texCubemapLayeredLod(texture< unsigned short, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6788
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6792
::exit(___);}
#if 0
#line 6788
{ 
#line 6789
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6791
return (unsigned short)(v.x); 
#line 6792
} 
#endif
#line 6794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 texCubemapLayeredLod(texture< short1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6795
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6799
::exit(___);}
#if 0
#line 6795
{ 
#line 6796
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6798
return make_short1(v.x); 
#line 6799
} 
#endif
#line 6801 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 texCubemapLayeredLod(texture< ushort1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6802
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6806
::exit(___);}
#if 0
#line 6802
{ 
#line 6803
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6805
return make_ushort1(v.x); 
#line 6806
} 
#endif
#line 6808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 texCubemapLayeredLod(texture< short2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6809
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6813
::exit(___);}
#if 0
#line 6809
{ 
#line 6810
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6812
return make_short2(v.x, v.y); 
#line 6813
} 
#endif
#line 6815 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 texCubemapLayeredLod(texture< ushort2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6816
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6820
::exit(___);}
#if 0
#line 6816
{ 
#line 6817
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6819
return make_ushort2(v.x, v.y); 
#line 6820
} 
#endif
#line 6822 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 texCubemapLayeredLod(texture< short4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6823
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6827
::exit(___);}
#if 0
#line 6823
{ 
#line 6824
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6826
return make_short4(v.x, v.y, v.z, v.w); 
#line 6827
} 
#endif
#line 6829 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 texCubemapLayeredLod(texture< ushort4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6830
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6834
::exit(___);}
#if 0
#line 6830
{ 
#line 6831
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6833
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 6834
} 
#endif
#line 6842 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int texCubemapLayeredLod(texture< int, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6843
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6847
::exit(___);}
#if 0
#line 6843
{ 
#line 6844
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6846
return v.x; 
#line 6847
} 
#endif
#line 6849 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned texCubemapLayeredLod(texture< unsigned, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6850
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6854
::exit(___);}
#if 0
#line 6850
{ 
#line 6851
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6853
return v.x; 
#line 6854
} 
#endif
#line 6856 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 texCubemapLayeredLod(texture< int1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6857
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6861
::exit(___);}
#if 0
#line 6857
{ 
#line 6858
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6860
return make_int1(v.x); 
#line 6861
} 
#endif
#line 6863 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 texCubemapLayeredLod(texture< uint1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6864
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6868
::exit(___);}
#if 0
#line 6864
{ 
#line 6865
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6867
return make_uint1(v.x); 
#line 6868
} 
#endif
#line 6870 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 texCubemapLayeredLod(texture< int2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6871
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6875
::exit(___);}
#if 0
#line 6871
{ 
#line 6872
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6874
return make_int2(v.x, v.y); 
#line 6875
} 
#endif
#line 6877 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 texCubemapLayeredLod(texture< uint2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6878
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6882
::exit(___);}
#if 0
#line 6878
{ 
#line 6879
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6881
return make_uint2(v.x, v.y); 
#line 6882
} 
#endif
#line 6884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 texCubemapLayeredLod(texture< int4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6885
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6889
::exit(___);}
#if 0
#line 6885
{ 
#line 6886
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6888
return make_int4(v.x, v.y, v.z, v.w); 
#line 6889
} 
#endif
#line 6891 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 texCubemapLayeredLod(texture< uint4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6892
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6896
::exit(___);}
#if 0
#line 6892
{ 
#line 6893
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6895
return make_uint4(v.x, v.y, v.z, v.w); 
#line 6896
} 
#endif
#line 6906 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long texCubemapLayeredLod(texture< long, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6907
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6911
::exit(___);}
#if 0
#line 6907
{ 
#line 6908
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6910
return (long)(v.x); 
#line 6911
} 
#endif
#line 6913 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long texCubemapLayeredLod(texture< unsigned long, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6914
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6918
::exit(___);}
#if 0
#line 6914
{ 
#line 6915
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6917
return (unsigned long)(v.x); 
#line 6918
} 
#endif
#line 6920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 texCubemapLayeredLod(texture< long1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6921
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6925
::exit(___);}
#if 0
#line 6921
{ 
#line 6922
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6924
return make_long1(v.x); 
#line 6925
} 
#endif
#line 6927 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 texCubemapLayeredLod(texture< ulong1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6928
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6932
::exit(___);}
#if 0
#line 6928
{ 
#line 6929
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6931
return make_ulong1(v.x); 
#line 6932
} 
#endif
#line 6934 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 texCubemapLayeredLod(texture< long2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6935
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6939
::exit(___);}
#if 0
#line 6935
{ 
#line 6936
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6938
return make_long2(v.x, v.y); 
#line 6939
} 
#endif
#line 6941 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 texCubemapLayeredLod(texture< ulong2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6942
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6946
::exit(___);}
#if 0
#line 6942
{ 
#line 6943
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6945
return make_ulong2(v.x, v.y); 
#line 6946
} 
#endif
#line 6948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 texCubemapLayeredLod(texture< long4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6949
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6953
::exit(___);}
#if 0
#line 6949
{ 
#line 6950
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6952
return make_long4(v.x, v.y, v.z, v.w); 
#line 6953
} 
#endif
#line 6955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 texCubemapLayeredLod(texture< ulong4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6956
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6960
::exit(___);}
#if 0
#line 6956
{ 
#line 6957
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6959
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 6960
} 
#endif
#line 6970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLayeredLod(texture< float, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6971
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6975
::exit(___);}
#if 0
#line 6971
{ 
#line 6972
float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6974
return v.x; 
#line 6975
} 
#endif
#line 6977 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLayeredLod(texture< float1, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6978
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6982
::exit(___);}
#if 0
#line 6978
{ 
#line 6979
float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6981
return make_float1(v.x); 
#line 6982
} 
#endif
#line 6984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLayeredLod(texture< float2, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6985
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6989
::exit(___);}
#if 0
#line 6985
{ 
#line 6986
float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6988
return make_float2(v.x, v.y); 
#line 6989
} 
#endif
#line 6991 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLayeredLod(texture< float4, 252, cudaReadModeElementType>  t, float x, float y, float z, int layer, float level) 
#line 6992
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 6996
::exit(___);}
#if 0
#line 6992
{ 
#line 6993
float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 6995
return make_float4(v.x, v.y, v.z, v.w); 
#line 6996
} 
#endif
#line 7004 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLayeredLod(texture< char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7005
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 7005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 7009 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7011 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7013
return w.x; 
#line 7014
} 
#endif
#line 7016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLayeredLod(texture< signed char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7017
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7022
::exit(___);}
#if 0
#line 7017
{ 
#line 7018
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7019
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7021
return w.x; 
#line 7022
} 
#endif
#line 7024 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLayeredLod(texture< unsigned char, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7025
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7030
::exit(___);}
#if 0
#line 7025
{ 
#line 7026
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7027
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7029
return w.x; 
#line 7030
} 
#endif
#line 7032 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLayeredLod(texture< char1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7033
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7038
::exit(___);}
#if 0
#line 7033
{ 
#line 7034
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7035
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7037
return make_float1(w.x); 
#line 7038
} 
#endif
#line 7040 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLayeredLod(texture< uchar1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7041
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7046
::exit(___);}
#if 0
#line 7041
{ 
#line 7042
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7043
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7045
return make_float1(w.x); 
#line 7046
} 
#endif
#line 7048 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLayeredLod(texture< char2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7049
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7054
::exit(___);}
#if 0
#line 7049
{ 
#line 7050
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7051
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7053
return make_float2(w.x, w.y); 
#line 7054
} 
#endif
#line 7056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLayeredLod(texture< uchar2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7057
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7062
::exit(___);}
#if 0
#line 7057
{ 
#line 7058
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7059
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7061
return make_float2(w.x, w.y); 
#line 7062
} 
#endif
#line 7064 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLayeredLod(texture< char4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7065
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7070
::exit(___);}
#if 0
#line 7065
{ 
#line 7066
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7067
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7069
return make_float4(w.x, w.y, w.z, w.w); 
#line 7070
} 
#endif
#line 7072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLayeredLod(texture< uchar4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7073
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7078
::exit(___);}
#if 0
#line 7073
{ 
#line 7074
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7075
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7077
return make_float4(w.x, w.y, w.z, w.w); 
#line 7078
} 
#endif
#line 7086 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLayeredLod(texture< short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7087
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7092
::exit(___);}
#if 0
#line 7087
{ 
#line 7088
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7089
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7091
return w.x; 
#line 7092
} 
#endif
#line 7094 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float texCubemapLayeredLod(texture< unsigned short, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7095
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7100
::exit(___);}
#if 0
#line 7095
{ 
#line 7096
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7097
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7099
return w.x; 
#line 7100
} 
#endif
#line 7102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLayeredLod(texture< short1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7103
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7108
::exit(___);}
#if 0
#line 7103
{ 
#line 7104
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7105
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7107
return make_float1(w.x); 
#line 7108
} 
#endif
#line 7110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 texCubemapLayeredLod(texture< ushort1, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7111
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7116
::exit(___);}
#if 0
#line 7111
{ 
#line 7112
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7113
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7115
return make_float1(w.x); 
#line 7116
} 
#endif
#line 7118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLayeredLod(texture< short2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7119
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7124
::exit(___);}
#if 0
#line 7119
{ 
#line 7120
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7121
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7123
return make_float2(w.x, w.y); 
#line 7124
} 
#endif
#line 7126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 texCubemapLayeredLod(texture< ushort2, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7127
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7132
::exit(___);}
#if 0
#line 7127
{ 
#line 7128
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7129
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7131
return make_float2(w.x, w.y); 
#line 7132
} 
#endif
#line 7134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLayeredLod(texture< short4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7135
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7140
::exit(___);}
#if 0
#line 7135
{ 
#line 7136
int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7137
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7139
return make_float4(w.x, w.y, w.z, w.w); 
#line 7140
} 
#endif
#line 7142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 texCubemapLayeredLod(texture< ushort4, 252, cudaReadModeNormalizedFloat>  t, float x, float y, float z, int layer, float level) 
#line 7143
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 7148
::exit(___);}
#if 0
#line 7143
{ 
#line 7144
uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level); 
#line 7145
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7147
return make_float4(w.x, w.y, w.z, w.w); 
#line 7148
} 
#endif
#line 7157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex1DGrad(texture< char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7158
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 7158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 7162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 7166
} 
#endif
#line 7168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex1DGrad(texture< signed char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7169
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7173
::exit(___);}
#if 0
#line 7169
{ 
#line 7170
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7172
return (signed char)(v.x); 
#line 7173
} 
#endif
#line 7175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex1DGrad(texture< unsigned char, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7176
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7180
::exit(___);}
#if 0
#line 7176
{ 
#line 7177
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7179
return (unsigned char)(v.x); 
#line 7180
} 
#endif
#line 7182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex1DGrad(texture< char1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7183
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7187
::exit(___);}
#if 0
#line 7183
{ 
#line 7184
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7186
return make_char1(v.x); 
#line 7187
} 
#endif
#line 7189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex1DGrad(texture< uchar1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7190
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7194
::exit(___);}
#if 0
#line 7190
{ 
#line 7191
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7193
return make_uchar1(v.x); 
#line 7194
} 
#endif
#line 7196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex1DGrad(texture< char2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7197
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7201
::exit(___);}
#if 0
#line 7197
{ 
#line 7198
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7200
return make_char2(v.x, v.y); 
#line 7201
} 
#endif
#line 7203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex1DGrad(texture< uchar2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7204
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7208
::exit(___);}
#if 0
#line 7204
{ 
#line 7205
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7207
return make_uchar2(v.x, v.y); 
#line 7208
} 
#endif
#line 7210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex1DGrad(texture< char4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7211
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7215
::exit(___);}
#if 0
#line 7211
{ 
#line 7212
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7214
return make_char4(v.x, v.y, v.z, v.w); 
#line 7215
} 
#endif
#line 7217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex1DGrad(texture< uchar4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7218
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7222
::exit(___);}
#if 0
#line 7218
{ 
#line 7219
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7221
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 7222
} 
#endif
#line 7230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex1DGrad(texture< short, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7231
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7235
::exit(___);}
#if 0
#line 7231
{ 
#line 7232
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7234
return (short)(v.x); 
#line 7235
} 
#endif
#line 7237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex1DGrad(texture< unsigned short, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7238
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7242
::exit(___);}
#if 0
#line 7238
{ 
#line 7239
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7241
return (unsigned short)(v.x); 
#line 7242
} 
#endif
#line 7244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex1DGrad(texture< short1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7245
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7249
::exit(___);}
#if 0
#line 7245
{ 
#line 7246
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7248
return make_short1(v.x); 
#line 7249
} 
#endif
#line 7251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex1DGrad(texture< ushort1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7252
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7256
::exit(___);}
#if 0
#line 7252
{ 
#line 7253
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7255
return make_ushort1(v.x); 
#line 7256
} 
#endif
#line 7258 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex1DGrad(texture< short2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7259
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7263
::exit(___);}
#if 0
#line 7259
{ 
#line 7260
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7262
return make_short2(v.x, v.y); 
#line 7263
} 
#endif
#line 7265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex1DGrad(texture< ushort2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7266
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7270
::exit(___);}
#if 0
#line 7266
{ 
#line 7267
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7269
return make_ushort2(v.x, v.y); 
#line 7270
} 
#endif
#line 7272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex1DGrad(texture< short4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7273
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7277
::exit(___);}
#if 0
#line 7273
{ 
#line 7274
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7276
return make_short4(v.x, v.y, v.z, v.w); 
#line 7277
} 
#endif
#line 7279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex1DGrad(texture< ushort4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7280
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7284
::exit(___);}
#if 0
#line 7280
{ 
#line 7281
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7283
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 7284
} 
#endif
#line 7292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex1DGrad(texture< int, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7293
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7297
::exit(___);}
#if 0
#line 7293
{ 
#line 7294
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7296
return v.x; 
#line 7297
} 
#endif
#line 7299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex1DGrad(texture< unsigned, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7300
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7304
::exit(___);}
#if 0
#line 7300
{ 
#line 7301
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7303
return v.x; 
#line 7304
} 
#endif
#line 7306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex1DGrad(texture< int1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7307
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7311
::exit(___);}
#if 0
#line 7307
{ 
#line 7308
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7310
return make_int1(v.x); 
#line 7311
} 
#endif
#line 7313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex1DGrad(texture< uint1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7314
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7318
::exit(___);}
#if 0
#line 7314
{ 
#line 7315
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7317
return make_uint1(v.x); 
#line 7318
} 
#endif
#line 7320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex1DGrad(texture< int2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7321
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7325
::exit(___);}
#if 0
#line 7321
{ 
#line 7322
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7324
return make_int2(v.x, v.y); 
#line 7325
} 
#endif
#line 7327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex1DGrad(texture< uint2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7328
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7332
::exit(___);}
#if 0
#line 7328
{ 
#line 7329
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7331
return make_uint2(v.x, v.y); 
#line 7332
} 
#endif
#line 7334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex1DGrad(texture< int4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7335
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7339
::exit(___);}
#if 0
#line 7335
{ 
#line 7336
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7338
return make_int4(v.x, v.y, v.z, v.w); 
#line 7339
} 
#endif
#line 7341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex1DGrad(texture< uint4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7342
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7346
::exit(___);}
#if 0
#line 7342
{ 
#line 7343
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7345
return make_uint4(v.x, v.y, v.z, v.w); 
#line 7346
} 
#endif
#line 7362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex1DGrad(texture< long, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7363
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7367
::exit(___);}
#if 0
#line 7363
{ 
#line 7364
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7366
return (long)(v.x); 
#line 7367
} 
#endif
#line 7369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex1DGrad(texture< unsigned long, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7370
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7374
::exit(___);}
#if 0
#line 7370
{ 
#line 7371
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7373
return (unsigned long)(v.x); 
#line 7374
} 
#endif
#line 7376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex1DGrad(texture< long1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7377
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7381
::exit(___);}
#if 0
#line 7377
{ 
#line 7378
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7380
return make_long1(v.x); 
#line 7381
} 
#endif
#line 7383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex1DGrad(texture< ulong1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7384
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7388
::exit(___);}
#if 0
#line 7384
{ 
#line 7385
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7387
return make_ulong1(v.x); 
#line 7388
} 
#endif
#line 7390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex1DGrad(texture< long2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7391
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7395
::exit(___);}
#if 0
#line 7391
{ 
#line 7392
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7394
return make_long2(v.x, v.y); 
#line 7395
} 
#endif
#line 7397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex1DGrad(texture< ulong2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7398
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7402
::exit(___);}
#if 0
#line 7398
{ 
#line 7399
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7401
return make_ulong2(v.x, v.y); 
#line 7402
} 
#endif
#line 7404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex1DGrad(texture< long4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7405
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7409
::exit(___);}
#if 0
#line 7405
{ 
#line 7406
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7408
return make_long4(v.x, v.y, v.z, v.w); 
#line 7409
} 
#endif
#line 7411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex1DGrad(texture< ulong4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7412
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7416
::exit(___);}
#if 0
#line 7412
{ 
#line 7413
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7415
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 7416
} 
#endif
#line 7426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DGrad(texture< float, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7427
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7431
::exit(___);}
#if 0
#line 7427
{ 
#line 7428
float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7430
return v.x; 
#line 7431
} 
#endif
#line 7433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DGrad(texture< float1, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7434
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7438
::exit(___);}
#if 0
#line 7434
{ 
#line 7435
float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7437
return make_float1(v.x); 
#line 7438
} 
#endif
#line 7440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DGrad(texture< float2, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7441
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7445
::exit(___);}
#if 0
#line 7441
{ 
#line 7442
float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7444
return make_float2(v.x, v.y); 
#line 7445
} 
#endif
#line 7447 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DGrad(texture< float4, 1, cudaReadModeElementType>  t, float x, float dPdx, float dPdy) 
#line 7448
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7452
::exit(___);}
#if 0
#line 7448
{ 
#line 7449
float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7451
return make_float4(v.x, v.y, v.z, v.w); 
#line 7452
} 
#endif
#line 7460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DGrad(texture< char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7461
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7470 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 7461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 7465 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7469
return w.x; 
#line 7470
} 
#endif
#line 7472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DGrad(texture< signed char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7473
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7478
::exit(___);}
#if 0
#line 7473
{ 
#line 7474
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7475
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7477
return w.x; 
#line 7478
} 
#endif
#line 7480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DGrad(texture< unsigned char, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7481
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7486
::exit(___);}
#if 0
#line 7481
{ 
#line 7482
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7483
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7485
return w.x; 
#line 7486
} 
#endif
#line 7488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DGrad(texture< char1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7489
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7494
::exit(___);}
#if 0
#line 7489
{ 
#line 7490
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7491
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7493
return make_float1(w.x); 
#line 7494
} 
#endif
#line 7496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DGrad(texture< uchar1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7497
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7502
::exit(___);}
#if 0
#line 7497
{ 
#line 7498
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7499
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7501
return make_float1(w.x); 
#line 7502
} 
#endif
#line 7504 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DGrad(texture< char2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7505
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7510
::exit(___);}
#if 0
#line 7505
{ 
#line 7506
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7507
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7509
return make_float2(w.x, w.y); 
#line 7510
} 
#endif
#line 7512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DGrad(texture< uchar2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7513
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7518
::exit(___);}
#if 0
#line 7513
{ 
#line 7514
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7515
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7517
return make_float2(w.x, w.y); 
#line 7518
} 
#endif
#line 7520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DGrad(texture< char4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7521
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7526
::exit(___);}
#if 0
#line 7521
{ 
#line 7522
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7523
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7525
return make_float4(w.x, w.y, w.z, w.w); 
#line 7526
} 
#endif
#line 7528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DGrad(texture< uchar4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7529
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7534
::exit(___);}
#if 0
#line 7529
{ 
#line 7530
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7531
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7533
return make_float4(w.x, w.y, w.z, w.w); 
#line 7534
} 
#endif
#line 7542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DGrad(texture< short, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7543
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7548
::exit(___);}
#if 0
#line 7543
{ 
#line 7544
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7545
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7547
return w.x; 
#line 7548
} 
#endif
#line 7550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DGrad(texture< unsigned short, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7551
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7556
::exit(___);}
#if 0
#line 7551
{ 
#line 7552
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7553
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7555
return w.x; 
#line 7556
} 
#endif
#line 7558 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DGrad(texture< short1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7559
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7564
::exit(___);}
#if 0
#line 7559
{ 
#line 7560
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7561
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7563
return make_float1(w.x); 
#line 7564
} 
#endif
#line 7566 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DGrad(texture< ushort1, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7567
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7572
::exit(___);}
#if 0
#line 7567
{ 
#line 7568
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7569
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7571
return make_float1(w.x); 
#line 7572
} 
#endif
#line 7574 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DGrad(texture< short2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7575
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7580
::exit(___);}
#if 0
#line 7575
{ 
#line 7576
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7577
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7579
return make_float2(w.x, w.y); 
#line 7580
} 
#endif
#line 7582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DGrad(texture< ushort2, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7583
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7588
::exit(___);}
#if 0
#line 7583
{ 
#line 7584
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7585
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7587
return make_float2(w.x, w.y); 
#line 7588
} 
#endif
#line 7590 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DGrad(texture< short4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7591
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7596
::exit(___);}
#if 0
#line 7591
{ 
#line 7592
int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7593
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7595
return make_float4(w.x, w.y, w.z, w.w); 
#line 7596
} 
#endif
#line 7598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DGrad(texture< ushort4, 1, cudaReadModeNormalizedFloat>  t, float x, float dPdx, float dPdy) 
#line 7599
{int volatile ___ = 1;(void)t;(void)x;(void)dPdx;(void)dPdy;
#line 7604
::exit(___);}
#if 0
#line 7599
{ 
#line 7600
uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 7601
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7603
return make_float4(w.x, w.y, w.z, w.w); 
#line 7604
} 
#endif
#line 7612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex2DGrad(texture< char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7613
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7621 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 7613 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 7617 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7620 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 7621
} 
#endif
#line 7623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex2DGrad(texture< signed char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7624
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7628
::exit(___);}
#if 0
#line 7624
{ 
#line 7625
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7627
return (signed char)(v.x); 
#line 7628
} 
#endif
#line 7630 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex2DGrad(texture< unsigned char, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7631
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7635
::exit(___);}
#if 0
#line 7631
{ 
#line 7632
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7634
return (unsigned char)(v.x); 
#line 7635
} 
#endif
#line 7637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex2DGrad(texture< char1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7638
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7642
::exit(___);}
#if 0
#line 7638
{ 
#line 7639
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7641
return make_char1(v.x); 
#line 7642
} 
#endif
#line 7644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex2DGrad(texture< uchar1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7645
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7649
::exit(___);}
#if 0
#line 7645
{ 
#line 7646
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7648
return make_uchar1(v.x); 
#line 7649
} 
#endif
#line 7651 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex2DGrad(texture< char2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7652
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7656
::exit(___);}
#if 0
#line 7652
{ 
#line 7653
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7655
return make_char2(v.x, v.y); 
#line 7656
} 
#endif
#line 7658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex2DGrad(texture< uchar2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7659
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7663
::exit(___);}
#if 0
#line 7659
{ 
#line 7660
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7662
return make_uchar2(v.x, v.y); 
#line 7663
} 
#endif
#line 7665 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex2DGrad(texture< char4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7666
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7670
::exit(___);}
#if 0
#line 7666
{ 
#line 7667
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7669
return make_char4(v.x, v.y, v.z, v.w); 
#line 7670
} 
#endif
#line 7672 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex2DGrad(texture< uchar4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7673
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7677
::exit(___);}
#if 0
#line 7673
{ 
#line 7674
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7676
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 7677
} 
#endif
#line 7685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex2DGrad(texture< short, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7686
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7690
::exit(___);}
#if 0
#line 7686
{ 
#line 7687
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7689
return (short)(v.x); 
#line 7690
} 
#endif
#line 7692 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex2DGrad(texture< unsigned short, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7693
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7697
::exit(___);}
#if 0
#line 7693
{ 
#line 7694
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7696
return (unsigned short)(v.x); 
#line 7697
} 
#endif
#line 7699 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex2DGrad(texture< short1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7700
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7704
::exit(___);}
#if 0
#line 7700
{ 
#line 7701
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7703
return make_short1(v.x); 
#line 7704
} 
#endif
#line 7706 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex2DGrad(texture< ushort1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7707
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7711
::exit(___);}
#if 0
#line 7707
{ 
#line 7708
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7710
return make_ushort1(v.x); 
#line 7711
} 
#endif
#line 7713 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex2DGrad(texture< short2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7714
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7718
::exit(___);}
#if 0
#line 7714
{ 
#line 7715
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7717
return make_short2(v.x, v.y); 
#line 7718
} 
#endif
#line 7720 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex2DGrad(texture< ushort2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7721
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7725
::exit(___);}
#if 0
#line 7721
{ 
#line 7722
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7724
return make_ushort2(v.x, v.y); 
#line 7725
} 
#endif
#line 7727 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex2DGrad(texture< short4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7728
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7732
::exit(___);}
#if 0
#line 7728
{ 
#line 7729
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7731
return make_short4(v.x, v.y, v.z, v.w); 
#line 7732
} 
#endif
#line 7734 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex2DGrad(texture< ushort4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7735
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7739
::exit(___);}
#if 0
#line 7735
{ 
#line 7736
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7738
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 7739
} 
#endif
#line 7747 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex2DGrad(texture< int, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7748
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7752
::exit(___);}
#if 0
#line 7748
{ 
#line 7749
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7751
return v.x; 
#line 7752
} 
#endif
#line 7754 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex2DGrad(texture< unsigned, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7755
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7759
::exit(___);}
#if 0
#line 7755
{ 
#line 7756
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7758
return v.x; 
#line 7759
} 
#endif
#line 7761 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex2DGrad(texture< int1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7762
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7766
::exit(___);}
#if 0
#line 7762
{ 
#line 7763
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7765
return make_int1(v.x); 
#line 7766
} 
#endif
#line 7768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex2DGrad(texture< uint1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7769
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7773
::exit(___);}
#if 0
#line 7769
{ 
#line 7770
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7772
return make_uint1(v.x); 
#line 7773
} 
#endif
#line 7775 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex2DGrad(texture< int2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7776
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7780
::exit(___);}
#if 0
#line 7776
{ 
#line 7777
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7779
return make_int2(v.x, v.y); 
#line 7780
} 
#endif
#line 7782 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex2DGrad(texture< uint2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7783
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7787
::exit(___);}
#if 0
#line 7783
{ 
#line 7784
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7786
return make_uint2(v.x, v.y); 
#line 7787
} 
#endif
#line 7789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex2DGrad(texture< int4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7790
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7794
::exit(___);}
#if 0
#line 7790
{ 
#line 7791
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7793
return make_int4(v.x, v.y, v.z, v.w); 
#line 7794
} 
#endif
#line 7796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex2DGrad(texture< uint4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7797
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7801
::exit(___);}
#if 0
#line 7797
{ 
#line 7798
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7800
return make_uint4(v.x, v.y, v.z, v.w); 
#line 7801
} 
#endif
#line 7811 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex2DGrad(texture< long, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7812
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7816
::exit(___);}
#if 0
#line 7812
{ 
#line 7813
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7815
return (long)(v.x); 
#line 7816
} 
#endif
#line 7818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex2DGrad(texture< unsigned long, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7819
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7823
::exit(___);}
#if 0
#line 7819
{ 
#line 7820
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7822
return (unsigned long)(v.x); 
#line 7823
} 
#endif
#line 7825 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex2DGrad(texture< long1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7826
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7830
::exit(___);}
#if 0
#line 7826
{ 
#line 7827
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7829
return make_long1(v.x); 
#line 7830
} 
#endif
#line 7832 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex2DGrad(texture< ulong1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7833
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7837
::exit(___);}
#if 0
#line 7833
{ 
#line 7834
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7836
return make_ulong1(v.x); 
#line 7837
} 
#endif
#line 7839 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex2DGrad(texture< long2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7840
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7844
::exit(___);}
#if 0
#line 7840
{ 
#line 7841
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7843
return make_long2(v.x, v.y); 
#line 7844
} 
#endif
#line 7846 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex2DGrad(texture< ulong2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7847
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7851
::exit(___);}
#if 0
#line 7847
{ 
#line 7848
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7850
return make_ulong2(v.x, v.y); 
#line 7851
} 
#endif
#line 7853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex2DGrad(texture< long4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7854
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7858
::exit(___);}
#if 0
#line 7854
{ 
#line 7855
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7857
return make_long4(v.x, v.y, v.z, v.w); 
#line 7858
} 
#endif
#line 7860 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex2DGrad(texture< ulong4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7861
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7865
::exit(___);}
#if 0
#line 7861
{ 
#line 7862
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7864
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 7865
} 
#endif
#line 7875 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DGrad(texture< float, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7876
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7880
::exit(___);}
#if 0
#line 7876
{ 
#line 7877
float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7879
return v.x; 
#line 7880
} 
#endif
#line 7882 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DGrad(texture< float1, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7883
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7887
::exit(___);}
#if 0
#line 7883
{ 
#line 7884
float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7886
return make_float1(v.x); 
#line 7887
} 
#endif
#line 7889 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DGrad(texture< float2, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7890
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7894
::exit(___);}
#if 0
#line 7890
{ 
#line 7891
float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7893
return make_float2(v.x, v.y); 
#line 7894
} 
#endif
#line 7896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DGrad(texture< float4, 2, cudaReadModeElementType>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7897
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7901
::exit(___);}
#if 0
#line 7897
{ 
#line 7898
float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7900
return make_float4(v.x, v.y, v.z, v.w); 
#line 7901
} 
#endif
#line 7909 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DGrad(texture< char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7910
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 7910 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 7914 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7916 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7918
return w.x; 
#line 7919
} 
#endif
#line 7921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DGrad(texture< signed char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7922
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7927
::exit(___);}
#if 0
#line 7922
{ 
#line 7923
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7924
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7926
return w.x; 
#line 7927
} 
#endif
#line 7929 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DGrad(texture< unsigned char, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7930
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7935
::exit(___);}
#if 0
#line 7930
{ 
#line 7931
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7932
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7934
return w.x; 
#line 7935
} 
#endif
#line 7937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DGrad(texture< char1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7938
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7943
::exit(___);}
#if 0
#line 7938
{ 
#line 7939
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7940
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7942
return make_float1(w.x); 
#line 7943
} 
#endif
#line 7945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DGrad(texture< uchar1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7946
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7951
::exit(___);}
#if 0
#line 7946
{ 
#line 7947
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7948
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7950
return make_float1(w.x); 
#line 7951
} 
#endif
#line 7953 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DGrad(texture< char2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7954
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7959
::exit(___);}
#if 0
#line 7954
{ 
#line 7955
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7956
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7958
return make_float2(w.x, w.y); 
#line 7959
} 
#endif
#line 7961 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DGrad(texture< uchar2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7962
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7967
::exit(___);}
#if 0
#line 7962
{ 
#line 7963
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7964
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7966
return make_float2(w.x, w.y); 
#line 7967
} 
#endif
#line 7969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DGrad(texture< char4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7970
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7975
::exit(___);}
#if 0
#line 7970
{ 
#line 7971
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7972
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7974
return make_float4(w.x, w.y, w.z, w.w); 
#line 7975
} 
#endif
#line 7977 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DGrad(texture< uchar4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7978
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7983
::exit(___);}
#if 0
#line 7978
{ 
#line 7979
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7980
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7982
return make_float4(w.x, w.y, w.z, w.w); 
#line 7983
} 
#endif
#line 7991 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DGrad(texture< short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 7992
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 7997
::exit(___);}
#if 0
#line 7992
{ 
#line 7993
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 7994
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 7996
return w.x; 
#line 7997
} 
#endif
#line 7999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DGrad(texture< unsigned short, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 8000
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 8005
::exit(___);}
#if 0
#line 8000
{ 
#line 8001
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8002
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8004
return w.x; 
#line 8005
} 
#endif
#line 8007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DGrad(texture< short1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 8008
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 8013
::exit(___);}
#if 0
#line 8008
{ 
#line 8009
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8010
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8012
return make_float1(w.x); 
#line 8013
} 
#endif
#line 8015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DGrad(texture< ushort1, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 8016
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 8021
::exit(___);}
#if 0
#line 8016
{ 
#line 8017
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8018
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8020
return make_float1(w.x); 
#line 8021
} 
#endif
#line 8023 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DGrad(texture< short2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 8024
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 8029
::exit(___);}
#if 0
#line 8024
{ 
#line 8025
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8026
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8028
return make_float2(w.x, w.y); 
#line 8029
} 
#endif
#line 8031 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DGrad(texture< ushort2, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 8032
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 8037
::exit(___);}
#if 0
#line 8032
{ 
#line 8033
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8034
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8036
return make_float2(w.x, w.y); 
#line 8037
} 
#endif
#line 8039 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DGrad(texture< short4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 8040
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 8045
::exit(___);}
#if 0
#line 8040
{ 
#line 8041
int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8042
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8044
return make_float4(w.x, w.y, w.z, w.w); 
#line 8045
} 
#endif
#line 8047 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DGrad(texture< ushort4, 2, cudaReadModeNormalizedFloat>  t, float x, float y, float2 dPdx, float2 dPdy) 
#line 8048
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 8053
::exit(___);}
#if 0
#line 8048
{ 
#line 8049
uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8050
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8052
return make_float4(w.x, w.y, w.z, w.w); 
#line 8053
} 
#endif
#line 8061 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex1DLayeredGrad(texture< char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8062
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8070 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 8062 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 8066 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 8070
} 
#endif
#line 8072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex1DLayeredGrad(texture< signed char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8073
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8077
::exit(___);}
#if 0
#line 8073
{ 
#line 8074
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8076
return (signed char)(v.x); 
#line 8077
} 
#endif
#line 8079 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex1DLayeredGrad(texture< unsigned char, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8080
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8084
::exit(___);}
#if 0
#line 8080
{ 
#line 8081
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8083
return (unsigned char)(v.x); 
#line 8084
} 
#endif
#line 8086 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex1DLayeredGrad(texture< char1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8087
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8091
::exit(___);}
#if 0
#line 8087
{ 
#line 8088
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8090
return make_char1(v.x); 
#line 8091
} 
#endif
#line 8093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex1DLayeredGrad(texture< uchar1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8094
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8098
::exit(___);}
#if 0
#line 8094
{ 
#line 8095
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8097
return make_uchar1(v.x); 
#line 8098
} 
#endif
#line 8100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex1DLayeredGrad(texture< char2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8101
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8105
::exit(___);}
#if 0
#line 8101
{ 
#line 8102
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8104
return make_char2(v.x, v.y); 
#line 8105
} 
#endif
#line 8107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex1DLayeredGrad(texture< uchar2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8108
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8112
::exit(___);}
#if 0
#line 8108
{ 
#line 8109
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8111
return make_uchar2(v.x, v.y); 
#line 8112
} 
#endif
#line 8114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex1DLayeredGrad(texture< char4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8115
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8119
::exit(___);}
#if 0
#line 8115
{ 
#line 8116
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8118
return make_char4(v.x, v.y, v.z, v.w); 
#line 8119
} 
#endif
#line 8121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex1DLayeredGrad(texture< uchar4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8122
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8126
::exit(___);}
#if 0
#line 8122
{ 
#line 8123
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8125
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 8126
} 
#endif
#line 8134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex1DLayeredGrad(texture< short, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8135
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8139
::exit(___);}
#if 0
#line 8135
{ 
#line 8136
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8138
return (short)(v.x); 
#line 8139
} 
#endif
#line 8141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex1DLayeredGrad(texture< unsigned short, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8142
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8146
::exit(___);}
#if 0
#line 8142
{ 
#line 8143
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8145
return (unsigned short)(v.x); 
#line 8146
} 
#endif
#line 8148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex1DLayeredGrad(texture< short1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8149
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8153
::exit(___);}
#if 0
#line 8149
{ 
#line 8150
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8152
return make_short1(v.x); 
#line 8153
} 
#endif
#line 8155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex1DLayeredGrad(texture< ushort1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8156
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8160
::exit(___);}
#if 0
#line 8156
{ 
#line 8157
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8159
return make_ushort1(v.x); 
#line 8160
} 
#endif
#line 8162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex1DLayeredGrad(texture< short2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8163
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8167
::exit(___);}
#if 0
#line 8163
{ 
#line 8164
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8166
return make_short2(v.x, v.y); 
#line 8167
} 
#endif
#line 8169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex1DLayeredGrad(texture< ushort2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8170
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8174
::exit(___);}
#if 0
#line 8170
{ 
#line 8171
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8173
return make_ushort2(v.x, v.y); 
#line 8174
} 
#endif
#line 8176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex1DLayeredGrad(texture< short4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8177
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8181
::exit(___);}
#if 0
#line 8177
{ 
#line 8178
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8180
return make_short4(v.x, v.y, v.z, v.w); 
#line 8181
} 
#endif
#line 8183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex1DLayeredGrad(texture< ushort4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8184
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8188
::exit(___);}
#if 0
#line 8184
{ 
#line 8185
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8187
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 8188
} 
#endif
#line 8196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex1DLayeredGrad(texture< int, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8197
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8201
::exit(___);}
#if 0
#line 8197
{ 
#line 8198
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8200
return v.x; 
#line 8201
} 
#endif
#line 8203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex1DLayeredGrad(texture< unsigned, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8204
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8208
::exit(___);}
#if 0
#line 8204
{ 
#line 8205
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8207
return v.x; 
#line 8208
} 
#endif
#line 8210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex1DLayeredGrad(texture< int1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8211
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8215
::exit(___);}
#if 0
#line 8211
{ 
#line 8212
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8214
return make_int1(v.x); 
#line 8215
} 
#endif
#line 8217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex1DLayeredGrad(texture< uint1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8218
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8222
::exit(___);}
#if 0
#line 8218
{ 
#line 8219
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8221
return make_uint1(v.x); 
#line 8222
} 
#endif
#line 8224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex1DLayeredGrad(texture< int2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8225
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8229
::exit(___);}
#if 0
#line 8225
{ 
#line 8226
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8228
return make_int2(v.x, v.y); 
#line 8229
} 
#endif
#line 8231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex1DLayeredGrad(texture< uint2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8232
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8236
::exit(___);}
#if 0
#line 8232
{ 
#line 8233
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8235
return make_uint2(v.x, v.y); 
#line 8236
} 
#endif
#line 8238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex1DLayeredGrad(texture< int4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8239
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8243
::exit(___);}
#if 0
#line 8239
{ 
#line 8240
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8242
return make_int4(v.x, v.y, v.z, v.w); 
#line 8243
} 
#endif
#line 8245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex1DLayeredGrad(texture< uint4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8246
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8250
::exit(___);}
#if 0
#line 8246
{ 
#line 8247
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8249
return make_uint4(v.x, v.y, v.z, v.w); 
#line 8250
} 
#endif
#line 8260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex1DLayeredGrad(texture< long, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8261
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8265
::exit(___);}
#if 0
#line 8261
{ 
#line 8262
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8264
return (long)(v.x); 
#line 8265
} 
#endif
#line 8267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex1DLayeredGrad(texture< unsigned long, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8268
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8272
::exit(___);}
#if 0
#line 8268
{ 
#line 8269
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8271
return (unsigned long)(v.x); 
#line 8272
} 
#endif
#line 8274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex1DLayeredGrad(texture< long1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8275
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8279
::exit(___);}
#if 0
#line 8275
{ 
#line 8276
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8278
return make_long1(v.x); 
#line 8279
} 
#endif
#line 8281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex1DLayeredGrad(texture< ulong1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8282
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8286
::exit(___);}
#if 0
#line 8282
{ 
#line 8283
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8285
return make_ulong1(v.x); 
#line 8286
} 
#endif
#line 8288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex1DLayeredGrad(texture< long2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8289
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8293
::exit(___);}
#if 0
#line 8289
{ 
#line 8290
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8292
return make_long2(v.x, v.y); 
#line 8293
} 
#endif
#line 8295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex1DLayeredGrad(texture< ulong2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8296
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8300
::exit(___);}
#if 0
#line 8296
{ 
#line 8297
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8299
return make_ulong2(v.x, v.y); 
#line 8300
} 
#endif
#line 8302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex1DLayeredGrad(texture< long4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8303
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8307
::exit(___);}
#if 0
#line 8303
{ 
#line 8304
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8306
return make_long4(v.x, v.y, v.z, v.w); 
#line 8307
} 
#endif
#line 8309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex1DLayeredGrad(texture< ulong4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8310
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8314
::exit(___);}
#if 0
#line 8310
{ 
#line 8311
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8313
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 8314
} 
#endif
#line 8324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayeredGrad(texture< float, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8325
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8329
::exit(___);}
#if 0
#line 8325
{ 
#line 8326
float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8328
return v.x; 
#line 8329
} 
#endif
#line 8331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayeredGrad(texture< float1, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8332
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8336
::exit(___);}
#if 0
#line 8332
{ 
#line 8333
float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8335
return make_float1(v.x); 
#line 8336
} 
#endif
#line 8338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayeredGrad(texture< float2, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8339
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8343
::exit(___);}
#if 0
#line 8339
{ 
#line 8340
float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8342
return make_float2(v.x, v.y); 
#line 8343
} 
#endif
#line 8345 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayeredGrad(texture< float4, 241, cudaReadModeElementType>  t, float x, int layer, float dPdx, float dPdy) 
#line 8346
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8350
::exit(___);}
#if 0
#line 8346
{ 
#line 8347
float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8349
return make_float4(v.x, v.y, v.z, v.w); 
#line 8350
} 
#endif
#line 8358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayeredGrad(texture< char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8359
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 8359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 8363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8367
return w.x; 
#line 8368
} 
#endif
#line 8370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayeredGrad(texture< signed char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8371
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8376
::exit(___);}
#if 0
#line 8371
{ 
#line 8372
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8373
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8375
return w.x; 
#line 8376
} 
#endif
#line 8378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayeredGrad(texture< unsigned char, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8379
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8384
::exit(___);}
#if 0
#line 8379
{ 
#line 8380
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8381
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8383
return w.x; 
#line 8384
} 
#endif
#line 8386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayeredGrad(texture< char1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8387
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8392
::exit(___);}
#if 0
#line 8387
{ 
#line 8388
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8389
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8391
return make_float1(w.x); 
#line 8392
} 
#endif
#line 8394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayeredGrad(texture< uchar1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8395
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8400
::exit(___);}
#if 0
#line 8395
{ 
#line 8396
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8397
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8399
return make_float1(w.x); 
#line 8400
} 
#endif
#line 8402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayeredGrad(texture< char2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8403
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8408
::exit(___);}
#if 0
#line 8403
{ 
#line 8404
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8405
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8407
return make_float2(w.x, w.y); 
#line 8408
} 
#endif
#line 8410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayeredGrad(texture< uchar2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8411
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8416
::exit(___);}
#if 0
#line 8411
{ 
#line 8412
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8413
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8415
return make_float2(w.x, w.y); 
#line 8416
} 
#endif
#line 8418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayeredGrad(texture< char4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8419
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8424
::exit(___);}
#if 0
#line 8419
{ 
#line 8420
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8421
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8423
return make_float4(w.x, w.y, w.z, w.w); 
#line 8424
} 
#endif
#line 8426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayeredGrad(texture< uchar4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8427
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8432
::exit(___);}
#if 0
#line 8427
{ 
#line 8428
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8429
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8431
return make_float4(w.x, w.y, w.z, w.w); 
#line 8432
} 
#endif
#line 8440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayeredGrad(texture< short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8441
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8446
::exit(___);}
#if 0
#line 8441
{ 
#line 8442
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8443
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8445
return w.x; 
#line 8446
} 
#endif
#line 8448 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex1DLayeredGrad(texture< unsigned short, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8449
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8454
::exit(___);}
#if 0
#line 8449
{ 
#line 8450
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8451
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8453
return w.x; 
#line 8454
} 
#endif
#line 8456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayeredGrad(texture< short1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8457
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8462
::exit(___);}
#if 0
#line 8457
{ 
#line 8458
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8459
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8461
return make_float1(w.x); 
#line 8462
} 
#endif
#line 8464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex1DLayeredGrad(texture< ushort1, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8465
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8470
::exit(___);}
#if 0
#line 8465
{ 
#line 8466
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8467
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8469
return make_float1(w.x); 
#line 8470
} 
#endif
#line 8472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayeredGrad(texture< short2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8473
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8478
::exit(___);}
#if 0
#line 8473
{ 
#line 8474
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8475
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8477
return make_float2(w.x, w.y); 
#line 8478
} 
#endif
#line 8480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex1DLayeredGrad(texture< ushort2, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8481
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8486
::exit(___);}
#if 0
#line 8481
{ 
#line 8482
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8483
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8485
return make_float2(w.x, w.y); 
#line 8486
} 
#endif
#line 8488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayeredGrad(texture< short4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8489
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8494
::exit(___);}
#if 0
#line 8489
{ 
#line 8490
int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8491
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8493
return make_float4(w.x, w.y, w.z, w.w); 
#line 8494
} 
#endif
#line 8496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex1DLayeredGrad(texture< ushort4, 241, cudaReadModeNormalizedFloat>  t, float x, int layer, float dPdx, float dPdy) 
#line 8497
{int volatile ___ = 1;(void)t;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 8502
::exit(___);}
#if 0
#line 8497
{ 
#line 8498
uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0)); 
#line 8499
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8501
return make_float4(w.x, w.y, w.z, w.w); 
#line 8502
} 
#endif
#line 8510 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex2DLayeredGrad(texture< char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8511
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 8511 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 8515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 8519
} 
#endif
#line 8521 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex2DLayeredGrad(texture< signed char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8522
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8526
::exit(___);}
#if 0
#line 8522
{ 
#line 8523
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8525
return (signed char)(v.x); 
#line 8526
} 
#endif
#line 8528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex2DLayeredGrad(texture< unsigned char, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8529
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8533
::exit(___);}
#if 0
#line 8529
{ 
#line 8530
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8532
return (unsigned char)(v.x); 
#line 8533
} 
#endif
#line 8535 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex2DLayeredGrad(texture< char1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8536
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8540
::exit(___);}
#if 0
#line 8536
{ 
#line 8537
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8539
return make_char1(v.x); 
#line 8540
} 
#endif
#line 8542 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex2DLayeredGrad(texture< uchar1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8543
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8547
::exit(___);}
#if 0
#line 8543
{ 
#line 8544
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8546
return make_uchar1(v.x); 
#line 8547
} 
#endif
#line 8549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex2DLayeredGrad(texture< char2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8550
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8554
::exit(___);}
#if 0
#line 8550
{ 
#line 8551
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8553
return make_char2(v.x, v.y); 
#line 8554
} 
#endif
#line 8556 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex2DLayeredGrad(texture< uchar2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8557
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8561
::exit(___);}
#if 0
#line 8557
{ 
#line 8558
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8560
return make_uchar2(v.x, v.y); 
#line 8561
} 
#endif
#line 8563 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex2DLayeredGrad(texture< char4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8564
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8568
::exit(___);}
#if 0
#line 8564
{ 
#line 8565
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8567
return make_char4(v.x, v.y, v.z, v.w); 
#line 8568
} 
#endif
#line 8570 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex2DLayeredGrad(texture< uchar4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8571
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8575
::exit(___);}
#if 0
#line 8571
{ 
#line 8572
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8574
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 8575
} 
#endif
#line 8583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex2DLayeredGrad(texture< short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8584
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8588
::exit(___);}
#if 0
#line 8584
{ 
#line 8585
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8587
return (short)(v.x); 
#line 8588
} 
#endif
#line 8590 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex2DLayeredGrad(texture< unsigned short, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8591
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8595
::exit(___);}
#if 0
#line 8591
{ 
#line 8592
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8594
return (unsigned short)(v.x); 
#line 8595
} 
#endif
#line 8597 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex2DLayeredGrad(texture< short1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8598
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8602
::exit(___);}
#if 0
#line 8598
{ 
#line 8599
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8601
return make_short1(v.x); 
#line 8602
} 
#endif
#line 8604 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex2DLayeredGrad(texture< ushort1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8605
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8609
::exit(___);}
#if 0
#line 8605
{ 
#line 8606
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8608
return make_ushort1(v.x); 
#line 8609
} 
#endif
#line 8611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex2DLayeredGrad(texture< short2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8612
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8616
::exit(___);}
#if 0
#line 8612
{ 
#line 8613
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8615
return make_short2(v.x, v.y); 
#line 8616
} 
#endif
#line 8618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex2DLayeredGrad(texture< ushort2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8619
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8623
::exit(___);}
#if 0
#line 8619
{ 
#line 8620
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8622
return make_ushort2(v.x, v.y); 
#line 8623
} 
#endif
#line 8625 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex2DLayeredGrad(texture< short4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8626
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8630
::exit(___);}
#if 0
#line 8626
{ 
#line 8627
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8629
return make_short4(v.x, v.y, v.z, v.w); 
#line 8630
} 
#endif
#line 8632 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex2DLayeredGrad(texture< ushort4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8633
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8637
::exit(___);}
#if 0
#line 8633
{ 
#line 8634
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8636
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 8637
} 
#endif
#line 8645 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex2DLayeredGrad(texture< int, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8646
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8650
::exit(___);}
#if 0
#line 8646
{ 
#line 8647
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8649
return v.x; 
#line 8650
} 
#endif
#line 8652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex2DLayeredGrad(texture< unsigned, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8653
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8657
::exit(___);}
#if 0
#line 8653
{ 
#line 8654
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8656
return v.x; 
#line 8657
} 
#endif
#line 8659 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex2DLayeredGrad(texture< int1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8660
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8664
::exit(___);}
#if 0
#line 8660
{ 
#line 8661
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8663
return make_int1(v.x); 
#line 8664
} 
#endif
#line 8666 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex2DLayeredGrad(texture< uint1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8667
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8671
::exit(___);}
#if 0
#line 8667
{ 
#line 8668
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8670
return make_uint1(v.x); 
#line 8671
} 
#endif
#line 8673 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex2DLayeredGrad(texture< int2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8674
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8678
::exit(___);}
#if 0
#line 8674
{ 
#line 8675
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8677
return make_int2(v.x, v.y); 
#line 8678
} 
#endif
#line 8680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex2DLayeredGrad(texture< uint2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8681
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8685
::exit(___);}
#if 0
#line 8681
{ 
#line 8682
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8684
return make_uint2(v.x, v.y); 
#line 8685
} 
#endif
#line 8687 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex2DLayeredGrad(texture< int4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8688
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8692
::exit(___);}
#if 0
#line 8688
{ 
#line 8689
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8691
return make_int4(v.x, v.y, v.z, v.w); 
#line 8692
} 
#endif
#line 8694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex2DLayeredGrad(texture< uint4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8695
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8699
::exit(___);}
#if 0
#line 8695
{ 
#line 8696
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8698
return make_uint4(v.x, v.y, v.z, v.w); 
#line 8699
} 
#endif
#line 8709 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex2DLayeredGrad(texture< long, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8710
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8714
::exit(___);}
#if 0
#line 8710
{ 
#line 8711
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8713
return (long)(v.x); 
#line 8714
} 
#endif
#line 8716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex2DLayeredGrad(texture< unsigned long, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8717
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8721
::exit(___);}
#if 0
#line 8717
{ 
#line 8718
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8720
return (unsigned long)(v.x); 
#line 8721
} 
#endif
#line 8723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex2DLayeredGrad(texture< long1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8724
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8728
::exit(___);}
#if 0
#line 8724
{ 
#line 8725
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8727
return make_long1(v.x); 
#line 8728
} 
#endif
#line 8730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex2DLayeredGrad(texture< ulong1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8731
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8735
::exit(___);}
#if 0
#line 8731
{ 
#line 8732
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8734
return make_ulong1(v.x); 
#line 8735
} 
#endif
#line 8737 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex2DLayeredGrad(texture< long2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8738
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8742
::exit(___);}
#if 0
#line 8738
{ 
#line 8739
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8741
return make_long2(v.x, v.y); 
#line 8742
} 
#endif
#line 8744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex2DLayeredGrad(texture< ulong2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8745
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8749
::exit(___);}
#if 0
#line 8745
{ 
#line 8746
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8748
return make_ulong2(v.x, v.y); 
#line 8749
} 
#endif
#line 8751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex2DLayeredGrad(texture< long4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8752
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8756
::exit(___);}
#if 0
#line 8752
{ 
#line 8753
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8755
return make_long4(v.x, v.y, v.z, v.w); 
#line 8756
} 
#endif
#line 8758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex2DLayeredGrad(texture< ulong4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8759
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8763
::exit(___);}
#if 0
#line 8759
{ 
#line 8760
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8762
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 8763
} 
#endif
#line 8773 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayeredGrad(texture< float, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8774
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8778
::exit(___);}
#if 0
#line 8774
{ 
#line 8775
float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8777
return v.x; 
#line 8778
} 
#endif
#line 8780 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayeredGrad(texture< float1, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8781
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8785
::exit(___);}
#if 0
#line 8781
{ 
#line 8782
float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8784
return make_float1(v.x); 
#line 8785
} 
#endif
#line 8787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayeredGrad(texture< float2, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8788
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8792
::exit(___);}
#if 0
#line 8788
{ 
#line 8789
float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8791
return make_float2(v.x, v.y); 
#line 8792
} 
#endif
#line 8794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayeredGrad(texture< float4, 242, cudaReadModeElementType>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8795
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8799
::exit(___);}
#if 0
#line 8795
{ 
#line 8796
float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8798
return make_float4(v.x, v.y, v.z, v.w); 
#line 8799
} 
#endif
#line 8807 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayeredGrad(texture< char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8808
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8817 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 8808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 8812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8814 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8816
return w.x; 
#line 8817
} 
#endif
#line 8819 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayeredGrad(texture< signed char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8820
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8825
::exit(___);}
#if 0
#line 8820
{ 
#line 8821
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8822
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8824
return w.x; 
#line 8825
} 
#endif
#line 8827 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayeredGrad(texture< unsigned char, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8828
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8833
::exit(___);}
#if 0
#line 8828
{ 
#line 8829
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8830
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8832
return w.x; 
#line 8833
} 
#endif
#line 8835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayeredGrad(texture< char1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8836
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8841
::exit(___);}
#if 0
#line 8836
{ 
#line 8837
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8838
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8840
return make_float1(w.x); 
#line 8841
} 
#endif
#line 8843 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayeredGrad(texture< uchar1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8844
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8849
::exit(___);}
#if 0
#line 8844
{ 
#line 8845
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8846
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8848
return make_float1(w.x); 
#line 8849
} 
#endif
#line 8851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayeredGrad(texture< char2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8852
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8857
::exit(___);}
#if 0
#line 8852
{ 
#line 8853
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8854
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8856
return make_float2(w.x, w.y); 
#line 8857
} 
#endif
#line 8859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayeredGrad(texture< uchar2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8860
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8865
::exit(___);}
#if 0
#line 8860
{ 
#line 8861
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8862
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8864
return make_float2(w.x, w.y); 
#line 8865
} 
#endif
#line 8867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayeredGrad(texture< char4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8868
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8873
::exit(___);}
#if 0
#line 8868
{ 
#line 8869
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8870
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8872
return make_float4(w.x, w.y, w.z, w.w); 
#line 8873
} 
#endif
#line 8875 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayeredGrad(texture< uchar4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8876
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8881
::exit(___);}
#if 0
#line 8876
{ 
#line 8877
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8878
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8880
return make_float4(w.x, w.y, w.z, w.w); 
#line 8881
} 
#endif
#line 8889 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayeredGrad(texture< short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8890
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8895
::exit(___);}
#if 0
#line 8890
{ 
#line 8891
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8892
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8894
return w.x; 
#line 8895
} 
#endif
#line 8897 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex2DLayeredGrad(texture< unsigned short, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8898
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8903
::exit(___);}
#if 0
#line 8898
{ 
#line 8899
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8900
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8902
return w.x; 
#line 8903
} 
#endif
#line 8905 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayeredGrad(texture< short1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8906
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8911
::exit(___);}
#if 0
#line 8906
{ 
#line 8907
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8908
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8910
return make_float1(w.x); 
#line 8911
} 
#endif
#line 8913 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex2DLayeredGrad(texture< ushort1, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8914
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8919
::exit(___);}
#if 0
#line 8914
{ 
#line 8915
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8916
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8918
return make_float1(w.x); 
#line 8919
} 
#endif
#line 8921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayeredGrad(texture< short2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8922
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8927
::exit(___);}
#if 0
#line 8922
{ 
#line 8923
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8924
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8926
return make_float2(w.x, w.y); 
#line 8927
} 
#endif
#line 8929 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex2DLayeredGrad(texture< ushort2, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8930
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8935
::exit(___);}
#if 0
#line 8930
{ 
#line 8931
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8932
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8934
return make_float2(w.x, w.y); 
#line 8935
} 
#endif
#line 8937 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayeredGrad(texture< short4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8938
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8943
::exit(___);}
#if 0
#line 8938
{ 
#line 8939
int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8940
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8942
return make_float4(w.x, w.y, w.z, w.w); 
#line 8943
} 
#endif
#line 8945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex2DLayeredGrad(texture< ushort4, 242, cudaReadModeNormalizedFloat>  t, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 8946
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 8951
::exit(___);}
#if 0
#line 8946
{ 
#line 8947
uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0)); 
#line 8948
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 8950
return make_float4(w.x, w.y, w.z, w.w); 
#line 8951
} 
#endif
#line 8959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char tex3DGrad(texture< char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 8960
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 8968 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 8960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 8964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 8967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
return (char)(v.x); 
#line 8968
} 
#endif
#line 8970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline signed char tex3DGrad(texture< signed char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 8971
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 8975
::exit(___);}
#if 0
#line 8971
{ 
#line 8972
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 8974
return (signed char)(v.x); 
#line 8975
} 
#endif
#line 8977 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned char tex3DGrad(texture< unsigned char, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 8978
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 8982
::exit(___);}
#if 0
#line 8978
{ 
#line 8979
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 8981
return (unsigned char)(v.x); 
#line 8982
} 
#endif
#line 8984 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char1 tex3DGrad(texture< char1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 8985
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 8989
::exit(___);}
#if 0
#line 8985
{ 
#line 8986
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 8988
return make_char1(v.x); 
#line 8989
} 
#endif
#line 8991 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar1 tex3DGrad(texture< uchar1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 8992
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 8996
::exit(___);}
#if 0
#line 8992
{ 
#line 8993
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 8995
return make_uchar1(v.x); 
#line 8996
} 
#endif
#line 8998 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char2 tex3DGrad(texture< char2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 8999
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9003
::exit(___);}
#if 0
#line 8999
{ 
#line 9000
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9002
return make_char2(v.x, v.y); 
#line 9003
} 
#endif
#line 9005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar2 tex3DGrad(texture< uchar2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9006
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9010
::exit(___);}
#if 0
#line 9006
{ 
#line 9007
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9009
return make_uchar2(v.x, v.y); 
#line 9010
} 
#endif
#line 9012 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline char4 tex3DGrad(texture< char4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9013
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9017
::exit(___);}
#if 0
#line 9013
{ 
#line 9014
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9016
return make_char4(v.x, v.y, v.z, v.w); 
#line 9017
} 
#endif
#line 9019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uchar4 tex3DGrad(texture< uchar4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9020
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9024
::exit(___);}
#if 0
#line 9020
{ 
#line 9021
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9023
return make_uchar4(v.x, v.y, v.z, v.w); 
#line 9024
} 
#endif
#line 9032 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short tex3DGrad(texture< short, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9033
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9037
::exit(___);}
#if 0
#line 9033
{ 
#line 9034
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9036
return (short)(v.x); 
#line 9037
} 
#endif
#line 9039 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned short tex3DGrad(texture< unsigned short, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9040
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9044
::exit(___);}
#if 0
#line 9040
{ 
#line 9041
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9043
return (unsigned short)(v.x); 
#line 9044
} 
#endif
#line 9046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short1 tex3DGrad(texture< short1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9047
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9051
::exit(___);}
#if 0
#line 9047
{ 
#line 9048
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9050
return make_short1(v.x); 
#line 9051
} 
#endif
#line 9053 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort1 tex3DGrad(texture< ushort1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9054
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9058
::exit(___);}
#if 0
#line 9054
{ 
#line 9055
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9057
return make_ushort1(v.x); 
#line 9058
} 
#endif
#line 9060 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short2 tex3DGrad(texture< short2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9061
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9065
::exit(___);}
#if 0
#line 9061
{ 
#line 9062
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9064
return make_short2(v.x, v.y); 
#line 9065
} 
#endif
#line 9067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort2 tex3DGrad(texture< ushort2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9068
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9072
::exit(___);}
#if 0
#line 9068
{ 
#line 9069
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9071
return make_ushort2(v.x, v.y); 
#line 9072
} 
#endif
#line 9074 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline short4 tex3DGrad(texture< short4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9075
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9079
::exit(___);}
#if 0
#line 9075
{ 
#line 9076
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9078
return make_short4(v.x, v.y, v.z, v.w); 
#line 9079
} 
#endif
#line 9081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ushort4 tex3DGrad(texture< ushort4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9082
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9086
::exit(___);}
#if 0
#line 9082
{ 
#line 9083
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9085
return make_ushort4(v.x, v.y, v.z, v.w); 
#line 9086
} 
#endif
#line 9094 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int tex3DGrad(texture< int, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9095
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9099
::exit(___);}
#if 0
#line 9095
{ 
#line 9096
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9098
return v.x; 
#line 9099
} 
#endif
#line 9101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned tex3DGrad(texture< unsigned, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9102
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9106
::exit(___);}
#if 0
#line 9102
{ 
#line 9103
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9105
return v.x; 
#line 9106
} 
#endif
#line 9108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int1 tex3DGrad(texture< int1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9109
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9113
::exit(___);}
#if 0
#line 9109
{ 
#line 9110
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9112
return make_int1(v.x); 
#line 9113
} 
#endif
#line 9115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint1 tex3DGrad(texture< uint1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9116
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9120
::exit(___);}
#if 0
#line 9116
{ 
#line 9117
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9119
return make_uint1(v.x); 
#line 9120
} 
#endif
#line 9122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int2 tex3DGrad(texture< int2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9123
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9127
::exit(___);}
#if 0
#line 9123
{ 
#line 9124
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9126
return make_int2(v.x, v.y); 
#line 9127
} 
#endif
#line 9129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint2 tex3DGrad(texture< uint2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9130
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9134
::exit(___);}
#if 0
#line 9130
{ 
#line 9131
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9133
return make_uint2(v.x, v.y); 
#line 9134
} 
#endif
#line 9136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline int4 tex3DGrad(texture< int4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9137
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9141
::exit(___);}
#if 0
#line 9137
{ 
#line 9138
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9140
return make_int4(v.x, v.y, v.z, v.w); 
#line 9141
} 
#endif
#line 9143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline uint4 tex3DGrad(texture< uint4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9144
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9148
::exit(___);}
#if 0
#line 9144
{ 
#line 9145
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9147
return make_uint4(v.x, v.y, v.z, v.w); 
#line 9148
} 
#endif
#line 9158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long tex3DGrad(texture< long, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9159
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9163
::exit(___);}
#if 0
#line 9159
{ 
#line 9160
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9162
return (long)(v.x); 
#line 9163
} 
#endif
#line 9165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline unsigned long tex3DGrad(texture< unsigned long, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9166
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9170
::exit(___);}
#if 0
#line 9166
{ 
#line 9167
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9169
return (unsigned long)(v.x); 
#line 9170
} 
#endif
#line 9172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long1 tex3DGrad(texture< long1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9173
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9177
::exit(___);}
#if 0
#line 9173
{ 
#line 9174
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9176
return make_long1(v.x); 
#line 9177
} 
#endif
#line 9179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong1 tex3DGrad(texture< ulong1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9180
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9184
::exit(___);}
#if 0
#line 9180
{ 
#line 9181
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9183
return make_ulong1(v.x); 
#line 9184
} 
#endif
#line 9186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long2 tex3DGrad(texture< long2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9187
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9191
::exit(___);}
#if 0
#line 9187
{ 
#line 9188
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9190
return make_long2(v.x, v.y); 
#line 9191
} 
#endif
#line 9193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong2 tex3DGrad(texture< ulong2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9194
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9198
::exit(___);}
#if 0
#line 9194
{ 
#line 9195
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9197
return make_ulong2(v.x, v.y); 
#line 9198
} 
#endif
#line 9200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline long4 tex3DGrad(texture< long4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9201
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9205
::exit(___);}
#if 0
#line 9201
{ 
#line 9202
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9204
return make_long4(v.x, v.y, v.z, v.w); 
#line 9205
} 
#endif
#line 9207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline ulong4 tex3DGrad(texture< ulong4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9208
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9212
::exit(___);}
#if 0
#line 9208
{ 
#line 9209
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9211
return make_ulong4(v.x, v.y, v.z, v.w); 
#line 9212
} 
#endif
#line 9222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3DGrad(texture< float, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9223
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9227
::exit(___);}
#if 0
#line 9223
{ 
#line 9224
float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9226
return v.x; 
#line 9227
} 
#endif
#line 9229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3DGrad(texture< float1, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9230
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9234
::exit(___);}
#if 0
#line 9230
{ 
#line 9231
float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9233
return make_float1(v.x); 
#line 9234
} 
#endif
#line 9236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3DGrad(texture< float2, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9237
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9241
::exit(___);}
#if 0
#line 9237
{ 
#line 9238
float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9240
return make_float2(v.x, v.y); 
#line 9241
} 
#endif
#line 9243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3DGrad(texture< float4, 3, cudaReadModeElementType>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9244
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9248
::exit(___);}
#if 0
#line 9244
{ 
#line 9245
float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9247
return make_float4(v.x, v.y, v.z, v.w); 
#line 9248
} 
#endif
#line 9256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3DGrad(texture< char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9257
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
::exit(___);}
#if 0
#line 9257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
{ 
#line 9261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9265
return w.x; 
#line 9266
} 
#endif
#line 9268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3DGrad(texture< signed char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9269
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9274
::exit(___);}
#if 0
#line 9269
{ 
#line 9270
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9271
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9273
return w.x; 
#line 9274
} 
#endif
#line 9276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3DGrad(texture< unsigned char, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9277
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9282
::exit(___);}
#if 0
#line 9277
{ 
#line 9278
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9279
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9281
return w.x; 
#line 9282
} 
#endif
#line 9284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3DGrad(texture< char1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9285
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9290
::exit(___);}
#if 0
#line 9285
{ 
#line 9286
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9287
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9289
return make_float1(w.x); 
#line 9290
} 
#endif
#line 9292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3DGrad(texture< uchar1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9293
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9298
::exit(___);}
#if 0
#line 9293
{ 
#line 9294
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9295
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9297
return make_float1(w.x); 
#line 9298
} 
#endif
#line 9300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3DGrad(texture< char2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9301
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9306
::exit(___);}
#if 0
#line 9301
{ 
#line 9302
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9303
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9305
return make_float2(w.x, w.y); 
#line 9306
} 
#endif
#line 9308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3DGrad(texture< uchar2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9309
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9314
::exit(___);}
#if 0
#line 9309
{ 
#line 9310
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9311
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9313
return make_float2(w.x, w.y); 
#line 9314
} 
#endif
#line 9316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3DGrad(texture< char4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9317
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9322
::exit(___);}
#if 0
#line 9317
{ 
#line 9318
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9319
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9321
return make_float4(w.x, w.y, w.z, w.w); 
#line 9322
} 
#endif
#line 9324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3DGrad(texture< uchar4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9325
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9330
::exit(___);}
#if 0
#line 9325
{ 
#line 9326
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9327
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9329
return make_float4(w.x, w.y, w.z, w.w); 
#line 9330
} 
#endif
#line 9338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3DGrad(texture< short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9339
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9344
::exit(___);}
#if 0
#line 9339
{ 
#line 9340
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9341
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9343
return w.x; 
#line 9344
} 
#endif
#line 9346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float tex3DGrad(texture< unsigned short, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9347
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9352
::exit(___);}
#if 0
#line 9347
{ 
#line 9348
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9349
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9351
return w.x; 
#line 9352
} 
#endif
#line 9354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3DGrad(texture< short1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9355
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9360
::exit(___);}
#if 0
#line 9355
{ 
#line 9356
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9357
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9359
return make_float1(w.x); 
#line 9360
} 
#endif
#line 9362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float1 tex3DGrad(texture< ushort1, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9363
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9368
::exit(___);}
#if 0
#line 9363
{ 
#line 9364
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9365
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9367
return make_float1(w.x); 
#line 9368
} 
#endif
#line 9370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3DGrad(texture< short2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9371
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9376
::exit(___);}
#if 0
#line 9371
{ 
#line 9372
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9373
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9375
return make_float2(w.x, w.y); 
#line 9376
} 
#endif
#line 9378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float2 tex3DGrad(texture< ushort2, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9379
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9384
::exit(___);}
#if 0
#line 9379
{ 
#line 9380
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9381
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9383
return make_float2(w.x, w.y); 
#line 9384
} 
#endif
#line 9386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3DGrad(texture< short4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9387
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9392
::exit(___);}
#if 0
#line 9387
{ 
#line 9388
int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9389
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9391
return make_float4(w.x, w.y, w.z, w.w); 
#line 9392
} 
#endif
#line 9394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_fetch_functions.hpp"
static __forceinline float4 tex3DGrad(texture< ushort4, 3, cudaReadModeNormalizedFloat>  t, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 9395
{int volatile ___ = 1;(void)t;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 9400
::exit(___);}
#if 0
#line 9395
{ 
#line 9396
uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0)); 
#line 9397
float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); 
#line 9399
return make_float4(w.x, w.y, w.z, w.w); 
#line 9400
} 
#endif
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
extern "C" { void __tex_1d_v4f32_s32(cudaTextureObject_t, int, float *, float *, float *, float *); } 
#line 71
extern "C" { void __tex_1d_v4f32_f32(cudaTextureObject_t, float, float *, float *, float *, float *); } 
#line 72
extern "C" { void __tex_1d_level_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *); } 
#line 73
extern "C" { void __tex_1d_grad_v4f32_f32(cudaTextureObject_t, float, float, float, float *, float *, float *, float *); } 
#line 74
extern "C" { void __tex_1d_v4s32_s32(cudaTextureObject_t, int, int *, int *, int *, int *); } 
#line 75
extern "C" { void __tex_1d_v4s32_f32(cudaTextureObject_t, float, int *, int *, int *, int *); } 
#line 76
extern "C" { void __tex_1d_level_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *); } 
#line 77
extern "C" { void __tex_1d_grad_v4s32_f32(cudaTextureObject_t, float, float, float, int *, int *, int *, int *); } 
#line 78
extern "C" { void __tex_1d_v4u32_s32(cudaTextureObject_t, int, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 79
extern "C" { void __tex_1d_v4u32_f32(cudaTextureObject_t, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 80
extern "C" { void __tex_1d_level_v4u32_f32(cudaTextureObject_t, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 81
extern "C" { void __tex_1d_grad_v4u32_f32(cudaTextureObject_t, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 83
extern "C" { void __tex_1d_array_v4f32_s32(cudaTextureObject_t, int, int, float *, float *, float *, float *); } 
#line 84
extern "C" { void __tex_1d_array_v4f32_f32(cudaTextureObject_t, int, float, float *, float *, float *, float *); } 
#line 85
extern "C" { void __tex_1d_array_level_v4f32_f32(cudaTextureObject_t, int, float, float, float *, float *, float *, float *); } 
#line 86
extern "C" { void __tex_1d_array_grad_v4f32_f32(cudaTextureObject_t, int, float, float, float, float *, float *, float *, float *); } 
#line 87
extern "C" { void __tex_1d_array_v4s32_s32(cudaTextureObject_t, int, int, int *, int *, int *, int *); } 
#line 88
extern "C" { void __tex_1d_array_v4s32_f32(cudaTextureObject_t, int, float, int *, int *, int *, int *); } 
#line 89
extern "C" { void __tex_1d_array_level_v4s32_f32(cudaTextureObject_t, int, float, float, int *, int *, int *, int *); } 
#line 90
extern "C" { void __tex_1d_array_grad_v4s32_f32(cudaTextureObject_t, int, float, float, float, int *, int *, int *, int *); } 
#line 91
extern "C" { void __tex_1d_array_v4u32_s32(cudaTextureObject_t, int, int, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 92
extern "C" { void __tex_1d_array_v4u32_f32(cudaTextureObject_t, int, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 93
extern "C" { void __tex_1d_array_level_v4u32_f32(cudaTextureObject_t, int, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 94
extern "C" { void __tex_1d_array_grad_v4u32_f32(cudaTextureObject_t, int, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 96
extern "C" { void __tex_2d_v4f32_s32(cudaTextureObject_t, int, int, float *, float *, float *, float *); } 
#line 97
extern "C" { void __tex_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *); } 
#line 98
extern "C" { void __tex_2d_level_v4f32_f32(cudaTextureObject_t, float, float, float, float *, float *, float *, float *); } 
#line 99
extern "C" { void __tex_2d_grad_v4f32_f32(cudaTextureObject_t, float, float, float, float, float, float, float *, float *, float *, float *); } 
#line 100
extern "C" { void __tex_2d_v4s32_s32(cudaTextureObject_t, int, int, int *, int *, int *, int *); } 
#line 101
extern "C" { void __tex_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *); } 
#line 102
extern "C" { void __tex_2d_level_v4s32_f32(cudaTextureObject_t, float, float, float, int *, int *, int *, int *); } 
#line 103
extern "C" { void __tex_2d_grad_v4s32_f32(cudaTextureObject_t, float, float, float, float, float, float, int *, int *, int *, int *); } 
#line 104
extern "C" { void __tex_2d_v4u32_s32(cudaTextureObject_t, int, int, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 105
extern "C" { void __tex_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 106
extern "C" { void __tex_2d_level_v4u32_f32(cudaTextureObject_t, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 107
extern "C" { void __tex_2d_grad_v4u32_f32(cudaTextureObject_t, float, float, float, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 109
extern "C" { void __tex_2d_array_v4f32_s32(cudaTextureObject_t, int, int, int, float *, float *, float *, float *); } 
#line 110
extern "C" { void __tex_2d_array_v4f32_f32(cudaTextureObject_t, int, float, float, float *, float *, float *, float *); } 
#line 111
extern "C" { void __tex_2d_array_level_v4f32_f32(cudaTextureObject_t, int, float, float, float, float *, float *, float *, float *); } 
#line 112
extern "C" { void __tex_2d_array_grad_v4f32_f32(cudaTextureObject_t, int, float, float, float, float, float, float, float *, float *, float *, float *); } 
#line 113
extern "C" { void __tex_2d_array_v4s32_s32(cudaTextureObject_t, int, int, int, int *, int *, int *, int *); } 
#line 114
extern "C" { void __tex_2d_array_v4s32_f32(cudaTextureObject_t, int, float, float, int *, int *, int *, int *); } 
#line 115
extern "C" { void __tex_2d_array_level_v4s32_f32(cudaTextureObject_t, int, float, float, float, int *, int *, int *, int *); } 
#line 116
extern "C" { void __tex_2d_array_grad_v4s32_f32(cudaTextureObject_t, int, float, float, float, float, float, float, int *, int *, int *, int *); } 
#line 117
extern "C" { void __tex_2d_array_v4u32_s32(cudaTextureObject_t, int, int, int, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 118
extern "C" { void __tex_2d_array_v4u32_f32(cudaTextureObject_t, int, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 119
extern "C" { void __tex_2d_array_level_v4u32_f32(cudaTextureObject_t, int, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 120
extern "C" { void __tex_2d_array_grad_v4u32_f32(cudaTextureObject_t, int, float, float, float, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 122
extern "C" { void __tex_3d_v4f32_s32(cudaTextureObject_t, int, int, int, float *, float *, float *, float *); } 
#line 123
extern "C" { void __tex_3d_v4f32_f32(cudaTextureObject_t, float, float, float, float *, float *, float *, float *); } 
#line 124
extern "C" { void __tex_3d_level_v4f32_f32(cudaTextureObject_t, float, float, float, float, float *, float *, float *, float *); } 
#line 125
extern "C" { void __tex_3d_grad_v4f32_f32(cudaTextureObject_t, float, float, float, float, float, float, float, float, float, float *, float *, float *, float *); } 
#line 126
extern "C" { void __tex_3d_v4s32_s32(cudaTextureObject_t, int, int, int, int *, int *, int *, int *); } 
#line 127
extern "C" { void __tex_3d_v4s32_f32(cudaTextureObject_t, float, float, float, int *, int *, int *, int *); } 
#line 128
extern "C" { void __tex_3d_level_v4s32_f32(cudaTextureObject_t, float, float, float, float, int *, int *, int *, int *); } 
#line 129
extern "C" { void __tex_3d_grad_v4s32_f32(cudaTextureObject_t, float, float, float, float, float, float, float, float, float, int *, int *, int *, int *); } 
#line 130
extern "C" { void __tex_3d_v4u32_s32(cudaTextureObject_t, int, int, int, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 131
extern "C" { void __tex_3d_v4u32_f32(cudaTextureObject_t, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 132
extern "C" { void __tex_3d_level_v4u32_f32(cudaTextureObject_t, float, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 133
extern "C" { void __tex_3d_grad_v4u32_f32(cudaTextureObject_t, float, float, float, float, float, float, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 135
extern "C" { void __tex_cube_v4f32_f32(cudaTextureObject_t, float, float, float, float *, float *, float *, float *); } 
#line 136
extern "C" { void __tex_cube_level_v4f32_f32(cudaTextureObject_t, float, float, float, float, float *, float *, float *, float *); } 
#line 137
extern "C" { void __tex_cube_v4s32_f32(cudaTextureObject_t, float, float, float, int *, int *, int *, int *); } 
#line 138
extern "C" { void __tex_cube_level_v4s32_f32(cudaTextureObject_t, float, float, float, float, int *, int *, int *, int *); } 
#line 139
extern "C" { void __tex_cube_v4u32_f32(cudaTextureObject_t, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 140
extern "C" { void __tex_cube_level_v4u32_f32(cudaTextureObject_t, float, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 142
extern "C" { void __tex_cube_array_v4f32_f32(cudaTextureObject_t, int, float, float, float, float *, float *, float *, float *); } 
#line 143
extern "C" { void __tex_cube_array_level_v4f32_f32(cudaTextureObject_t, int, float, float, float, float, float *, float *, float *, float *); } 
#line 144
extern "C" { void __tex_cube_array_v4s32_f32(cudaTextureObject_t, int, float, float, float, int *, int *, int *, int *); } 
#line 145
extern "C" { void __tex_cube_array_level_v4s32_f32(cudaTextureObject_t, int, float, float, float, float, int *, int *, int *, int *); } 
#line 146
extern "C" { void __tex_cube_array_v4u32_f32(cudaTextureObject_t, int, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 147
extern "C" { void __tex_cube_array_level_v4u32_f32(cudaTextureObject_t, int, float, float, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 149
extern "C" { void __tld4_r_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *); } 
#line 150
extern "C" { void __tld4_g_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *); } 
#line 151
extern "C" { void __tld4_b_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *); } 
#line 152
extern "C" { void __tld4_a_2d_v4f32_f32(cudaTextureObject_t, float, float, float *, float *, float *, float *); } 
#line 153
extern "C" { void __tld4_r_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *); } 
#line 154
extern "C" { void __tld4_g_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *); } 
#line 155
extern "C" { void __tld4_b_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *); } 
#line 156
extern "C" { void __tld4_a_2d_v4s32_f32(cudaTextureObject_t, float, float, int *, int *, int *, int *); } 
#line 157
extern "C" { void __tld4_r_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 158
extern "C" { void __tld4_g_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 159
extern "C" { void __tld4_b_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 160
extern "C" { void __tld4_a_2d_v4u32_f32(cudaTextureObject_t, float, float, unsigned *, unsigned *, unsigned *, unsigned *); } 
#line 169
static __forceinline void tex1Dfetch(char * retVal, cudaTextureObject_t texObject, int x); 
#line 170
static __forceinline void tex1Dfetch(signed char * retVal, cudaTextureObject_t texObject, int x); 
#line 172
static __forceinline void tex1Dfetch(char1 * retVal, cudaTextureObject_t texObject, int x); 
#line 174
static __forceinline void tex1Dfetch(char2 * retVal, cudaTextureObject_t texObject, int x); 
#line 176
static __forceinline void tex1Dfetch(char4 * retVal, cudaTextureObject_t texObject, int x); 
#line 178
static __forceinline void tex1Dfetch(unsigned char * retVal, cudaTextureObject_t texObject, int x); 
#line 180
static __forceinline void tex1Dfetch(uchar1 * retVal, cudaTextureObject_t texObject, int x); 
#line 182
static __forceinline void tex1Dfetch(uchar2 * retVal, cudaTextureObject_t texObject, int x); 
#line 184
static __forceinline void tex1Dfetch(uchar4 * retVal, cudaTextureObject_t texObject, int x); 
#line 192
static __forceinline void tex1Dfetch(short * retVal, cudaTextureObject_t texObject, int x); 
#line 194
static __forceinline void tex1Dfetch(short1 * retVal, cudaTextureObject_t texObject, int x); 
#line 196
static __forceinline void tex1Dfetch(short2 * retVal, cudaTextureObject_t texObject, int x); 
#line 198
static __forceinline void tex1Dfetch(short4 * retVal, cudaTextureObject_t texObject, int x); 
#line 200
static __forceinline void tex1Dfetch(unsigned short * retVal, cudaTextureObject_t texObject, int x); 
#line 202
static __forceinline void tex1Dfetch(ushort1 * retVal, cudaTextureObject_t texObject, int x); 
#line 204
static __forceinline void tex1Dfetch(ushort2 * retVal, cudaTextureObject_t texObject, int x); 
#line 206
static __forceinline void tex1Dfetch(ushort4 * retVal, cudaTextureObject_t texObject, int x); 
#line 214
static __forceinline void tex1Dfetch(int * retVal, cudaTextureObject_t texObject, int x); 
#line 216
static __forceinline void tex1Dfetch(int1 * retVal, cudaTextureObject_t texObject, int x); 
#line 218
static __forceinline void tex1Dfetch(int2 * retVal, cudaTextureObject_t texObject, int x); 
#line 220
static __forceinline void tex1Dfetch(int4 * retVal, cudaTextureObject_t texObject, int x); 
#line 222
static __forceinline void tex1Dfetch(unsigned * retVal, cudaTextureObject_t texObject, int x); 
#line 224
static __forceinline void tex1Dfetch(uint1 * retVal, cudaTextureObject_t texObject, int x); 
#line 226
static __forceinline void tex1Dfetch(uint2 * retVal, cudaTextureObject_t texObject, int x); 
#line 228
static __forceinline void tex1Dfetch(uint4 * retVal, cudaTextureObject_t texObject, int x); 
#line 238
static __forceinline void tex1Dfetch(long * retVal, cudaTextureObject_t texObject, int x); 
#line 240
static __forceinline void tex1Dfetch(long1 * retVal, cudaTextureObject_t texObject, int x); 
#line 242
static __forceinline void tex1Dfetch(long2 * retVal, cudaTextureObject_t texObject, int x); 
#line 244
static __forceinline void tex1Dfetch(long4 * retVal, cudaTextureObject_t texObject, int x); 
#line 246
static __forceinline void tex1Dfetch(unsigned long * retVal, cudaTextureObject_t texObject, int x); 
#line 248
static __forceinline void tex1Dfetch(ulong1 * retVal, cudaTextureObject_t texObject, int x); 
#line 250
static __forceinline void tex1Dfetch(ulong2 * retVal, cudaTextureObject_t texObject, int x); 
#line 252
static __forceinline void tex1Dfetch(ulong4 * retVal, cudaTextureObject_t texObject, int x); 
#line 263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1Dfetch(float * retVal, cudaTextureObject_t texObject, int x); 
#line 265
static __forceinline void tex1Dfetch(float1 * retVal, cudaTextureObject_t texObject, int x); 
#line 267
static __forceinline void tex1Dfetch(float2 * retVal, cudaTextureObject_t texObject, int x); 
#line 269
static __forceinline void tex1Dfetch(float4 * retVal, cudaTextureObject_t texObject, int x); 
#line 277
template< class T> static __forceinline T 
#line 278
tex1Dfetch(::cudaTextureObject_t texObject, int x) 
#line 279
{int volatile ___ = 1;(void)texObject;(void)x;
#line 283
::exit(___);}
#if 0
#line 279
{ 
#line 280
T ret; 
#line 281
tex1Dfetch(&ret, texObject, x); 
#line 282
return ret; 
#line 283
} 
#endif
#line 291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1D(char * retVal, cudaTextureObject_t texObject, float x); 
#line 292
static __forceinline void tex1D(signed char * retVal, cudaTextureObject_t texObject, float x); 
#line 294
static __forceinline void tex1D(char1 * retVal, cudaTextureObject_t texObject, float x); 
#line 296
static __forceinline void tex1D(char2 * retVal, cudaTextureObject_t texObject, float x); 
#line 298
static __forceinline void tex1D(char4 * retVal, cudaTextureObject_t texObject, float x); 
#line 300
static __forceinline void tex1D(unsigned char * retVal, cudaTextureObject_t texObject, float x); 
#line 302
static __forceinline void tex1D(uchar1 * retVal, cudaTextureObject_t texObject, float x); 
#line 304
static __forceinline void tex1D(uchar2 * retVal, cudaTextureObject_t texObject, float x); 
#line 306
static __forceinline void tex1D(uchar4 * retVal, cudaTextureObject_t texObject, float x); 
#line 314
static __forceinline void tex1D(short * retVal, cudaTextureObject_t texObject, float x); 
#line 316
static __forceinline void tex1D(short1 * retVal, cudaTextureObject_t texObject, float x); 
#line 318
static __forceinline void tex1D(short2 * retVal, cudaTextureObject_t texObject, float x); 
#line 320
static __forceinline void tex1D(short4 * retVal, cudaTextureObject_t texObject, float x); 
#line 322
static __forceinline void tex1D(unsigned short * retVal, cudaTextureObject_t texObject, float x); 
#line 324
static __forceinline void tex1D(ushort1 * retVal, cudaTextureObject_t texObject, float x); 
#line 326
static __forceinline void tex1D(ushort2 * retVal, cudaTextureObject_t texObject, float x); 
#line 328
static __forceinline void tex1D(ushort4 * retVal, cudaTextureObject_t texObject, float x); 
#line 336
static __forceinline void tex1D(int * retVal, cudaTextureObject_t texObject, float x); 
#line 338
static __forceinline void tex1D(int1 * retVal, cudaTextureObject_t texObject, float x); 
#line 340
static __forceinline void tex1D(int2 * retVal, cudaTextureObject_t texObject, float x); 
#line 342
static __forceinline void tex1D(int4 * retVal, cudaTextureObject_t texObject, float x); 
#line 344
static __forceinline void tex1D(unsigned * retVal, cudaTextureObject_t texObject, float x); 
#line 346
static __forceinline void tex1D(uint1 * retVal, cudaTextureObject_t texObject, float x); 
#line 348
static __forceinline void tex1D(uint2 * retVal, cudaTextureObject_t texObject, float x); 
#line 350
static __forceinline void tex1D(uint4 * retVal, cudaTextureObject_t texObject, float x); 
#line 360
static __forceinline void tex1D(long * retVal, cudaTextureObject_t texObject, float x); 
#line 362
static __forceinline void tex1D(long1 * retVal, cudaTextureObject_t texObject, float x); 
#line 364
static __forceinline void tex1D(long2 * retVal, cudaTextureObject_t texObject, float x); 
#line 366
static __forceinline void tex1D(long4 * retVal, cudaTextureObject_t texObject, float x); 
#line 368
static __forceinline void tex1D(unsigned long * retVal, cudaTextureObject_t texObject, float x); 
#line 370
static __forceinline void tex1D(ulong1 * retVal, cudaTextureObject_t texObject, float x); 
#line 372
static __forceinline void tex1D(ulong2 * retVal, cudaTextureObject_t texObject, float x); 
#line 374
static __forceinline void tex1D(ulong4 * retVal, cudaTextureObject_t texObject, float x); 
#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1D(float * retVal, cudaTextureObject_t texObject, float x); 
#line 387
static __forceinline void tex1D(float1 * retVal, cudaTextureObject_t texObject, float x); 
#line 389
static __forceinline void tex1D(float2 * retVal, cudaTextureObject_t texObject, float x); 
#line 391
static __forceinline void tex1D(float4 * retVal, cudaTextureObject_t texObject, float x); 
#line 399
template< class T> static __forceinline T 
#line 400
tex1D(::cudaTextureObject_t texObject, float x) 
#line 401
{int volatile ___ = 1;(void)texObject;(void)x;
#line 405
::exit(___);}
#if 0
#line 401
{ 
#line 402
T ret; 
#line 403
tex1D(&ret, texObject, x); 
#line 404
return ret; 
#line 405
} 
#endif
#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2D(char * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 414
static __forceinline void tex2D(signed char * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 416
static __forceinline void tex2D(char1 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 418
static __forceinline void tex2D(char2 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 420
static __forceinline void tex2D(char4 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 422
static __forceinline void tex2D(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 424
static __forceinline void tex2D(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 426
static __forceinline void tex2D(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 428
static __forceinline void tex2D(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 436
static __forceinline void tex2D(short * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 438
static __forceinline void tex2D(short1 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 440
static __forceinline void tex2D(short2 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 442
static __forceinline void tex2D(short4 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 444
static __forceinline void tex2D(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 446
static __forceinline void tex2D(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 448
static __forceinline void tex2D(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 450
static __forceinline void tex2D(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 458
static __forceinline void tex2D(int * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 460
static __forceinline void tex2D(int1 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 462
static __forceinline void tex2D(int2 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 464
static __forceinline void tex2D(int4 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 466
static __forceinline void tex2D(unsigned * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 468
static __forceinline void tex2D(uint1 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 470
static __forceinline void tex2D(uint2 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 472
static __forceinline void tex2D(uint4 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 482
static __forceinline void tex2D(long * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 484
static __forceinline void tex2D(long1 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 486
static __forceinline void tex2D(long2 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 488
static __forceinline void tex2D(long4 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 490
static __forceinline void tex2D(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 492
static __forceinline void tex2D(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 494
static __forceinline void tex2D(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 496
static __forceinline void tex2D(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 507 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2D(float * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 509
static __forceinline void tex2D(float1 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 511
static __forceinline void tex2D(float2 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 513
static __forceinline void tex2D(float4 * retVal, cudaTextureObject_t texObject, float x, float y); 
#line 521
template< class T> static __forceinline T 
#line 522
tex2D(::cudaTextureObject_t texObject, float x, float y) 
#line 523
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;
#line 527
::exit(___);}
#if 0
#line 523
{ 
#line 524
T ret; 
#line 525
tex2D(&ret, texObject, x, y); 
#line 526
return ret; 
#line 527
} 
#endif
#line 535 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex3D(char * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 536
static __forceinline void tex3D(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 538
static __forceinline void tex3D(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 540
static __forceinline void tex3D(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 542
static __forceinline void tex3D(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 544
static __forceinline void tex3D(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 546
static __forceinline void tex3D(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 548
static __forceinline void tex3D(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 550
static __forceinline void tex3D(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 558
static __forceinline void tex3D(short * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 560
static __forceinline void tex3D(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 562
static __forceinline void tex3D(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 564
static __forceinline void tex3D(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 566
static __forceinline void tex3D(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 568
static __forceinline void tex3D(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 570
static __forceinline void tex3D(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 572
static __forceinline void tex3D(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 580
static __forceinline void tex3D(int * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 582
static __forceinline void tex3D(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 584
static __forceinline void tex3D(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 586
static __forceinline void tex3D(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 588
static __forceinline void tex3D(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 590
static __forceinline void tex3D(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 592
static __forceinline void tex3D(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 594
static __forceinline void tex3D(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 604
static __forceinline void tex3D(long * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 606
static __forceinline void tex3D(long1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 608
static __forceinline void tex3D(long2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 610
static __forceinline void tex3D(long4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 612
static __forceinline void tex3D(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 614
static __forceinline void tex3D(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 616
static __forceinline void tex3D(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 618
static __forceinline void tex3D(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 629 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex3D(float * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 631
static __forceinline void tex3D(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 633
static __forceinline void tex3D(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 635
static __forceinline void tex3D(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 643
template< class T> static __forceinline T 
#line 644
tex3D(::cudaTextureObject_t texObject, float x, float y, float z) 
#line 645
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
#line 649
::exit(___);}
#if 0
#line 645
{ 
#line 646
T ret; 
#line 647
tex3D(&ret, texObject, x, y, z); 
#line 648
return ret; 
#line 649
} 
#endif
#line 657 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1DLayered(char * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 658
static __forceinline void tex1DLayered(signed char * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 660
static __forceinline void tex1DLayered(char1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 662
static __forceinline void tex1DLayered(char2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 664
static __forceinline void tex1DLayered(char4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 666
static __forceinline void tex1DLayered(unsigned char * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 668
static __forceinline void tex1DLayered(uchar1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 670
static __forceinline void tex1DLayered(uchar2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 672
static __forceinline void tex1DLayered(uchar4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 680
static __forceinline void tex1DLayered(short * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 682
static __forceinline void tex1DLayered(short1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 684
static __forceinline void tex1DLayered(short2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 686
static __forceinline void tex1DLayered(short4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 688
static __forceinline void tex1DLayered(unsigned short * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 690
static __forceinline void tex1DLayered(ushort1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 692
static __forceinline void tex1DLayered(ushort2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 694
static __forceinline void tex1DLayered(ushort4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 702
static __forceinline void tex1DLayered(int * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 704
static __forceinline void tex1DLayered(int1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 706
static __forceinline void tex1DLayered(int2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 708
static __forceinline void tex1DLayered(int4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 710
static __forceinline void tex1DLayered(unsigned * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 712
static __forceinline void tex1DLayered(uint1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 714
static __forceinline void tex1DLayered(uint2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 716
static __forceinline void tex1DLayered(uint4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 726
static __forceinline void tex1DLayered(long * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 728
static __forceinline void tex1DLayered(long1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 730
static __forceinline void tex1DLayered(long2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 732
static __forceinline void tex1DLayered(long4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 734
static __forceinline void tex1DLayered(unsigned long * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 736
static __forceinline void tex1DLayered(ulong1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 738
static __forceinline void tex1DLayered(ulong2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 740
static __forceinline void tex1DLayered(ulong4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1DLayered(float * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 753
static __forceinline void tex1DLayered(float1 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 755
static __forceinline void tex1DLayered(float2 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 757
static __forceinline void tex1DLayered(float4 * retVal, cudaTextureObject_t texObject, float x, int layer); 
#line 765
template< class T> static __forceinline T 
#line 766
tex1DLayered(::cudaTextureObject_t texObject, float x, int layer) 
#line 767
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;
#line 771
::exit(___);}
#if 0
#line 767
{ 
#line 768
T ret; 
#line 769
tex1DLayered(&ret, texObject, x, layer); 
#line 770
return ret; 
#line 771
} 
#endif
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2DLayered(char * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 780
static __forceinline void tex2DLayered(signed char * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 782
static __forceinline void tex2DLayered(char1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 784
static __forceinline void tex2DLayered(char2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 786
static __forceinline void tex2DLayered(char4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 788
static __forceinline void tex2DLayered(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 790
static __forceinline void tex2DLayered(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 792
static __forceinline void tex2DLayered(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 794
static __forceinline void tex2DLayered(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 802
static __forceinline void tex2DLayered(short * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 804
static __forceinline void tex2DLayered(short1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 806
static __forceinline void tex2DLayered(short2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 808
static __forceinline void tex2DLayered(short4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 810
static __forceinline void tex2DLayered(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 812
static __forceinline void tex2DLayered(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 814
static __forceinline void tex2DLayered(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 816
static __forceinline void tex2DLayered(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 824
static __forceinline void tex2DLayered(int * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 826
static __forceinline void tex2DLayered(int1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 828
static __forceinline void tex2DLayered(int2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 830
static __forceinline void tex2DLayered(int4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 832
static __forceinline void tex2DLayered(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 834
static __forceinline void tex2DLayered(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 836
static __forceinline void tex2DLayered(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 838
static __forceinline void tex2DLayered(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 848
static __forceinline void tex2DLayered(long * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 850
static __forceinline void tex2DLayered(long1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 852
static __forceinline void tex2DLayered(long2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 854
static __forceinline void tex2DLayered(long4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 856
static __forceinline void tex2DLayered(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 858
static __forceinline void tex2DLayered(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 860
static __forceinline void tex2DLayered(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 862
static __forceinline void tex2DLayered(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2DLayered(float * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 875
static __forceinline void tex2DLayered(float1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 877
static __forceinline void tex2DLayered(float2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 879
static __forceinline void tex2DLayered(float4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer); 
#line 887
template< class T> static __forceinline T 
#line 888
tex2DLayered(::cudaTextureObject_t texObject, float x, float y, int layer) 
#line 889
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;
#line 893
::exit(___);}
#if 0
#line 889
{ 
#line 890
T ret; 
#line 891
tex2DLayered(&ret, texObject, x, y, layer); 
#line 892
return ret; 
#line 893
} 
#endif
#line 901 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void texCubemap(char * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 902
static __forceinline void texCubemap(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 904
static __forceinline void texCubemap(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 906
static __forceinline void texCubemap(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 908
static __forceinline void texCubemap(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 910
static __forceinline void texCubemap(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 912
static __forceinline void texCubemap(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 914
static __forceinline void texCubemap(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 916
static __forceinline void texCubemap(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 924
static __forceinline void texCubemap(short * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 926
static __forceinline void texCubemap(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 928
static __forceinline void texCubemap(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 930
static __forceinline void texCubemap(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 932
static __forceinline void texCubemap(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 934
static __forceinline void texCubemap(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 936
static __forceinline void texCubemap(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 938
static __forceinline void texCubemap(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 946
static __forceinline void texCubemap(int * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 948
static __forceinline void texCubemap(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 950
static __forceinline void texCubemap(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 952
static __forceinline void texCubemap(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 954
static __forceinline void texCubemap(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 956
static __forceinline void texCubemap(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 958
static __forceinline void texCubemap(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 960
static __forceinline void texCubemap(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 970
static __forceinline void texCubemap(long * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 972
static __forceinline void texCubemap(long1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 974
static __forceinline void texCubemap(long2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 976
static __forceinline void texCubemap(long4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 978
static __forceinline void texCubemap(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 980
static __forceinline void texCubemap(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 982
static __forceinline void texCubemap(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 984
static __forceinline void texCubemap(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void texCubemap(float * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 997
static __forceinline void texCubemap(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 999
static __forceinline void texCubemap(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 1001
static __forceinline void texCubemap(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z); 
#line 1009
template< class T> static __forceinline T 
#line 1010
texCubemap(::cudaTextureObject_t texObject, float x, float y, float z) 
#line 1011
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;
#line 1015
::exit(___);}
#if 0
#line 1011
{ 
#line 1012
T ret; 
#line 1013
texCubemap(&ret, texObject, x, y, z); 
#line 1014
return ret; 
#line 1015
} 
#endif
#line 1023 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void texCubemapLayered(char * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1024
static __forceinline void texCubemapLayered(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1026
static __forceinline void texCubemapLayered(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1028
static __forceinline void texCubemapLayered(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1030
static __forceinline void texCubemapLayered(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1032
static __forceinline void texCubemapLayered(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1034
static __forceinline void texCubemapLayered(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1036
static __forceinline void texCubemapLayered(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1038
static __forceinline void texCubemapLayered(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1046
static __forceinline void texCubemapLayered(short * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1048
static __forceinline void texCubemapLayered(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1050
static __forceinline void texCubemapLayered(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1052
static __forceinline void texCubemapLayered(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1054
static __forceinline void texCubemapLayered(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1056
static __forceinline void texCubemapLayered(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1058
static __forceinline void texCubemapLayered(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1060
static __forceinline void texCubemapLayered(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1068
static __forceinline void texCubemapLayered(int * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1070
static __forceinline void texCubemapLayered(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1072
static __forceinline void texCubemapLayered(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1074
static __forceinline void texCubemapLayered(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1076
static __forceinline void texCubemapLayered(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1078
static __forceinline void texCubemapLayered(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1080
static __forceinline void texCubemapLayered(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1082
static __forceinline void texCubemapLayered(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1092
static __forceinline void texCubemapLayered(long * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1094
static __forceinline void texCubemapLayered(long1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1096
static __forceinline void texCubemapLayered(long2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1098
static __forceinline void texCubemapLayered(long4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1100
static __forceinline void texCubemapLayered(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1102
static __forceinline void texCubemapLayered(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1104
static __forceinline void texCubemapLayered(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1106
static __forceinline void texCubemapLayered(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void texCubemapLayered(float * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1119
static __forceinline void texCubemapLayered(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1121
static __forceinline void texCubemapLayered(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1123
static __forceinline void texCubemapLayered(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer); 
#line 1131
template< class T> static __forceinline T 
#line 1132
texCubemapLayered(::cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 1133
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 1137
::exit(___);}
#if 0
#line 1133
{ 
#line 1134
T ret; 
#line 1135
texCubemapLayered(&ret, texObject, x, y, z, layer); 
#line 1136
return ret; 
#line 1137
} 
#endif
#line 1145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2Dgather(char * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1147
static __forceinline void tex2Dgather(signed char * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1149
static __forceinline void tex2Dgather(char1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1151
static __forceinline void tex2Dgather(char2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1153
static __forceinline void tex2Dgather(char4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1155
static __forceinline void tex2Dgather(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1157
static __forceinline void tex2Dgather(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1159
static __forceinline void tex2Dgather(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1161
static __forceinline void tex2Dgather(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1169
static __forceinline void tex2Dgather(short * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1171
static __forceinline void tex2Dgather(short1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1173
static __forceinline void tex2Dgather(short2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1175
static __forceinline void tex2Dgather(short4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1177
static __forceinline void tex2Dgather(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1179
static __forceinline void tex2Dgather(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1181
static __forceinline void tex2Dgather(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1183
static __forceinline void tex2Dgather(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1191
static __forceinline void tex2Dgather(int * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1193
static __forceinline void tex2Dgather(int1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1195
static __forceinline void tex2Dgather(int2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1197
static __forceinline void tex2Dgather(int4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1199
static __forceinline void tex2Dgather(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1201
static __forceinline void tex2Dgather(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1203
static __forceinline void tex2Dgather(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1205
static __forceinline void tex2Dgather(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1213
static __forceinline void tex2Dgather(long * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1215
static __forceinline void tex2Dgather(long1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1217
static __forceinline void tex2Dgather(long2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1219
static __forceinline void tex2Dgather(long4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1221
static __forceinline void tex2Dgather(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1223
static __forceinline void tex2Dgather(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1225
static __forceinline void tex2Dgather(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1227
static __forceinline void tex2Dgather(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1235
static __forceinline void tex2Dgather(float * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1237
static __forceinline void tex2Dgather(float1 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1239
static __forceinline void tex2Dgather(float2 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1241
static __forceinline void tex2Dgather(float4 * retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0); 
#line 1249
template< class T> static __forceinline T 
#line 1250
tex2Dgather(::cudaTextureObject_t to, float x, float y, int comp = 0) 
#line 1251
{int volatile ___ = 1;(void)to;(void)x;(void)y;(void)comp;
#line 1255
::exit(___);}
#if 0
#line 1251
{ 
#line 1252
T ret; 
#line 1253
tex2Dgather(&ret, to, x, y, comp); 
#line 1254
return ret; 
#line 1255
} 
#endif
#line 1263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1DLod(char * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1264
static __forceinline void tex1DLod(signed char * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1266
static __forceinline void tex1DLod(char1 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1268
static __forceinline void tex1DLod(char2 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1270
static __forceinline void tex1DLod(char4 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1272
static __forceinline void tex1DLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1274
static __forceinline void tex1DLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1276
static __forceinline void tex1DLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1278
static __forceinline void tex1DLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1286
static __forceinline void tex1DLod(short * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1288
static __forceinline void tex1DLod(short1 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1290
static __forceinline void tex1DLod(short2 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1292
static __forceinline void tex1DLod(short4 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1294
static __forceinline void tex1DLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1296
static __forceinline void tex1DLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1298
static __forceinline void tex1DLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1300
static __forceinline void tex1DLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1308
static __forceinline void tex1DLod(int * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1310
static __forceinline void tex1DLod(int1 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1312
static __forceinline void tex1DLod(int2 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1314
static __forceinline void tex1DLod(int4 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1316
static __forceinline void tex1DLod(unsigned * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1318
static __forceinline void tex1DLod(uint1 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1320
static __forceinline void tex1DLod(uint2 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1322
static __forceinline void tex1DLod(uint4 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1332
static __forceinline void tex1DLod(long * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1334
static __forceinline void tex1DLod(long1 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1336
static __forceinline void tex1DLod(long2 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1338
static __forceinline void tex1DLod(long4 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1340
static __forceinline void tex1DLod(unsigned long * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1342
static __forceinline void tex1DLod(ulong1 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1344
static __forceinline void tex1DLod(ulong2 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1346
static __forceinline void tex1DLod(ulong4 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1DLod(float * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1359
static __forceinline void tex1DLod(float1 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1361
static __forceinline void tex1DLod(float2 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1363
static __forceinline void tex1DLod(float4 * retVal, cudaTextureObject_t texObject, float x, float level); 
#line 1371
template< class T> static __forceinline T 
#line 1372
tex1DLod(::cudaTextureObject_t texObject, float x, float level) 
#line 1373
{int volatile ___ = 1;(void)texObject;(void)x;(void)level;
#line 1377
::exit(___);}
#if 0
#line 1373
{ 
#line 1374
T ret; 
#line 1375
tex1DLod(&ret, texObject, x, level); 
#line 1376
return ret; 
#line 1377
} 
#endif
#line 1385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2DLod(char * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1386
static __forceinline void tex2DLod(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1388
static __forceinline void tex2DLod(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1390
static __forceinline void tex2DLod(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1392
static __forceinline void tex2DLod(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1394
static __forceinline void tex2DLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1396
static __forceinline void tex2DLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1398
static __forceinline void tex2DLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1400
static __forceinline void tex2DLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1408
static __forceinline void tex2DLod(short * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1410
static __forceinline void tex2DLod(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1412
static __forceinline void tex2DLod(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1414
static __forceinline void tex2DLod(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1416
static __forceinline void tex2DLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1418
static __forceinline void tex2DLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1420
static __forceinline void tex2DLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1422
static __forceinline void tex2DLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1430
static __forceinline void tex2DLod(int * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1432
static __forceinline void tex2DLod(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1434
static __forceinline void tex2DLod(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1436
static __forceinline void tex2DLod(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1438
static __forceinline void tex2DLod(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1440
static __forceinline void tex2DLod(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1442
static __forceinline void tex2DLod(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1444
static __forceinline void tex2DLod(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1454
static __forceinline void tex2DLod(long * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1456
static __forceinline void tex2DLod(long1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1458
static __forceinline void tex2DLod(long2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1460
static __forceinline void tex2DLod(long4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1462
static __forceinline void tex2DLod(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1464
static __forceinline void tex2DLod(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1466
static __forceinline void tex2DLod(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1468
static __forceinline void tex2DLod(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2DLod(float * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1481
static __forceinline void tex2DLod(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1483
static __forceinline void tex2DLod(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1485
static __forceinline void tex2DLod(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float level); 
#line 1493
template< class T> static __forceinline T 
#line 1494
tex2DLod(::cudaTextureObject_t texObject, float x, float y, float level) 
#line 1495
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)level;
#line 1499
::exit(___);}
#if 0
#line 1495
{ 
#line 1496
T ret; 
#line 1497
tex2DLod(&ret, texObject, x, y, level); 
#line 1498
return ret; 
#line 1499
} 
#endif
#line 1507 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex3DLod(char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1508
static __forceinline void tex3DLod(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1510
static __forceinline void tex3DLod(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1512
static __forceinline void tex3DLod(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1514
static __forceinline void tex3DLod(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1516
static __forceinline void tex3DLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1518
static __forceinline void tex3DLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1520
static __forceinline void tex3DLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1522
static __forceinline void tex3DLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1530
static __forceinline void tex3DLod(short * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1532
static __forceinline void tex3DLod(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1534
static __forceinline void tex3DLod(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1536
static __forceinline void tex3DLod(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1538
static __forceinline void tex3DLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1540
static __forceinline void tex3DLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1542
static __forceinline void tex3DLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1544
static __forceinline void tex3DLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1552
static __forceinline void tex3DLod(int * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1554
static __forceinline void tex3DLod(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1556
static __forceinline void tex3DLod(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1558
static __forceinline void tex3DLod(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1560
static __forceinline void tex3DLod(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1562
static __forceinline void tex3DLod(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1564
static __forceinline void tex3DLod(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1566
static __forceinline void tex3DLod(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1576
static __forceinline void tex3DLod(long * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1578
static __forceinline void tex3DLod(long1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1580
static __forceinline void tex3DLod(long2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1582
static __forceinline void tex3DLod(long4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1584
static __forceinline void tex3DLod(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1586
static __forceinline void tex3DLod(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1588
static __forceinline void tex3DLod(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1590
static __forceinline void tex3DLod(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1601 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex3DLod(float * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1603
static __forceinline void tex3DLod(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1605
static __forceinline void tex3DLod(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1607
static __forceinline void tex3DLod(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1615
template< class T> static __forceinline T 
#line 1616
tex3DLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 1617
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 1621
::exit(___);}
#if 0
#line 1617
{ 
#line 1618
T ret; 
#line 1619
tex3DLod(&ret, texObject, x, y, z, level); 
#line 1620
return ret; 
#line 1621
} 
#endif
#line 1629 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1DLayeredLod(char * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1630
static __forceinline void tex1DLayeredLod(signed char * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1632
static __forceinline void tex1DLayeredLod(char1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1634
static __forceinline void tex1DLayeredLod(char2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1636
static __forceinline void tex1DLayeredLod(char4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1638
static __forceinline void tex1DLayeredLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1640
static __forceinline void tex1DLayeredLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1642
static __forceinline void tex1DLayeredLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1644
static __forceinline void tex1DLayeredLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1652
static __forceinline void tex1DLayeredLod(short * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1654
static __forceinline void tex1DLayeredLod(short1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1656
static __forceinline void tex1DLayeredLod(short2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1658
static __forceinline void tex1DLayeredLod(short4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1660
static __forceinline void tex1DLayeredLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1662
static __forceinline void tex1DLayeredLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1664
static __forceinline void tex1DLayeredLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1666
static __forceinline void tex1DLayeredLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1674
static __forceinline void tex1DLayeredLod(int * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1676
static __forceinline void tex1DLayeredLod(int1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1678
static __forceinline void tex1DLayeredLod(int2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1680
static __forceinline void tex1DLayeredLod(int4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1682
static __forceinline void tex1DLayeredLod(unsigned * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1684
static __forceinline void tex1DLayeredLod(uint1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1686
static __forceinline void tex1DLayeredLod(uint2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1688
static __forceinline void tex1DLayeredLod(uint4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1698
static __forceinline void tex1DLayeredLod(long * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1700
static __forceinline void tex1DLayeredLod(long1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1702
static __forceinline void tex1DLayeredLod(long2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1704
static __forceinline void tex1DLayeredLod(long4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1706
static __forceinline void tex1DLayeredLod(unsigned long * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1708
static __forceinline void tex1DLayeredLod(ulong1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1710
static __forceinline void tex1DLayeredLod(ulong2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1712
static __forceinline void tex1DLayeredLod(ulong4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1DLayeredLod(float * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1725
static __forceinline void tex1DLayeredLod(float1 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1727
static __forceinline void tex1DLayeredLod(float2 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1729
static __forceinline void tex1DLayeredLod(float4 * retVal, cudaTextureObject_t texObject, float x, int layer, float level); 
#line 1737
template< class T> static __forceinline T 
#line 1738
tex1DLayeredLod(::cudaTextureObject_t texObject, float x, int layer, float level) 
#line 1739
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)level;
#line 1743
::exit(___);}
#if 0
#line 1739
{ 
#line 1740
T ret; 
#line 1741
tex1DLayeredLod(&ret, texObject, x, layer, level); 
#line 1742
return ret; 
#line 1743
} 
#endif
#line 1751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2DLayeredLod(char * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1752
static __forceinline void tex2DLayeredLod(signed char * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1754
static __forceinline void tex2DLayeredLod(char1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1756
static __forceinline void tex2DLayeredLod(char2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1758
static __forceinline void tex2DLayeredLod(char4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1760
static __forceinline void tex2DLayeredLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1762
static __forceinline void tex2DLayeredLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1764
static __forceinline void tex2DLayeredLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1766
static __forceinline void tex2DLayeredLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1774
static __forceinline void tex2DLayeredLod(short * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1776
static __forceinline void tex2DLayeredLod(short1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1778
static __forceinline void tex2DLayeredLod(short2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1780
static __forceinline void tex2DLayeredLod(short4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1782
static __forceinline void tex2DLayeredLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1784
static __forceinline void tex2DLayeredLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1786
static __forceinline void tex2DLayeredLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1788
static __forceinline void tex2DLayeredLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1796
static __forceinline void tex2DLayeredLod(int * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1798
static __forceinline void tex2DLayeredLod(int1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1800
static __forceinline void tex2DLayeredLod(int2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1802
static __forceinline void tex2DLayeredLod(int4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1804
static __forceinline void tex2DLayeredLod(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1806
static __forceinline void tex2DLayeredLod(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1808
static __forceinline void tex2DLayeredLod(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1810
static __forceinline void tex2DLayeredLod(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1820
static __forceinline void tex2DLayeredLod(long * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1822
static __forceinline void tex2DLayeredLod(long1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1824
static __forceinline void tex2DLayeredLod(long2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1826
static __forceinline void tex2DLayeredLod(long4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1828
static __forceinline void tex2DLayeredLod(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1830
static __forceinline void tex2DLayeredLod(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1832
static __forceinline void tex2DLayeredLod(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1834
static __forceinline void tex2DLayeredLod(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2DLayeredLod(float * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1847
static __forceinline void tex2DLayeredLod(float1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1849
static __forceinline void tex2DLayeredLod(float2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1851
static __forceinline void tex2DLayeredLod(float4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level); 
#line 1859
template< class T> static __forceinline T 
#line 1860
tex2DLayeredLod(::cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 1861
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 1865
::exit(___);}
#if 0
#line 1861
{ 
#line 1862
T ret; 
#line 1863
tex2DLayeredLod(&ret, texObject, x, y, layer, level); 
#line 1864
return ret; 
#line 1865
} 
#endif
#line 1873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void texCubemapLod(char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1874
static __forceinline void texCubemapLod(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1876
static __forceinline void texCubemapLod(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1878
static __forceinline void texCubemapLod(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1880
static __forceinline void texCubemapLod(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1882
static __forceinline void texCubemapLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1884
static __forceinline void texCubemapLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1886
static __forceinline void texCubemapLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1888
static __forceinline void texCubemapLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1896
static __forceinline void texCubemapLod(short * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1898
static __forceinline void texCubemapLod(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1900
static __forceinline void texCubemapLod(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1902
static __forceinline void texCubemapLod(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1904
static __forceinline void texCubemapLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1906
static __forceinline void texCubemapLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1908
static __forceinline void texCubemapLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1910
static __forceinline void texCubemapLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1918
static __forceinline void texCubemapLod(int * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1920
static __forceinline void texCubemapLod(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1922
static __forceinline void texCubemapLod(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1924
static __forceinline void texCubemapLod(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1926
static __forceinline void texCubemapLod(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1928
static __forceinline void texCubemapLod(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1930
static __forceinline void texCubemapLod(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1932
static __forceinline void texCubemapLod(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1942
static __forceinline void texCubemapLod(long * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1944
static __forceinline void texCubemapLod(long1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1946
static __forceinline void texCubemapLod(long2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1948
static __forceinline void texCubemapLod(long4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1950
static __forceinline void texCubemapLod(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1952
static __forceinline void texCubemapLod(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1954
static __forceinline void texCubemapLod(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1956
static __forceinline void texCubemapLod(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1967 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void texCubemapLod(float * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1969
static __forceinline void texCubemapLod(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1971
static __forceinline void texCubemapLod(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1973
static __forceinline void texCubemapLod(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float level); 
#line 1981
template< class T> static __forceinline T 
#line 1982
texCubemapLod(::cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 1983
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 1987
::exit(___);}
#if 0
#line 1983
{ 
#line 1984
T ret; 
#line 1985
texCubemapLod(&ret, texObject, x, y, z, level); 
#line 1986
return ret; 
#line 1987
} 
#endif
#line 1995 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void texCubemapLayeredLod(char * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 1996
static __forceinline void texCubemapLayeredLod(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 1998
static __forceinline void texCubemapLayeredLod(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2000
static __forceinline void texCubemapLayeredLod(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2002
static __forceinline void texCubemapLayeredLod(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2004
static __forceinline void texCubemapLayeredLod(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2006
static __forceinline void texCubemapLayeredLod(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2008
static __forceinline void texCubemapLayeredLod(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2010
static __forceinline void texCubemapLayeredLod(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2018
static __forceinline void texCubemapLayeredLod(short * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2020
static __forceinline void texCubemapLayeredLod(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2022
static __forceinline void texCubemapLayeredLod(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2024
static __forceinline void texCubemapLayeredLod(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2026
static __forceinline void texCubemapLayeredLod(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2028
static __forceinline void texCubemapLayeredLod(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2030
static __forceinline void texCubemapLayeredLod(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2032
static __forceinline void texCubemapLayeredLod(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2040
static __forceinline void texCubemapLayeredLod(int * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2042
static __forceinline void texCubemapLayeredLod(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2044
static __forceinline void texCubemapLayeredLod(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2046
static __forceinline void texCubemapLayeredLod(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2048
static __forceinline void texCubemapLayeredLod(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2050
static __forceinline void texCubemapLayeredLod(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2052
static __forceinline void texCubemapLayeredLod(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2054
static __forceinline void texCubemapLayeredLod(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2064
static __forceinline void texCubemapLayeredLod(long * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2066
static __forceinline void texCubemapLayeredLod(long1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2068
static __forceinline void texCubemapLayeredLod(long2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2070
static __forceinline void texCubemapLayeredLod(long4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2072
static __forceinline void texCubemapLayeredLod(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2074
static __forceinline void texCubemapLayeredLod(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2076
static __forceinline void texCubemapLayeredLod(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2078
static __forceinline void texCubemapLayeredLod(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2089 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void texCubemapLayeredLod(float * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2091
static __forceinline void texCubemapLayeredLod(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2093
static __forceinline void texCubemapLayeredLod(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2095
static __forceinline void texCubemapLayeredLod(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level); 
#line 2103
template< class T> static __forceinline T 
#line 2104
texCubemapLayeredLod(::cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 2105
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 2109
::exit(___);}
#if 0
#line 2105
{ 
#line 2106
T ret; 
#line 2107
texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level); 
#line 2108
return ret; 
#line 2109
} 
#endif
#line 2117 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1DGrad(char * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2118
static __forceinline void tex1DGrad(signed char * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2120
static __forceinline void tex1DGrad(char1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2122
static __forceinline void tex1DGrad(char2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2124
static __forceinline void tex1DGrad(char4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2126
static __forceinline void tex1DGrad(unsigned char * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2128
static __forceinline void tex1DGrad(uchar1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2130
static __forceinline void tex1DGrad(uchar2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2132
static __forceinline void tex1DGrad(uchar4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2140
static __forceinline void tex1DGrad(short * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2142
static __forceinline void tex1DGrad(short1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2144
static __forceinline void tex1DGrad(short2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2146
static __forceinline void tex1DGrad(short4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2148
static __forceinline void tex1DGrad(unsigned short * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2150
static __forceinline void tex1DGrad(ushort1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2152
static __forceinline void tex1DGrad(ushort2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2154
static __forceinline void tex1DGrad(ushort4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2162
static __forceinline void tex1DGrad(int * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2164
static __forceinline void tex1DGrad(int1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2166
static __forceinline void tex1DGrad(int2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2168
static __forceinline void tex1DGrad(int4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2170
static __forceinline void tex1DGrad(unsigned * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2172
static __forceinline void tex1DGrad(uint1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2174
static __forceinline void tex1DGrad(uint2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2176
static __forceinline void tex1DGrad(uint4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2186
static __forceinline void tex1DGrad(long * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2188
static __forceinline void tex1DGrad(long1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2190
static __forceinline void tex1DGrad(long2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2192
static __forceinline void tex1DGrad(long4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2194
static __forceinline void tex1DGrad(unsigned long * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2196
static __forceinline void tex1DGrad(ulong1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2198
static __forceinline void tex1DGrad(ulong2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2200
static __forceinline void tex1DGrad(ulong4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1DGrad(float * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2213
static __forceinline void tex1DGrad(float1 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2215
static __forceinline void tex1DGrad(float2 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2217
static __forceinline void tex1DGrad(float4 * retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy); 
#line 2225
template< class T> static __forceinline T 
#line 2226
tex1DGrad(::cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 2227
{int volatile ___ = 1;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 2231
::exit(___);}
#if 0
#line 2227
{ 
#line 2228
T ret; 
#line 2229
tex1DGrad(&ret, texObject, x, dPdx, dPdy); 
#line 2230
return ret; 
#line 2231
} 
#endif
#line 2239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2DGrad(char * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2240
static __forceinline void tex2DGrad(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2242
static __forceinline void tex2DGrad(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2244
static __forceinline void tex2DGrad(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2246
static __forceinline void tex2DGrad(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2248
static __forceinline void tex2DGrad(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2250
static __forceinline void tex2DGrad(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2252
static __forceinline void tex2DGrad(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2254
static __forceinline void tex2DGrad(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2262
static __forceinline void tex2DGrad(short * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2264
static __forceinline void tex2DGrad(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2266
static __forceinline void tex2DGrad(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2268
static __forceinline void tex2DGrad(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2270
static __forceinline void tex2DGrad(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2272
static __forceinline void tex2DGrad(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2274
static __forceinline void tex2DGrad(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2276
static __forceinline void tex2DGrad(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2284
static __forceinline void tex2DGrad(int * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2286
static __forceinline void tex2DGrad(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2288
static __forceinline void tex2DGrad(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2290
static __forceinline void tex2DGrad(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2292
static __forceinline void tex2DGrad(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2294
static __forceinline void tex2DGrad(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2296
static __forceinline void tex2DGrad(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2298
static __forceinline void tex2DGrad(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2308
static __forceinline void tex2DGrad(long * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2310
static __forceinline void tex2DGrad(long1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2312
static __forceinline void tex2DGrad(long2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2314
static __forceinline void tex2DGrad(long4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2316
static __forceinline void tex2DGrad(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2318
static __forceinline void tex2DGrad(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2320
static __forceinline void tex2DGrad(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2322
static __forceinline void tex2DGrad(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2DGrad(float * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2335
static __forceinline void tex2DGrad(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2337
static __forceinline void tex2DGrad(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2339
static __forceinline void tex2DGrad(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy); 
#line 2347
template< class T> static __forceinline T 
#line 2348
tex2DGrad(::cudaTextureObject_t texObject, float x, float y, ::float2 dPdx, ::float2 dPdy) 
#line 2349
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 2353
::exit(___);}
#if 0
#line 2349
{ 
#line 2350
T ret; 
#line 2351
tex2DGrad(&ret, texObject, x, y, dPdx, dPdy); 
#line 2352
return ret; 
#line 2353
} 
#endif
#line 2361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex3DGrad(char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2362
static __forceinline void tex3DGrad(signed char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2364
static __forceinline void tex3DGrad(char1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2366
static __forceinline void tex3DGrad(char2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2368
static __forceinline void tex3DGrad(char4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2370
static __forceinline void tex3DGrad(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2372
static __forceinline void tex3DGrad(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2374
static __forceinline void tex3DGrad(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2376
static __forceinline void tex3DGrad(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2384
static __forceinline void tex3DGrad(short * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2386
static __forceinline void tex3DGrad(short1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2388
static __forceinline void tex3DGrad(short2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2390
static __forceinline void tex3DGrad(short4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2392
static __forceinline void tex3DGrad(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2394
static __forceinline void tex3DGrad(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2396
static __forceinline void tex3DGrad(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2398
static __forceinline void tex3DGrad(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2406
static __forceinline void tex3DGrad(int * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2408
static __forceinline void tex3DGrad(int1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2410
static __forceinline void tex3DGrad(int2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2412
static __forceinline void tex3DGrad(int4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2414
static __forceinline void tex3DGrad(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2416
static __forceinline void tex3DGrad(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2418
static __forceinline void tex3DGrad(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2420
static __forceinline void tex3DGrad(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2430
static __forceinline void tex3DGrad(long * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2432
static __forceinline void tex3DGrad(long1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2434
static __forceinline void tex3DGrad(long2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2436
static __forceinline void tex3DGrad(long4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2438
static __forceinline void tex3DGrad(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2440
static __forceinline void tex3DGrad(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2442
static __forceinline void tex3DGrad(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2444
static __forceinline void tex3DGrad(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex3DGrad(float * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2457
static __forceinline void tex3DGrad(float1 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2459
static __forceinline void tex3DGrad(float2 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2461
static __forceinline void tex3DGrad(float4 * retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy); 
#line 2469
template< class T> static __forceinline T 
#line 2470
tex3DGrad(::cudaTextureObject_t texObject, float x, float y, float z, ::float4 dPdx, ::float4 dPdy) 
#line 2471
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 2475
::exit(___);}
#if 0
#line 2471
{ 
#line 2472
T ret; 
#line 2473
tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy); 
#line 2474
return ret; 
#line 2475
} 
#endif
#line 2483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1DLayeredGrad(char * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2484
static __forceinline void tex1DLayeredGrad(signed char * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2486
static __forceinline void tex1DLayeredGrad(char1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2488
static __forceinline void tex1DLayeredGrad(char2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2490
static __forceinline void tex1DLayeredGrad(char4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2492
static __forceinline void tex1DLayeredGrad(unsigned char * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2494
static __forceinline void tex1DLayeredGrad(uchar1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2496
static __forceinline void tex1DLayeredGrad(uchar2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2498
static __forceinline void tex1DLayeredGrad(uchar4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2506
static __forceinline void tex1DLayeredGrad(short * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2508
static __forceinline void tex1DLayeredGrad(short1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2510
static __forceinline void tex1DLayeredGrad(short2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2512
static __forceinline void tex1DLayeredGrad(short4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2514
static __forceinline void tex1DLayeredGrad(unsigned short * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2516
static __forceinline void tex1DLayeredGrad(ushort1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2518
static __forceinline void tex1DLayeredGrad(ushort2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2520
static __forceinline void tex1DLayeredGrad(ushort4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2528
static __forceinline void tex1DLayeredGrad(int * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2530
static __forceinline void tex1DLayeredGrad(int1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2532
static __forceinline void tex1DLayeredGrad(int2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2534
static __forceinline void tex1DLayeredGrad(int4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2536
static __forceinline void tex1DLayeredGrad(unsigned * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2538
static __forceinline void tex1DLayeredGrad(uint1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2540
static __forceinline void tex1DLayeredGrad(uint2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2542
static __forceinline void tex1DLayeredGrad(uint4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2552
static __forceinline void tex1DLayeredGrad(long * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2554
static __forceinline void tex1DLayeredGrad(long1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2556
static __forceinline void tex1DLayeredGrad(long2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2558
static __forceinline void tex1DLayeredGrad(long4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2560
static __forceinline void tex1DLayeredGrad(unsigned long * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2562
static __forceinline void tex1DLayeredGrad(ulong1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2564
static __forceinline void tex1DLayeredGrad(ulong2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2566
static __forceinline void tex1DLayeredGrad(ulong4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2577 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex1DLayeredGrad(float * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2579
static __forceinline void tex1DLayeredGrad(float1 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2581
static __forceinline void tex1DLayeredGrad(float2 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2583
static __forceinline void tex1DLayeredGrad(float4 * retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy); 
#line 2591
template< class T> static __forceinline T 
#line 2592
tex1DLayeredGrad(::cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 2593
{int volatile ___ = 1;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 2597
::exit(___);}
#if 0
#line 2593
{ 
#line 2594
T ret; 
#line 2595
tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy); 
#line 2596
return ret; 
#line 2597
} 
#endif
#line 2605 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2DLayeredGrad(char * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2606
static __forceinline void tex2DLayeredGrad(signed char * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2608
static __forceinline void tex2DLayeredGrad(char1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2610
static __forceinline void tex2DLayeredGrad(char2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2612
static __forceinline void tex2DLayeredGrad(char4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2614
static __forceinline void tex2DLayeredGrad(unsigned char * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2616
static __forceinline void tex2DLayeredGrad(uchar1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2618
static __forceinline void tex2DLayeredGrad(uchar2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2620
static __forceinline void tex2DLayeredGrad(uchar4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2628
static __forceinline void tex2DLayeredGrad(short * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2630
static __forceinline void tex2DLayeredGrad(short1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2632
static __forceinline void tex2DLayeredGrad(short2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2634
static __forceinline void tex2DLayeredGrad(short4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2636
static __forceinline void tex2DLayeredGrad(unsigned short * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2638
static __forceinline void tex2DLayeredGrad(ushort1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2640
static __forceinline void tex2DLayeredGrad(ushort2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2642
static __forceinline void tex2DLayeredGrad(ushort4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2650
static __forceinline void tex2DLayeredGrad(int * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2652
static __forceinline void tex2DLayeredGrad(int1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2654
static __forceinline void tex2DLayeredGrad(int2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2656
static __forceinline void tex2DLayeredGrad(int4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2658
static __forceinline void tex2DLayeredGrad(unsigned * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2660
static __forceinline void tex2DLayeredGrad(uint1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2662
static __forceinline void tex2DLayeredGrad(uint2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2664
static __forceinline void tex2DLayeredGrad(uint4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2674
static __forceinline void tex2DLayeredGrad(long * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2676
static __forceinline void tex2DLayeredGrad(long1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2678
static __forceinline void tex2DLayeredGrad(long2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2680
static __forceinline void tex2DLayeredGrad(long4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2682
static __forceinline void tex2DLayeredGrad(unsigned long * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2684
static __forceinline void tex2DLayeredGrad(ulong1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2686
static __forceinline void tex2DLayeredGrad(ulong2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2688
static __forceinline void tex2DLayeredGrad(ulong4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2699 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.h"
static __forceinline void tex2DLayeredGrad(float * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2701
static __forceinline void tex2DLayeredGrad(float1 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2703
static __forceinline void tex2DLayeredGrad(float2 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2705
static __forceinline void tex2DLayeredGrad(float4 * retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy); 
#line 2713
template< class T> static __forceinline T 
#line 2714
tex2DLayeredGrad(::cudaTextureObject_t texObject, float x, float y, int layer, ::float2 dPdx, ::float2 dPdy) 
#line 2715
{int volatile ___ = 1;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 2719
::exit(___);}
#if 0
#line 2715
{ 
#line 2716
T ret; 
#line 2717
tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy); 
#line 2718
return ret; 
#line 2719
} 
#endif
#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(char *retVal, cudaTextureObject_t texObject, int x) 
#line 76
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 81 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 82
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 85
} 
#endif
#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(signed char *retVal, cudaTextureObject_t texObject, int x) 
#line 87
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 91
::exit(___);}
#if 0
#line 87
{ 
#line 88
int4 tmp; 
#line 89
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 90
(*retVal) = ((signed char)(tmp.x)); 
#line 91
} 
#endif
#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(char1 *retVal, cudaTextureObject_t texObject, int x) 
#line 94
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 98
::exit(___);}
#if 0
#line 94
{ 
#line 95
int4 tmp; 
#line 96
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 97
(*retVal) = make_char1(tmp.x); 
#line 98
} 
#endif
#line 100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(char2 *retVal, cudaTextureObject_t texObject, int x) 
#line 101
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 105
::exit(___);}
#if 0
#line 101
{ 
#line 102
int4 tmp; 
#line 103
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 104
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 105
} 
#endif
#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(char4 *retVal, cudaTextureObject_t texObject, int x) 
#line 108
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 112
::exit(___);}
#if 0
#line 108
{ 
#line 109
int4 tmp; 
#line 110
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 111
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 112
} 
#endif
#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(unsigned char *retVal, cudaTextureObject_t texObject, int x) 
#line 115
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 119
::exit(___);}
#if 0
#line 115
{ 
#line 116
uint4 tmp; 
#line 117
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 118
(*retVal) = ((unsigned char)(tmp.x)); 
#line 119
} 
#endif
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(uchar1 *retVal, cudaTextureObject_t texObject, int x) 
#line 122
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 126
::exit(___);}
#if 0
#line 122
{ 
#line 123
uint4 tmp; 
#line 124
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 125
(*retVal) = make_uchar1(tmp.x); 
#line 126
} 
#endif
#line 128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(uchar2 *retVal, cudaTextureObject_t texObject, int x) 
#line 129
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 133
::exit(___);}
#if 0
#line 129
{ 
#line 130
uint4 tmp; 
#line 131
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 132
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 133
} 
#endif
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(uchar4 *retVal, cudaTextureObject_t texObject, int x) 
#line 136
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 140
::exit(___);}
#if 0
#line 136
{ 
#line 137
uint4 tmp; 
#line 138
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 139
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 140
} 
#endif
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(short *retVal, cudaTextureObject_t texObject, int x) 
#line 149
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 153
::exit(___);}
#if 0
#line 149
{ 
#line 150
int4 tmp; 
#line 151
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 152
(*retVal) = ((short)(tmp.x)); 
#line 153
} 
#endif
#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(short1 *retVal, cudaTextureObject_t texObject, int x) 
#line 156
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 160
::exit(___);}
#if 0
#line 156
{ 
#line 157
int4 tmp; 
#line 158
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 159
(*retVal) = make_short1(tmp.x); 
#line 160
} 
#endif
#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(short2 *retVal, cudaTextureObject_t texObject, int x) 
#line 163
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 167
::exit(___);}
#if 0
#line 163
{ 
#line 164
int4 tmp; 
#line 165
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 166
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 167
} 
#endif
#line 169 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(short4 *retVal, cudaTextureObject_t texObject, int x) 
#line 170
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 174
::exit(___);}
#if 0
#line 170
{ 
#line 171
int4 tmp; 
#line 172
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 173
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 174
} 
#endif
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(unsigned short *retVal, cudaTextureObject_t texObject, int x) 
#line 177
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 181
::exit(___);}
#if 0
#line 177
{ 
#line 178
uint4 tmp; 
#line 179
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 180
(*retVal) = ((unsigned short)(tmp.x)); 
#line 181
} 
#endif
#line 183 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(ushort1 *retVal, cudaTextureObject_t texObject, int x) 
#line 184
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 188
::exit(___);}
#if 0
#line 184
{ 
#line 185
uint4 tmp; 
#line 186
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 187
(*retVal) = make_ushort1(tmp.x); 
#line 188
} 
#endif
#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(ushort2 *retVal, cudaTextureObject_t texObject, int x) 
#line 191
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 195
::exit(___);}
#if 0
#line 191
{ 
#line 192
uint4 tmp; 
#line 193
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 194
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 195
} 
#endif
#line 197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(ushort4 *retVal, cudaTextureObject_t texObject, int x) 
#line 198
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 202
::exit(___);}
#if 0
#line 198
{ 
#line 199
uint4 tmp; 
#line 200
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 201
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 202
} 
#endif
#line 210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(int *retVal, cudaTextureObject_t texObject, int x) 
#line 211
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 215
::exit(___);}
#if 0
#line 211
{ 
#line 212
int4 tmp; 
#line 213
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 214
(*retVal) = (tmp.x); 
#line 215
} 
#endif
#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(int1 *retVal, cudaTextureObject_t texObject, int x) 
#line 218
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 222
::exit(___);}
#if 0
#line 218
{ 
#line 219
int4 tmp; 
#line 220
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 221
(*retVal) = make_int1(tmp.x); 
#line 222
} 
#endif
#line 224 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(int2 *retVal, cudaTextureObject_t texObject, int x) 
#line 225
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 229
::exit(___);}
#if 0
#line 225
{ 
#line 226
int4 tmp; 
#line 227
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 228
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 229
} 
#endif
#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(int4 *retVal, cudaTextureObject_t texObject, int x) 
#line 232
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 236
::exit(___);}
#if 0
#line 232
{ 
#line 233
int4 tmp; 
#line 234
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 235
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 236
} 
#endif
#line 238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(unsigned *retVal, cudaTextureObject_t texObject, int x) 
#line 239
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 243
::exit(___);}
#if 0
#line 239
{ 
#line 240
uint4 tmp; 
#line 241
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 242
(*retVal) = (tmp.x); 
#line 243
} 
#endif
#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(uint1 *retVal, cudaTextureObject_t texObject, int x) 
#line 246
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 250
::exit(___);}
#if 0
#line 246
{ 
#line 247
uint4 tmp; 
#line 248
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 249
(*retVal) = make_uint1(tmp.x); 
#line 250
} 
#endif
#line 252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(uint2 *retVal, cudaTextureObject_t texObject, int x) 
#line 253
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 257
::exit(___);}
#if 0
#line 253
{ 
#line 254
uint4 tmp; 
#line 255
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 256
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 257
} 
#endif
#line 259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(uint4 *retVal, cudaTextureObject_t texObject, int x) 
#line 260
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 264
::exit(___);}
#if 0
#line 260
{ 
#line 261
uint4 tmp; 
#line 262
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 263
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 264
} 
#endif
#line 274 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(long *retVal, cudaTextureObject_t texObject, int x) 
#line 275
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 279
::exit(___);}
#if 0
#line 275
{ 
#line 276
int4 tmp; 
#line 277
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 278
(*retVal) = ((long)(tmp.x)); 
#line 279
} 
#endif
#line 281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(long1 *retVal, cudaTextureObject_t texObject, int x) 
#line 282
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 286
::exit(___);}
#if 0
#line 282
{ 
#line 283
int4 tmp; 
#line 284
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 285
(*retVal) = make_long1(tmp.x); 
#line 286
} 
#endif
#line 288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(long2 *retVal, cudaTextureObject_t texObject, int x) 
#line 289
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 293
::exit(___);}
#if 0
#line 289
{ 
#line 290
int4 tmp; 
#line 291
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 292
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 293
} 
#endif
#line 295 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(long4 *retVal, cudaTextureObject_t texObject, int x) 
#line 296
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 300
::exit(___);}
#if 0
#line 296
{ 
#line 297
int4 tmp; 
#line 298
__tex_1d_v4s32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 299
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 300
} 
#endif
#line 302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(unsigned long *retVal, cudaTextureObject_t texObject, int x) 
#line 303
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 307
::exit(___);}
#if 0
#line 303
{ 
#line 304
uint4 tmp; 
#line 305
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 306
(*retVal) = ((unsigned long)(tmp.x)); 
#line 307
} 
#endif
#line 309 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(ulong1 *retVal, cudaTextureObject_t texObject, int x) 
#line 310
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 314
::exit(___);}
#if 0
#line 310
{ 
#line 311
uint4 tmp; 
#line 312
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 313
(*retVal) = make_ulong1(tmp.x); 
#line 314
} 
#endif
#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(ulong2 *retVal, cudaTextureObject_t texObject, int x) 
#line 317
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 321
::exit(___);}
#if 0
#line 317
{ 
#line 318
uint4 tmp; 
#line 319
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 320
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 321
} 
#endif
#line 323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(ulong4 *retVal, cudaTextureObject_t texObject, int x) 
#line 324
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 328
::exit(___);}
#if 0
#line 324
{ 
#line 325
uint4 tmp; 
#line 326
__tex_1d_v4u32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 327
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 328
} 
#endif
#line 339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(float *retVal, cudaTextureObject_t texObject, int x) 
#line 340
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 344
::exit(___);}
#if 0
#line 340
{ 
#line 341
float4 tmp; 
#line 342
__tex_1d_v4f32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 343
(*retVal) = (tmp.x); 
#line 344
} 
#endif
#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(float1 *retVal, cudaTextureObject_t texObject, int x) 
#line 347
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 351
::exit(___);}
#if 0
#line 347
{ 
#line 348
float4 tmp; 
#line 349
__tex_1d_v4f32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 350
(*retVal) = make_float1(tmp.x); 
#line 351
} 
#endif
#line 353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(float2 *retVal, cudaTextureObject_t texObject, int x) 
#line 354
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 358
::exit(___);}
#if 0
#line 354
{ 
#line 355
float4 tmp; 
#line 356
__tex_1d_v4f32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 357
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 358
} 
#endif
#line 360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1Dfetch(float4 *retVal, cudaTextureObject_t texObject, int x) 
#line 361
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 365
::exit(___);}
#if 0
#line 361
{ 
#line 362
float4 tmp; 
#line 363
__tex_1d_v4f32_s32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 364
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 365
} 
#endif
#line 373 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(char *retVal, cudaTextureObject_t texObject, float x) 
#line 374
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 380
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 383
} 
#endif
#line 384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(signed char *retVal, cudaTextureObject_t texObject, float x) 
#line 385
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 389
::exit(___);}
#if 0
#line 385
{ 
#line 386
int4 tmp; 
#line 387
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 388
(*retVal) = ((signed char)(tmp.x)); 
#line 389
} 
#endif
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(char1 *retVal, cudaTextureObject_t texObject, float x) 
#line 392
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 396
::exit(___);}
#if 0
#line 392
{ 
#line 393
int4 tmp; 
#line 394
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 395
(*retVal) = make_char1(tmp.x); 
#line 396
} 
#endif
#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(char2 *retVal, cudaTextureObject_t texObject, float x) 
#line 399
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 403
::exit(___);}
#if 0
#line 399
{ 
#line 400
int4 tmp; 
#line 401
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 402
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 403
} 
#endif
#line 405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(char4 *retVal, cudaTextureObject_t texObject, float x) 
#line 406
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 410
::exit(___);}
#if 0
#line 406
{ 
#line 407
int4 tmp; 
#line 408
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 409
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 410
} 
#endif
#line 412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(unsigned char *retVal, cudaTextureObject_t texObject, float x) 
#line 413
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 417
::exit(___);}
#if 0
#line 413
{ 
#line 414
uint4 tmp; 
#line 415
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 416
(*retVal) = ((unsigned char)(tmp.x)); 
#line 417
} 
#endif
#line 419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(uchar1 *retVal, cudaTextureObject_t texObject, float x) 
#line 420
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 424
::exit(___);}
#if 0
#line 420
{ 
#line 421
uint4 tmp; 
#line 422
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 423
(*retVal) = make_uchar1(tmp.x); 
#line 424
} 
#endif
#line 426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(uchar2 *retVal, cudaTextureObject_t texObject, float x) 
#line 427
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 431
::exit(___);}
#if 0
#line 427
{ 
#line 428
uint4 tmp; 
#line 429
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 430
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 431
} 
#endif
#line 433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(uchar4 *retVal, cudaTextureObject_t texObject, float x) 
#line 434
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 438
::exit(___);}
#if 0
#line 434
{ 
#line 435
uint4 tmp; 
#line 436
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 437
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 438
} 
#endif
#line 446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(short *retVal, cudaTextureObject_t texObject, float x) 
#line 447
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 451
::exit(___);}
#if 0
#line 447
{ 
#line 448
int4 tmp; 
#line 449
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 450
(*retVal) = ((short)(tmp.x)); 
#line 451
} 
#endif
#line 453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(short1 *retVal, cudaTextureObject_t texObject, float x) 
#line 454
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 458
::exit(___);}
#if 0
#line 454
{ 
#line 455
int4 tmp; 
#line 456
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 457
(*retVal) = make_short1(tmp.x); 
#line 458
} 
#endif
#line 460 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(short2 *retVal, cudaTextureObject_t texObject, float x) 
#line 461
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 465
::exit(___);}
#if 0
#line 461
{ 
#line 462
int4 tmp; 
#line 463
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 464
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 465
} 
#endif
#line 467 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(short4 *retVal, cudaTextureObject_t texObject, float x) 
#line 468
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 472
::exit(___);}
#if 0
#line 468
{ 
#line 469
int4 tmp; 
#line 470
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 471
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 472
} 
#endif
#line 474 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(unsigned short *retVal, cudaTextureObject_t texObject, float x) 
#line 475
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 479
::exit(___);}
#if 0
#line 475
{ 
#line 476
uint4 tmp; 
#line 477
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 478
(*retVal) = ((unsigned short)(tmp.x)); 
#line 479
} 
#endif
#line 481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(ushort1 *retVal, cudaTextureObject_t texObject, float x) 
#line 482
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 486
::exit(___);}
#if 0
#line 482
{ 
#line 483
uint4 tmp; 
#line 484
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 485
(*retVal) = make_ushort1(tmp.x); 
#line 486
} 
#endif
#line 488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(ushort2 *retVal, cudaTextureObject_t texObject, float x) 
#line 489
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 493
::exit(___);}
#if 0
#line 489
{ 
#line 490
uint4 tmp; 
#line 491
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 492
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 493
} 
#endif
#line 495 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(ushort4 *retVal, cudaTextureObject_t texObject, float x) 
#line 496
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 500
::exit(___);}
#if 0
#line 496
{ 
#line 497
uint4 tmp; 
#line 498
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 499
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 500
} 
#endif
#line 508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(int *retVal, cudaTextureObject_t texObject, float x) 
#line 509
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 513
::exit(___);}
#if 0
#line 509
{ 
#line 510
int4 tmp; 
#line 511
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 512
(*retVal) = (tmp.x); 
#line 513
} 
#endif
#line 515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(int1 *retVal, cudaTextureObject_t texObject, float x) 
#line 516
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 520
::exit(___);}
#if 0
#line 516
{ 
#line 517
int4 tmp; 
#line 518
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 519
(*retVal) = make_int1(tmp.x); 
#line 520
} 
#endif
#line 522 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(int2 *retVal, cudaTextureObject_t texObject, float x) 
#line 523
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 527
::exit(___);}
#if 0
#line 523
{ 
#line 524
int4 tmp; 
#line 525
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 526
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 527
} 
#endif
#line 529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(int4 *retVal, cudaTextureObject_t texObject, float x) 
#line 530
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 534
::exit(___);}
#if 0
#line 530
{ 
#line 531
int4 tmp; 
#line 532
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 533
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 534
} 
#endif
#line 536 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(unsigned *retVal, cudaTextureObject_t texObject, float x) 
#line 537
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 541
::exit(___);}
#if 0
#line 537
{ 
#line 538
uint4 tmp; 
#line 539
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 540
(*retVal) = (tmp.x); 
#line 541
} 
#endif
#line 543 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(uint1 *retVal, cudaTextureObject_t texObject, float x) 
#line 544
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 548
::exit(___);}
#if 0
#line 544
{ 
#line 545
uint4 tmp; 
#line 546
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 547
(*retVal) = make_uint1(tmp.x); 
#line 548
} 
#endif
#line 550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(uint2 *retVal, cudaTextureObject_t texObject, float x) 
#line 551
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 555
::exit(___);}
#if 0
#line 551
{ 
#line 552
uint4 tmp; 
#line 553
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 554
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 555
} 
#endif
#line 557 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(uint4 *retVal, cudaTextureObject_t texObject, float x) 
#line 558
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 562
::exit(___);}
#if 0
#line 558
{ 
#line 559
uint4 tmp; 
#line 560
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 561
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 562
} 
#endif
#line 572 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(long *retVal, cudaTextureObject_t texObject, float x) 
#line 573
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 577
::exit(___);}
#if 0
#line 573
{ 
#line 574
int4 tmp; 
#line 575
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 576
(*retVal) = ((long)(tmp.x)); 
#line 577
} 
#endif
#line 579 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(long1 *retVal, cudaTextureObject_t texObject, float x) 
#line 580
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 584
::exit(___);}
#if 0
#line 580
{ 
#line 581
int4 tmp; 
#line 582
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 583
(*retVal) = make_long1(tmp.x); 
#line 584
} 
#endif
#line 586 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(long2 *retVal, cudaTextureObject_t texObject, float x) 
#line 587
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 591
::exit(___);}
#if 0
#line 587
{ 
#line 588
int4 tmp; 
#line 589
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 590
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 591
} 
#endif
#line 593 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(long4 *retVal, cudaTextureObject_t texObject, float x) 
#line 594
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 598
::exit(___);}
#if 0
#line 594
{ 
#line 595
int4 tmp; 
#line 596
__tex_1d_v4s32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 597
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 598
} 
#endif
#line 600 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(unsigned long *retVal, cudaTextureObject_t texObject, float x) 
#line 601
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 605
::exit(___);}
#if 0
#line 601
{ 
#line 602
uint4 tmp; 
#line 603
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 604
(*retVal) = ((unsigned long)(tmp.x)); 
#line 605
} 
#endif
#line 607 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(ulong1 *retVal, cudaTextureObject_t texObject, float x) 
#line 608
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 612
::exit(___);}
#if 0
#line 608
{ 
#line 609
uint4 tmp; 
#line 610
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 611
(*retVal) = make_ulong1(tmp.x); 
#line 612
} 
#endif
#line 614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(ulong2 *retVal, cudaTextureObject_t texObject, float x) 
#line 615
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 619
::exit(___);}
#if 0
#line 615
{ 
#line 616
uint4 tmp; 
#line 617
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 618
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 619
} 
#endif
#line 621 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(ulong4 *retVal, cudaTextureObject_t texObject, float x) 
#line 622
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 626
::exit(___);}
#if 0
#line 622
{ 
#line 623
uint4 tmp; 
#line 624
__tex_1d_v4u32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 625
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 626
} 
#endif
#line 637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(float *retVal, cudaTextureObject_t texObject, float x) 
#line 638
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 642
::exit(___);}
#if 0
#line 638
{ 
#line 639
float4 tmp; 
#line 640
__tex_1d_v4f32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 641
(*retVal) = (tmp.x); 
#line 642
} 
#endif
#line 644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(float1 *retVal, cudaTextureObject_t texObject, float x) 
#line 645
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 649
::exit(___);}
#if 0
#line 645
{ 
#line 646
float4 tmp; 
#line 647
__tex_1d_v4f32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 648
(*retVal) = make_float1(tmp.x); 
#line 649
} 
#endif
#line 651 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(float2 *retVal, cudaTextureObject_t texObject, float x) 
#line 652
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 656
::exit(___);}
#if 0
#line 652
{ 
#line 653
float4 tmp; 
#line 654
__tex_1d_v4f32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 655
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 656
} 
#endif
#line 658 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1D(float4 *retVal, cudaTextureObject_t texObject, float x) 
#line 659
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;
#line 663
::exit(___);}
#if 0
#line 659
{ 
#line 660
float4 tmp; 
#line 661
__tex_1d_v4f32_f32(texObject, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 662
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 663
} 
#endif
#line 671 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(char *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 672
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 672 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 677 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 678
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 681
} 
#endif
#line 682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(signed char *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 683
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 687
::exit(___);}
#if 0
#line 683
{ 
#line 684
int4 tmp; 
#line 685
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 686
(*retVal) = ((signed char)(tmp.x)); 
#line 687
} 
#endif
#line 689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(char1 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 690
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 694
::exit(___);}
#if 0
#line 690
{ 
#line 691
int4 tmp; 
#line 692
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 693
(*retVal) = make_char1(tmp.x); 
#line 694
} 
#endif
#line 696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(char2 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 697
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 701
::exit(___);}
#if 0
#line 697
{ 
#line 698
int4 tmp; 
#line 699
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 700
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 701
} 
#endif
#line 703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(char4 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 704
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 708
::exit(___);}
#if 0
#line 704
{ 
#line 705
int4 tmp; 
#line 706
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 707
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 708
} 
#endif
#line 710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 711
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 715
::exit(___);}
#if 0
#line 711
{ 
#line 712
uint4 tmp; 
#line 713
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 714
(*retVal) = ((unsigned char)(tmp.x)); 
#line 715
} 
#endif
#line 717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 718
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 722
::exit(___);}
#if 0
#line 718
{ 
#line 719
uint4 tmp; 
#line 720
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 721
(*retVal) = make_uchar1(tmp.x); 
#line 722
} 
#endif
#line 724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 725
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 729
::exit(___);}
#if 0
#line 725
{ 
#line 726
uint4 tmp; 
#line 727
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 728
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 729
} 
#endif
#line 731 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 732
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 736
::exit(___);}
#if 0
#line 732
{ 
#line 733
uint4 tmp; 
#line 734
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 735
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 736
} 
#endif
#line 744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(short *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 745
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 749
::exit(___);}
#if 0
#line 745
{ 
#line 746
int4 tmp; 
#line 747
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 748
(*retVal) = ((short)(tmp.x)); 
#line 749
} 
#endif
#line 751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(short1 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 752
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 756
::exit(___);}
#if 0
#line 752
{ 
#line 753
int4 tmp; 
#line 754
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 755
(*retVal) = make_short1(tmp.x); 
#line 756
} 
#endif
#line 758 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(short2 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 759
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 763
::exit(___);}
#if 0
#line 759
{ 
#line 760
int4 tmp; 
#line 761
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 762
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 763
} 
#endif
#line 765 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(short4 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 766
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 770
::exit(___);}
#if 0
#line 766
{ 
#line 767
int4 tmp; 
#line 768
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 769
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 770
} 
#endif
#line 772 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 773
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 777
::exit(___);}
#if 0
#line 773
{ 
#line 774
uint4 tmp; 
#line 775
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 776
(*retVal) = ((unsigned short)(tmp.x)); 
#line 777
} 
#endif
#line 779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 780
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 784
::exit(___);}
#if 0
#line 780
{ 
#line 781
uint4 tmp; 
#line 782
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 783
(*retVal) = make_ushort1(tmp.x); 
#line 784
} 
#endif
#line 786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 787
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 791
::exit(___);}
#if 0
#line 787
{ 
#line 788
uint4 tmp; 
#line 789
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 790
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 791
} 
#endif
#line 793 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 794
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 798
::exit(___);}
#if 0
#line 794
{ 
#line 795
uint4 tmp; 
#line 796
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 797
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 798
} 
#endif
#line 806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(int *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 807
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 811
::exit(___);}
#if 0
#line 807
{ 
#line 808
int4 tmp; 
#line 809
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 810
(*retVal) = (tmp.x); 
#line 811
} 
#endif
#line 813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(int1 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 814
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 818
::exit(___);}
#if 0
#line 814
{ 
#line 815
int4 tmp; 
#line 816
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 817
(*retVal) = make_int1(tmp.x); 
#line 818
} 
#endif
#line 820 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(int2 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 821
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 825
::exit(___);}
#if 0
#line 821
{ 
#line 822
int4 tmp; 
#line 823
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 824
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 825
} 
#endif
#line 827 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(int4 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 828
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 832
::exit(___);}
#if 0
#line 828
{ 
#line 829
int4 tmp; 
#line 830
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 831
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 832
} 
#endif
#line 834 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(unsigned *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 835
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 839
::exit(___);}
#if 0
#line 835
{ 
#line 836
uint4 tmp; 
#line 837
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 838
(*retVal) = (tmp.x); 
#line 839
} 
#endif
#line 841 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(uint1 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 842
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 846
::exit(___);}
#if 0
#line 842
{ 
#line 843
uint4 tmp; 
#line 844
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 845
(*retVal) = make_uint1(tmp.x); 
#line 846
} 
#endif
#line 848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(uint2 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 849
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 853
::exit(___);}
#if 0
#line 849
{ 
#line 850
uint4 tmp; 
#line 851
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 852
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 853
} 
#endif
#line 855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(uint4 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 856
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 860
::exit(___);}
#if 0
#line 856
{ 
#line 857
uint4 tmp; 
#line 858
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 859
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 860
} 
#endif
#line 870 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(long *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 871
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 875
::exit(___);}
#if 0
#line 871
{ 
#line 872
int4 tmp; 
#line 873
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 874
(*retVal) = ((long)(tmp.x)); 
#line 875
} 
#endif
#line 877 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(long1 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 878
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 882
::exit(___);}
#if 0
#line 878
{ 
#line 879
int4 tmp; 
#line 880
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 881
(*retVal) = make_long1(tmp.x); 
#line 882
} 
#endif
#line 884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(long2 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 885
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 889
::exit(___);}
#if 0
#line 885
{ 
#line 886
int4 tmp; 
#line 887
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 888
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 889
} 
#endif
#line 891 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(long4 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 892
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 896
::exit(___);}
#if 0
#line 892
{ 
#line 893
int4 tmp; 
#line 894
__tex_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 895
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 896
} 
#endif
#line 898 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 899
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 903
::exit(___);}
#if 0
#line 899
{ 
#line 900
uint4 tmp; 
#line 901
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 902
(*retVal) = ((unsigned long)(tmp.x)); 
#line 903
} 
#endif
#line 905 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 906
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 910
::exit(___);}
#if 0
#line 906
{ 
#line 907
uint4 tmp; 
#line 908
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 909
(*retVal) = make_ulong1(tmp.x); 
#line 910
} 
#endif
#line 912 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 913
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 917
::exit(___);}
#if 0
#line 913
{ 
#line 914
uint4 tmp; 
#line 915
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 916
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 917
} 
#endif
#line 919 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 920
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 924
::exit(___);}
#if 0
#line 920
{ 
#line 921
uint4 tmp; 
#line 922
__tex_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 923
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 924
} 
#endif
#line 935 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(float *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 936
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 940
::exit(___);}
#if 0
#line 936
{ 
#line 937
float4 tmp; 
#line 938
__tex_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 939
(*retVal) = (tmp.x); 
#line 940
} 
#endif
#line 942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(float1 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 943
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 947
::exit(___);}
#if 0
#line 943
{ 
#line 944
float4 tmp; 
#line 945
__tex_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 946
(*retVal) = make_float1(tmp.x); 
#line 947
} 
#endif
#line 949 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(float2 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 950
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 954
::exit(___);}
#if 0
#line 950
{ 
#line 951
float4 tmp; 
#line 952
__tex_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 953
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 954
} 
#endif
#line 956 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2D(float4 *retVal, cudaTextureObject_t texObject, float x, float y) 
#line 957
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;
#line 961
::exit(___);}
#if 0
#line 957
{ 
#line 958
float4 tmp; 
#line 959
__tex_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 960
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 961
} 
#endif
#line 969 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 970
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 979 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 975 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 976
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 979
} 
#endif
#line 980 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 981
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 985
::exit(___);}
#if 0
#line 981
{ 
#line 982
int4 tmp; 
#line 983
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 984
(*retVal) = ((signed char)(tmp.x)); 
#line 985
} 
#endif
#line 987 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 988
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 992
::exit(___);}
#if 0
#line 988
{ 
#line 989
int4 tmp; 
#line 990
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 991
(*retVal) = make_char1(tmp.x); 
#line 992
} 
#endif
#line 994 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 995
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 999
::exit(___);}
#if 0
#line 995
{ 
#line 996
int4 tmp; 
#line 997
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 998
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 999
} 
#endif
#line 1001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1002
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1006
::exit(___);}
#if 0
#line 1002
{ 
#line 1003
int4 tmp; 
#line 1004
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1005
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1006
} 
#endif
#line 1008 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1009
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1013
::exit(___);}
#if 0
#line 1009
{ 
#line 1010
uint4 tmp; 
#line 1011
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1012
(*retVal) = ((unsigned char)(tmp.x)); 
#line 1013
} 
#endif
#line 1015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1016
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1020
::exit(___);}
#if 0
#line 1016
{ 
#line 1017
uint4 tmp; 
#line 1018
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1019
(*retVal) = make_uchar1(tmp.x); 
#line 1020
} 
#endif
#line 1022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1023
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1027
::exit(___);}
#if 0
#line 1023
{ 
#line 1024
uint4 tmp; 
#line 1025
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1026
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 1027
} 
#endif
#line 1029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1030
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1034
::exit(___);}
#if 0
#line 1030
{ 
#line 1031
uint4 tmp; 
#line 1032
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1033
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1034
} 
#endif
#line 1042 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(short *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1043
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1047
::exit(___);}
#if 0
#line 1043
{ 
#line 1044
int4 tmp; 
#line 1045
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1046
(*retVal) = ((short)(tmp.x)); 
#line 1047
} 
#endif
#line 1049 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1050
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1054
::exit(___);}
#if 0
#line 1050
{ 
#line 1051
int4 tmp; 
#line 1052
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1053
(*retVal) = make_short1(tmp.x); 
#line 1054
} 
#endif
#line 1056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1057
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1061
::exit(___);}
#if 0
#line 1057
{ 
#line 1058
int4 tmp; 
#line 1059
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1060
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 1061
} 
#endif
#line 1063 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1064
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1068
::exit(___);}
#if 0
#line 1064
{ 
#line 1065
int4 tmp; 
#line 1066
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1067
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1068
} 
#endif
#line 1070 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1071
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1075
::exit(___);}
#if 0
#line 1071
{ 
#line 1072
uint4 tmp; 
#line 1073
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1074
(*retVal) = ((unsigned short)(tmp.x)); 
#line 1075
} 
#endif
#line 1077 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1078
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1082
::exit(___);}
#if 0
#line 1078
{ 
#line 1079
uint4 tmp; 
#line 1080
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1081
(*retVal) = make_ushort1(tmp.x); 
#line 1082
} 
#endif
#line 1084 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1085
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1089
::exit(___);}
#if 0
#line 1085
{ 
#line 1086
uint4 tmp; 
#line 1087
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1088
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 1089
} 
#endif
#line 1091 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1092
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1096
::exit(___);}
#if 0
#line 1092
{ 
#line 1093
uint4 tmp; 
#line 1094
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1095
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1096
} 
#endif
#line 1104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(int *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1105
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1109
::exit(___);}
#if 0
#line 1105
{ 
#line 1106
int4 tmp; 
#line 1107
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1108
(*retVal) = (tmp.x); 
#line 1109
} 
#endif
#line 1111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1112
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1116
::exit(___);}
#if 0
#line 1112
{ 
#line 1113
int4 tmp; 
#line 1114
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1115
(*retVal) = make_int1(tmp.x); 
#line 1116
} 
#endif
#line 1118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1119
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1123
::exit(___);}
#if 0
#line 1119
{ 
#line 1120
int4 tmp; 
#line 1121
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1122
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 1123
} 
#endif
#line 1125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1126
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1130
::exit(___);}
#if 0
#line 1126
{ 
#line 1127
int4 tmp; 
#line 1128
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1129
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1130
} 
#endif
#line 1132 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1133
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1137
::exit(___);}
#if 0
#line 1133
{ 
#line 1134
uint4 tmp; 
#line 1135
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1136
(*retVal) = (tmp.x); 
#line 1137
} 
#endif
#line 1139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1140
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1144
::exit(___);}
#if 0
#line 1140
{ 
#line 1141
uint4 tmp; 
#line 1142
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1143
(*retVal) = make_uint1(tmp.x); 
#line 1144
} 
#endif
#line 1146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1147
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1151
::exit(___);}
#if 0
#line 1147
{ 
#line 1148
uint4 tmp; 
#line 1149
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1150
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 1151
} 
#endif
#line 1153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1154
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1158
::exit(___);}
#if 0
#line 1154
{ 
#line 1155
uint4 tmp; 
#line 1156
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1157
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1158
} 
#endif
#line 1168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(long *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1169
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1173
::exit(___);}
#if 0
#line 1169
{ 
#line 1170
int4 tmp; 
#line 1171
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1172
(*retVal) = ((long)(tmp.x)); 
#line 1173
} 
#endif
#line 1175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1176
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1180
::exit(___);}
#if 0
#line 1176
{ 
#line 1177
int4 tmp; 
#line 1178
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1179
(*retVal) = make_long1(tmp.x); 
#line 1180
} 
#endif
#line 1182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1183
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1187
::exit(___);}
#if 0
#line 1183
{ 
#line 1184
int4 tmp; 
#line 1185
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1186
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 1187
} 
#endif
#line 1189 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1190
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1194
::exit(___);}
#if 0
#line 1190
{ 
#line 1191
int4 tmp; 
#line 1192
__tex_3d_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1193
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1194
} 
#endif
#line 1196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1197
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1201
::exit(___);}
#if 0
#line 1197
{ 
#line 1198
uint4 tmp; 
#line 1199
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1200
(*retVal) = ((unsigned long)(tmp.x)); 
#line 1201
} 
#endif
#line 1203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1204
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1208
::exit(___);}
#if 0
#line 1204
{ 
#line 1205
uint4 tmp; 
#line 1206
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1207
(*retVal) = make_ulong1(tmp.x); 
#line 1208
} 
#endif
#line 1210 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1211
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1215
::exit(___);}
#if 0
#line 1211
{ 
#line 1212
uint4 tmp; 
#line 1213
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1214
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 1215
} 
#endif
#line 1217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1218
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1222
::exit(___);}
#if 0
#line 1218
{ 
#line 1219
uint4 tmp; 
#line 1220
__tex_3d_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1221
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1222
} 
#endif
#line 1233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(float *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1234
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1238
::exit(___);}
#if 0
#line 1234
{ 
#line 1235
float4 tmp; 
#line 1236
__tex_3d_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1237
(*retVal) = (tmp.x); 
#line 1238
} 
#endif
#line 1240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1241
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1245
::exit(___);}
#if 0
#line 1241
{ 
#line 1242
float4 tmp; 
#line 1243
__tex_3d_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1244
(*retVal) = make_float1(tmp.x); 
#line 1245
} 
#endif
#line 1247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1248
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1252
::exit(___);}
#if 0
#line 1248
{ 
#line 1249
float4 tmp; 
#line 1250
__tex_3d_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1251
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 1252
} 
#endif
#line 1254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3D(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1255
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1259
::exit(___);}
#if 0
#line 1255
{ 
#line 1256
float4 tmp; 
#line 1257
__tex_3d_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1258
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1259
} 
#endif
#line 1267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(char *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1268
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 1268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 1273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 1274
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 1277
} 
#endif
#line 1278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(signed char *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1279
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1283
::exit(___);}
#if 0
#line 1279
{ 
#line 1280
int4 tmp; 
#line 1281
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1282
(*retVal) = ((signed char)(tmp.x)); 
#line 1283
} 
#endif
#line 1285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(char1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1286
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1290
::exit(___);}
#if 0
#line 1286
{ 
#line 1287
int4 tmp; 
#line 1288
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1289
(*retVal) = make_char1(tmp.x); 
#line 1290
} 
#endif
#line 1292 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(char2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1293
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1297
::exit(___);}
#if 0
#line 1293
{ 
#line 1294
int4 tmp; 
#line 1295
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1296
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 1297
} 
#endif
#line 1299 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(char4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1300
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1304
::exit(___);}
#if 0
#line 1300
{ 
#line 1301
int4 tmp; 
#line 1302
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1303
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1304
} 
#endif
#line 1306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1307
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1311
::exit(___);}
#if 0
#line 1307
{ 
#line 1308
uint4 tmp; 
#line 1309
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1310
(*retVal) = ((unsigned char)(tmp.x)); 
#line 1311
} 
#endif
#line 1313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1314
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1318
::exit(___);}
#if 0
#line 1314
{ 
#line 1315
uint4 tmp; 
#line 1316
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1317
(*retVal) = make_uchar1(tmp.x); 
#line 1318
} 
#endif
#line 1320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1321
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1325
::exit(___);}
#if 0
#line 1321
{ 
#line 1322
uint4 tmp; 
#line 1323
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1324
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 1325
} 
#endif
#line 1327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1328
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1332
::exit(___);}
#if 0
#line 1328
{ 
#line 1329
uint4 tmp; 
#line 1330
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1331
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1332
} 
#endif
#line 1340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(short *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1341
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1345
::exit(___);}
#if 0
#line 1341
{ 
#line 1342
int4 tmp; 
#line 1343
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1344
(*retVal) = ((short)(tmp.x)); 
#line 1345
} 
#endif
#line 1347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(short1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1348
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1352
::exit(___);}
#if 0
#line 1348
{ 
#line 1349
int4 tmp; 
#line 1350
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1351
(*retVal) = make_short1(tmp.x); 
#line 1352
} 
#endif
#line 1354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(short2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1355
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1359
::exit(___);}
#if 0
#line 1355
{ 
#line 1356
int4 tmp; 
#line 1357
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1358
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 1359
} 
#endif
#line 1361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(short4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1362
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1366
::exit(___);}
#if 0
#line 1362
{ 
#line 1363
int4 tmp; 
#line 1364
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1365
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1366
} 
#endif
#line 1368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1369
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1373
::exit(___);}
#if 0
#line 1369
{ 
#line 1370
uint4 tmp; 
#line 1371
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1372
(*retVal) = ((unsigned short)(tmp.x)); 
#line 1373
} 
#endif
#line 1375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1376
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1380
::exit(___);}
#if 0
#line 1376
{ 
#line 1377
uint4 tmp; 
#line 1378
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1379
(*retVal) = make_ushort1(tmp.x); 
#line 1380
} 
#endif
#line 1382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1383
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1387
::exit(___);}
#if 0
#line 1383
{ 
#line 1384
uint4 tmp; 
#line 1385
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1386
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 1387
} 
#endif
#line 1389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1390
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1394
::exit(___);}
#if 0
#line 1390
{ 
#line 1391
uint4 tmp; 
#line 1392
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1393
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1394
} 
#endif
#line 1402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(int *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1403
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1407
::exit(___);}
#if 0
#line 1403
{ 
#line 1404
int4 tmp; 
#line 1405
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1406
(*retVal) = (tmp.x); 
#line 1407
} 
#endif
#line 1409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(int1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1410
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1414
::exit(___);}
#if 0
#line 1410
{ 
#line 1411
int4 tmp; 
#line 1412
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1413
(*retVal) = make_int1(tmp.x); 
#line 1414
} 
#endif
#line 1416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(int2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1417
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1421
::exit(___);}
#if 0
#line 1417
{ 
#line 1418
int4 tmp; 
#line 1419
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1420
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 1421
} 
#endif
#line 1423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(int4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1424
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1428
::exit(___);}
#if 0
#line 1424
{ 
#line 1425
int4 tmp; 
#line 1426
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1427
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1428
} 
#endif
#line 1430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(unsigned *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1431
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1435
::exit(___);}
#if 0
#line 1431
{ 
#line 1432
uint4 tmp; 
#line 1433
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1434
(*retVal) = (tmp.x); 
#line 1435
} 
#endif
#line 1437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1438
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1442
::exit(___);}
#if 0
#line 1438
{ 
#line 1439
uint4 tmp; 
#line 1440
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1441
(*retVal) = make_uint1(tmp.x); 
#line 1442
} 
#endif
#line 1444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1445
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1449
::exit(___);}
#if 0
#line 1445
{ 
#line 1446
uint4 tmp; 
#line 1447
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1448
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 1449
} 
#endif
#line 1451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1452
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1456
::exit(___);}
#if 0
#line 1452
{ 
#line 1453
uint4 tmp; 
#line 1454
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1455
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1456
} 
#endif
#line 1466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(long *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1467
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1471
::exit(___);}
#if 0
#line 1467
{ 
#line 1468
int4 tmp; 
#line 1469
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1470
(*retVal) = ((long)(tmp.x)); 
#line 1471
} 
#endif
#line 1473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(long1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1474
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1478
::exit(___);}
#if 0
#line 1474
{ 
#line 1475
int4 tmp; 
#line 1476
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1477
(*retVal) = make_long1(tmp.x); 
#line 1478
} 
#endif
#line 1480 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(long2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1481
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1485
::exit(___);}
#if 0
#line 1481
{ 
#line 1482
int4 tmp; 
#line 1483
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1484
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 1485
} 
#endif
#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(long4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1488
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1492
::exit(___);}
#if 0
#line 1488
{ 
#line 1489
int4 tmp; 
#line 1490
__tex_1d_array_v4s32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1491
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1492
} 
#endif
#line 1494 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(unsigned long *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1495
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1499
::exit(___);}
#if 0
#line 1495
{ 
#line 1496
uint4 tmp; 
#line 1497
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1498
(*retVal) = ((unsigned long)(tmp.x)); 
#line 1499
} 
#endif
#line 1501 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(ulong1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1502
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1506
::exit(___);}
#if 0
#line 1502
{ 
#line 1503
uint4 tmp; 
#line 1504
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1505
(*retVal) = make_ulong1(tmp.x); 
#line 1506
} 
#endif
#line 1508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(ulong2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1509
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1513
::exit(___);}
#if 0
#line 1509
{ 
#line 1510
uint4 tmp; 
#line 1511
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1512
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 1513
} 
#endif
#line 1515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(ulong4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1516
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1520
::exit(___);}
#if 0
#line 1516
{ 
#line 1517
uint4 tmp; 
#line 1518
__tex_1d_array_v4u32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1519
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1520
} 
#endif
#line 1531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(float *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1532
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1536
::exit(___);}
#if 0
#line 1532
{ 
#line 1533
float4 tmp; 
#line 1534
__tex_1d_array_v4f32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1535
(*retVal) = (tmp.x); 
#line 1536
} 
#endif
#line 1538 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(float1 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1539
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1543
::exit(___);}
#if 0
#line 1539
{ 
#line 1540
float4 tmp; 
#line 1541
__tex_1d_array_v4f32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1542
(*retVal) = make_float1(tmp.x); 
#line 1543
} 
#endif
#line 1545 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(float2 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1546
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1550
::exit(___);}
#if 0
#line 1546
{ 
#line 1547
float4 tmp; 
#line 1548
__tex_1d_array_v4f32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1549
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 1550
} 
#endif
#line 1552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayered(float4 *retVal, cudaTextureObject_t texObject, float x, int layer) 
#line 1553
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;
#line 1557
::exit(___);}
#if 0
#line 1553
{ 
#line 1554
float4 tmp; 
#line 1555
__tex_1d_array_v4f32_f32(texObject, layer, x, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1556
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1557
} 
#endif
#line 1565 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1566
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1575 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 1566 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 1571 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 1572
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1574 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 1575
} 
#endif
#line 1576 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1577
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1581
::exit(___);}
#if 0
#line 1577
{ 
#line 1578
int4 tmp; 
#line 1579
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1580
(*retVal) = ((signed char)(tmp.x)); 
#line 1581
} 
#endif
#line 1583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1584
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1588
::exit(___);}
#if 0
#line 1584
{ 
#line 1585
int4 tmp; 
#line 1586
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1587
(*retVal) = make_char1(tmp.x); 
#line 1588
} 
#endif
#line 1590 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1591
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1595
::exit(___);}
#if 0
#line 1591
{ 
#line 1592
int4 tmp; 
#line 1593
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1594
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 1595
} 
#endif
#line 1597 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1598
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1602
::exit(___);}
#if 0
#line 1598
{ 
#line 1599
int4 tmp; 
#line 1600
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1601
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1602
} 
#endif
#line 1604 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1605
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1609
::exit(___);}
#if 0
#line 1605
{ 
#line 1606
uint4 tmp; 
#line 1607
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1608
(*retVal) = ((unsigned char)(tmp.x)); 
#line 1609
} 
#endif
#line 1611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1612
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1616
::exit(___);}
#if 0
#line 1612
{ 
#line 1613
uint4 tmp; 
#line 1614
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1615
(*retVal) = make_uchar1(tmp.x); 
#line 1616
} 
#endif
#line 1618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1619
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1623
::exit(___);}
#if 0
#line 1619
{ 
#line 1620
uint4 tmp; 
#line 1621
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1622
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 1623
} 
#endif
#line 1625 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1626
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1630
::exit(___);}
#if 0
#line 1626
{ 
#line 1627
uint4 tmp; 
#line 1628
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1629
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1630
} 
#endif
#line 1638 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1639
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1643
::exit(___);}
#if 0
#line 1639
{ 
#line 1640
int4 tmp; 
#line 1641
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1642
(*retVal) = ((short)(tmp.x)); 
#line 1643
} 
#endif
#line 1645 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1646
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1650
::exit(___);}
#if 0
#line 1646
{ 
#line 1647
int4 tmp; 
#line 1648
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1649
(*retVal) = make_short1(tmp.x); 
#line 1650
} 
#endif
#line 1652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1653
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1657
::exit(___);}
#if 0
#line 1653
{ 
#line 1654
int4 tmp; 
#line 1655
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1656
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 1657
} 
#endif
#line 1659 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1660
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1664
::exit(___);}
#if 0
#line 1660
{ 
#line 1661
int4 tmp; 
#line 1662
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1663
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1664
} 
#endif
#line 1666 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1667
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1671
::exit(___);}
#if 0
#line 1667
{ 
#line 1668
uint4 tmp; 
#line 1669
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1670
(*retVal) = ((unsigned short)(tmp.x)); 
#line 1671
} 
#endif
#line 1673 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1674
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1678
::exit(___);}
#if 0
#line 1674
{ 
#line 1675
uint4 tmp; 
#line 1676
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1677
(*retVal) = make_ushort1(tmp.x); 
#line 1678
} 
#endif
#line 1680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1681
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1685
::exit(___);}
#if 0
#line 1681
{ 
#line 1682
uint4 tmp; 
#line 1683
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1684
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 1685
} 
#endif
#line 1687 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1688
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1692
::exit(___);}
#if 0
#line 1688
{ 
#line 1689
uint4 tmp; 
#line 1690
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1691
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1692
} 
#endif
#line 1700 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1701
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1705
::exit(___);}
#if 0
#line 1701
{ 
#line 1702
int4 tmp; 
#line 1703
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1704
(*retVal) = (tmp.x); 
#line 1705
} 
#endif
#line 1707 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1708
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1712
::exit(___);}
#if 0
#line 1708
{ 
#line 1709
int4 tmp; 
#line 1710
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1711
(*retVal) = make_int1(tmp.x); 
#line 1712
} 
#endif
#line 1714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1715
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1719
::exit(___);}
#if 0
#line 1715
{ 
#line 1716
int4 tmp; 
#line 1717
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1718
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 1719
} 
#endif
#line 1721 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1722
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1726
::exit(___);}
#if 0
#line 1722
{ 
#line 1723
int4 tmp; 
#line 1724
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1725
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1726
} 
#endif
#line 1728 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1729
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1733
::exit(___);}
#if 0
#line 1729
{ 
#line 1730
uint4 tmp; 
#line 1731
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1732
(*retVal) = (tmp.x); 
#line 1733
} 
#endif
#line 1735 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1736
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1740
::exit(___);}
#if 0
#line 1736
{ 
#line 1737
uint4 tmp; 
#line 1738
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1739
(*retVal) = make_uint1(tmp.x); 
#line 1740
} 
#endif
#line 1742 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1743
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1747
::exit(___);}
#if 0
#line 1743
{ 
#line 1744
uint4 tmp; 
#line 1745
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1746
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 1747
} 
#endif
#line 1749 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1750
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1754
::exit(___);}
#if 0
#line 1750
{ 
#line 1751
uint4 tmp; 
#line 1752
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1753
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1754
} 
#endif
#line 1764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(long *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1765
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1769
::exit(___);}
#if 0
#line 1765
{ 
#line 1766
int4 tmp; 
#line 1767
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1768
(*retVal) = ((long)(tmp.x)); 
#line 1769
} 
#endif
#line 1771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(long1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1772
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1776
::exit(___);}
#if 0
#line 1772
{ 
#line 1773
int4 tmp; 
#line 1774
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1775
(*retVal) = make_long1(tmp.x); 
#line 1776
} 
#endif
#line 1778 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(long2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1779
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1783
::exit(___);}
#if 0
#line 1779
{ 
#line 1780
int4 tmp; 
#line 1781
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1782
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 1783
} 
#endif
#line 1785 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(long4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1786
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1790
::exit(___);}
#if 0
#line 1786
{ 
#line 1787
int4 tmp; 
#line 1788
__tex_2d_array_v4s32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1789
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1790
} 
#endif
#line 1792 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1793
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1797
::exit(___);}
#if 0
#line 1793
{ 
#line 1794
uint4 tmp; 
#line 1795
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1796
(*retVal) = ((unsigned long)(tmp.x)); 
#line 1797
} 
#endif
#line 1799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1800
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1804
::exit(___);}
#if 0
#line 1800
{ 
#line 1801
uint4 tmp; 
#line 1802
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1803
(*retVal) = make_ulong1(tmp.x); 
#line 1804
} 
#endif
#line 1806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1807
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1811
::exit(___);}
#if 0
#line 1807
{ 
#line 1808
uint4 tmp; 
#line 1809
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1810
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 1811
} 
#endif
#line 1813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1814
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1818
::exit(___);}
#if 0
#line 1814
{ 
#line 1815
uint4 tmp; 
#line 1816
__tex_2d_array_v4u32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1817
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1818
} 
#endif
#line 1829 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1830
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1834
::exit(___);}
#if 0
#line 1830
{ 
#line 1831
float4 tmp; 
#line 1832
__tex_2d_array_v4f32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1833
(*retVal) = (tmp.x); 
#line 1834
} 
#endif
#line 1836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1837
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1841
::exit(___);}
#if 0
#line 1837
{ 
#line 1838
float4 tmp; 
#line 1839
__tex_2d_array_v4f32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1840
(*retVal) = make_float1(tmp.x); 
#line 1841
} 
#endif
#line 1843 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1844
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1848
::exit(___);}
#if 0
#line 1844
{ 
#line 1845
float4 tmp; 
#line 1846
__tex_2d_array_v4f32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1847
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 1848
} 
#endif
#line 1850 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayered(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer) 
#line 1851
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;
#line 1855
::exit(___);}
#if 0
#line 1851
{ 
#line 1852
float4 tmp; 
#line 1853
__tex_2d_array_v4f32_f32(texObject, layer, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1854
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1855
} 
#endif
#line 1863 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1864
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 1864 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 1869 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 1870
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1872 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 1873
} 
#endif
#line 1874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1875
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1879
::exit(___);}
#if 0
#line 1875
{ 
#line 1876
int4 tmp; 
#line 1877
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1878
(*retVal) = ((signed char)(tmp.x)); 
#line 1879
} 
#endif
#line 1881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1882
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1886
::exit(___);}
#if 0
#line 1882
{ 
#line 1883
int4 tmp; 
#line 1884
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1885
(*retVal) = make_char1(tmp.x); 
#line 1886
} 
#endif
#line 1888 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1889
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1893
::exit(___);}
#if 0
#line 1889
{ 
#line 1890
int4 tmp; 
#line 1891
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1892
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 1893
} 
#endif
#line 1895 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1896
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1900
::exit(___);}
#if 0
#line 1896
{ 
#line 1897
int4 tmp; 
#line 1898
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1899
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1900
} 
#endif
#line 1902 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1903
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1907
::exit(___);}
#if 0
#line 1903
{ 
#line 1904
uint4 tmp; 
#line 1905
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1906
(*retVal) = ((unsigned char)(tmp.x)); 
#line 1907
} 
#endif
#line 1909 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1910
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1914
::exit(___);}
#if 0
#line 1910
{ 
#line 1911
uint4 tmp; 
#line 1912
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1913
(*retVal) = make_uchar1(tmp.x); 
#line 1914
} 
#endif
#line 1916 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1917
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1921
::exit(___);}
#if 0
#line 1917
{ 
#line 1918
uint4 tmp; 
#line 1919
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1920
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 1921
} 
#endif
#line 1923 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1924
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1928
::exit(___);}
#if 0
#line 1924
{ 
#line 1925
uint4 tmp; 
#line 1926
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1927
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1928
} 
#endif
#line 1936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(short *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1937
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1941
::exit(___);}
#if 0
#line 1937
{ 
#line 1938
int4 tmp; 
#line 1939
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1940
(*retVal) = ((short)(tmp.x)); 
#line 1941
} 
#endif
#line 1943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1944
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1948
::exit(___);}
#if 0
#line 1944
{ 
#line 1945
int4 tmp; 
#line 1946
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1947
(*retVal) = make_short1(tmp.x); 
#line 1948
} 
#endif
#line 1950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1951
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1955
::exit(___);}
#if 0
#line 1951
{ 
#line 1952
int4 tmp; 
#line 1953
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1954
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 1955
} 
#endif
#line 1957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1958
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1962
::exit(___);}
#if 0
#line 1958
{ 
#line 1959
int4 tmp; 
#line 1960
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1961
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1962
} 
#endif
#line 1964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1965
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1969
::exit(___);}
#if 0
#line 1965
{ 
#line 1966
uint4 tmp; 
#line 1967
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1968
(*retVal) = ((unsigned short)(tmp.x)); 
#line 1969
} 
#endif
#line 1971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1972
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1976
::exit(___);}
#if 0
#line 1972
{ 
#line 1973
uint4 tmp; 
#line 1974
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1975
(*retVal) = make_ushort1(tmp.x); 
#line 1976
} 
#endif
#line 1978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1979
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1983
::exit(___);}
#if 0
#line 1979
{ 
#line 1980
uint4 tmp; 
#line 1981
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1982
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 1983
} 
#endif
#line 1985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1986
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 1990
::exit(___);}
#if 0
#line 1986
{ 
#line 1987
uint4 tmp; 
#line 1988
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 1989
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 1990
} 
#endif
#line 1998 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(int *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 1999
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2003
::exit(___);}
#if 0
#line 1999
{ 
#line 2000
int4 tmp; 
#line 2001
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2002
(*retVal) = (tmp.x); 
#line 2003
} 
#endif
#line 2005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2006
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2010
::exit(___);}
#if 0
#line 2006
{ 
#line 2007
int4 tmp; 
#line 2008
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2009
(*retVal) = make_int1(tmp.x); 
#line 2010
} 
#endif
#line 2012 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2013
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2017
::exit(___);}
#if 0
#line 2013
{ 
#line 2014
int4 tmp; 
#line 2015
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2016
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 2017
} 
#endif
#line 2019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2020
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2024
::exit(___);}
#if 0
#line 2020
{ 
#line 2021
int4 tmp; 
#line 2022
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2023
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2024
} 
#endif
#line 2026 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2027
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2031
::exit(___);}
#if 0
#line 2027
{ 
#line 2028
uint4 tmp; 
#line 2029
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2030
(*retVal) = (tmp.x); 
#line 2031
} 
#endif
#line 2033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2034
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2038
::exit(___);}
#if 0
#line 2034
{ 
#line 2035
uint4 tmp; 
#line 2036
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2037
(*retVal) = make_uint1(tmp.x); 
#line 2038
} 
#endif
#line 2040 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2041
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2045
::exit(___);}
#if 0
#line 2041
{ 
#line 2042
uint4 tmp; 
#line 2043
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2044
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 2045
} 
#endif
#line 2047 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2048
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2052
::exit(___);}
#if 0
#line 2048
{ 
#line 2049
uint4 tmp; 
#line 2050
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2051
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2052
} 
#endif
#line 2062 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(long *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2063
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2067
::exit(___);}
#if 0
#line 2063
{ 
#line 2064
int4 tmp; 
#line 2065
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2066
(*retVal) = ((long)(tmp.x)); 
#line 2067
} 
#endif
#line 2069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2070
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2074
::exit(___);}
#if 0
#line 2070
{ 
#line 2071
int4 tmp; 
#line 2072
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2073
(*retVal) = make_long1(tmp.x); 
#line 2074
} 
#endif
#line 2076 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2077
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2081
::exit(___);}
#if 0
#line 2077
{ 
#line 2078
int4 tmp; 
#line 2079
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2080
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 2081
} 
#endif
#line 2083 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2084
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2088
::exit(___);}
#if 0
#line 2084
{ 
#line 2085
int4 tmp; 
#line 2086
__tex_cube_v4s32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2087
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2088
} 
#endif
#line 2090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2091
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2095
::exit(___);}
#if 0
#line 2091
{ 
#line 2092
uint4 tmp; 
#line 2093
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2094
(*retVal) = ((unsigned long)(tmp.x)); 
#line 2095
} 
#endif
#line 2097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2098
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2102
::exit(___);}
#if 0
#line 2098
{ 
#line 2099
uint4 tmp; 
#line 2100
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2101
(*retVal) = make_ulong1(tmp.x); 
#line 2102
} 
#endif
#line 2104 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2105
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2109
::exit(___);}
#if 0
#line 2105
{ 
#line 2106
uint4 tmp; 
#line 2107
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2108
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 2109
} 
#endif
#line 2111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2112
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2116
::exit(___);}
#if 0
#line 2112
{ 
#line 2113
uint4 tmp; 
#line 2114
__tex_cube_v4u32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2115
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2116
} 
#endif
#line 2127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(float *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2128
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2132
::exit(___);}
#if 0
#line 2128
{ 
#line 2129
float4 tmp; 
#line 2130
__tex_cube_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2131
(*retVal) = (tmp.x); 
#line 2132
} 
#endif
#line 2134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2135
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2139
::exit(___);}
#if 0
#line 2135
{ 
#line 2136
float4 tmp; 
#line 2137
__tex_cube_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2138
(*retVal) = make_float1(tmp.x); 
#line 2139
} 
#endif
#line 2141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2142
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2146
::exit(___);}
#if 0
#line 2142
{ 
#line 2143
float4 tmp; 
#line 2144
__tex_cube_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2145
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 2146
} 
#endif
#line 2148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemap(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z) 
#line 2149
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;
#line 2153
::exit(___);}
#if 0
#line 2149
{ 
#line 2150
float4 tmp; 
#line 2151
__tex_cube_v4f32_f32(texObject, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2152
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2153
} 
#endif
#line 2161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2162
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 2162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 2167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 2168
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 2171
} 
#endif
#line 2172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2173
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2177
::exit(___);}
#if 0
#line 2173
{ 
#line 2174
int4 tmp; 
#line 2175
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2176
(*retVal) = ((signed char)(tmp.x)); 
#line 2177
} 
#endif
#line 2179 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2180
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2184
::exit(___);}
#if 0
#line 2180
{ 
#line 2181
int4 tmp; 
#line 2182
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2183
(*retVal) = make_char1(tmp.x); 
#line 2184
} 
#endif
#line 2186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2187
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2191
::exit(___);}
#if 0
#line 2187
{ 
#line 2188
int4 tmp; 
#line 2189
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2190
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 2191
} 
#endif
#line 2193 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2194
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2198
::exit(___);}
#if 0
#line 2194
{ 
#line 2195
int4 tmp; 
#line 2196
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2197
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2198
} 
#endif
#line 2200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2201
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2205
::exit(___);}
#if 0
#line 2201
{ 
#line 2202
uint4 tmp; 
#line 2203
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2204
(*retVal) = ((unsigned char)(tmp.x)); 
#line 2205
} 
#endif
#line 2207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2208
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2212
::exit(___);}
#if 0
#line 2208
{ 
#line 2209
uint4 tmp; 
#line 2210
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2211
(*retVal) = make_uchar1(tmp.x); 
#line 2212
} 
#endif
#line 2214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2215
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2219
::exit(___);}
#if 0
#line 2215
{ 
#line 2216
uint4 tmp; 
#line 2217
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2218
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 2219
} 
#endif
#line 2221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2222
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2226
::exit(___);}
#if 0
#line 2222
{ 
#line 2223
uint4 tmp; 
#line 2224
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2225
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2226
} 
#endif
#line 2234 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2235
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2239
::exit(___);}
#if 0
#line 2235
{ 
#line 2236
int4 tmp; 
#line 2237
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2238
(*retVal) = ((short)(tmp.x)); 
#line 2239
} 
#endif
#line 2241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2242
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2246
::exit(___);}
#if 0
#line 2242
{ 
#line 2243
int4 tmp; 
#line 2244
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2245
(*retVal) = make_short1(tmp.x); 
#line 2246
} 
#endif
#line 2248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2249
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2253
::exit(___);}
#if 0
#line 2249
{ 
#line 2250
int4 tmp; 
#line 2251
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2252
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 2253
} 
#endif
#line 2255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2256
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2260
::exit(___);}
#if 0
#line 2256
{ 
#line 2257
int4 tmp; 
#line 2258
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2259
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2260
} 
#endif
#line 2262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2263
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2267
::exit(___);}
#if 0
#line 2263
{ 
#line 2264
uint4 tmp; 
#line 2265
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2266
(*retVal) = ((unsigned short)(tmp.x)); 
#line 2267
} 
#endif
#line 2269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2270
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2274
::exit(___);}
#if 0
#line 2270
{ 
#line 2271
uint4 tmp; 
#line 2272
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2273
(*retVal) = make_ushort1(tmp.x); 
#line 2274
} 
#endif
#line 2276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2277
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2281
::exit(___);}
#if 0
#line 2277
{ 
#line 2278
uint4 tmp; 
#line 2279
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2280
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 2281
} 
#endif
#line 2283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2284
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2288
::exit(___);}
#if 0
#line 2284
{ 
#line 2285
uint4 tmp; 
#line 2286
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2287
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2288
} 
#endif
#line 2296 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2297
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2301
::exit(___);}
#if 0
#line 2297
{ 
#line 2298
int4 tmp; 
#line 2299
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2300
(*retVal) = (tmp.x); 
#line 2301
} 
#endif
#line 2303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2304
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2308
::exit(___);}
#if 0
#line 2304
{ 
#line 2305
int4 tmp; 
#line 2306
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2307
(*retVal) = make_int1(tmp.x); 
#line 2308
} 
#endif
#line 2310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2311
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2315
::exit(___);}
#if 0
#line 2311
{ 
#line 2312
int4 tmp; 
#line 2313
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2314
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 2315
} 
#endif
#line 2317 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2318
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2322
::exit(___);}
#if 0
#line 2318
{ 
#line 2319
int4 tmp; 
#line 2320
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2321
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2322
} 
#endif
#line 2324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2325
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2329
::exit(___);}
#if 0
#line 2325
{ 
#line 2326
uint4 tmp; 
#line 2327
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2328
(*retVal) = (tmp.x); 
#line 2329
} 
#endif
#line 2331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2332
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2336
::exit(___);}
#if 0
#line 2332
{ 
#line 2333
uint4 tmp; 
#line 2334
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2335
(*retVal) = make_uint1(tmp.x); 
#line 2336
} 
#endif
#line 2338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2339
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2343
::exit(___);}
#if 0
#line 2339
{ 
#line 2340
uint4 tmp; 
#line 2341
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2342
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 2343
} 
#endif
#line 2345 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2346
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2350
::exit(___);}
#if 0
#line 2346
{ 
#line 2347
uint4 tmp; 
#line 2348
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2349
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2350
} 
#endif
#line 2360 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(long *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2361
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2365
::exit(___);}
#if 0
#line 2361
{ 
#line 2362
int4 tmp; 
#line 2363
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2364
(*retVal) = ((long)(tmp.x)); 
#line 2365
} 
#endif
#line 2367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2368
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2372
::exit(___);}
#if 0
#line 2368
{ 
#line 2369
int4 tmp; 
#line 2370
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2371
(*retVal) = make_long1(tmp.x); 
#line 2372
} 
#endif
#line 2374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2375
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2379
::exit(___);}
#if 0
#line 2375
{ 
#line 2376
int4 tmp; 
#line 2377
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2378
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 2379
} 
#endif
#line 2381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2382
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2386
::exit(___);}
#if 0
#line 2382
{ 
#line 2383
int4 tmp; 
#line 2384
__tex_cube_array_v4s32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2385
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2386
} 
#endif
#line 2388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2389
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2393
::exit(___);}
#if 0
#line 2389
{ 
#line 2390
uint4 tmp; 
#line 2391
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2392
(*retVal) = ((unsigned long)(tmp.x)); 
#line 2393
} 
#endif
#line 2395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2396
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2400
::exit(___);}
#if 0
#line 2396
{ 
#line 2397
uint4 tmp; 
#line 2398
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2399
(*retVal) = make_ulong1(tmp.x); 
#line 2400
} 
#endif
#line 2402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2403
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2407
::exit(___);}
#if 0
#line 2403
{ 
#line 2404
uint4 tmp; 
#line 2405
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2406
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 2407
} 
#endif
#line 2409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2410
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2414
::exit(___);}
#if 0
#line 2410
{ 
#line 2411
uint4 tmp; 
#line 2412
__tex_cube_array_v4u32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2413
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2414
} 
#endif
#line 2425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2426
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2430
::exit(___);}
#if 0
#line 2426
{ 
#line 2427
float4 tmp; 
#line 2428
__tex_cube_array_v4f32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2429
(*retVal) = (tmp.x); 
#line 2430
} 
#endif
#line 2432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2433
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2437
::exit(___);}
#if 0
#line 2433
{ 
#line 2434
float4 tmp; 
#line 2435
__tex_cube_array_v4f32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2436
(*retVal) = make_float1(tmp.x); 
#line 2437
} 
#endif
#line 2439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2440
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2444
::exit(___);}
#if 0
#line 2440
{ 
#line 2441
float4 tmp; 
#line 2442
__tex_cube_array_v4f32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2443
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 2444
} 
#endif
#line 2446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayered(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer) 
#line 2447
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;
#line 2451
::exit(___);}
#if 0
#line 2447
{ 
#line 2448
float4 tmp; 
#line 2449
__tex_cube_array_v4f32_f32(texObject, layer, x, y, z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2450
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2451
} 
#endif
#line 2459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(char *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2460
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2475
::exit(___);}
#if 0
#line 2460
{ 
#line 2461
int4 tmp; 
#line 2462
if (comp == 0) { 
#line 2463
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2464
} else { 
#line 2465
if (comp == 1) { 
#line 2466
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2467
} else { 
#line 2468
if (comp == 2) { 
#line 2469
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2470
} else { 
#line 2471
if (comp == 3) { 
#line 2472
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2473
}  }  }  }  
#line 2474
(*retVal) = ((char)(tmp.x)); 
#line 2475
} 
#endif
#line 2477 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2478
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2493
::exit(___);}
#if 0
#line 2478
{ 
#line 2479
int4 tmp; 
#line 2480
if (comp == 0) { 
#line 2481
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2482
} else { 
#line 2483
if (comp == 1) { 
#line 2484
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2485
} else { 
#line 2486
if (comp == 2) { 
#line 2487
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2488
} else { 
#line 2489
if (comp == 3) { 
#line 2490
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2491
}  }  }  }  
#line 2492
(*retVal) = ((signed char)(tmp.x)); 
#line 2493
} 
#endif
#line 2495 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2496
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2511
::exit(___);}
#if 0
#line 2496
{ 
#line 2497
int4 tmp; 
#line 2498
if (comp == 0) { 
#line 2499
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2500
} else { 
#line 2501
if (comp == 1) { 
#line 2502
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2503
} else { 
#line 2504
if (comp == 2) { 
#line 2505
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2506
} else { 
#line 2507
if (comp == 3) { 
#line 2508
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2509
}  }  }  }  
#line 2510
(*retVal) = make_char1(tmp.x); 
#line 2511
} 
#endif
#line 2513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2514
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2529
::exit(___);}
#if 0
#line 2514
{ 
#line 2515
int4 tmp; 
#line 2516
if (comp == 0) { 
#line 2517
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2518
} else { 
#line 2519
if (comp == 1) { 
#line 2520
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2521
} else { 
#line 2522
if (comp == 2) { 
#line 2523
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2524
} else { 
#line 2525
if (comp == 3) { 
#line 2526
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2527
}  }  }  }  
#line 2528
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 2529
} 
#endif
#line 2531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2532
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2547
::exit(___);}
#if 0
#line 2532
{ 
#line 2533
int4 tmp; 
#line 2534
if (comp == 0) { 
#line 2535
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2536
} else { 
#line 2537
if (comp == 1) { 
#line 2538
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2539
} else { 
#line 2540
if (comp == 2) { 
#line 2541
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2542
} else { 
#line 2543
if (comp == 3) { 
#line 2544
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2545
}  }  }  }  
#line 2546
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2547
} 
#endif
#line 2549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2550
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2565
::exit(___);}
#if 0
#line 2550
{ 
#line 2551
uint4 tmp; 
#line 2552
if (comp == 0) { 
#line 2553
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2554
} else { 
#line 2555
if (comp == 1) { 
#line 2556
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2557
} else { 
#line 2558
if (comp == 2) { 
#line 2559
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2560
} else { 
#line 2561
if (comp == 3) { 
#line 2562
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2563
}  }  }  }  
#line 2564
(*retVal) = ((unsigned char)(tmp.x)); 
#line 2565
} 
#endif
#line 2567 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2568
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2583
::exit(___);}
#if 0
#line 2568
{ 
#line 2569
uint4 tmp; 
#line 2570
if (comp == 0) { 
#line 2571
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2572
} else { 
#line 2573
if (comp == 1) { 
#line 2574
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2575
} else { 
#line 2576
if (comp == 2) { 
#line 2577
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2578
} else { 
#line 2579
if (comp == 3) { 
#line 2580
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2581
}  }  }  }  
#line 2582
(*retVal) = make_uchar1(tmp.x); 
#line 2583
} 
#endif
#line 2585 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2586
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2601
::exit(___);}
#if 0
#line 2586
{ 
#line 2587
uint4 tmp; 
#line 2588
if (comp == 0) { 
#line 2589
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2590
} else { 
#line 2591
if (comp == 1) { 
#line 2592
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2593
} else { 
#line 2594
if (comp == 2) { 
#line 2595
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2596
} else { 
#line 2597
if (comp == 3) { 
#line 2598
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2599
}  }  }  }  
#line 2600
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 2601
} 
#endif
#line 2603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2604
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2619
::exit(___);}
#if 0
#line 2604
{ 
#line 2605
uint4 tmp; 
#line 2606
if (comp == 0) { 
#line 2607
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2608
} else { 
#line 2609
if (comp == 1) { 
#line 2610
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2611
} else { 
#line 2612
if (comp == 2) { 
#line 2613
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2614
} else { 
#line 2615
if (comp == 3) { 
#line 2616
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2617
}  }  }  }  
#line 2618
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2619
} 
#endif
#line 2627 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(short *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2628
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2643
::exit(___);}
#if 0
#line 2628
{ 
#line 2629
int4 tmp; 
#line 2630
if (comp == 0) { 
#line 2631
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2632
} else { 
#line 2633
if (comp == 1) { 
#line 2634
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2635
} else { 
#line 2636
if (comp == 2) { 
#line 2637
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2638
} else { 
#line 2639
if (comp == 3) { 
#line 2640
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2641
}  }  }  }  
#line 2642
(*retVal) = ((short)(tmp.x)); 
#line 2643
} 
#endif
#line 2645 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2646
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2661
::exit(___);}
#if 0
#line 2646
{ 
#line 2647
int4 tmp; 
#line 2648
if (comp == 0) { 
#line 2649
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2650
} else { 
#line 2651
if (comp == 1) { 
#line 2652
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2653
} else { 
#line 2654
if (comp == 2) { 
#line 2655
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2656
} else { 
#line 2657
if (comp == 3) { 
#line 2658
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2659
}  }  }  }  
#line 2660
(*retVal) = make_short1(tmp.x); 
#line 2661
} 
#endif
#line 2663 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2664
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2679
::exit(___);}
#if 0
#line 2664
{ 
#line 2665
int4 tmp; 
#line 2666
if (comp == 0) { 
#line 2667
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2668
} else { 
#line 2669
if (comp == 1) { 
#line 2670
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2671
} else { 
#line 2672
if (comp == 2) { 
#line 2673
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2674
} else { 
#line 2675
if (comp == 3) { 
#line 2676
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2677
}  }  }  }  
#line 2678
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 2679
} 
#endif
#line 2681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2682
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2697
::exit(___);}
#if 0
#line 2682
{ 
#line 2683
int4 tmp; 
#line 2684
if (comp == 0) { 
#line 2685
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2686
} else { 
#line 2687
if (comp == 1) { 
#line 2688
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2689
} else { 
#line 2690
if (comp == 2) { 
#line 2691
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2692
} else { 
#line 2693
if (comp == 3) { 
#line 2694
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2695
}  }  }  }  
#line 2696
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2697
} 
#endif
#line 2699 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2700
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2715
::exit(___);}
#if 0
#line 2700
{ 
#line 2701
uint4 tmp; 
#line 2702
if (comp == 0) { 
#line 2703
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2704
} else { 
#line 2705
if (comp == 1) { 
#line 2706
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2707
} else { 
#line 2708
if (comp == 2) { 
#line 2709
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2710
} else { 
#line 2711
if (comp == 3) { 
#line 2712
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2713
}  }  }  }  
#line 2714
(*retVal) = ((unsigned short)(tmp.x)); 
#line 2715
} 
#endif
#line 2717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2718
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2733
::exit(___);}
#if 0
#line 2718
{ 
#line 2719
uint4 tmp; 
#line 2720
if (comp == 0) { 
#line 2721
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2722
} else { 
#line 2723
if (comp == 1) { 
#line 2724
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2725
} else { 
#line 2726
if (comp == 2) { 
#line 2727
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2728
} else { 
#line 2729
if (comp == 3) { 
#line 2730
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2731
}  }  }  }  
#line 2732
(*retVal) = make_ushort1(tmp.x); 
#line 2733
} 
#endif
#line 2735 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2736
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2751
::exit(___);}
#if 0
#line 2736
{ 
#line 2737
uint4 tmp; 
#line 2738
if (comp == 0) { 
#line 2739
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2740
} else { 
#line 2741
if (comp == 1) { 
#line 2742
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2743
} else { 
#line 2744
if (comp == 2) { 
#line 2745
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2746
} else { 
#line 2747
if (comp == 3) { 
#line 2748
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2749
}  }  }  }  
#line 2750
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 2751
} 
#endif
#line 2753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2754
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2769
::exit(___);}
#if 0
#line 2754
{ 
#line 2755
uint4 tmp; 
#line 2756
if (comp == 0) { 
#line 2757
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2758
} else { 
#line 2759
if (comp == 1) { 
#line 2760
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2761
} else { 
#line 2762
if (comp == 2) { 
#line 2763
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2764
} else { 
#line 2765
if (comp == 3) { 
#line 2766
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2767
}  }  }  }  
#line 2768
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2769
} 
#endif
#line 2777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(int *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2778
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2793
::exit(___);}
#if 0
#line 2778
{ 
#line 2779
int4 tmp; 
#line 2780
if (comp == 0) { 
#line 2781
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2782
} else { 
#line 2783
if (comp == 1) { 
#line 2784
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2785
} else { 
#line 2786
if (comp == 2) { 
#line 2787
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2788
} else { 
#line 2789
if (comp == 3) { 
#line 2790
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2791
}  }  }  }  
#line 2792
(*retVal) = (tmp.x); 
#line 2793
} 
#endif
#line 2795 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2796
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2811
::exit(___);}
#if 0
#line 2796
{ 
#line 2797
int4 tmp; 
#line 2798
if (comp == 0) { 
#line 2799
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2800
} else { 
#line 2801
if (comp == 1) { 
#line 2802
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2803
} else { 
#line 2804
if (comp == 2) { 
#line 2805
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2806
} else { 
#line 2807
if (comp == 3) { 
#line 2808
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2809
}  }  }  }  
#line 2810
(*retVal) = make_int1(tmp.x); 
#line 2811
} 
#endif
#line 2813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2814
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2829
::exit(___);}
#if 0
#line 2814
{ 
#line 2815
int4 tmp; 
#line 2816
if (comp == 0) { 
#line 2817
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2818
} else { 
#line 2819
if (comp == 1) { 
#line 2820
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2821
} else { 
#line 2822
if (comp == 2) { 
#line 2823
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2824
} else { 
#line 2825
if (comp == 3) { 
#line 2826
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2827
}  }  }  }  
#line 2828
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 2829
} 
#endif
#line 2831 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2832
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2847
::exit(___);}
#if 0
#line 2832
{ 
#line 2833
int4 tmp; 
#line 2834
if (comp == 0) { 
#line 2835
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2836
} else { 
#line 2837
if (comp == 1) { 
#line 2838
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2839
} else { 
#line 2840
if (comp == 2) { 
#line 2841
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2842
} else { 
#line 2843
if (comp == 3) { 
#line 2844
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2845
}  }  }  }  
#line 2846
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2847
} 
#endif
#line 2849 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2850
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2865
::exit(___);}
#if 0
#line 2850
{ 
#line 2851
uint4 tmp; 
#line 2852
if (comp == 0) { 
#line 2853
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2854
} else { 
#line 2855
if (comp == 1) { 
#line 2856
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2857
} else { 
#line 2858
if (comp == 2) { 
#line 2859
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2860
} else { 
#line 2861
if (comp == 3) { 
#line 2862
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2863
}  }  }  }  
#line 2864
(*retVal) = (tmp.x); 
#line 2865
} 
#endif
#line 2867 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2868
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2883
::exit(___);}
#if 0
#line 2868
{ 
#line 2869
uint4 tmp; 
#line 2870
if (comp == 0) { 
#line 2871
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2872
} else { 
#line 2873
if (comp == 1) { 
#line 2874
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2875
} else { 
#line 2876
if (comp == 2) { 
#line 2877
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2878
} else { 
#line 2879
if (comp == 3) { 
#line 2880
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2881
}  }  }  }  
#line 2882
(*retVal) = make_uint1(tmp.x); 
#line 2883
} 
#endif
#line 2885 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2886
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2901
::exit(___);}
#if 0
#line 2886
{ 
#line 2887
uint4 tmp; 
#line 2888
if (comp == 0) { 
#line 2889
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2890
} else { 
#line 2891
if (comp == 1) { 
#line 2892
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2893
} else { 
#line 2894
if (comp == 2) { 
#line 2895
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2896
} else { 
#line 2897
if (comp == 3) { 
#line 2898
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2899
}  }  }  }  
#line 2900
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 2901
} 
#endif
#line 2903 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2904
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2919
::exit(___);}
#if 0
#line 2904
{ 
#line 2905
uint4 tmp; 
#line 2906
if (comp == 0) { 
#line 2907
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2908
} else { 
#line 2909
if (comp == 1) { 
#line 2910
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2911
} else { 
#line 2912
if (comp == 2) { 
#line 2913
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2914
} else { 
#line 2915
if (comp == 3) { 
#line 2916
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2917
}  }  }  }  
#line 2918
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2919
} 
#endif
#line 2927 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(long *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2928
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2943
::exit(___);}
#if 0
#line 2928
{ 
#line 2929
int4 tmp; 
#line 2930
if (comp == 0) { 
#line 2931
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2932
} else { 
#line 2933
if (comp == 1) { 
#line 2934
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2935
} else { 
#line 2936
if (comp == 2) { 
#line 2937
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2938
} else { 
#line 2939
if (comp == 3) { 
#line 2940
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2941
}  }  }  }  
#line 2942
(*retVal) = ((long)(tmp.x)); 
#line 2943
} 
#endif
#line 2945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(long1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2946
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2961
::exit(___);}
#if 0
#line 2946
{ 
#line 2947
int4 tmp; 
#line 2948
if (comp == 0) { 
#line 2949
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2950
} else { 
#line 2951
if (comp == 1) { 
#line 2952
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2953
} else { 
#line 2954
if (comp == 2) { 
#line 2955
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2956
} else { 
#line 2957
if (comp == 3) { 
#line 2958
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2959
}  }  }  }  
#line 2960
(*retVal) = make_long1(tmp.x); 
#line 2961
} 
#endif
#line 2963 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(long2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2964
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2979
::exit(___);}
#if 0
#line 2964
{ 
#line 2965
int4 tmp; 
#line 2966
if (comp == 0) { 
#line 2967
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2968
} else { 
#line 2969
if (comp == 1) { 
#line 2970
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2971
} else { 
#line 2972
if (comp == 2) { 
#line 2973
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2974
} else { 
#line 2975
if (comp == 3) { 
#line 2976
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2977
}  }  }  }  
#line 2978
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 2979
} 
#endif
#line 2981 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(long4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 2982
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 2997
::exit(___);}
#if 0
#line 2982
{ 
#line 2983
int4 tmp; 
#line 2984
if (comp == 0) { 
#line 2985
__tld4_r_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2986
} else { 
#line 2987
if (comp == 1) { 
#line 2988
__tld4_g_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2989
} else { 
#line 2990
if (comp == 2) { 
#line 2991
__tld4_b_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2992
} else { 
#line 2993
if (comp == 3) { 
#line 2994
__tld4_a_2d_v4s32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 2995
}  }  }  }  
#line 2996
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 2997
} 
#endif
#line 2999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 3000
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 3015
::exit(___);}
#if 0
#line 3000
{ 
#line 3001
uint4 tmp; 
#line 3002
if (comp == 0) { 
#line 3003
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3004
} else { 
#line 3005
if (comp == 1) { 
#line 3006
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3007
} else { 
#line 3008
if (comp == 2) { 
#line 3009
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3010
} else { 
#line 3011
if (comp == 3) { 
#line 3012
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3013
}  }  }  }  
#line 3014
(*retVal) = ((unsigned long)(tmp.x)); 
#line 3015
} 
#endif
#line 3017 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 3018
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 3033
::exit(___);}
#if 0
#line 3018
{ 
#line 3019
uint4 tmp; 
#line 3020
if (comp == 0) { 
#line 3021
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3022
} else { 
#line 3023
if (comp == 1) { 
#line 3024
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3025
} else { 
#line 3026
if (comp == 2) { 
#line 3027
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3028
} else { 
#line 3029
if (comp == 3) { 
#line 3030
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3031
}  }  }  }  
#line 3032
(*retVal) = make_ulong1(tmp.x); 
#line 3033
} 
#endif
#line 3035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 3036
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 3051
::exit(___);}
#if 0
#line 3036
{ 
#line 3037
uint4 tmp; 
#line 3038
if (comp == 0) { 
#line 3039
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3040
} else { 
#line 3041
if (comp == 1) { 
#line 3042
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3043
} else { 
#line 3044
if (comp == 2) { 
#line 3045
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3046
} else { 
#line 3047
if (comp == 3) { 
#line 3048
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3049
}  }  }  }  
#line 3050
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 3051
} 
#endif
#line 3053 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 3054
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 3069
::exit(___);}
#if 0
#line 3054
{ 
#line 3055
uint4 tmp; 
#line 3056
if (comp == 0) { 
#line 3057
__tld4_r_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3058
} else { 
#line 3059
if (comp == 1) { 
#line 3060
__tld4_g_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3061
} else { 
#line 3062
if (comp == 2) { 
#line 3063
__tld4_b_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3064
} else { 
#line 3065
if (comp == 3) { 
#line 3066
__tld4_a_2d_v4u32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3067
}  }  }  }  
#line 3068
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3069
} 
#endif
#line 3077 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(float *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 3078
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 3093
::exit(___);}
#if 0
#line 3078
{ 
#line 3079
float4 tmp; 
#line 3080
if (comp == 0) { 
#line 3081
__tld4_r_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3082
} else { 
#line 3083
if (comp == 1) { 
#line 3084
__tld4_g_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3085
} else { 
#line 3086
if (comp == 2) { 
#line 3087
__tld4_b_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3088
} else { 
#line 3089
if (comp == 3) { 
#line 3090
__tld4_a_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3091
}  }  }  }  
#line 3092
(*retVal) = (tmp.x); 
#line 3093
} 
#endif
#line 3095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 3096
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 3111
::exit(___);}
#if 0
#line 3096
{ 
#line 3097
float4 tmp; 
#line 3098
if (comp == 0) { 
#line 3099
__tld4_r_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3100
} else { 
#line 3101
if (comp == 1) { 
#line 3102
__tld4_g_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3103
} else { 
#line 3104
if (comp == 2) { 
#line 3105
__tld4_b_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3106
} else { 
#line 3107
if (comp == 3) { 
#line 3108
__tld4_a_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3109
}  }  }  }  
#line 3110
(*retVal) = make_float1(tmp.x); 
#line 3111
} 
#endif
#line 3113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 3114
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 3129
::exit(___);}
#if 0
#line 3114
{ 
#line 3115
float4 tmp; 
#line 3116
if (comp == 0) { 
#line 3117
__tld4_r_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3118
} else { 
#line 3119
if (comp == 1) { 
#line 3120
__tld4_g_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3121
} else { 
#line 3122
if (comp == 2) { 
#line 3123
__tld4_b_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3124
} else { 
#line 3125
if (comp == 3) { 
#line 3126
__tld4_a_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3127
}  }  }  }  
#line 3128
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 3129
} 
#endif
#line 3131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2Dgather(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp) 
#line 3132
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)comp;
#line 3147
::exit(___);}
#if 0
#line 3132
{ 
#line 3133
float4 tmp; 
#line 3134
if (comp == 0) { 
#line 3135
__tld4_r_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3136
} else { 
#line 3137
if (comp == 1) { 
#line 3138
__tld4_g_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3139
} else { 
#line 3140
if (comp == 2) { 
#line 3141
__tld4_b_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3142
} else { 
#line 3143
if (comp == 3) { 
#line 3144
__tld4_a_2d_v4f32_f32(texObject, x, y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3145
}  }  }  }  
#line 3146
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3147
} 
#endif
#line 3155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(char *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3156
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3165 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 3156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 3161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 3162
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 3165
} 
#endif
#line 3166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3167
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3171
::exit(___);}
#if 0
#line 3167
{ 
#line 3168
int4 tmp; 
#line 3169
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3170
(*retVal) = ((signed char)(tmp.x)); 
#line 3171
} 
#endif
#line 3173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3174
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3178
::exit(___);}
#if 0
#line 3174
{ 
#line 3175
int4 tmp; 
#line 3176
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3177
(*retVal) = make_char1(tmp.x); 
#line 3178
} 
#endif
#line 3180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3181
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3185
::exit(___);}
#if 0
#line 3181
{ 
#line 3182
int4 tmp; 
#line 3183
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3184
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 3185
} 
#endif
#line 3187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3188
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3192
::exit(___);}
#if 0
#line 3188
{ 
#line 3189
int4 tmp; 
#line 3190
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3191
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3192
} 
#endif
#line 3194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3195
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3199
::exit(___);}
#if 0
#line 3195
{ 
#line 3196
uint4 tmp; 
#line 3197
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3198
(*retVal) = ((unsigned char)(tmp.x)); 
#line 3199
} 
#endif
#line 3201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3202
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3206
::exit(___);}
#if 0
#line 3202
{ 
#line 3203
uint4 tmp; 
#line 3204
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3205
(*retVal) = make_uchar1(tmp.x); 
#line 3206
} 
#endif
#line 3208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3209
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3213
::exit(___);}
#if 0
#line 3209
{ 
#line 3210
uint4 tmp; 
#line 3211
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3212
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 3213
} 
#endif
#line 3215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3216
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3220
::exit(___);}
#if 0
#line 3216
{ 
#line 3217
uint4 tmp; 
#line 3218
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3219
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3220
} 
#endif
#line 3228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(short *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3229
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3233
::exit(___);}
#if 0
#line 3229
{ 
#line 3230
int4 tmp; 
#line 3231
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3232
(*retVal) = ((short)(tmp.x)); 
#line 3233
} 
#endif
#line 3235 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3236
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3240
::exit(___);}
#if 0
#line 3236
{ 
#line 3237
int4 tmp; 
#line 3238
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3239
(*retVal) = make_short1(tmp.x); 
#line 3240
} 
#endif
#line 3242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3243
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3247
::exit(___);}
#if 0
#line 3243
{ 
#line 3244
int4 tmp; 
#line 3245
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3246
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 3247
} 
#endif
#line 3249 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3250
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3254
::exit(___);}
#if 0
#line 3250
{ 
#line 3251
int4 tmp; 
#line 3252
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3253
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3254
} 
#endif
#line 3256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3257
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3261
::exit(___);}
#if 0
#line 3257
{ 
#line 3258
uint4 tmp; 
#line 3259
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3260
(*retVal) = ((unsigned short)(tmp.x)); 
#line 3261
} 
#endif
#line 3263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3264
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3268
::exit(___);}
#if 0
#line 3264
{ 
#line 3265
uint4 tmp; 
#line 3266
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3267
(*retVal) = make_ushort1(tmp.x); 
#line 3268
} 
#endif
#line 3270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3271
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3275
::exit(___);}
#if 0
#line 3271
{ 
#line 3272
uint4 tmp; 
#line 3273
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3274
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 3275
} 
#endif
#line 3277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3278
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3282
::exit(___);}
#if 0
#line 3278
{ 
#line 3279
uint4 tmp; 
#line 3280
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3281
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3282
} 
#endif
#line 3290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(int *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3291
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3295
::exit(___);}
#if 0
#line 3291
{ 
#line 3292
int4 tmp; 
#line 3293
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3294
(*retVal) = (tmp.x); 
#line 3295
} 
#endif
#line 3297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3298
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3302
::exit(___);}
#if 0
#line 3298
{ 
#line 3299
int4 tmp; 
#line 3300
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3301
(*retVal) = make_int1(tmp.x); 
#line 3302
} 
#endif
#line 3304 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3305
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3309
::exit(___);}
#if 0
#line 3305
{ 
#line 3306
int4 tmp; 
#line 3307
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3308
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 3309
} 
#endif
#line 3311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3312
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3316
::exit(___);}
#if 0
#line 3312
{ 
#line 3313
int4 tmp; 
#line 3314
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3315
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3316
} 
#endif
#line 3318 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3319
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3323
::exit(___);}
#if 0
#line 3319
{ 
#line 3320
uint4 tmp; 
#line 3321
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3322
(*retVal) = (tmp.x); 
#line 3323
} 
#endif
#line 3325 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3326
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3330
::exit(___);}
#if 0
#line 3326
{ 
#line 3327
uint4 tmp; 
#line 3328
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3329
(*retVal) = make_uint1(tmp.x); 
#line 3330
} 
#endif
#line 3332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3333
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3337
::exit(___);}
#if 0
#line 3333
{ 
#line 3334
uint4 tmp; 
#line 3335
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3336
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 3337
} 
#endif
#line 3339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3340
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3344
::exit(___);}
#if 0
#line 3340
{ 
#line 3341
uint4 tmp; 
#line 3342
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3343
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3344
} 
#endif
#line 3354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(long *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3355
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3359
::exit(___);}
#if 0
#line 3355
{ 
#line 3356
int4 tmp; 
#line 3357
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3358
(*retVal) = ((long)(tmp.x)); 
#line 3359
} 
#endif
#line 3361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(long1 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3362
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3366
::exit(___);}
#if 0
#line 3362
{ 
#line 3363
int4 tmp; 
#line 3364
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3365
(*retVal) = make_long1(tmp.x); 
#line 3366
} 
#endif
#line 3368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(long2 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3369
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3373
::exit(___);}
#if 0
#line 3369
{ 
#line 3370
int4 tmp; 
#line 3371
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3372
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 3373
} 
#endif
#line 3375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(long4 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3376
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3380
::exit(___);}
#if 0
#line 3376
{ 
#line 3377
int4 tmp; 
#line 3378
__tex_1d_level_v4s32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3379
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3380
} 
#endif
#line 3382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3383
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3387
::exit(___);}
#if 0
#line 3383
{ 
#line 3384
uint4 tmp; 
#line 3385
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3386
(*retVal) = ((unsigned long)(tmp.x)); 
#line 3387
} 
#endif
#line 3389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3390
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3394
::exit(___);}
#if 0
#line 3390
{ 
#line 3391
uint4 tmp; 
#line 3392
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3393
(*retVal) = make_ulong1(tmp.x); 
#line 3394
} 
#endif
#line 3396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3397
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3401
::exit(___);}
#if 0
#line 3397
{ 
#line 3398
uint4 tmp; 
#line 3399
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3400
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 3401
} 
#endif
#line 3403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3404
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3408
::exit(___);}
#if 0
#line 3404
{ 
#line 3405
uint4 tmp; 
#line 3406
__tex_1d_level_v4u32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3407
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3408
} 
#endif
#line 3419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(float *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3420
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3424
::exit(___);}
#if 0
#line 3420
{ 
#line 3421
float4 tmp; 
#line 3422
__tex_1d_level_v4f32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3423
(*retVal) = (tmp.x); 
#line 3424
} 
#endif
#line 3426 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3427
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3431
::exit(___);}
#if 0
#line 3427
{ 
#line 3428
float4 tmp; 
#line 3429
__tex_1d_level_v4f32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3430
(*retVal) = make_float1(tmp.x); 
#line 3431
} 
#endif
#line 3433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3434
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3438
::exit(___);}
#if 0
#line 3434
{ 
#line 3435
float4 tmp; 
#line 3436
__tex_1d_level_v4f32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3437
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 3438
} 
#endif
#line 3440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float level) 
#line 3441
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)level;
#line 3445
::exit(___);}
#if 0
#line 3441
{ 
#line 3442
float4 tmp; 
#line 3443
__tex_1d_level_v4f32_f32(texObject, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3444
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3445
} 
#endif
#line 3453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3454
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 3454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 3459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 3460
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 3463
} 
#endif
#line 3464 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3465
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3469
::exit(___);}
#if 0
#line 3465
{ 
#line 3466
int4 tmp; 
#line 3467
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3468
(*retVal) = ((signed char)(tmp.x)); 
#line 3469
} 
#endif
#line 3471 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3472
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3476
::exit(___);}
#if 0
#line 3472
{ 
#line 3473
int4 tmp; 
#line 3474
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3475
(*retVal) = make_char1(tmp.x); 
#line 3476
} 
#endif
#line 3478 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3479
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3483
::exit(___);}
#if 0
#line 3479
{ 
#line 3480
int4 tmp; 
#line 3481
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3482
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 3483
} 
#endif
#line 3485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3486
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3490
::exit(___);}
#if 0
#line 3486
{ 
#line 3487
int4 tmp; 
#line 3488
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3489
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3490
} 
#endif
#line 3492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3493
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3497
::exit(___);}
#if 0
#line 3493
{ 
#line 3494
uint4 tmp; 
#line 3495
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3496
(*retVal) = ((unsigned char)(tmp.x)); 
#line 3497
} 
#endif
#line 3499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3500
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3504
::exit(___);}
#if 0
#line 3500
{ 
#line 3501
uint4 tmp; 
#line 3502
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3503
(*retVal) = make_uchar1(tmp.x); 
#line 3504
} 
#endif
#line 3506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3507
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3511
::exit(___);}
#if 0
#line 3507
{ 
#line 3508
uint4 tmp; 
#line 3509
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3510
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 3511
} 
#endif
#line 3513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3514
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3518
::exit(___);}
#if 0
#line 3514
{ 
#line 3515
uint4 tmp; 
#line 3516
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3517
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3518
} 
#endif
#line 3526 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3527
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3531
::exit(___);}
#if 0
#line 3527
{ 
#line 3528
int4 tmp; 
#line 3529
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3530
(*retVal) = ((short)(tmp.x)); 
#line 3531
} 
#endif
#line 3533 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3534
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3538
::exit(___);}
#if 0
#line 3534
{ 
#line 3535
int4 tmp; 
#line 3536
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3537
(*retVal) = make_short1(tmp.x); 
#line 3538
} 
#endif
#line 3540 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3541
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3545
::exit(___);}
#if 0
#line 3541
{ 
#line 3542
int4 tmp; 
#line 3543
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3544
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 3545
} 
#endif
#line 3547 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3548
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3552
::exit(___);}
#if 0
#line 3548
{ 
#line 3549
int4 tmp; 
#line 3550
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3551
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3552
} 
#endif
#line 3554 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3555
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3559
::exit(___);}
#if 0
#line 3555
{ 
#line 3556
uint4 tmp; 
#line 3557
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3558
(*retVal) = ((unsigned short)(tmp.x)); 
#line 3559
} 
#endif
#line 3561 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3562
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3566
::exit(___);}
#if 0
#line 3562
{ 
#line 3563
uint4 tmp; 
#line 3564
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3565
(*retVal) = make_ushort1(tmp.x); 
#line 3566
} 
#endif
#line 3568 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3569
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3573
::exit(___);}
#if 0
#line 3569
{ 
#line 3570
uint4 tmp; 
#line 3571
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3572
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 3573
} 
#endif
#line 3575 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3576
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3580
::exit(___);}
#if 0
#line 3576
{ 
#line 3577
uint4 tmp; 
#line 3578
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3579
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3580
} 
#endif
#line 3588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3589
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3593
::exit(___);}
#if 0
#line 3589
{ 
#line 3590
int4 tmp; 
#line 3591
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3592
(*retVal) = (tmp.x); 
#line 3593
} 
#endif
#line 3595 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3596
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3600
::exit(___);}
#if 0
#line 3596
{ 
#line 3597
int4 tmp; 
#line 3598
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3599
(*retVal) = make_int1(tmp.x); 
#line 3600
} 
#endif
#line 3602 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3603
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3607
::exit(___);}
#if 0
#line 3603
{ 
#line 3604
int4 tmp; 
#line 3605
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3606
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 3607
} 
#endif
#line 3609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3610
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3614
::exit(___);}
#if 0
#line 3610
{ 
#line 3611
int4 tmp; 
#line 3612
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3613
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3614
} 
#endif
#line 3616 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3617
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3621
::exit(___);}
#if 0
#line 3617
{ 
#line 3618
uint4 tmp; 
#line 3619
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3620
(*retVal) = (tmp.x); 
#line 3621
} 
#endif
#line 3623 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3624
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3628
::exit(___);}
#if 0
#line 3624
{ 
#line 3625
uint4 tmp; 
#line 3626
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3627
(*retVal) = make_uint1(tmp.x); 
#line 3628
} 
#endif
#line 3630 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3631
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3635
::exit(___);}
#if 0
#line 3631
{ 
#line 3632
uint4 tmp; 
#line 3633
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3634
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 3635
} 
#endif
#line 3637 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3638
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3642
::exit(___);}
#if 0
#line 3638
{ 
#line 3639
uint4 tmp; 
#line 3640
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3641
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3642
} 
#endif
#line 3652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(long *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3653
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3657
::exit(___);}
#if 0
#line 3653
{ 
#line 3654
int4 tmp; 
#line 3655
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3656
(*retVal) = ((long)(tmp.x)); 
#line 3657
} 
#endif
#line 3659 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3660
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3664
::exit(___);}
#if 0
#line 3660
{ 
#line 3661
int4 tmp; 
#line 3662
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3663
(*retVal) = make_long1(tmp.x); 
#line 3664
} 
#endif
#line 3666 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3667
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3671
::exit(___);}
#if 0
#line 3667
{ 
#line 3668
int4 tmp; 
#line 3669
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3670
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 3671
} 
#endif
#line 3673 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3674
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3678
::exit(___);}
#if 0
#line 3674
{ 
#line 3675
int4 tmp; 
#line 3676
__tex_2d_level_v4s32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3677
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3678
} 
#endif
#line 3680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3681
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3685
::exit(___);}
#if 0
#line 3681
{ 
#line 3682
uint4 tmp; 
#line 3683
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3684
(*retVal) = ((unsigned long)(tmp.x)); 
#line 3685
} 
#endif
#line 3687 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3688
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3692
::exit(___);}
#if 0
#line 3688
{ 
#line 3689
uint4 tmp; 
#line 3690
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3691
(*retVal) = make_ulong1(tmp.x); 
#line 3692
} 
#endif
#line 3694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3695
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3699
::exit(___);}
#if 0
#line 3695
{ 
#line 3696
uint4 tmp; 
#line 3697
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3698
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 3699
} 
#endif
#line 3701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3702
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3706
::exit(___);}
#if 0
#line 3702
{ 
#line 3703
uint4 tmp; 
#line 3704
__tex_2d_level_v4u32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3705
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3706
} 
#endif
#line 3717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3718
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3722
::exit(___);}
#if 0
#line 3718
{ 
#line 3719
float4 tmp; 
#line 3720
__tex_2d_level_v4f32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3721
(*retVal) = (tmp.x); 
#line 3722
} 
#endif
#line 3724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3725
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3729
::exit(___);}
#if 0
#line 3725
{ 
#line 3726
float4 tmp; 
#line 3727
__tex_2d_level_v4f32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3728
(*retVal) = make_float1(tmp.x); 
#line 3729
} 
#endif
#line 3731 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3732
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3736
::exit(___);}
#if 0
#line 3732
{ 
#line 3733
float4 tmp; 
#line 3734
__tex_2d_level_v4f32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3735
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 3736
} 
#endif
#line 3738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float level) 
#line 3739
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)level;
#line 3743
::exit(___);}
#if 0
#line 3739
{ 
#line 3740
float4 tmp; 
#line 3741
__tex_2d_level_v4f32_f32(texObject, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3742
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3743
} 
#endif
#line 3751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3752
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3761 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 3752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 3757 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 3758
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3760 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 3761
} 
#endif
#line 3762 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3763
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3767
::exit(___);}
#if 0
#line 3763
{ 
#line 3764
int4 tmp; 
#line 3765
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3766
(*retVal) = ((signed char)(tmp.x)); 
#line 3767
} 
#endif
#line 3769 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3770
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3774
::exit(___);}
#if 0
#line 3770
{ 
#line 3771
int4 tmp; 
#line 3772
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3773
(*retVal) = make_char1(tmp.x); 
#line 3774
} 
#endif
#line 3776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3777
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3781
::exit(___);}
#if 0
#line 3777
{ 
#line 3778
int4 tmp; 
#line 3779
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3780
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 3781
} 
#endif
#line 3783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3784
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3788
::exit(___);}
#if 0
#line 3784
{ 
#line 3785
int4 tmp; 
#line 3786
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3787
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3788
} 
#endif
#line 3790 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3791
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3795
::exit(___);}
#if 0
#line 3791
{ 
#line 3792
uint4 tmp; 
#line 3793
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3794
(*retVal) = ((unsigned char)(tmp.x)); 
#line 3795
} 
#endif
#line 3797 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3798
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3802
::exit(___);}
#if 0
#line 3798
{ 
#line 3799
uint4 tmp; 
#line 3800
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3801
(*retVal) = make_uchar1(tmp.x); 
#line 3802
} 
#endif
#line 3804 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3805
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3809
::exit(___);}
#if 0
#line 3805
{ 
#line 3806
uint4 tmp; 
#line 3807
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3808
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 3809
} 
#endif
#line 3811 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3812
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3816
::exit(___);}
#if 0
#line 3812
{ 
#line 3813
uint4 tmp; 
#line 3814
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3815
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3816
} 
#endif
#line 3824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3825
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3829
::exit(___);}
#if 0
#line 3825
{ 
#line 3826
int4 tmp; 
#line 3827
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3828
(*retVal) = ((short)(tmp.x)); 
#line 3829
} 
#endif
#line 3831 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3832
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3836
::exit(___);}
#if 0
#line 3832
{ 
#line 3833
int4 tmp; 
#line 3834
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3835
(*retVal) = make_short1(tmp.x); 
#line 3836
} 
#endif
#line 3838 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3839
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3843
::exit(___);}
#if 0
#line 3839
{ 
#line 3840
int4 tmp; 
#line 3841
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3842
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 3843
} 
#endif
#line 3845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3846
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3850
::exit(___);}
#if 0
#line 3846
{ 
#line 3847
int4 tmp; 
#line 3848
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3849
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3850
} 
#endif
#line 3852 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3853
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3857
::exit(___);}
#if 0
#line 3853
{ 
#line 3854
uint4 tmp; 
#line 3855
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3856
(*retVal) = ((unsigned short)(tmp.x)); 
#line 3857
} 
#endif
#line 3859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3860
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3864
::exit(___);}
#if 0
#line 3860
{ 
#line 3861
uint4 tmp; 
#line 3862
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3863
(*retVal) = make_ushort1(tmp.x); 
#line 3864
} 
#endif
#line 3866 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3867
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3871
::exit(___);}
#if 0
#line 3867
{ 
#line 3868
uint4 tmp; 
#line 3869
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3870
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 3871
} 
#endif
#line 3873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3874
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3878
::exit(___);}
#if 0
#line 3874
{ 
#line 3875
uint4 tmp; 
#line 3876
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3877
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3878
} 
#endif
#line 3886 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3887
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3891
::exit(___);}
#if 0
#line 3887
{ 
#line 3888
int4 tmp; 
#line 3889
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3890
(*retVal) = (tmp.x); 
#line 3891
} 
#endif
#line 3893 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3894
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3898
::exit(___);}
#if 0
#line 3894
{ 
#line 3895
int4 tmp; 
#line 3896
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3897
(*retVal) = make_int1(tmp.x); 
#line 3898
} 
#endif
#line 3900 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3901
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3905
::exit(___);}
#if 0
#line 3901
{ 
#line 3902
int4 tmp; 
#line 3903
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3904
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 3905
} 
#endif
#line 3907 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3908
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3912
::exit(___);}
#if 0
#line 3908
{ 
#line 3909
int4 tmp; 
#line 3910
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3911
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3912
} 
#endif
#line 3914 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3915
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3919
::exit(___);}
#if 0
#line 3915
{ 
#line 3916
uint4 tmp; 
#line 3917
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3918
(*retVal) = (tmp.x); 
#line 3919
} 
#endif
#line 3921 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3922
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3926
::exit(___);}
#if 0
#line 3922
{ 
#line 3923
uint4 tmp; 
#line 3924
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3925
(*retVal) = make_uint1(tmp.x); 
#line 3926
} 
#endif
#line 3928 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3929
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3933
::exit(___);}
#if 0
#line 3929
{ 
#line 3930
uint4 tmp; 
#line 3931
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3932
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 3933
} 
#endif
#line 3935 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3936
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3940
::exit(___);}
#if 0
#line 3936
{ 
#line 3937
uint4 tmp; 
#line 3938
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3939
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3940
} 
#endif
#line 3950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(long *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3951
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3955
::exit(___);}
#if 0
#line 3951
{ 
#line 3952
int4 tmp; 
#line 3953
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3954
(*retVal) = ((long)(tmp.x)); 
#line 3955
} 
#endif
#line 3957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3958
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3962
::exit(___);}
#if 0
#line 3958
{ 
#line 3959
int4 tmp; 
#line 3960
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3961
(*retVal) = make_long1(tmp.x); 
#line 3962
} 
#endif
#line 3964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3965
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3969
::exit(___);}
#if 0
#line 3965
{ 
#line 3966
int4 tmp; 
#line 3967
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3968
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 3969
} 
#endif
#line 3971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3972
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3976
::exit(___);}
#if 0
#line 3972
{ 
#line 3973
int4 tmp; 
#line 3974
__tex_3d_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3975
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 3976
} 
#endif
#line 3978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3979
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3983
::exit(___);}
#if 0
#line 3979
{ 
#line 3980
uint4 tmp; 
#line 3981
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3982
(*retVal) = ((unsigned long)(tmp.x)); 
#line 3983
} 
#endif
#line 3985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3986
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3990
::exit(___);}
#if 0
#line 3986
{ 
#line 3987
uint4 tmp; 
#line 3988
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3989
(*retVal) = make_ulong1(tmp.x); 
#line 3990
} 
#endif
#line 3992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 3993
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 3997
::exit(___);}
#if 0
#line 3993
{ 
#line 3994
uint4 tmp; 
#line 3995
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 3996
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 3997
} 
#endif
#line 3999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4000
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4004
::exit(___);}
#if 0
#line 4000
{ 
#line 4001
uint4 tmp; 
#line 4002
__tex_3d_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4003
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4004
} 
#endif
#line 4015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4016
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4020
::exit(___);}
#if 0
#line 4016
{ 
#line 4017
float4 tmp; 
#line 4018
__tex_3d_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4019
(*retVal) = (tmp.x); 
#line 4020
} 
#endif
#line 4022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4023
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4027
::exit(___);}
#if 0
#line 4023
{ 
#line 4024
float4 tmp; 
#line 4025
__tex_3d_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4026
(*retVal) = make_float1(tmp.x); 
#line 4027
} 
#endif
#line 4029 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4030
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4034
::exit(___);}
#if 0
#line 4030
{ 
#line 4031
float4 tmp; 
#line 4032
__tex_3d_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4033
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 4034
} 
#endif
#line 4036 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4037
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4041
::exit(___);}
#if 0
#line 4037
{ 
#line 4038
float4 tmp; 
#line 4039
__tex_3d_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4040
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4041
} 
#endif
#line 4049 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4050
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4059 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 4050 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 4055 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 4056
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4058 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 4059
} 
#endif
#line 4060 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4061
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4065
::exit(___);}
#if 0
#line 4061
{ 
#line 4062
int4 tmp; 
#line 4063
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4064
(*retVal) = ((signed char)(tmp.x)); 
#line 4065
} 
#endif
#line 4067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4068
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4072
::exit(___);}
#if 0
#line 4068
{ 
#line 4069
int4 tmp; 
#line 4070
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4071
(*retVal) = make_char1(tmp.x); 
#line 4072
} 
#endif
#line 4074 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4075
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4079
::exit(___);}
#if 0
#line 4075
{ 
#line 4076
int4 tmp; 
#line 4077
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4078
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 4079
} 
#endif
#line 4081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4082
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4086
::exit(___);}
#if 0
#line 4082
{ 
#line 4083
int4 tmp; 
#line 4084
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4085
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4086
} 
#endif
#line 4088 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4089
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4093
::exit(___);}
#if 0
#line 4089
{ 
#line 4090
uint4 tmp; 
#line 4091
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4092
(*retVal) = ((unsigned char)(tmp.x)); 
#line 4093
} 
#endif
#line 4095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4096
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4100
::exit(___);}
#if 0
#line 4096
{ 
#line 4097
uint4 tmp; 
#line 4098
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4099
(*retVal) = make_uchar1(tmp.x); 
#line 4100
} 
#endif
#line 4102 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4103
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4107
::exit(___);}
#if 0
#line 4103
{ 
#line 4104
uint4 tmp; 
#line 4105
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4106
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 4107
} 
#endif
#line 4109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4110
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4114
::exit(___);}
#if 0
#line 4110
{ 
#line 4111
uint4 tmp; 
#line 4112
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4113
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4114
} 
#endif
#line 4122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4123
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4127
::exit(___);}
#if 0
#line 4123
{ 
#line 4124
int4 tmp; 
#line 4125
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4126
(*retVal) = ((short)(tmp.x)); 
#line 4127
} 
#endif
#line 4129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4130
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4134
::exit(___);}
#if 0
#line 4130
{ 
#line 4131
int4 tmp; 
#line 4132
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4133
(*retVal) = make_short1(tmp.x); 
#line 4134
} 
#endif
#line 4136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4137
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4141
::exit(___);}
#if 0
#line 4137
{ 
#line 4138
int4 tmp; 
#line 4139
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4140
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 4141
} 
#endif
#line 4143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4144
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4148
::exit(___);}
#if 0
#line 4144
{ 
#line 4145
int4 tmp; 
#line 4146
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4147
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4148
} 
#endif
#line 4150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4151
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4155
::exit(___);}
#if 0
#line 4151
{ 
#line 4152
uint4 tmp; 
#line 4153
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4154
(*retVal) = ((unsigned short)(tmp.x)); 
#line 4155
} 
#endif
#line 4157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4158
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4162
::exit(___);}
#if 0
#line 4158
{ 
#line 4159
uint4 tmp; 
#line 4160
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4161
(*retVal) = make_ushort1(tmp.x); 
#line 4162
} 
#endif
#line 4164 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4165
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4169
::exit(___);}
#if 0
#line 4165
{ 
#line 4166
uint4 tmp; 
#line 4167
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4168
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 4169
} 
#endif
#line 4171 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4172
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4176
::exit(___);}
#if 0
#line 4172
{ 
#line 4173
uint4 tmp; 
#line 4174
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4175
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4176
} 
#endif
#line 4184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4185
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4189
::exit(___);}
#if 0
#line 4185
{ 
#line 4186
int4 tmp; 
#line 4187
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4188
(*retVal) = (tmp.x); 
#line 4189
} 
#endif
#line 4191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4192
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4196
::exit(___);}
#if 0
#line 4192
{ 
#line 4193
int4 tmp; 
#line 4194
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4195
(*retVal) = make_int1(tmp.x); 
#line 4196
} 
#endif
#line 4198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4199
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4203
::exit(___);}
#if 0
#line 4199
{ 
#line 4200
int4 tmp; 
#line 4201
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4202
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 4203
} 
#endif
#line 4205 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4206
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4210
::exit(___);}
#if 0
#line 4206
{ 
#line 4207
int4 tmp; 
#line 4208
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4209
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4210
} 
#endif
#line 4212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(unsigned *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4213
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4217
::exit(___);}
#if 0
#line 4213
{ 
#line 4214
uint4 tmp; 
#line 4215
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4216
(*retVal) = (tmp.x); 
#line 4217
} 
#endif
#line 4219 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4220
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4224
::exit(___);}
#if 0
#line 4220
{ 
#line 4221
uint4 tmp; 
#line 4222
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4223
(*retVal) = make_uint1(tmp.x); 
#line 4224
} 
#endif
#line 4226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4227
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4231
::exit(___);}
#if 0
#line 4227
{ 
#line 4228
uint4 tmp; 
#line 4229
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4230
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 4231
} 
#endif
#line 4233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4234
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4238
::exit(___);}
#if 0
#line 4234
{ 
#line 4235
uint4 tmp; 
#line 4236
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4237
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4238
} 
#endif
#line 4248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(long *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4249
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4253
::exit(___);}
#if 0
#line 4249
{ 
#line 4250
int4 tmp; 
#line 4251
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4252
(*retVal) = ((long)(tmp.x)); 
#line 4253
} 
#endif
#line 4255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(long1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4256
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4260
::exit(___);}
#if 0
#line 4256
{ 
#line 4257
int4 tmp; 
#line 4258
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4259
(*retVal) = make_long1(tmp.x); 
#line 4260
} 
#endif
#line 4262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(long2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4263
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4267
::exit(___);}
#if 0
#line 4263
{ 
#line 4264
int4 tmp; 
#line 4265
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4266
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 4267
} 
#endif
#line 4269 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(long4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4270
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4274
::exit(___);}
#if 0
#line 4270
{ 
#line 4271
int4 tmp; 
#line 4272
__tex_1d_array_level_v4s32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4273
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4274
} 
#endif
#line 4276 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4277
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4281
::exit(___);}
#if 0
#line 4277
{ 
#line 4278
uint4 tmp; 
#line 4279
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4280
(*retVal) = ((unsigned long)(tmp.x)); 
#line 4281
} 
#endif
#line 4283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4284
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4288
::exit(___);}
#if 0
#line 4284
{ 
#line 4285
uint4 tmp; 
#line 4286
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4287
(*retVal) = make_ulong1(tmp.x); 
#line 4288
} 
#endif
#line 4290 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4291
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4295
::exit(___);}
#if 0
#line 4291
{ 
#line 4292
uint4 tmp; 
#line 4293
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4294
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 4295
} 
#endif
#line 4297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4298
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4302
::exit(___);}
#if 0
#line 4298
{ 
#line 4299
uint4 tmp; 
#line 4300
__tex_1d_array_level_v4u32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4301
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4302
} 
#endif
#line 4313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4314
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4318
::exit(___);}
#if 0
#line 4314
{ 
#line 4315
float4 tmp; 
#line 4316
__tex_1d_array_level_v4f32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4317
(*retVal) = (tmp.x); 
#line 4318
} 
#endif
#line 4320 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4321
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4325
::exit(___);}
#if 0
#line 4321
{ 
#line 4322
float4 tmp; 
#line 4323
__tex_1d_array_level_v4f32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4324
(*retVal) = make_float1(tmp.x); 
#line 4325
} 
#endif
#line 4327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4328
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4332
::exit(___);}
#if 0
#line 4328
{ 
#line 4329
float4 tmp; 
#line 4330
__tex_1d_array_level_v4f32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4331
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 4332
} 
#endif
#line 4334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level) 
#line 4335
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)level;
#line 4339
::exit(___);}
#if 0
#line 4335
{ 
#line 4336
float4 tmp; 
#line 4337
__tex_1d_array_level_v4f32_f32(texObject, layer, x, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4338
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4339
} 
#endif
#line 4347 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4348
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 4348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 4353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 4354
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 4357
} 
#endif
#line 4358 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4359
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4363
::exit(___);}
#if 0
#line 4359
{ 
#line 4360
int4 tmp; 
#line 4361
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4362
(*retVal) = ((signed char)(tmp.x)); 
#line 4363
} 
#endif
#line 4365 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4366
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4370
::exit(___);}
#if 0
#line 4366
{ 
#line 4367
int4 tmp; 
#line 4368
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4369
(*retVal) = make_char1(tmp.x); 
#line 4370
} 
#endif
#line 4372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4373
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4377
::exit(___);}
#if 0
#line 4373
{ 
#line 4374
int4 tmp; 
#line 4375
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4376
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 4377
} 
#endif
#line 4379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4380
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4384
::exit(___);}
#if 0
#line 4380
{ 
#line 4381
int4 tmp; 
#line 4382
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4383
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4384
} 
#endif
#line 4386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4387
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4391
::exit(___);}
#if 0
#line 4387
{ 
#line 4388
uint4 tmp; 
#line 4389
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4390
(*retVal) = ((unsigned char)(tmp.x)); 
#line 4391
} 
#endif
#line 4393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4394
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4398
::exit(___);}
#if 0
#line 4394
{ 
#line 4395
uint4 tmp; 
#line 4396
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4397
(*retVal) = make_uchar1(tmp.x); 
#line 4398
} 
#endif
#line 4400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4401
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4405
::exit(___);}
#if 0
#line 4401
{ 
#line 4402
uint4 tmp; 
#line 4403
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4404
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 4405
} 
#endif
#line 4407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4408
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4412
::exit(___);}
#if 0
#line 4408
{ 
#line 4409
uint4 tmp; 
#line 4410
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4411
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4412
} 
#endif
#line 4420 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4421
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4425
::exit(___);}
#if 0
#line 4421
{ 
#line 4422
int4 tmp; 
#line 4423
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4424
(*retVal) = ((short)(tmp.x)); 
#line 4425
} 
#endif
#line 4427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4428
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4432
::exit(___);}
#if 0
#line 4428
{ 
#line 4429
int4 tmp; 
#line 4430
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4431
(*retVal) = make_short1(tmp.x); 
#line 4432
} 
#endif
#line 4434 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4435
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4439
::exit(___);}
#if 0
#line 4435
{ 
#line 4436
int4 tmp; 
#line 4437
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4438
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 4439
} 
#endif
#line 4441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4442
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4446
::exit(___);}
#if 0
#line 4442
{ 
#line 4443
int4 tmp; 
#line 4444
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4445
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4446
} 
#endif
#line 4448 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4449
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4453
::exit(___);}
#if 0
#line 4449
{ 
#line 4450
uint4 tmp; 
#line 4451
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4452
(*retVal) = ((unsigned short)(tmp.x)); 
#line 4453
} 
#endif
#line 4455 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4456
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4460
::exit(___);}
#if 0
#line 4456
{ 
#line 4457
uint4 tmp; 
#line 4458
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4459
(*retVal) = make_ushort1(tmp.x); 
#line 4460
} 
#endif
#line 4462 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4463
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4467
::exit(___);}
#if 0
#line 4463
{ 
#line 4464
uint4 tmp; 
#line 4465
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4466
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 4467
} 
#endif
#line 4469 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4470
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4474
::exit(___);}
#if 0
#line 4470
{ 
#line 4471
uint4 tmp; 
#line 4472
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4473
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4474
} 
#endif
#line 4482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4483
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4487
::exit(___);}
#if 0
#line 4483
{ 
#line 4484
int4 tmp; 
#line 4485
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4486
(*retVal) = (tmp.x); 
#line 4487
} 
#endif
#line 4489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4490
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4494
::exit(___);}
#if 0
#line 4490
{ 
#line 4491
int4 tmp; 
#line 4492
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4493
(*retVal) = make_int1(tmp.x); 
#line 4494
} 
#endif
#line 4496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4497
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4501
::exit(___);}
#if 0
#line 4497
{ 
#line 4498
int4 tmp; 
#line 4499
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4500
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 4501
} 
#endif
#line 4503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4504
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4508
::exit(___);}
#if 0
#line 4504
{ 
#line 4505
int4 tmp; 
#line 4506
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4507
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4508
} 
#endif
#line 4510 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4511
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4515
::exit(___);}
#if 0
#line 4511
{ 
#line 4512
uint4 tmp; 
#line 4513
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4514
(*retVal) = (tmp.x); 
#line 4515
} 
#endif
#line 4517 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4518
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4522
::exit(___);}
#if 0
#line 4518
{ 
#line 4519
uint4 tmp; 
#line 4520
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4521
(*retVal) = make_uint1(tmp.x); 
#line 4522
} 
#endif
#line 4524 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4525
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4529
::exit(___);}
#if 0
#line 4525
{ 
#line 4526
uint4 tmp; 
#line 4527
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4528
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 4529
} 
#endif
#line 4531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4532
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4536
::exit(___);}
#if 0
#line 4532
{ 
#line 4533
uint4 tmp; 
#line 4534
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4535
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4536
} 
#endif
#line 4546 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(long *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4547
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4551
::exit(___);}
#if 0
#line 4547
{ 
#line 4548
int4 tmp; 
#line 4549
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4550
(*retVal) = ((long)(tmp.x)); 
#line 4551
} 
#endif
#line 4553 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(long1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4554
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4558
::exit(___);}
#if 0
#line 4554
{ 
#line 4555
int4 tmp; 
#line 4556
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4557
(*retVal) = make_long1(tmp.x); 
#line 4558
} 
#endif
#line 4560 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(long2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4561
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4565
::exit(___);}
#if 0
#line 4561
{ 
#line 4562
int4 tmp; 
#line 4563
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4564
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 4565
} 
#endif
#line 4567 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(long4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4568
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4572
::exit(___);}
#if 0
#line 4568
{ 
#line 4569
int4 tmp; 
#line 4570
__tex_2d_array_level_v4s32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4571
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4572
} 
#endif
#line 4574 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4575
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4579
::exit(___);}
#if 0
#line 4575
{ 
#line 4576
uint4 tmp; 
#line 4577
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4578
(*retVal) = ((unsigned long)(tmp.x)); 
#line 4579
} 
#endif
#line 4581 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4582
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4586
::exit(___);}
#if 0
#line 4582
{ 
#line 4583
uint4 tmp; 
#line 4584
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4585
(*retVal) = make_ulong1(tmp.x); 
#line 4586
} 
#endif
#line 4588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4589
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4593
::exit(___);}
#if 0
#line 4589
{ 
#line 4590
uint4 tmp; 
#line 4591
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4592
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 4593
} 
#endif
#line 4595 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4596
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4600
::exit(___);}
#if 0
#line 4596
{ 
#line 4597
uint4 tmp; 
#line 4598
__tex_2d_array_level_v4u32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4599
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4600
} 
#endif
#line 4611 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4612
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4616
::exit(___);}
#if 0
#line 4612
{ 
#line 4613
float4 tmp; 
#line 4614
__tex_2d_array_level_v4f32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4615
(*retVal) = (tmp.x); 
#line 4616
} 
#endif
#line 4618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4619
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4623
::exit(___);}
#if 0
#line 4619
{ 
#line 4620
float4 tmp; 
#line 4621
__tex_2d_array_level_v4f32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4622
(*retVal) = make_float1(tmp.x); 
#line 4623
} 
#endif
#line 4625 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4626
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4630
::exit(___);}
#if 0
#line 4626
{ 
#line 4627
float4 tmp; 
#line 4628
__tex_2d_array_level_v4f32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4629
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 4630
} 
#endif
#line 4632 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level) 
#line 4633
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)level;
#line 4637
::exit(___);}
#if 0
#line 4633
{ 
#line 4634
float4 tmp; 
#line 4635
__tex_2d_array_level_v4f32_f32(texObject, layer, x, y, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4636
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4637
} 
#endif
#line 4645 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4646
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4655 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 4646 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 4651 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 4652
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4654 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 4655
} 
#endif
#line 4656 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4657
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4661
::exit(___);}
#if 0
#line 4657
{ 
#line 4658
int4 tmp; 
#line 4659
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4660
(*retVal) = ((signed char)(tmp.x)); 
#line 4661
} 
#endif
#line 4663 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4664
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4668
::exit(___);}
#if 0
#line 4664
{ 
#line 4665
int4 tmp; 
#line 4666
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4667
(*retVal) = make_char1(tmp.x); 
#line 4668
} 
#endif
#line 4670 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4671
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4675
::exit(___);}
#if 0
#line 4671
{ 
#line 4672
int4 tmp; 
#line 4673
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4674
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 4675
} 
#endif
#line 4677 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4678
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4682
::exit(___);}
#if 0
#line 4678
{ 
#line 4679
int4 tmp; 
#line 4680
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4681
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4682
} 
#endif
#line 4684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4685
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4689
::exit(___);}
#if 0
#line 4685
{ 
#line 4686
uint4 tmp; 
#line 4687
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4688
(*retVal) = ((unsigned char)(tmp.x)); 
#line 4689
} 
#endif
#line 4691 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4692
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4696
::exit(___);}
#if 0
#line 4692
{ 
#line 4693
uint4 tmp; 
#line 4694
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4695
(*retVal) = make_uchar1(tmp.x); 
#line 4696
} 
#endif
#line 4698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4699
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4703
::exit(___);}
#if 0
#line 4699
{ 
#line 4700
uint4 tmp; 
#line 4701
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4702
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 4703
} 
#endif
#line 4705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4706
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4710
::exit(___);}
#if 0
#line 4706
{ 
#line 4707
uint4 tmp; 
#line 4708
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4709
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4710
} 
#endif
#line 4718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4719
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4723
::exit(___);}
#if 0
#line 4719
{ 
#line 4720
int4 tmp; 
#line 4721
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4722
(*retVal) = ((short)(tmp.x)); 
#line 4723
} 
#endif
#line 4725 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4726
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4730
::exit(___);}
#if 0
#line 4726
{ 
#line 4727
int4 tmp; 
#line 4728
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4729
(*retVal) = make_short1(tmp.x); 
#line 4730
} 
#endif
#line 4732 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4733
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4737
::exit(___);}
#if 0
#line 4733
{ 
#line 4734
int4 tmp; 
#line 4735
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4736
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 4737
} 
#endif
#line 4739 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4740
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4744
::exit(___);}
#if 0
#line 4740
{ 
#line 4741
int4 tmp; 
#line 4742
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4743
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4744
} 
#endif
#line 4746 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4747
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4751
::exit(___);}
#if 0
#line 4747
{ 
#line 4748
uint4 tmp; 
#line 4749
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4750
(*retVal) = ((unsigned short)(tmp.x)); 
#line 4751
} 
#endif
#line 4753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4754
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4758
::exit(___);}
#if 0
#line 4754
{ 
#line 4755
uint4 tmp; 
#line 4756
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4757
(*retVal) = make_ushort1(tmp.x); 
#line 4758
} 
#endif
#line 4760 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4761
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4765
::exit(___);}
#if 0
#line 4761
{ 
#line 4762
uint4 tmp; 
#line 4763
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4764
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 4765
} 
#endif
#line 4767 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4768
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4772
::exit(___);}
#if 0
#line 4768
{ 
#line 4769
uint4 tmp; 
#line 4770
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4771
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4772
} 
#endif
#line 4780 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4781
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4785
::exit(___);}
#if 0
#line 4781
{ 
#line 4782
int4 tmp; 
#line 4783
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4784
(*retVal) = (tmp.x); 
#line 4785
} 
#endif
#line 4787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4788
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4792
::exit(___);}
#if 0
#line 4788
{ 
#line 4789
int4 tmp; 
#line 4790
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4791
(*retVal) = make_int1(tmp.x); 
#line 4792
} 
#endif
#line 4794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4795
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4799
::exit(___);}
#if 0
#line 4795
{ 
#line 4796
int4 tmp; 
#line 4797
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4798
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 4799
} 
#endif
#line 4801 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4802
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4806
::exit(___);}
#if 0
#line 4802
{ 
#line 4803
int4 tmp; 
#line 4804
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4805
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4806
} 
#endif
#line 4808 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4809
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4813
::exit(___);}
#if 0
#line 4809
{ 
#line 4810
uint4 tmp; 
#line 4811
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4812
(*retVal) = (tmp.x); 
#line 4813
} 
#endif
#line 4815 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4816
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4820
::exit(___);}
#if 0
#line 4816
{ 
#line 4817
uint4 tmp; 
#line 4818
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4819
(*retVal) = make_uint1(tmp.x); 
#line 4820
} 
#endif
#line 4822 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4823
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4827
::exit(___);}
#if 0
#line 4823
{ 
#line 4824
uint4 tmp; 
#line 4825
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4826
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 4827
} 
#endif
#line 4829 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4830
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4834
::exit(___);}
#if 0
#line 4830
{ 
#line 4831
uint4 tmp; 
#line 4832
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4833
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4834
} 
#endif
#line 4844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(long *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4845
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4849
::exit(___);}
#if 0
#line 4845
{ 
#line 4846
int4 tmp; 
#line 4847
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4848
(*retVal) = ((long)(tmp.x)); 
#line 4849
} 
#endif
#line 4851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4852
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4856
::exit(___);}
#if 0
#line 4852
{ 
#line 4853
int4 tmp; 
#line 4854
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4855
(*retVal) = make_long1(tmp.x); 
#line 4856
} 
#endif
#line 4858 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4859
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4863
::exit(___);}
#if 0
#line 4859
{ 
#line 4860
int4 tmp; 
#line 4861
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4862
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 4863
} 
#endif
#line 4865 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4866
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4870
::exit(___);}
#if 0
#line 4866
{ 
#line 4867
int4 tmp; 
#line 4868
__tex_cube_level_v4s32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4869
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4870
} 
#endif
#line 4872 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4873
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4877
::exit(___);}
#if 0
#line 4873
{ 
#line 4874
uint4 tmp; 
#line 4875
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4876
(*retVal) = ((unsigned long)(tmp.x)); 
#line 4877
} 
#endif
#line 4879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4880
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4884
::exit(___);}
#if 0
#line 4880
{ 
#line 4881
uint4 tmp; 
#line 4882
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4883
(*retVal) = make_ulong1(tmp.x); 
#line 4884
} 
#endif
#line 4886 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4887
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4891
::exit(___);}
#if 0
#line 4887
{ 
#line 4888
uint4 tmp; 
#line 4889
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4890
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 4891
} 
#endif
#line 4893 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4894
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4898
::exit(___);}
#if 0
#line 4894
{ 
#line 4895
uint4 tmp; 
#line 4896
__tex_cube_level_v4u32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4897
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4898
} 
#endif
#line 4909 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4910
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4914
::exit(___);}
#if 0
#line 4910
{ 
#line 4911
float4 tmp; 
#line 4912
__tex_cube_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4913
(*retVal) = (tmp.x); 
#line 4914
} 
#endif
#line 4916 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4917
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4921
::exit(___);}
#if 0
#line 4917
{ 
#line 4918
float4 tmp; 
#line 4919
__tex_cube_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4920
(*retVal) = make_float1(tmp.x); 
#line 4921
} 
#endif
#line 4923 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4924
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4928
::exit(___);}
#if 0
#line 4924
{ 
#line 4925
float4 tmp; 
#line 4926
__tex_cube_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4927
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 4928
} 
#endif
#line 4930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level) 
#line 4931
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)level;
#line 4935
::exit(___);}
#if 0
#line 4931
{ 
#line 4932
float4 tmp; 
#line 4933
__tex_cube_level_v4f32_f32(texObject, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4934
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4935
} 
#endif
#line 4943 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 4944
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 4953 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 4944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 4949 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 4950
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4952 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 4953
} 
#endif
#line 4954 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 4955
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 4959
::exit(___);}
#if 0
#line 4955
{ 
#line 4956
int4 tmp; 
#line 4957
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4958
(*retVal) = ((signed char)(tmp.x)); 
#line 4959
} 
#endif
#line 4961 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 4962
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 4966
::exit(___);}
#if 0
#line 4962
{ 
#line 4963
int4 tmp; 
#line 4964
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4965
(*retVal) = make_char1(tmp.x); 
#line 4966
} 
#endif
#line 4968 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 4969
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 4973
::exit(___);}
#if 0
#line 4969
{ 
#line 4970
int4 tmp; 
#line 4971
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4972
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 4973
} 
#endif
#line 4975 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 4976
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 4980
::exit(___);}
#if 0
#line 4976
{ 
#line 4977
int4 tmp; 
#line 4978
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4979
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 4980
} 
#endif
#line 4982 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 4983
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 4987
::exit(___);}
#if 0
#line 4983
{ 
#line 4984
uint4 tmp; 
#line 4985
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4986
(*retVal) = ((unsigned char)(tmp.x)); 
#line 4987
} 
#endif
#line 4989 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 4990
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 4994
::exit(___);}
#if 0
#line 4990
{ 
#line 4991
uint4 tmp; 
#line 4992
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 4993
(*retVal) = make_uchar1(tmp.x); 
#line 4994
} 
#endif
#line 4996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 4997
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5001
::exit(___);}
#if 0
#line 4997
{ 
#line 4998
uint4 tmp; 
#line 4999
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5000
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 5001
} 
#endif
#line 5003 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5004
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5008
::exit(___);}
#if 0
#line 5004
{ 
#line 5005
uint4 tmp; 
#line 5006
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5007
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5008
} 
#endif
#line 5016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5017
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5021
::exit(___);}
#if 0
#line 5017
{ 
#line 5018
int4 tmp; 
#line 5019
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5020
(*retVal) = ((short)(tmp.x)); 
#line 5021
} 
#endif
#line 5023 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5024
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5028
::exit(___);}
#if 0
#line 5024
{ 
#line 5025
int4 tmp; 
#line 5026
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5027
(*retVal) = make_short1(tmp.x); 
#line 5028
} 
#endif
#line 5030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5031
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5035
::exit(___);}
#if 0
#line 5031
{ 
#line 5032
int4 tmp; 
#line 5033
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5034
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 5035
} 
#endif
#line 5037 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5038
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5042
::exit(___);}
#if 0
#line 5038
{ 
#line 5039
int4 tmp; 
#line 5040
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5041
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5042
} 
#endif
#line 5044 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5045
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5049
::exit(___);}
#if 0
#line 5045
{ 
#line 5046
uint4 tmp; 
#line 5047
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5048
(*retVal) = ((unsigned short)(tmp.x)); 
#line 5049
} 
#endif
#line 5051 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5052
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5056
::exit(___);}
#if 0
#line 5052
{ 
#line 5053
uint4 tmp; 
#line 5054
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5055
(*retVal) = make_ushort1(tmp.x); 
#line 5056
} 
#endif
#line 5058 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5059
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5063
::exit(___);}
#if 0
#line 5059
{ 
#line 5060
uint4 tmp; 
#line 5061
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5062
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 5063
} 
#endif
#line 5065 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5066
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5070
::exit(___);}
#if 0
#line 5066
{ 
#line 5067
uint4 tmp; 
#line 5068
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5069
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5070
} 
#endif
#line 5078 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5079
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5083
::exit(___);}
#if 0
#line 5079
{ 
#line 5080
int4 tmp; 
#line 5081
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5082
(*retVal) = (tmp.x); 
#line 5083
} 
#endif
#line 5085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5086
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5090
::exit(___);}
#if 0
#line 5086
{ 
#line 5087
int4 tmp; 
#line 5088
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5089
(*retVal) = make_int1(tmp.x); 
#line 5090
} 
#endif
#line 5092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5093
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5097
::exit(___);}
#if 0
#line 5093
{ 
#line 5094
int4 tmp; 
#line 5095
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5096
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 5097
} 
#endif
#line 5099 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5100
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5104
::exit(___);}
#if 0
#line 5100
{ 
#line 5101
int4 tmp; 
#line 5102
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5103
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5104
} 
#endif
#line 5106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5107
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5111
::exit(___);}
#if 0
#line 5107
{ 
#line 5108
uint4 tmp; 
#line 5109
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5110
(*retVal) = (tmp.x); 
#line 5111
} 
#endif
#line 5113 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5114
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5118
::exit(___);}
#if 0
#line 5114
{ 
#line 5115
uint4 tmp; 
#line 5116
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5117
(*retVal) = make_uint1(tmp.x); 
#line 5118
} 
#endif
#line 5120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5121
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5125
::exit(___);}
#if 0
#line 5121
{ 
#line 5122
uint4 tmp; 
#line 5123
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5124
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 5125
} 
#endif
#line 5127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5128
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5132
::exit(___);}
#if 0
#line 5128
{ 
#line 5129
uint4 tmp; 
#line 5130
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5131
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5132
} 
#endif
#line 5142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(long *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5143
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5147
::exit(___);}
#if 0
#line 5143
{ 
#line 5144
int4 tmp; 
#line 5145
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5146
(*retVal) = ((long)(tmp.x)); 
#line 5147
} 
#endif
#line 5149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5150
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5154
::exit(___);}
#if 0
#line 5150
{ 
#line 5151
int4 tmp; 
#line 5152
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5153
(*retVal) = make_long1(tmp.x); 
#line 5154
} 
#endif
#line 5156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5157
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5161
::exit(___);}
#if 0
#line 5157
{ 
#line 5158
int4 tmp; 
#line 5159
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5160
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 5161
} 
#endif
#line 5163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5164
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5168
::exit(___);}
#if 0
#line 5164
{ 
#line 5165
int4 tmp; 
#line 5166
__tex_cube_array_level_v4s32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5167
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5168
} 
#endif
#line 5170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5171
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5175
::exit(___);}
#if 0
#line 5171
{ 
#line 5172
uint4 tmp; 
#line 5173
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5174
(*retVal) = ((unsigned long)(tmp.x)); 
#line 5175
} 
#endif
#line 5177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5178
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5182
::exit(___);}
#if 0
#line 5178
{ 
#line 5179
uint4 tmp; 
#line 5180
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5181
(*retVal) = make_ulong1(tmp.x); 
#line 5182
} 
#endif
#line 5184 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5185
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5189
::exit(___);}
#if 0
#line 5185
{ 
#line 5186
uint4 tmp; 
#line 5187
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5188
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 5189
} 
#endif
#line 5191 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5192
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5196
::exit(___);}
#if 0
#line 5192
{ 
#line 5193
uint4 tmp; 
#line 5194
__tex_cube_array_level_v4u32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5195
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5196
} 
#endif
#line 5207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5208
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5212
::exit(___);}
#if 0
#line 5208
{ 
#line 5209
float4 tmp; 
#line 5210
__tex_cube_array_level_v4f32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5211
(*retVal) = (tmp.x); 
#line 5212
} 
#endif
#line 5214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5215
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5219
::exit(___);}
#if 0
#line 5215
{ 
#line 5216
float4 tmp; 
#line 5217
__tex_cube_array_level_v4f32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5218
(*retVal) = make_float1(tmp.x); 
#line 5219
} 
#endif
#line 5221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5222
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5226
::exit(___);}
#if 0
#line 5222
{ 
#line 5223
float4 tmp; 
#line 5224
__tex_cube_array_level_v4f32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5225
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 5226
} 
#endif
#line 5228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void texCubemapLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level) 
#line 5229
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)layer;(void)level;
#line 5233
::exit(___);}
#if 0
#line 5229
{ 
#line 5230
float4 tmp; 
#line 5231
__tex_cube_array_level_v4f32_f32(texObject, layer, x, y, z, level, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5232
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5233
} 
#endif
#line 5241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5242
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 5242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 5247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 5248
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 5251
} 
#endif
#line 5252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5253
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5257
::exit(___);}
#if 0
#line 5253
{ 
#line 5254
int4 tmp; 
#line 5255
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5256
(*retVal) = ((signed char)(tmp.x)); 
#line 5257
} 
#endif
#line 5259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5260
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5264
::exit(___);}
#if 0
#line 5260
{ 
#line 5261
int4 tmp; 
#line 5262
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5263
(*retVal) = make_char1(tmp.x); 
#line 5264
} 
#endif
#line 5266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5267
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5271
::exit(___);}
#if 0
#line 5267
{ 
#line 5268
int4 tmp; 
#line 5269
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5270
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 5271
} 
#endif
#line 5273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5274
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5278
::exit(___);}
#if 0
#line 5274
{ 
#line 5275
int4 tmp; 
#line 5276
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5277
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5278
} 
#endif
#line 5280 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5281
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5285
::exit(___);}
#if 0
#line 5281
{ 
#line 5282
uint4 tmp; 
#line 5283
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5284
(*retVal) = ((unsigned char)(tmp.x)); 
#line 5285
} 
#endif
#line 5287 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5288
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5292
::exit(___);}
#if 0
#line 5288
{ 
#line 5289
uint4 tmp; 
#line 5290
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5291
(*retVal) = make_uchar1(tmp.x); 
#line 5292
} 
#endif
#line 5294 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5295
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5299
::exit(___);}
#if 0
#line 5295
{ 
#line 5296
uint4 tmp; 
#line 5297
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5298
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 5299
} 
#endif
#line 5301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5302
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5306
::exit(___);}
#if 0
#line 5302
{ 
#line 5303
uint4 tmp; 
#line 5304
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5305
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5306
} 
#endif
#line 5314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(short *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5315
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5319
::exit(___);}
#if 0
#line 5315
{ 
#line 5316
int4 tmp; 
#line 5317
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5318
(*retVal) = ((short)(tmp.x)); 
#line 5319
} 
#endif
#line 5321 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5322
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5326
::exit(___);}
#if 0
#line 5322
{ 
#line 5323
int4 tmp; 
#line 5324
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5325
(*retVal) = make_short1(tmp.x); 
#line 5326
} 
#endif
#line 5328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5329
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5333
::exit(___);}
#if 0
#line 5329
{ 
#line 5330
int4 tmp; 
#line 5331
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5332
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 5333
} 
#endif
#line 5335 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5336
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5340
::exit(___);}
#if 0
#line 5336
{ 
#line 5337
int4 tmp; 
#line 5338
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5339
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5340
} 
#endif
#line 5342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5343
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5347
::exit(___);}
#if 0
#line 5343
{ 
#line 5344
uint4 tmp; 
#line 5345
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5346
(*retVal) = ((unsigned short)(tmp.x)); 
#line 5347
} 
#endif
#line 5349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5350
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5354
::exit(___);}
#if 0
#line 5350
{ 
#line 5351
uint4 tmp; 
#line 5352
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5353
(*retVal) = make_ushort1(tmp.x); 
#line 5354
} 
#endif
#line 5356 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5357
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5361
::exit(___);}
#if 0
#line 5357
{ 
#line 5358
uint4 tmp; 
#line 5359
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5360
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 5361
} 
#endif
#line 5363 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5364
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5368
::exit(___);}
#if 0
#line 5364
{ 
#line 5365
uint4 tmp; 
#line 5366
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5367
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5368
} 
#endif
#line 5376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(int *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5377
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5381
::exit(___);}
#if 0
#line 5377
{ 
#line 5378
int4 tmp; 
#line 5379
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5380
(*retVal) = (tmp.x); 
#line 5381
} 
#endif
#line 5383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5384
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5388
::exit(___);}
#if 0
#line 5384
{ 
#line 5385
int4 tmp; 
#line 5386
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5387
(*retVal) = make_int1(tmp.x); 
#line 5388
} 
#endif
#line 5390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5391
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5395
::exit(___);}
#if 0
#line 5391
{ 
#line 5392
int4 tmp; 
#line 5393
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5394
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 5395
} 
#endif
#line 5397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5398
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5402
::exit(___);}
#if 0
#line 5398
{ 
#line 5399
int4 tmp; 
#line 5400
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5401
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5402
} 
#endif
#line 5404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5405
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5409
::exit(___);}
#if 0
#line 5405
{ 
#line 5406
uint4 tmp; 
#line 5407
__asm tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};
(*retVal) = (tmp.x); 
#line 5409
} 
#endif
#line 5411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5412
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5416
::exit(___);}
#if 0
#line 5412
{ 
#line 5413
uint4 tmp; 
#line 5414
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5415
(*retVal) = make_uint1(tmp.x); 
#line 5416
} 
#endif
#line 5418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5419
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5423
::exit(___);}
#if 0
#line 5419
{ 
#line 5420
uint4 tmp; 
#line 5421
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5422
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 5423
} 
#endif
#line 5425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5426
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5430
::exit(___);}
#if 0
#line 5426
{ 
#line 5427
uint4 tmp; 
#line 5428
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5429
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5430
} 
#endif
#line 5440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(long *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5441
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5445
::exit(___);}
#if 0
#line 5441
{ 
#line 5442
int4 tmp; 
#line 5443
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5444
(*retVal) = ((long)(tmp.x)); 
#line 5445
} 
#endif
#line 5447 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(long1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5448
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5452
::exit(___);}
#if 0
#line 5448
{ 
#line 5449
int4 tmp; 
#line 5450
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5451
(*retVal) = make_long1(tmp.x); 
#line 5452
} 
#endif
#line 5454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(long2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5455
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5459
::exit(___);}
#if 0
#line 5455
{ 
#line 5456
int4 tmp; 
#line 5457
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5458
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 5459
} 
#endif
#line 5461 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(long4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5462
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5466
::exit(___);}
#if 0
#line 5462
{ 
#line 5463
int4 tmp; 
#line 5464
__tex_1d_grad_v4s32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5465
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5466
} 
#endif
#line 5468 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(unsigned long *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5469
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5473
::exit(___);}
#if 0
#line 5469
{ 
#line 5470
uint4 tmp; 
#line 5471
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5472
(*retVal) = ((unsigned long)(tmp.x)); 
#line 5473
} 
#endif
#line 5475 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(ulong1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5476
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5480
::exit(___);}
#if 0
#line 5476
{ 
#line 5477
uint4 tmp; 
#line 5478
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5479
(*retVal) = make_ulong1(tmp.x); 
#line 5480
} 
#endif
#line 5482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(ulong2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5483
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5487
::exit(___);}
#if 0
#line 5483
{ 
#line 5484
uint4 tmp; 
#line 5485
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5486
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 5487
} 
#endif
#line 5489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(ulong4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5490
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5494
::exit(___);}
#if 0
#line 5490
{ 
#line 5491
uint4 tmp; 
#line 5492
__tex_1d_grad_v4u32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5493
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5494
} 
#endif
#line 5505 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(float *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5506
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5510
::exit(___);}
#if 0
#line 5506
{ 
#line 5507
float4 tmp; 
#line 5508
__tex_1d_grad_v4f32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5509
(*retVal) = (tmp.x); 
#line 5510
} 
#endif
#line 5512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5513
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5517
::exit(___);}
#if 0
#line 5513
{ 
#line 5514
float4 tmp; 
#line 5515
__tex_1d_grad_v4f32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5516
(*retVal) = make_float1(tmp.x); 
#line 5517
} 
#endif
#line 5519 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5520
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5524
::exit(___);}
#if 0
#line 5520
{ 
#line 5521
float4 tmp; 
#line 5522
__tex_1d_grad_v4f32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5523
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 5524
} 
#endif
#line 5526 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy) 
#line 5527
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)dPdx;(void)dPdy;
#line 5531
::exit(___);}
#if 0
#line 5527
{ 
#line 5528
float4 tmp; 
#line 5529
__tex_1d_grad_v4f32_f32(texObject, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5530
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5531
} 
#endif
#line 5539 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5540
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 5540 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 5545 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 5546
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5548 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 5549
} 
#endif
#line 5550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5551
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5555
::exit(___);}
#if 0
#line 5551
{ 
#line 5552
int4 tmp; 
#line 5553
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5554
(*retVal) = ((signed char)(tmp.x)); 
#line 5555
} 
#endif
#line 5557 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5558
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5562
::exit(___);}
#if 0
#line 5558
{ 
#line 5559
int4 tmp; 
#line 5560
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5561
(*retVal) = make_char1(tmp.x); 
#line 5562
} 
#endif
#line 5564 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5565
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5569
::exit(___);}
#if 0
#line 5565
{ 
#line 5566
int4 tmp; 
#line 5567
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5568
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 5569
} 
#endif
#line 5571 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5572
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5576
::exit(___);}
#if 0
#line 5572
{ 
#line 5573
int4 tmp; 
#line 5574
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5575
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5576
} 
#endif
#line 5578 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5579
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5583
::exit(___);}
#if 0
#line 5579
{ 
#line 5580
uint4 tmp; 
#line 5581
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5582
(*retVal) = ((unsigned char)(tmp.x)); 
#line 5583
} 
#endif
#line 5585 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5586
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5590
::exit(___);}
#if 0
#line 5586
{ 
#line 5587
uint4 tmp; 
#line 5588
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5589
(*retVal) = make_uchar1(tmp.x); 
#line 5590
} 
#endif
#line 5592 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5593
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5597
::exit(___);}
#if 0
#line 5593
{ 
#line 5594
uint4 tmp; 
#line 5595
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5596
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 5597
} 
#endif
#line 5599 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5600
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5604
::exit(___);}
#if 0
#line 5600
{ 
#line 5601
uint4 tmp; 
#line 5602
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5603
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5604
} 
#endif
#line 5612 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5613
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5617
::exit(___);}
#if 0
#line 5613
{ 
#line 5614
int4 tmp; 
#line 5615
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5616
(*retVal) = ((short)(tmp.x)); 
#line 5617
} 
#endif
#line 5619 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5620
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5624
::exit(___);}
#if 0
#line 5620
{ 
#line 5621
int4 tmp; 
#line 5622
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5623
(*retVal) = make_short1(tmp.x); 
#line 5624
} 
#endif
#line 5626 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5627
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5631
::exit(___);}
#if 0
#line 5627
{ 
#line 5628
int4 tmp; 
#line 5629
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5630
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 5631
} 
#endif
#line 5633 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5634
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5638
::exit(___);}
#if 0
#line 5634
{ 
#line 5635
int4 tmp; 
#line 5636
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5637
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5638
} 
#endif
#line 5640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5641
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5645
::exit(___);}
#if 0
#line 5641
{ 
#line 5642
uint4 tmp; 
#line 5643
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5644
(*retVal) = ((unsigned short)(tmp.x)); 
#line 5645
} 
#endif
#line 5647 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5648
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5652
::exit(___);}
#if 0
#line 5648
{ 
#line 5649
uint4 tmp; 
#line 5650
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5651
(*retVal) = make_ushort1(tmp.x); 
#line 5652
} 
#endif
#line 5654 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5655
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5659
::exit(___);}
#if 0
#line 5655
{ 
#line 5656
uint4 tmp; 
#line 5657
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5658
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 5659
} 
#endif
#line 5661 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5662
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5666
::exit(___);}
#if 0
#line 5662
{ 
#line 5663
uint4 tmp; 
#line 5664
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5665
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5666
} 
#endif
#line 5674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5675
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5679
::exit(___);}
#if 0
#line 5675
{ 
#line 5676
int4 tmp; 
#line 5677
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5678
(*retVal) = (tmp.x); 
#line 5679
} 
#endif
#line 5681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5682
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5686
::exit(___);}
#if 0
#line 5682
{ 
#line 5683
int4 tmp; 
#line 5684
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5685
(*retVal) = make_int1(tmp.x); 
#line 5686
} 
#endif
#line 5688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5689
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5693
::exit(___);}
#if 0
#line 5689
{ 
#line 5690
int4 tmp; 
#line 5691
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5692
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 5693
} 
#endif
#line 5695 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5696
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5700
::exit(___);}
#if 0
#line 5696
{ 
#line 5697
int4 tmp; 
#line 5698
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5699
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5700
} 
#endif
#line 5702 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5703
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5707
::exit(___);}
#if 0
#line 5703
{ 
#line 5704
uint4 tmp; 
#line 5705
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5706
(*retVal) = (tmp.x); 
#line 5707
} 
#endif
#line 5709 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5710
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5714
::exit(___);}
#if 0
#line 5710
{ 
#line 5711
uint4 tmp; 
#line 5712
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5713
(*retVal) = make_uint1(tmp.x); 
#line 5714
} 
#endif
#line 5716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5717
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5721
::exit(___);}
#if 0
#line 5717
{ 
#line 5718
uint4 tmp; 
#line 5719
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5720
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 5721
} 
#endif
#line 5723 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5724
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5728
::exit(___);}
#if 0
#line 5724
{ 
#line 5725
uint4 tmp; 
#line 5726
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5727
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5728
} 
#endif
#line 5738 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(long *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5739
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5743
::exit(___);}
#if 0
#line 5739
{ 
#line 5740
int4 tmp; 
#line 5741
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5742
(*retVal) = ((long)(tmp.x)); 
#line 5743
} 
#endif
#line 5745 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5746
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5750
::exit(___);}
#if 0
#line 5746
{ 
#line 5747
int4 tmp; 
#line 5748
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5749
(*retVal) = make_long1(tmp.x); 
#line 5750
} 
#endif
#line 5752 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5753
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5757
::exit(___);}
#if 0
#line 5753
{ 
#line 5754
int4 tmp; 
#line 5755
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5756
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 5757
} 
#endif
#line 5759 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5760
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5764
::exit(___);}
#if 0
#line 5760
{ 
#line 5761
int4 tmp; 
#line 5762
__tex_2d_grad_v4s32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5763
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5764
} 
#endif
#line 5766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5767
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5771
::exit(___);}
#if 0
#line 5767
{ 
#line 5768
uint4 tmp; 
#line 5769
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5770
(*retVal) = ((unsigned long)(tmp.x)); 
#line 5771
} 
#endif
#line 5773 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5774
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5778
::exit(___);}
#if 0
#line 5774
{ 
#line 5775
uint4 tmp; 
#line 5776
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5777
(*retVal) = make_ulong1(tmp.x); 
#line 5778
} 
#endif
#line 5780 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5781
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5785
::exit(___);}
#if 0
#line 5781
{ 
#line 5782
uint4 tmp; 
#line 5783
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5784
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 5785
} 
#endif
#line 5787 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5788
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5792
::exit(___);}
#if 0
#line 5788
{ 
#line 5789
uint4 tmp; 
#line 5790
__tex_2d_grad_v4u32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5791
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5792
} 
#endif
#line 5803 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5804
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5808
::exit(___);}
#if 0
#line 5804
{ 
#line 5805
float4 tmp; 
#line 5806
__tex_2d_grad_v4f32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5807
(*retVal) = (tmp.x); 
#line 5808
} 
#endif
#line 5810 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5811
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5815
::exit(___);}
#if 0
#line 5811
{ 
#line 5812
float4 tmp; 
#line 5813
__tex_2d_grad_v4f32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5814
(*retVal) = make_float1(tmp.x); 
#line 5815
} 
#endif
#line 5817 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5818
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5822
::exit(___);}
#if 0
#line 5818
{ 
#line 5819
float4 tmp; 
#line 5820
__tex_2d_grad_v4f32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5821
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 5822
} 
#endif
#line 5824 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy) 
#line 5825
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)dPdx;(void)dPdy;
#line 5829
::exit(___);}
#if 0
#line 5825
{ 
#line 5826
float4 tmp; 
#line 5827
__tex_2d_grad_v4f32_f32(texObject, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5828
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5829
} 
#endif
#line 5837 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5838
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5847 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 5838 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 5843 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 5844
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5846 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 5847
} 
#endif
#line 5848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5849
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5853
::exit(___);}
#if 0
#line 5849
{ 
#line 5850
int4 tmp; 
#line 5851
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5852
(*retVal) = ((signed char)(tmp.x)); 
#line 5853
} 
#endif
#line 5855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5856
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5860
::exit(___);}
#if 0
#line 5856
{ 
#line 5857
int4 tmp; 
#line 5858
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5859
(*retVal) = make_char1(tmp.x); 
#line 5860
} 
#endif
#line 5862 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5863
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5867
::exit(___);}
#if 0
#line 5863
{ 
#line 5864
int4 tmp; 
#line 5865
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5866
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 5867
} 
#endif
#line 5869 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5870
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5874
::exit(___);}
#if 0
#line 5870
{ 
#line 5871
int4 tmp; 
#line 5872
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5873
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5874
} 
#endif
#line 5876 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5877
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5881
::exit(___);}
#if 0
#line 5877
{ 
#line 5878
uint4 tmp; 
#line 5879
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5880
(*retVal) = ((unsigned char)(tmp.x)); 
#line 5881
} 
#endif
#line 5883 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5884
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5888
::exit(___);}
#if 0
#line 5884
{ 
#line 5885
uint4 tmp; 
#line 5886
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5887
(*retVal) = make_uchar1(tmp.x); 
#line 5888
} 
#endif
#line 5890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5891
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5895
::exit(___);}
#if 0
#line 5891
{ 
#line 5892
uint4 tmp; 
#line 5893
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5894
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 5895
} 
#endif
#line 5897 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5898
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5902
::exit(___);}
#if 0
#line 5898
{ 
#line 5899
uint4 tmp; 
#line 5900
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5901
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5902
} 
#endif
#line 5910 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5911
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5915
::exit(___);}
#if 0
#line 5911
{ 
#line 5912
int4 tmp; 
#line 5913
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5914
(*retVal) = ((short)(tmp.x)); 
#line 5915
} 
#endif
#line 5917 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5918
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5922
::exit(___);}
#if 0
#line 5918
{ 
#line 5919
int4 tmp; 
#line 5920
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5921
(*retVal) = make_short1(tmp.x); 
#line 5922
} 
#endif
#line 5924 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5925
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5929
::exit(___);}
#if 0
#line 5925
{ 
#line 5926
int4 tmp; 
#line 5927
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5928
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 5929
} 
#endif
#line 5931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5932
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5936
::exit(___);}
#if 0
#line 5932
{ 
#line 5933
int4 tmp; 
#line 5934
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5935
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5936
} 
#endif
#line 5938 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5939
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5943
::exit(___);}
#if 0
#line 5939
{ 
#line 5940
uint4 tmp; 
#line 5941
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5942
(*retVal) = ((unsigned short)(tmp.x)); 
#line 5943
} 
#endif
#line 5945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5946
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5950
::exit(___);}
#if 0
#line 5946
{ 
#line 5947
uint4 tmp; 
#line 5948
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5949
(*retVal) = make_ushort1(tmp.x); 
#line 5950
} 
#endif
#line 5952 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5953
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5957
::exit(___);}
#if 0
#line 5953
{ 
#line 5954
uint4 tmp; 
#line 5955
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5956
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 5957
} 
#endif
#line 5959 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5960
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5964
::exit(___);}
#if 0
#line 5960
{ 
#line 5961
uint4 tmp; 
#line 5962
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5963
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5964
} 
#endif
#line 5972 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5973
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5977
::exit(___);}
#if 0
#line 5973
{ 
#line 5974
int4 tmp; 
#line 5975
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5976
(*retVal) = (tmp.x); 
#line 5977
} 
#endif
#line 5979 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5980
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5984
::exit(___);}
#if 0
#line 5980
{ 
#line 5981
int4 tmp; 
#line 5982
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5983
(*retVal) = make_int1(tmp.x); 
#line 5984
} 
#endif
#line 5986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5987
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5991
::exit(___);}
#if 0
#line 5987
{ 
#line 5988
int4 tmp; 
#line 5989
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5990
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 5991
} 
#endif
#line 5993 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 5994
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 5998
::exit(___);}
#if 0
#line 5994
{ 
#line 5995
int4 tmp; 
#line 5996
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 5997
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 5998
} 
#endif
#line 6000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6001
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6005
::exit(___);}
#if 0
#line 6001
{ 
#line 6002
uint4 tmp; 
#line 6003
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6004
(*retVal) = (tmp.x); 
#line 6005
} 
#endif
#line 6007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6008
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6012
::exit(___);}
#if 0
#line 6008
{ 
#line 6009
uint4 tmp; 
#line 6010
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6011
(*retVal) = make_uint1(tmp.x); 
#line 6012
} 
#endif
#line 6014 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6015
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6019
::exit(___);}
#if 0
#line 6015
{ 
#line 6016
uint4 tmp; 
#line 6017
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6018
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 6019
} 
#endif
#line 6021 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6022
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6026
::exit(___);}
#if 0
#line 6022
{ 
#line 6023
uint4 tmp; 
#line 6024
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6025
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6026
} 
#endif
#line 6036 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(long *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6037
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6041
::exit(___);}
#if 0
#line 6037
{ 
#line 6038
int4 tmp; 
#line 6039
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6040
(*retVal) = ((long)(tmp.x)); 
#line 6041
} 
#endif
#line 6043 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6044
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6048
::exit(___);}
#if 0
#line 6044
{ 
#line 6045
int4 tmp; 
#line 6046
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6047
(*retVal) = make_long1(tmp.x); 
#line 6048
} 
#endif
#line 6050 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6051
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6055
::exit(___);}
#if 0
#line 6051
{ 
#line 6052
int4 tmp; 
#line 6053
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6054
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 6055
} 
#endif
#line 6057 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6058
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6062
::exit(___);}
#if 0
#line 6058
{ 
#line 6059
int4 tmp; 
#line 6060
__tex_3d_grad_v4s32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6061
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6062
} 
#endif
#line 6064 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6065
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6069
::exit(___);}
#if 0
#line 6065
{ 
#line 6066
uint4 tmp; 
#line 6067
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6068
(*retVal) = ((unsigned long)(tmp.x)); 
#line 6069
} 
#endif
#line 6071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6072
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6076
::exit(___);}
#if 0
#line 6072
{ 
#line 6073
uint4 tmp; 
#line 6074
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6075
(*retVal) = make_ulong1(tmp.x); 
#line 6076
} 
#endif
#line 6078 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6079
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6083
::exit(___);}
#if 0
#line 6079
{ 
#line 6080
uint4 tmp; 
#line 6081
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6082
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 6083
} 
#endif
#line 6085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6086
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6090
::exit(___);}
#if 0
#line 6086
{ 
#line 6087
uint4 tmp; 
#line 6088
__tex_3d_grad_v4u32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6089
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6090
} 
#endif
#line 6101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6102
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6106
::exit(___);}
#if 0
#line 6102
{ 
#line 6103
float4 tmp; 
#line 6104
__tex_3d_grad_v4f32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6105
(*retVal) = (tmp.x); 
#line 6106
} 
#endif
#line 6108 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6109
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6113
::exit(___);}
#if 0
#line 6109
{ 
#line 6110
float4 tmp; 
#line 6111
__tex_3d_grad_v4f32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6112
(*retVal) = make_float1(tmp.x); 
#line 6113
} 
#endif
#line 6115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6116
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6120
::exit(___);}
#if 0
#line 6116
{ 
#line 6117
float4 tmp; 
#line 6118
__tex_3d_grad_v4f32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6119
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 6120
} 
#endif
#line 6122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex3DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy) 
#line 6123
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)z;(void)dPdx;(void)dPdy;
#line 6127
::exit(___);}
#if 0
#line 6123
{ 
#line 6124
float4 tmp; 
#line 6125
__tex_3d_grad_v4f32_f32(texObject, x, y, z, dPdx.x, dPdx.y, dPdx.z, dPdy.x, dPdy.y, dPdy.z, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6126
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6127
} 
#endif
#line 6135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6136
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 6136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 6141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 6142
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 6145
} 
#endif
#line 6146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(signed char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6147
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6151
::exit(___);}
#if 0
#line 6147
{ 
#line 6148
int4 tmp; 
#line 6149
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6150
(*retVal) = ((signed char)(tmp.x)); 
#line 6151
} 
#endif
#line 6153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(char1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6154
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6158
::exit(___);}
#if 0
#line 6154
{ 
#line 6155
int4 tmp; 
#line 6156
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6157
(*retVal) = make_char1(tmp.x); 
#line 6158
} 
#endif
#line 6160 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(char2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6161
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6165
::exit(___);}
#if 0
#line 6161
{ 
#line 6162
int4 tmp; 
#line 6163
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6164
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 6165
} 
#endif
#line 6167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(char4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6168
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6172
::exit(___);}
#if 0
#line 6168
{ 
#line 6169
int4 tmp; 
#line 6170
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6171
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6172
} 
#endif
#line 6174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6175
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6179
::exit(___);}
#if 0
#line 6175
{ 
#line 6176
uint4 tmp; 
#line 6177
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6178
(*retVal) = ((unsigned char)(tmp.x)); 
#line 6179
} 
#endif
#line 6181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6182
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6186
::exit(___);}
#if 0
#line 6182
{ 
#line 6183
uint4 tmp; 
#line 6184
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6185
(*retVal) = make_uchar1(tmp.x); 
#line 6186
} 
#endif
#line 6188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6189
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6193
::exit(___);}
#if 0
#line 6189
{ 
#line 6190
uint4 tmp; 
#line 6191
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6192
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 6193
} 
#endif
#line 6195 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6196
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6200
::exit(___);}
#if 0
#line 6196
{ 
#line 6197
uint4 tmp; 
#line 6198
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6199
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6200
} 
#endif
#line 6208 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(short *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6209
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6213
::exit(___);}
#if 0
#line 6209
{ 
#line 6210
int4 tmp; 
#line 6211
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6212
(*retVal) = ((short)(tmp.x)); 
#line 6213
} 
#endif
#line 6215 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(short1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6216
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6220
::exit(___);}
#if 0
#line 6216
{ 
#line 6217
int4 tmp; 
#line 6218
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6219
(*retVal) = make_short1(tmp.x); 
#line 6220
} 
#endif
#line 6222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(short2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6223
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6227
::exit(___);}
#if 0
#line 6223
{ 
#line 6224
int4 tmp; 
#line 6225
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6226
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 6227
} 
#endif
#line 6229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(short4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6230
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6234
::exit(___);}
#if 0
#line 6230
{ 
#line 6231
int4 tmp; 
#line 6232
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6233
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6234
} 
#endif
#line 6236 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6237
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6241
::exit(___);}
#if 0
#line 6237
{ 
#line 6238
uint4 tmp; 
#line 6239
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6240
(*retVal) = ((unsigned short)(tmp.x)); 
#line 6241
} 
#endif
#line 6243 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6244
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6248
::exit(___);}
#if 0
#line 6244
{ 
#line 6245
uint4 tmp; 
#line 6246
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6247
(*retVal) = make_ushort1(tmp.x); 
#line 6248
} 
#endif
#line 6250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6251
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6255
::exit(___);}
#if 0
#line 6251
{ 
#line 6252
uint4 tmp; 
#line 6253
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6254
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 6255
} 
#endif
#line 6257 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6258
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6262
::exit(___);}
#if 0
#line 6258
{ 
#line 6259
uint4 tmp; 
#line 6260
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6261
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6262
} 
#endif
#line 6270 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(int *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6271
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6275
::exit(___);}
#if 0
#line 6271
{ 
#line 6272
int4 tmp; 
#line 6273
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6274
(*retVal) = (tmp.x); 
#line 6275
} 
#endif
#line 6277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(int1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6278
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6282
::exit(___);}
#if 0
#line 6278
{ 
#line 6279
int4 tmp; 
#line 6280
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6281
(*retVal) = make_int1(tmp.x); 
#line 6282
} 
#endif
#line 6284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(int2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6285
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6289
::exit(___);}
#if 0
#line 6285
{ 
#line 6286
int4 tmp; 
#line 6287
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6288
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 6289
} 
#endif
#line 6291 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(int4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6292
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6296
::exit(___);}
#if 0
#line 6292
{ 
#line 6293
int4 tmp; 
#line 6294
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6295
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6296
} 
#endif
#line 6298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6299
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6303
::exit(___);}
#if 0
#line 6299
{ 
#line 6300
uint4 tmp; 
#line 6301
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6302
(*retVal) = (tmp.x); 
#line 6303
} 
#endif
#line 6305 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6306
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6310
::exit(___);}
#if 0
#line 6306
{ 
#line 6307
uint4 tmp; 
#line 6308
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6309
(*retVal) = make_uint1(tmp.x); 
#line 6310
} 
#endif
#line 6312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6313
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6317
::exit(___);}
#if 0
#line 6313
{ 
#line 6314
uint4 tmp; 
#line 6315
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6316
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 6317
} 
#endif
#line 6319 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6320
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6324
::exit(___);}
#if 0
#line 6320
{ 
#line 6321
uint4 tmp; 
#line 6322
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6323
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6324
} 
#endif
#line 6334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(long *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6335
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6339
::exit(___);}
#if 0
#line 6335
{ 
#line 6336
int4 tmp; 
#line 6337
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6338
(*retVal) = ((long)(tmp.x)); 
#line 6339
} 
#endif
#line 6341 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(long1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6342
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6346
::exit(___);}
#if 0
#line 6342
{ 
#line 6343
int4 tmp; 
#line 6344
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6345
(*retVal) = make_long1(tmp.x); 
#line 6346
} 
#endif
#line 6348 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(long2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6349
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6353
::exit(___);}
#if 0
#line 6349
{ 
#line 6350
int4 tmp; 
#line 6351
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6352
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 6353
} 
#endif
#line 6355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(long4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6356
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6360
::exit(___);}
#if 0
#line 6356
{ 
#line 6357
int4 tmp; 
#line 6358
__tex_1d_array_grad_v4s32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6359
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6360
} 
#endif
#line 6362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(unsigned long *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6363
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6367
::exit(___);}
#if 0
#line 6363
{ 
#line 6364
uint4 tmp; 
#line 6365
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6366
(*retVal) = ((unsigned long)(tmp.x)); 
#line 6367
} 
#endif
#line 6369 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(ulong1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6370
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6374
::exit(___);}
#if 0
#line 6370
{ 
#line 6371
uint4 tmp; 
#line 6372
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6373
(*retVal) = make_ulong1(tmp.x); 
#line 6374
} 
#endif
#line 6376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(ulong2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6377
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6381
::exit(___);}
#if 0
#line 6377
{ 
#line 6378
uint4 tmp; 
#line 6379
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6380
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 6381
} 
#endif
#line 6383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(ulong4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6384
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6388
::exit(___);}
#if 0
#line 6384
{ 
#line 6385
uint4 tmp; 
#line 6386
__tex_1d_array_grad_v4u32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6387
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6388
} 
#endif
#line 6399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(float *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6400
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6404
::exit(___);}
#if 0
#line 6400
{ 
#line 6401
float4 tmp; 
#line 6402
__tex_1d_array_grad_v4f32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6403
(*retVal) = (tmp.x); 
#line 6404
} 
#endif
#line 6406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(float1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6407
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6411
::exit(___);}
#if 0
#line 6407
{ 
#line 6408
float4 tmp; 
#line 6409
__tex_1d_array_grad_v4f32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6410
(*retVal) = make_float1(tmp.x); 
#line 6411
} 
#endif
#line 6413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(float2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6414
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6418
::exit(___);}
#if 0
#line 6414
{ 
#line 6415
float4 tmp; 
#line 6416
__tex_1d_array_grad_v4f32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6417
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 6418
} 
#endif
#line 6420 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex1DLayeredGrad(float4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy) 
#line 6421
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)layer;(void)dPdx;(void)dPdy;
#line 6425
::exit(___);}
#if 0
#line 6421
{ 
#line 6422
float4 tmp; 
#line 6423
__tex_1d_array_grad_v4f32_f32(texObject, layer, x, dPdx, dPdy, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6424
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6425
} 
#endif
#line 6433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6434
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6443 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
::exit(___);}
#if 0
#line 6434 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
{ 
#line 6439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
int4 tmp; 
#line 6440
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6442 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
(*retVal) = ((char)(tmp.x)); 
#line 6443
} 
#endif
#line 6444 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6445
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6449
::exit(___);}
#if 0
#line 6445
{ 
#line 6446
int4 tmp; 
#line 6447
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6448
(*retVal) = ((signed char)(tmp.x)); 
#line 6449
} 
#endif
#line 6451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6452
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6456
::exit(___);}
#if 0
#line 6452
{ 
#line 6453
int4 tmp; 
#line 6454
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6455
(*retVal) = make_char1(tmp.x); 
#line 6456
} 
#endif
#line 6458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6459
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6463
::exit(___);}
#if 0
#line 6459
{ 
#line 6460
int4 tmp; 
#line 6461
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6462
(*retVal) = make_char2(tmp.x, tmp.y); 
#line 6463
} 
#endif
#line 6465 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6466
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6470
::exit(___);}
#if 0
#line 6466
{ 
#line 6467
int4 tmp; 
#line 6468
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6469
(*retVal) = make_char4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6470
} 
#endif
#line 6472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6473
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6477
::exit(___);}
#if 0
#line 6473
{ 
#line 6474
uint4 tmp; 
#line 6475
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6476
(*retVal) = ((unsigned char)(tmp.x)); 
#line 6477
} 
#endif
#line 6479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6480
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6484
::exit(___);}
#if 0
#line 6480
{ 
#line 6481
uint4 tmp; 
#line 6482
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6483
(*retVal) = make_uchar1(tmp.x); 
#line 6484
} 
#endif
#line 6486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6487
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6491
::exit(___);}
#if 0
#line 6487
{ 
#line 6488
uint4 tmp; 
#line 6489
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6490
(*retVal) = make_uchar2(tmp.x, tmp.y); 
#line 6491
} 
#endif
#line 6493 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6494
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6498
::exit(___);}
#if 0
#line 6494
{ 
#line 6495
uint4 tmp; 
#line 6496
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6497
(*retVal) = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6498
} 
#endif
#line 6506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6507
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6511
::exit(___);}
#if 0
#line 6507
{ 
#line 6508
int4 tmp; 
#line 6509
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6510
(*retVal) = ((short)(tmp.x)); 
#line 6511
} 
#endif
#line 6513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6514
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6518
::exit(___);}
#if 0
#line 6514
{ 
#line 6515
int4 tmp; 
#line 6516
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6517
(*retVal) = make_short1(tmp.x); 
#line 6518
} 
#endif
#line 6520 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6521
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6525
::exit(___);}
#if 0
#line 6521
{ 
#line 6522
int4 tmp; 
#line 6523
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6524
(*retVal) = make_short2(tmp.x, tmp.y); 
#line 6525
} 
#endif
#line 6527 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6528
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6532
::exit(___);}
#if 0
#line 6528
{ 
#line 6529
int4 tmp; 
#line 6530
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6531
(*retVal) = make_short4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6532
} 
#endif
#line 6534 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6535
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6539
::exit(___);}
#if 0
#line 6535
{ 
#line 6536
uint4 tmp; 
#line 6537
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6538
(*retVal) = ((unsigned short)(tmp.x)); 
#line 6539
} 
#endif
#line 6541 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6542
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6546
::exit(___);}
#if 0
#line 6542
{ 
#line 6543
uint4 tmp; 
#line 6544
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6545
(*retVal) = make_ushort1(tmp.x); 
#line 6546
} 
#endif
#line 6548 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6549
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6553
::exit(___);}
#if 0
#line 6549
{ 
#line 6550
uint4 tmp; 
#line 6551
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6552
(*retVal) = make_ushort2(tmp.x, tmp.y); 
#line 6553
} 
#endif
#line 6555 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6556
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6560
::exit(___);}
#if 0
#line 6556
{ 
#line 6557
uint4 tmp; 
#line 6558
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6559
(*retVal) = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6560
} 
#endif
#line 6568 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6569
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6573
::exit(___);}
#if 0
#line 6569
{ 
#line 6570
int4 tmp; 
#line 6571
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6572
(*retVal) = (tmp.x); 
#line 6573
} 
#endif
#line 6575 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6576
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6580
::exit(___);}
#if 0
#line 6576
{ 
#line 6577
int4 tmp; 
#line 6578
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6579
(*retVal) = make_int1(tmp.x); 
#line 6580
} 
#endif
#line 6582 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6583
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6587
::exit(___);}
#if 0
#line 6583
{ 
#line 6584
int4 tmp; 
#line 6585
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6586
(*retVal) = make_int2(tmp.x, tmp.y); 
#line 6587
} 
#endif
#line 6589 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6590
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6594
::exit(___);}
#if 0
#line 6590
{ 
#line 6591
int4 tmp; 
#line 6592
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6593
(*retVal) = make_int4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6594
} 
#endif
#line 6596 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(unsigned *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6597
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6601
::exit(___);}
#if 0
#line 6597
{ 
#line 6598
uint4 tmp; 
#line 6599
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6600
(*retVal) = (tmp.x); 
#line 6601
} 
#endif
#line 6603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6604
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6608
::exit(___);}
#if 0
#line 6604
{ 
#line 6605
uint4 tmp; 
#line 6606
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6607
(*retVal) = make_uint1(tmp.x); 
#line 6608
} 
#endif
#line 6610 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6611
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6615
::exit(___);}
#if 0
#line 6611
{ 
#line 6612
uint4 tmp; 
#line 6613
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6614
(*retVal) = make_uint2(tmp.x, tmp.y); 
#line 6615
} 
#endif
#line 6617 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6618
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6622
::exit(___);}
#if 0
#line 6618
{ 
#line 6619
uint4 tmp; 
#line 6620
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6621
(*retVal) = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6622
} 
#endif
#line 6632 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(long *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6633
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6637
::exit(___);}
#if 0
#line 6633
{ 
#line 6634
int4 tmp; 
#line 6635
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6636
(*retVal) = ((long)(tmp.x)); 
#line 6637
} 
#endif
#line 6639 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(long1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6640
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6644
::exit(___);}
#if 0
#line 6640
{ 
#line 6641
int4 tmp; 
#line 6642
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6643
(*retVal) = make_long1(tmp.x); 
#line 6644
} 
#endif
#line 6646 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(long2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6647
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6651
::exit(___);}
#if 0
#line 6647
{ 
#line 6648
int4 tmp; 
#line 6649
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6650
(*retVal) = make_long2(tmp.x, tmp.y); 
#line 6651
} 
#endif
#line 6653 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(long4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6654
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6658
::exit(___);}
#if 0
#line 6654
{ 
#line 6655
int4 tmp; 
#line 6656
__tex_2d_array_grad_v4s32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6657
(*retVal) = make_long4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6658
} 
#endif
#line 6660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6661
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6665
::exit(___);}
#if 0
#line 6661
{ 
#line 6662
uint4 tmp; 
#line 6663
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6664
(*retVal) = ((unsigned long)(tmp.x)); 
#line 6665
} 
#endif
#line 6667 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6668
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6672
::exit(___);}
#if 0
#line 6668
{ 
#line 6669
uint4 tmp; 
#line 6670
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6671
(*retVal) = make_ulong1(tmp.x); 
#line 6672
} 
#endif
#line 6674 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6675
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6679
::exit(___);}
#if 0
#line 6675
{ 
#line 6676
uint4 tmp; 
#line 6677
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6678
(*retVal) = make_ulong2(tmp.x, tmp.y); 
#line 6679
} 
#endif
#line 6681 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6682
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6686
::exit(___);}
#if 0
#line 6682
{ 
#line 6683
uint4 tmp; 
#line 6684
__tex_2d_array_grad_v4u32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6685
(*retVal) = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6686
} 
#endif
#line 6697 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6698
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6702
::exit(___);}
#if 0
#line 6698
{ 
#line 6699
float4 tmp; 
#line 6700
__tex_2d_array_grad_v4f32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6701
(*retVal) = (tmp.x); 
#line 6702
} 
#endif
#line 6704 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6705
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6709
::exit(___);}
#if 0
#line 6705
{ 
#line 6706
float4 tmp; 
#line 6707
__tex_2d_array_grad_v4f32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6708
(*retVal) = make_float1(tmp.x); 
#line 6709
} 
#endif
#line 6711 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6712
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6716
::exit(___);}
#if 0
#line 6712
{ 
#line 6713
float4 tmp; 
#line 6714
__tex_2d_array_grad_v4f32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6715
(*retVal) = make_float2(tmp.x, tmp.y); 
#line 6716
} 
#endif
#line 6718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\texture_indirect_functions.hpp"
static __forceinline void tex2DLayeredGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy) 
#line 6719
{int volatile ___ = 1;(void)retVal;(void)texObject;(void)x;(void)y;(void)layer;(void)dPdx;(void)dPdy;
#line 6723
::exit(___);}
#if 0
#line 6719
{ 
#line 6720
float4 tmp; 
#line 6721
__tex_2d_array_grad_v4f32_f32(texObject, layer, x, y, dPdx.x, dPdx.y, dPdy.x, dPdy.y, &(tmp.x), &(tmp.y), &(tmp.z), &(tmp.w)); 
#line 6722
(*retVal) = make_float4(tmp.x, tmp.y, tmp.z, tmp.w); 
#line 6723
} 
#endif
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.h"
extern "C" { void __suld_1d_i8_clamp(char *, unsigned __int64, int); } 
#line 78
extern "C" { void __suld_1d_i16_clamp(short *, unsigned __int64, int); } 
#line 79
extern "C" { void __suld_1d_i32_clamp(int *, unsigned __int64, int); } 
#line 80
extern "C" { void __suld_1d_i64_clamp(__int64 *, unsigned __int64, int); } 
#line 81
extern "C" { void __suld_1d_v2i8_clamp(char *, char *, unsigned __int64, int); } 
#line 82
extern "C" { void __suld_1d_v2i16_clamp(short *, short *, unsigned __int64, int); } 
#line 83
extern "C" { void __suld_1d_v2i32_clamp(int *, int *, unsigned __int64, int); } 
#line 84
extern "C" { void __suld_1d_v2i64_clamp(__int64 *, __int64 *, unsigned __int64, int); } 
#line 85
extern "C" { void __suld_1d_v4i8_clamp(char *, char *, char *, char *, unsigned __int64, int); } 
#line 86
extern "C" { void __suld_1d_v4i16_clamp(short *, short *, short *, short *, unsigned __int64, int); } 
#line 87
extern "C" { void __suld_1d_v4i32_clamp(int *, int *, int *, int *, unsigned __int64, int); } 
#line 88
extern "C" { void __suld_1d_array_i8_clamp(char *, unsigned __int64, int, int); } 
#line 89
extern "C" { void __suld_1d_array_i16_clamp(short *, unsigned __int64, int, int); } 
#line 90
extern "C" { void __suld_1d_array_i32_clamp(int *, unsigned __int64, int, int); } 
#line 91
extern "C" { void __suld_1d_array_i64_clamp(__int64 *, unsigned __int64, int, int); } 
#line 92
extern "C" { void __suld_1d_array_v2i8_clamp(char *, char *, unsigned __int64, int, int); } 
#line 93
extern "C" { void __suld_1d_array_v2i16_clamp(short *, short *, unsigned __int64, int, int); } 
#line 94
extern "C" { void __suld_1d_array_v2i32_clamp(int *, int *, unsigned __int64, int, int); } 
#line 95
extern "C" { void __suld_1d_array_v2i64_clamp(__int64 *, __int64 *, unsigned __int64, int, int); } 
#line 96
extern "C" { void __suld_1d_array_v4i8_clamp(char *, char *, char *, char *, unsigned __int64, int, int); } 
#line 97
extern "C" { void __suld_1d_array_v4i16_clamp(short *, short *, short *, short *, unsigned __int64, int, int); } 
#line 98
extern "C" { void __suld_1d_array_v4i32_clamp(int *, int *, int *, int *, unsigned __int64, int, int); } 
#line 99
extern "C" { void __suld_2d_i8_clamp(char *, unsigned __int64, int, int); } 
#line 100
extern "C" { void __suld_2d_i16_clamp(short *, unsigned __int64, int, int); } 
#line 101
extern "C" { void __suld_2d_i32_clamp(int *, unsigned __int64, int, int); } 
#line 102
extern "C" { void __suld_2d_i64_clamp(__int64 *, unsigned __int64, int, int); } 
#line 103
extern "C" { void __suld_2d_v2i8_clamp(char *, char *, unsigned __int64, int, int); } 
#line 104
extern "C" { void __suld_2d_v2i16_clamp(short *, short *, unsigned __int64, int, int); } 
#line 105
extern "C" { void __suld_2d_v2i32_clamp(int *, int *, unsigned __int64, int, int); } 
#line 106
extern "C" { void __suld_2d_v2i64_clamp(__int64 *, __int64 *, unsigned __int64, int, int); } 
#line 107
extern "C" { void __suld_2d_v4i8_clamp(char *, char *, char *, char *, unsigned __int64, int, int); } 
#line 108
extern "C" { void __suld_2d_v4i16_clamp(short *, short *, short *, short *, unsigned __int64, int, int); } 
#line 109
extern "C" { void __suld_2d_v4i32_clamp(int *, int *, int *, int *, unsigned __int64, int, int); } 
#line 110
extern "C" { void __suld_2d_array_i8_clamp(char *, unsigned __int64, int, int, int); } 
#line 111
extern "C" { void __suld_2d_array_i16_clamp(short *, unsigned __int64, int, int, int); } 
#line 112
extern "C" { void __suld_2d_array_i32_clamp(int *, unsigned __int64, int, int, int); } 
#line 113
extern "C" { void __suld_2d_array_i64_clamp(__int64 *, unsigned __int64, int, int, int); } 
#line 114
extern "C" { void __suld_2d_array_v2i8_clamp(char *, char *, unsigned __int64, int, int, int); } 
#line 115
extern "C" { void __suld_2d_array_v2i16_clamp(short *, short *, unsigned __int64, int, int, int); } 
#line 116
extern "C" { void __suld_2d_array_v2i32_clamp(int *, int *, unsigned __int64, int, int, int); } 
#line 117
extern "C" { void __suld_2d_array_v2i64_clamp(__int64 *, __int64 *, unsigned __int64, int, int, int); } 
#line 118
extern "C" { void __suld_2d_array_v4i8_clamp(char *, char *, char *, char *, unsigned __int64, int, int, int); } 
#line 119
extern "C" { void __suld_2d_array_v4i16_clamp(short *, short *, short *, short *, unsigned __int64, int, int, int); } 
#line 120
extern "C" { void __suld_2d_array_v4i32_clamp(int *, int *, int *, int *, unsigned __int64, int, int, int); } 
#line 121
extern "C" { void __suld_3d_i8_clamp(char *, unsigned __int64, int, int, int); } 
#line 122
extern "C" { void __suld_3d_i16_clamp(short *, unsigned __int64, int, int, int); } 
#line 123
extern "C" { void __suld_3d_i32_clamp(int *, unsigned __int64, int, int, int); } 
#line 124
extern "C" { void __suld_3d_i64_clamp(__int64 *, unsigned __int64, int, int, int); } 
#line 125
extern "C" { void __suld_3d_v2i8_clamp(char *, char *, unsigned __int64, int, int, int); } 
#line 126
extern "C" { void __suld_3d_v2i16_clamp(short *, short *, unsigned __int64, int, int, int); } 
#line 127
extern "C" { void __suld_3d_v2i32_clamp(int *, int *, unsigned __int64, int, int, int); } 
#line 128
extern "C" { void __suld_3d_v2i64_clamp(__int64 *, __int64 *, unsigned __int64, int, int, int); } 
#line 129
extern "C" { void __suld_3d_v4i8_clamp(char *, char *, char *, char *, unsigned __int64, int, int, int); } 
#line 130
extern "C" { void __suld_3d_v4i16_clamp(short *, short *, short *, short *, unsigned __int64, int, int, int); } 
#line 131
extern "C" { void __suld_3d_v4i32_clamp(int *, int *, int *, int *, unsigned __int64, int, int, int); } 
#line 132
extern "C" { void __suld_1d_i8_trap(char *, unsigned __int64, int); } 
#line 133
extern "C" { void __suld_1d_i16_trap(short *, unsigned __int64, int); } 
#line 134
extern "C" { void __suld_1d_i32_trap(int *, unsigned __int64, int); } 
#line 135
extern "C" { void __suld_1d_i64_trap(__int64 *, unsigned __int64, int); } 
#line 136
extern "C" { void __suld_1d_v2i8_trap(char *, char *, unsigned __int64, int); } 
#line 137
extern "C" { void __suld_1d_v2i16_trap(short *, short *, unsigned __int64, int); } 
#line 138
extern "C" { void __suld_1d_v2i32_trap(int *, int *, unsigned __int64, int); } 
#line 139
extern "C" { void __suld_1d_v2i64_trap(__int64 *, __int64 *, unsigned __int64, int); } 
#line 140
extern "C" { void __suld_1d_v4i8_trap(char *, char *, char *, char *, unsigned __int64, int); } 
#line 141
extern "C" { void __suld_1d_v4i16_trap(short *, short *, short *, short *, unsigned __int64, int); } 
#line 142
extern "C" { void __suld_1d_v4i32_trap(int *, int *, int *, int *, unsigned __int64, int); } 
#line 143
extern "C" { void __suld_1d_array_i8_trap(char *, unsigned __int64, int, int); } 
#line 144
extern "C" { void __suld_1d_array_i16_trap(short *, unsigned __int64, int, int); } 
#line 145
extern "C" { void __suld_1d_array_i32_trap(int *, unsigned __int64, int, int); } 
#line 146
extern "C" { void __suld_1d_array_i64_trap(__int64 *, unsigned __int64, int, int); } 
#line 147
extern "C" { void __suld_1d_array_v2i8_trap(char *, char *, unsigned __int64, int, int); } 
#line 148
extern "C" { void __suld_1d_array_v2i16_trap(short *, short *, unsigned __int64, int, int); } 
#line 149
extern "C" { void __suld_1d_array_v2i32_trap(int *, int *, unsigned __int64, int, int); } 
#line 150
extern "C" { void __suld_1d_array_v2i64_trap(__int64 *, __int64 *, unsigned __int64, int, int); } 
#line 151
extern "C" { void __suld_1d_array_v4i8_trap(char *, char *, char *, char *, unsigned __int64, int, int); } 
#line 152
extern "C" { void __suld_1d_array_v4i16_trap(short *, short *, short *, short *, unsigned __int64, int, int); } 
#line 153
extern "C" { void __suld_1d_array_v4i32_trap(int *, int *, int *, int *, unsigned __int64, int, int); } 
#line 154
extern "C" { void __suld_2d_i8_trap(char *, unsigned __int64, int, int); } 
#line 155
extern "C" { void __suld_2d_i16_trap(short *, unsigned __int64, int, int); } 
#line 156
extern "C" { void __suld_2d_i32_trap(int *, unsigned __int64, int, int); } 
#line 157
extern "C" { void __suld_2d_i64_trap(__int64 *, unsigned __int64, int, int); } 
#line 158
extern "C" { void __suld_2d_v2i8_trap(char *, char *, unsigned __int64, int, int); } 
#line 159
extern "C" { void __suld_2d_v2i16_trap(short *, short *, unsigned __int64, int, int); } 
#line 160
extern "C" { void __suld_2d_v2i32_trap(int *, int *, unsigned __int64, int, int); } 
#line 161
extern "C" { void __suld_2d_v2i64_trap(__int64 *, __int64 *, unsigned __int64, int, int); } 
#line 162
extern "C" { void __suld_2d_v4i8_trap(char *, char *, char *, char *, unsigned __int64, int, int); } 
#line 163
extern "C" { void __suld_2d_v4i16_trap(short *, short *, short *, short *, unsigned __int64, int, int); } 
#line 164
extern "C" { void __suld_2d_v4i32_trap(int *, int *, int *, int *, unsigned __int64, int, int); } 
#line 165
extern "C" { void __suld_2d_array_i8_trap(char *, unsigned __int64, int, int, int); } 
#line 166
extern "C" { void __suld_2d_array_i16_trap(short *, unsigned __int64, int, int, int); } 
#line 167
extern "C" { void __suld_2d_array_i32_trap(int *, unsigned __int64, int, int, int); } 
#line 168
extern "C" { void __suld_2d_array_i64_trap(__int64 *, unsigned __int64, int, int, int); } 
#line 169
extern "C" { void __suld_2d_array_v2i8_trap(char *, char *, unsigned __int64, int, int, int); } 
#line 170
extern "C" { void __suld_2d_array_v2i16_trap(short *, short *, unsigned __int64, int, int, int); } 
#line 171
extern "C" { void __suld_2d_array_v2i32_trap(int *, int *, unsigned __int64, int, int, int); } 
#line 172
extern "C" { void __suld_2d_array_v2i64_trap(__int64 *, __int64 *, unsigned __int64, int, int, int); } 
#line 173
extern "C" { void __suld_2d_array_v4i8_trap(char *, char *, char *, char *, unsigned __int64, int, int, int); } 
#line 174
extern "C" { void __suld_2d_array_v4i16_trap(short *, short *, short *, short *, unsigned __int64, int, int, int); } 
#line 175
extern "C" { void __suld_2d_array_v4i32_trap(int *, int *, int *, int *, unsigned __int64, int, int, int); } 
#line 176
extern "C" { void __suld_3d_i8_trap(char *, unsigned __int64, int, int, int); } 
#line 177
extern "C" { void __suld_3d_i16_trap(short *, unsigned __int64, int, int, int); } 
#line 178
extern "C" { void __suld_3d_i32_trap(int *, unsigned __int64, int, int, int); } 
#line 179
extern "C" { void __suld_3d_i64_trap(__int64 *, unsigned __int64, int, int, int); } 
#line 180
extern "C" { void __suld_3d_v2i8_trap(char *, char *, unsigned __int64, int, int, int); } 
#line 181
extern "C" { void __suld_3d_v2i16_trap(short *, short *, unsigned __int64, int, int, int); } 
#line 182
extern "C" { void __suld_3d_v2i32_trap(int *, int *, unsigned __int64, int, int, int); } 
#line 183
extern "C" { void __suld_3d_v2i64_trap(__int64 *, __int64 *, unsigned __int64, int, int, int); } 
#line 184
extern "C" { void __suld_3d_v4i8_trap(char *, char *, char *, char *, unsigned __int64, int, int, int); } 
#line 185
extern "C" { void __suld_3d_v4i16_trap(short *, short *, short *, short *, unsigned __int64, int, int, int); } 
#line 186
extern "C" { void __suld_3d_v4i32_trap(int *, int *, int *, int *, unsigned __int64, int, int, int); } 
#line 187
extern "C" { void __suld_1d_i8_zero(char *, unsigned __int64, int); } 
#line 188
extern "C" { void __suld_1d_i16_zero(short *, unsigned __int64, int); } 
#line 189
extern "C" { void __suld_1d_i32_zero(int *, unsigned __int64, int); } 
#line 190
extern "C" { void __suld_1d_i64_zero(__int64 *, unsigned __int64, int); } 
#line 191
extern "C" { void __suld_1d_v2i8_zero(char *, char *, unsigned __int64, int); } 
#line 192
extern "C" { void __suld_1d_v2i16_zero(short *, short *, unsigned __int64, int); } 
#line 193
extern "C" { void __suld_1d_v2i32_zero(int *, int *, unsigned __int64, int); } 
#line 194
extern "C" { void __suld_1d_v2i64_zero(__int64 *, __int64 *, unsigned __int64, int); } 
#line 195
extern "C" { void __suld_1d_v4i8_zero(char *, char *, char *, char *, unsigned __int64, int); } 
#line 196
extern "C" { void __suld_1d_v4i16_zero(short *, short *, short *, short *, unsigned __int64, int); } 
#line 197
extern "C" { void __suld_1d_v4i32_zero(int *, int *, int *, int *, unsigned __int64, int); } 
#line 198
extern "C" { void __suld_1d_array_i8_zero(char *, unsigned __int64, int, int); } 
#line 199
extern "C" { void __suld_1d_array_i16_zero(short *, unsigned __int64, int, int); } 
#line 200
extern "C" { void __suld_1d_array_i32_zero(int *, unsigned __int64, int, int); } 
#line 201
extern "C" { void __suld_1d_array_i64_zero(__int64 *, unsigned __int64, int, int); } 
#line 202
extern "C" { void __suld_1d_array_v2i8_zero(char *, char *, unsigned __int64, int, int); } 
#line 203
extern "C" { void __suld_1d_array_v2i16_zero(short *, short *, unsigned __int64, int, int); } 
#line 204
extern "C" { void __suld_1d_array_v2i32_zero(int *, int *, unsigned __int64, int, int); } 
#line 205
extern "C" { void __suld_1d_array_v2i64_zero(__int64 *, __int64 *, unsigned __int64, int, int); } 
#line 206
extern "C" { void __suld_1d_array_v4i8_zero(char *, char *, char *, char *, unsigned __int64, int, int); } 
#line 207
extern "C" { void __suld_1d_array_v4i16_zero(short *, short *, short *, short *, unsigned __int64, int, int); } 
#line 208
extern "C" { void __suld_1d_array_v4i32_zero(int *, int *, int *, int *, unsigned __int64, int, int); } 
#line 209
extern "C" { void __suld_2d_i8_zero(char *, unsigned __int64, int, int); } 
#line 210
extern "C" { void __suld_2d_i16_zero(short *, unsigned __int64, int, int); } 
#line 211
extern "C" { void __suld_2d_i32_zero(int *, unsigned __int64, int, int); } 
#line 212
extern "C" { void __suld_2d_i64_zero(__int64 *, unsigned __int64, int, int); } 
#line 213
extern "C" { void __suld_2d_v2i8_zero(char *, char *, unsigned __int64, int, int); } 
#line 214
extern "C" { void __suld_2d_v2i16_zero(short *, short *, unsigned __int64, int, int); } 
#line 215
extern "C" { void __suld_2d_v2i32_zero(int *, int *, unsigned __int64, int, int); } 
#line 216
extern "C" { void __suld_2d_v2i64_zero(__int64 *, __int64 *, unsigned __int64, int, int); } 
#line 217
extern "C" { void __suld_2d_v4i8_zero(char *, char *, char *, char *, unsigned __int64, int, int); } 
#line 218
extern "C" { void __suld_2d_v4i16_zero(short *, short *, short *, short *, unsigned __int64, int, int); } 
#line 219
extern "C" { void __suld_2d_v4i32_zero(int *, int *, int *, int *, unsigned __int64, int, int); } 
#line 220
extern "C" { void __suld_2d_array_i8_zero(char *, unsigned __int64, int, int, int); } 
#line 221
extern "C" { void __suld_2d_array_i16_zero(short *, unsigned __int64, int, int, int); } 
#line 222
extern "C" { void __suld_2d_array_i32_zero(int *, unsigned __int64, int, int, int); } 
#line 223
extern "C" { void __suld_2d_array_i64_zero(__int64 *, unsigned __int64, int, int, int); } 
#line 224
extern "C" { void __suld_2d_array_v2i8_zero(char *, char *, unsigned __int64, int, int, int); } 
#line 225
extern "C" { void __suld_2d_array_v2i16_zero(short *, short *, unsigned __int64, int, int, int); } 
#line 226
extern "C" { void __suld_2d_array_v2i32_zero(int *, int *, unsigned __int64, int, int, int); } 
#line 227
extern "C" { void __suld_2d_array_v2i64_zero(__int64 *, __int64 *, unsigned __int64, int, int, int); } 
#line 228
extern "C" { void __suld_2d_array_v4i8_zero(char *, char *, char *, char *, unsigned __int64, int, int, int); } 
#line 229
extern "C" { void __suld_2d_array_v4i16_zero(short *, short *, short *, short *, unsigned __int64, int, int, int); } 
#line 230
extern "C" { void __suld_2d_array_v4i32_zero(int *, int *, int *, int *, unsigned __int64, int, int, int); } 
#line 231
extern "C" { void __suld_3d_i8_zero(char *, unsigned __int64, int, int, int); } 
#line 232
extern "C" { void __suld_3d_i16_zero(short *, unsigned __int64, int, int, int); } 
#line 233
extern "C" { void __suld_3d_i32_zero(int *, unsigned __int64, int, int, int); } 
#line 234
extern "C" { void __suld_3d_i64_zero(__int64 *, unsigned __int64, int, int, int); } 
#line 235
extern "C" { void __suld_3d_v2i8_zero(char *, char *, unsigned __int64, int, int, int); } 
#line 236
extern "C" { void __suld_3d_v2i16_zero(short *, short *, unsigned __int64, int, int, int); } 
#line 237
extern "C" { void __suld_3d_v2i32_zero(int *, int *, unsigned __int64, int, int, int); } 
#line 238
extern "C" { void __suld_3d_v2i64_zero(__int64 *, __int64 *, unsigned __int64, int, int, int); } 
#line 239
extern "C" { void __suld_3d_v4i8_zero(char *, char *, char *, char *, unsigned __int64, int, int, int); } 
#line 240
extern "C" { void __suld_3d_v4i16_zero(short *, short *, short *, short *, unsigned __int64, int, int, int); } 
#line 241
extern "C" { void __suld_3d_v4i32_zero(int *, int *, int *, int *, unsigned __int64, int, int, int); } 
#line 243
extern "C" { void __sust_b_1d_i8_clamp(cudaSurfaceObject_t, int, unsigned char); } 
#line 244
extern "C" { void __sust_b_1d_i16_clamp(cudaSurfaceObject_t, int, unsigned short); } 
#line 245
extern "C" { void __sust_b_1d_i32_clamp(cudaSurfaceObject_t, int, unsigned); } 
#line 246
extern "C" { void __sust_b_1d_i64_clamp(cudaSurfaceObject_t, int, unsigned __int64); } 
#line 247
extern "C" { void __sust_b_1d_v2i8_clamp(cudaSurfaceObject_t, int, uchar2); } 
#line 248
extern "C" { void __sust_b_1d_v2i16_clamp(cudaSurfaceObject_t, int, ushort2); } 
#line 249
extern "C" { void __sust_b_1d_v2i32_clamp(cudaSurfaceObject_t, int, uint2); } 
#line 250
extern "C" { void __sust_b_1d_v2i64_clamp(cudaSurfaceObject_t, int, ulonglong2); } 
#line 251
extern "C" { void __sust_b_1d_v4i8_clamp(cudaSurfaceObject_t, int, uchar4); } 
#line 252
extern "C" { void __sust_b_1d_v4i16_clamp(cudaSurfaceObject_t, int, ushort4); } 
#line 253
extern "C" { void __sust_b_1d_v4i32_clamp(cudaSurfaceObject_t, int, uint4); } 
#line 254
extern "C" { void __sust_b_1d_array_i8_clamp(cudaSurfaceObject_t, int, int, unsigned char); } 
#line 255
extern "C" { void __sust_b_1d_array_i16_clamp(cudaSurfaceObject_t, int, int, unsigned short); } 
#line 256
extern "C" { void __sust_b_1d_array_i32_clamp(cudaSurfaceObject_t, int, int, unsigned); } 
#line 257
extern "C" { void __sust_b_1d_array_i64_clamp(cudaSurfaceObject_t, int, int, unsigned __int64); } 
#line 258
extern "C" { void __sust_b_1d_array_v2i8_clamp(cudaSurfaceObject_t, int, int, uchar2); } 
#line 259
extern "C" { void __sust_b_1d_array_v2i16_clamp(cudaSurfaceObject_t, int, int, ushort2); } 
#line 260
extern "C" { void __sust_b_1d_array_v2i32_clamp(cudaSurfaceObject_t, int, int, uint2); } 
#line 261
extern "C" { void __sust_b_1d_array_v2i64_clamp(cudaSurfaceObject_t, int, int, ulonglong2); } 
#line 262
extern "C" { void __sust_b_1d_array_v4i8_clamp(cudaSurfaceObject_t, int, int, uchar4); } 
#line 263
extern "C" { void __sust_b_1d_array_v4i16_clamp(cudaSurfaceObject_t, int, int, ushort4); } 
#line 264
extern "C" { void __sust_b_1d_array_v4i32_clamp(cudaSurfaceObject_t, int, int, uint4); } 
#line 265
extern "C" { void __sust_b_2d_i8_clamp(cudaSurfaceObject_t, int, int, unsigned char); } 
#line 266
extern "C" { void __sust_b_2d_i16_clamp(cudaSurfaceObject_t, int, int, unsigned short); } 
#line 267
extern "C" { void __sust_b_2d_i32_clamp(cudaSurfaceObject_t, int, int, unsigned); } 
#line 268
extern "C" { void __sust_b_2d_i64_clamp(cudaSurfaceObject_t, int, int, unsigned __int64); } 
#line 269
extern "C" { void __sust_b_2d_v2i8_clamp(cudaSurfaceObject_t, int, int, uchar2); } 
#line 270
extern "C" { void __sust_b_2d_v2i16_clamp(cudaSurfaceObject_t, int, int, ushort2); } 
#line 271
extern "C" { void __sust_b_2d_v2i32_clamp(cudaSurfaceObject_t, int, int, uint2); } 
#line 272
extern "C" { void __sust_b_2d_v2i64_clamp(cudaSurfaceObject_t, int, int, ulonglong2); } 
#line 273
extern "C" { void __sust_b_2d_v4i8_clamp(cudaSurfaceObject_t, int, int, uchar4); } 
#line 274
extern "C" { void __sust_b_2d_v4i16_clamp(cudaSurfaceObject_t, int, int, ushort4); } 
#line 275
extern "C" { void __sust_b_2d_v4i32_clamp(cudaSurfaceObject_t, int, int, uint4); } 
#line 276
extern "C" { void __sust_b_2d_array_i8_clamp(cudaSurfaceObject_t, int, int, int, unsigned char); } 
#line 277
extern "C" { void __sust_b_2d_array_i16_clamp(cudaSurfaceObject_t, int, int, int, unsigned short); } 
#line 278
extern "C" { void __sust_b_2d_array_i32_clamp(cudaSurfaceObject_t, int, int, int, unsigned); } 
#line 279
extern "C" { void __sust_b_2d_array_i64_clamp(cudaSurfaceObject_t, int, int, int, unsigned __int64); } 
#line 280
extern "C" { void __sust_b_2d_array_v2i8_clamp(cudaSurfaceObject_t, int, int, int, uchar2); } 
#line 281
extern "C" { void __sust_b_2d_array_v2i16_clamp(cudaSurfaceObject_t, int, int, int, ushort2); } 
#line 282
extern "C" { void __sust_b_2d_array_v2i32_clamp(cudaSurfaceObject_t, int, int, int, uint2); } 
#line 283
extern "C" { void __sust_b_2d_array_v2i64_clamp(cudaSurfaceObject_t, int, int, int, ulonglong2); } 
#line 284
extern "C" { void __sust_b_2d_array_v4i8_clamp(cudaSurfaceObject_t, int, int, int, uchar4); } 
#line 285
extern "C" { void __sust_b_2d_array_v4i16_clamp(cudaSurfaceObject_t, int, int, int, ushort4); } 
#line 286
extern "C" { void __sust_b_2d_array_v4i32_clamp(cudaSurfaceObject_t, int, int, int, uint4); } 
#line 287
extern "C" { void __sust_b_3d_i8_clamp(cudaSurfaceObject_t, int, int, int, unsigned char); } 
#line 288
extern "C" { void __sust_b_3d_i16_clamp(cudaSurfaceObject_t, int, int, int, unsigned short); } 
#line 289
extern "C" { void __sust_b_3d_i32_clamp(cudaSurfaceObject_t, int, int, int, unsigned); } 
#line 290
extern "C" { void __sust_b_3d_i64_clamp(cudaSurfaceObject_t, int, int, int, unsigned __int64); } 
#line 291
extern "C" { void __sust_b_3d_v2i8_clamp(cudaSurfaceObject_t, int, int, int, uchar2); } 
#line 292
extern "C" { void __sust_b_3d_v2i16_clamp(cudaSurfaceObject_t, int, int, int, ushort2); } 
#line 293
extern "C" { void __sust_b_3d_v2i32_clamp(cudaSurfaceObject_t, int, int, int, uint2); } 
#line 294
extern "C" { void __sust_b_3d_v2i64_clamp(cudaSurfaceObject_t, int, int, int, ulonglong2); } 
#line 295
extern "C" { void __sust_b_3d_v4i8_clamp(cudaSurfaceObject_t, int, int, int, uchar4); } 
#line 296
extern "C" { void __sust_b_3d_v4i16_clamp(cudaSurfaceObject_t, int, int, int, ushort4); } 
#line 297
extern "C" { void __sust_b_3d_v4i32_clamp(cudaSurfaceObject_t, int, int, int, uint4); } 
#line 298
extern "C" { void __sust_b_1d_i8_trap(cudaSurfaceObject_t, int, unsigned char); } 
#line 299
extern "C" { void __sust_b_1d_i16_trap(cudaSurfaceObject_t, int, unsigned short); } 
#line 300
extern "C" { void __sust_b_1d_i32_trap(cudaSurfaceObject_t, int, unsigned); } 
#line 301
extern "C" { void __sust_b_1d_i64_trap(cudaSurfaceObject_t, int, unsigned __int64); } 
#line 302
extern "C" { void __sust_b_1d_v2i8_trap(cudaSurfaceObject_t, int, uchar2); } 
#line 303
extern "C" { void __sust_b_1d_v2i16_trap(cudaSurfaceObject_t, int, ushort2); } 
#line 304
extern "C" { void __sust_b_1d_v2i32_trap(cudaSurfaceObject_t, int, uint2); } 
#line 305
extern "C" { void __sust_b_1d_v2i64_trap(cudaSurfaceObject_t, int, ulonglong2); } 
#line 306
extern "C" { void __sust_b_1d_v4i8_trap(cudaSurfaceObject_t, int, uchar4); } 
#line 307
extern "C" { void __sust_b_1d_v4i16_trap(cudaSurfaceObject_t, int, ushort4); } 
#line 308
extern "C" { void __sust_b_1d_v4i32_trap(cudaSurfaceObject_t, int, uint4); } 
#line 309
extern "C" { void __sust_b_1d_array_i8_trap(cudaSurfaceObject_t, int, int, unsigned char); } 
#line 310
extern "C" { void __sust_b_1d_array_i16_trap(cudaSurfaceObject_t, int, int, unsigned short); } 
#line 311
extern "C" { void __sust_b_1d_array_i32_trap(cudaSurfaceObject_t, int, int, unsigned); } 
#line 312
extern "C" { void __sust_b_1d_array_i64_trap(cudaSurfaceObject_t, int, int, unsigned __int64); } 
#line 313
extern "C" { void __sust_b_1d_array_v2i8_trap(cudaSurfaceObject_t, int, int, uchar2); } 
#line 314
extern "C" { void __sust_b_1d_array_v2i16_trap(cudaSurfaceObject_t, int, int, ushort2); } 
#line 315
extern "C" { void __sust_b_1d_array_v2i32_trap(cudaSurfaceObject_t, int, int, uint2); } 
#line 316
extern "C" { void __sust_b_1d_array_v2i64_trap(cudaSurfaceObject_t, int, int, ulonglong2); } 
#line 317
extern "C" { void __sust_b_1d_array_v4i8_trap(cudaSurfaceObject_t, int, int, uchar4); } 
#line 318
extern "C" { void __sust_b_1d_array_v4i16_trap(cudaSurfaceObject_t, int, int, ushort4); } 
#line 319
extern "C" { void __sust_b_1d_array_v4i32_trap(cudaSurfaceObject_t, int, int, uint4); } 
#line 320
extern "C" { void __sust_b_2d_i8_trap(cudaSurfaceObject_t, int, int, unsigned char); } 
#line 321
extern "C" { void __sust_b_2d_i16_trap(cudaSurfaceObject_t, int, int, unsigned short); } 
#line 322
extern "C" { void __sust_b_2d_i32_trap(cudaSurfaceObject_t, int, int, unsigned); } 
#line 323
extern "C" { void __sust_b_2d_i64_trap(cudaSurfaceObject_t, int, int, unsigned __int64); } 
#line 324
extern "C" { void __sust_b_2d_v2i8_trap(cudaSurfaceObject_t, int, int, uchar2); } 
#line 325
extern "C" { void __sust_b_2d_v2i16_trap(cudaSurfaceObject_t, int, int, ushort2); } 
#line 326
extern "C" { void __sust_b_2d_v2i32_trap(cudaSurfaceObject_t, int, int, uint2); } 
#line 327
extern "C" { void __sust_b_2d_v2i64_trap(cudaSurfaceObject_t, int, int, ulonglong2); } 
#line 328
extern "C" { void __sust_b_2d_v4i8_trap(cudaSurfaceObject_t, int, int, uchar4); } 
#line 329
extern "C" { void __sust_b_2d_v4i16_trap(cudaSurfaceObject_t, int, int, ushort4); } 
#line 330
extern "C" { void __sust_b_2d_v4i32_trap(cudaSurfaceObject_t, int, int, uint4); } 
#line 331
extern "C" { void __sust_b_2d_array_i8_trap(cudaSurfaceObject_t, int, int, int, unsigned char); } 
#line 332
extern "C" { void __sust_b_2d_array_i16_trap(cudaSurfaceObject_t, int, int, int, unsigned short); } 
#line 333
extern "C" { void __sust_b_2d_array_i32_trap(cudaSurfaceObject_t, int, int, int, unsigned); } 
#line 334
extern "C" { void __sust_b_2d_array_i64_trap(cudaSurfaceObject_t, int, int, int, unsigned __int64); } 
#line 335
extern "C" { void __sust_b_2d_array_v2i8_trap(cudaSurfaceObject_t, int, int, int, uchar2); } 
#line 336
extern "C" { void __sust_b_2d_array_v2i16_trap(cudaSurfaceObject_t, int, int, int, ushort2); } 
#line 337
extern "C" { void __sust_b_2d_array_v2i32_trap(cudaSurfaceObject_t, int, int, int, uint2); } 
#line 338
extern "C" { void __sust_b_2d_array_v2i64_trap(cudaSurfaceObject_t, int, int, int, ulonglong2); } 
#line 339
extern "C" { void __sust_b_2d_array_v4i8_trap(cudaSurfaceObject_t, int, int, int, uchar4); } 
#line 340
extern "C" { void __sust_b_2d_array_v4i16_trap(cudaSurfaceObject_t, int, int, int, ushort4); } 
#line 341
extern "C" { void __sust_b_2d_array_v4i32_trap(cudaSurfaceObject_t, int, int, int, uint4); } 
#line 342
extern "C" { void __sust_b_3d_i8_trap(cudaSurfaceObject_t, int, int, int, unsigned char); } 
#line 343
extern "C" { void __sust_b_3d_i16_trap(cudaSurfaceObject_t, int, int, int, unsigned short); } 
#line 344
extern "C" { void __sust_b_3d_i32_trap(cudaSurfaceObject_t, int, int, int, unsigned); } 
#line 345
extern "C" { void __sust_b_3d_i64_trap(cudaSurfaceObject_t, int, int, int, unsigned __int64); } 
#line 346
extern "C" { void __sust_b_3d_v2i8_trap(cudaSurfaceObject_t, int, int, int, uchar2); } 
#line 347
extern "C" { void __sust_b_3d_v2i16_trap(cudaSurfaceObject_t, int, int, int, ushort2); } 
#line 348
extern "C" { void __sust_b_3d_v2i32_trap(cudaSurfaceObject_t, int, int, int, uint2); } 
#line 349
extern "C" { void __sust_b_3d_v2i64_trap(cudaSurfaceObject_t, int, int, int, ulonglong2); } 
#line 350
extern "C" { void __sust_b_3d_v4i8_trap(cudaSurfaceObject_t, int, int, int, uchar4); } 
#line 351
extern "C" { void __sust_b_3d_v4i16_trap(cudaSurfaceObject_t, int, int, int, ushort4); } 
#line 352
extern "C" { void __sust_b_3d_v4i32_trap(cudaSurfaceObject_t, int, int, int, uint4); } 
#line 353
extern "C" { void __sust_b_1d_i8_zero(cudaSurfaceObject_t, int, unsigned char); } 
#line 354
extern "C" { void __sust_b_1d_i16_zero(cudaSurfaceObject_t, int, unsigned short); } 
#line 355
extern "C" { void __sust_b_1d_i32_zero(cudaSurfaceObject_t, int, unsigned); } 
#line 356
extern "C" { void __sust_b_1d_i64_zero(cudaSurfaceObject_t, int, unsigned __int64); } 
#line 357
extern "C" { void __sust_b_1d_v2i8_zero(cudaSurfaceObject_t, int, uchar2); } 
#line 358
extern "C" { void __sust_b_1d_v2i16_zero(cudaSurfaceObject_t, int, ushort2); } 
#line 359
extern "C" { void __sust_b_1d_v2i32_zero(cudaSurfaceObject_t, int, uint2); } 
#line 360
extern "C" { void __sust_b_1d_v2i64_zero(cudaSurfaceObject_t, int, ulonglong2); } 
#line 361
extern "C" { void __sust_b_1d_v4i8_zero(cudaSurfaceObject_t, int, uchar4); } 
#line 362
extern "C" { void __sust_b_1d_v4i16_zero(cudaSurfaceObject_t, int, ushort4); } 
#line 363
extern "C" { void __sust_b_1d_v4i32_zero(cudaSurfaceObject_t, int, uint4); } 
#line 364
extern "C" { void __sust_b_1d_array_i8_zero(cudaSurfaceObject_t, int, int, unsigned char); } 
#line 365
extern "C" { void __sust_b_1d_array_i16_zero(cudaSurfaceObject_t, int, int, unsigned short); } 
#line 366
extern "C" { void __sust_b_1d_array_i32_zero(cudaSurfaceObject_t, int, int, unsigned); } 
#line 367
extern "C" { void __sust_b_1d_array_i64_zero(cudaSurfaceObject_t, int, int, unsigned __int64); } 
#line 368
extern "C" { void __sust_b_1d_array_v2i8_zero(cudaSurfaceObject_t, int, int, uchar2); } 
#line 369
extern "C" { void __sust_b_1d_array_v2i16_zero(cudaSurfaceObject_t, int, int, ushort2); } 
#line 370
extern "C" { void __sust_b_1d_array_v2i32_zero(cudaSurfaceObject_t, int, int, uint2); } 
#line 371
extern "C" { void __sust_b_1d_array_v2i64_zero(cudaSurfaceObject_t, int, int, ulonglong2); } 
#line 372
extern "C" { void __sust_b_1d_array_v4i8_zero(cudaSurfaceObject_t, int, int, uchar4); } 
#line 373
extern "C" { void __sust_b_1d_array_v4i16_zero(cudaSurfaceObject_t, int, int, ushort4); } 
#line 374
extern "C" { void __sust_b_1d_array_v4i32_zero(cudaSurfaceObject_t, int, int, uint4); } 
#line 375
extern "C" { void __sust_b_2d_i8_zero(cudaSurfaceObject_t, int, int, unsigned char); } 
#line 376
extern "C" { void __sust_b_2d_i16_zero(cudaSurfaceObject_t, int, int, unsigned short); } 
#line 377
extern "C" { void __sust_b_2d_i32_zero(cudaSurfaceObject_t, int, int, unsigned); } 
#line 378
extern "C" { void __sust_b_2d_i64_zero(cudaSurfaceObject_t, int, int, unsigned __int64); } 
#line 379
extern "C" { void __sust_b_2d_v2i8_zero(cudaSurfaceObject_t, int, int, uchar2); } 
#line 380
extern "C" { void __sust_b_2d_v2i16_zero(cudaSurfaceObject_t, int, int, ushort2); } 
#line 381
extern "C" { void __sust_b_2d_v2i32_zero(cudaSurfaceObject_t, int, int, uint2); } 
#line 382
extern "C" { void __sust_b_2d_v2i64_zero(cudaSurfaceObject_t, int, int, ulonglong2); } 
#line 383
extern "C" { void __sust_b_2d_v4i8_zero(cudaSurfaceObject_t, int, int, uchar4); } 
#line 384
extern "C" { void __sust_b_2d_v4i16_zero(cudaSurfaceObject_t, int, int, ushort4); } 
#line 385
extern "C" { void __sust_b_2d_v4i32_zero(cudaSurfaceObject_t, int, int, uint4); } 
#line 386
extern "C" { void __sust_b_2d_array_i8_zero(cudaSurfaceObject_t, int, int, int, unsigned char); } 
#line 387
extern "C" { void __sust_b_2d_array_i16_zero(cudaSurfaceObject_t, int, int, int, unsigned short); } 
#line 388
extern "C" { void __sust_b_2d_array_i32_zero(cudaSurfaceObject_t, int, int, int, unsigned); } 
#line 389
extern "C" { void __sust_b_2d_array_i64_zero(cudaSurfaceObject_t, int, int, int, unsigned __int64); } 
#line 390
extern "C" { void __sust_b_2d_array_v2i8_zero(cudaSurfaceObject_t, int, int, int, uchar2); } 
#line 391
extern "C" { void __sust_b_2d_array_v2i16_zero(cudaSurfaceObject_t, int, int, int, ushort2); } 
#line 392
extern "C" { void __sust_b_2d_array_v2i32_zero(cudaSurfaceObject_t, int, int, int, uint2); } 
#line 393
extern "C" { void __sust_b_2d_array_v2i64_zero(cudaSurfaceObject_t, int, int, int, ulonglong2); } 
#line 394
extern "C" { void __sust_b_2d_array_v4i8_zero(cudaSurfaceObject_t, int, int, int, uchar4); } 
#line 395
extern "C" { void __sust_b_2d_array_v4i16_zero(cudaSurfaceObject_t, int, int, int, ushort4); } 
#line 396
extern "C" { void __sust_b_2d_array_v4i32_zero(cudaSurfaceObject_t, int, int, int, uint4); } 
#line 397
extern "C" { void __sust_b_3d_i8_zero(cudaSurfaceObject_t, int, int, int, unsigned char); } 
#line 398
extern "C" { void __sust_b_3d_i16_zero(cudaSurfaceObject_t, int, int, int, unsigned short); } 
#line 399
extern "C" { void __sust_b_3d_i32_zero(cudaSurfaceObject_t, int, int, int, unsigned); } 
#line 400
extern "C" { void __sust_b_3d_i64_zero(cudaSurfaceObject_t, int, int, int, unsigned __int64); } 
#line 401
extern "C" { void __sust_b_3d_v2i8_zero(cudaSurfaceObject_t, int, int, int, uchar2); } 
#line 402
extern "C" { void __sust_b_3d_v2i16_zero(cudaSurfaceObject_t, int, int, int, ushort2); } 
#line 403
extern "C" { void __sust_b_3d_v2i32_zero(cudaSurfaceObject_t, int, int, int, uint2); } 
#line 404
extern "C" { void __sust_b_3d_v2i64_zero(cudaSurfaceObject_t, int, int, int, ulonglong2); } 
#line 405
extern "C" { void __sust_b_3d_v4i8_zero(cudaSurfaceObject_t, int, int, int, uchar4); } 
#line 406
extern "C" { void __sust_b_3d_v4i16_zero(cudaSurfaceObject_t, int, int, int, ushort4); } 
#line 407
extern "C" { void __sust_b_3d_v4i32_zero(cudaSurfaceObject_t, int, int, int, uint4); } 
#line 410
static __forceinline void surf1Dread(char * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 412
static __forceinline void surf1Dread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 414
static __forceinline void surf1Dread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 416
static __forceinline void surf1Dread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 418
static __forceinline void surf1Dread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 420
static __forceinline void surf1Dread(short * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 422
static __forceinline void surf1Dread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 424
static __forceinline void surf1Dread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 426
static __forceinline void surf1Dread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 428
static __forceinline void surf1Dread(int * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 430
static __forceinline void surf1Dread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 432
static __forceinline void surf1Dread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 434
static __forceinline void surf1Dread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 436
static __forceinline void surf1Dread(__int64 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 438
static __forceinline void surf1Dread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 440
static __forceinline void surf1Dread(unsigned __int64 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 442
static __forceinline void surf1Dread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 444
static __forceinline void surf1Dread(float * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 446
static __forceinline void surf1Dread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 454
static __forceinline void surf1Dread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 456
static __forceinline void surf1Dread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 458
static __forceinline void surf1Dread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 460
static __forceinline void surf1Dread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 462
static __forceinline void surf1Dread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 464
static __forceinline void surf1Dread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 466
static __forceinline void surf1Dread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 468
static __forceinline void surf1Dread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 470
static __forceinline void surf1Dread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 478
static __forceinline void surf1Dread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 480
static __forceinline void surf1Dread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 482
static __forceinline void surf1Dread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 484
static __forceinline void surf1Dread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 486
static __forceinline void surf1Dread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 488
static __forceinline void surf1Dread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 490
static __forceinline void surf1Dread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 498
template< class T> static __forceinline T 
#line 499
surf1Dread(::cudaSurfaceObject_t surfObject, int x, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 500
{int volatile ___ = 1;(void)surfObject;(void)x;(void)boundaryMode;
#line 504
::exit(___);}
#if 0
#line 500
{ 
#line 501
T ret; 
#line 502
surf1Dread(&ret, surfObject, x, boundaryMode); 
#line 503
return ret; 
#line 504
} 
#endif
#line 512 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.h"
static __forceinline void surf2Dread(char * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 514
static __forceinline void surf2Dread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 516
static __forceinline void surf2Dread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 518
static __forceinline void surf2Dread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 520
static __forceinline void surf2Dread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 522
static __forceinline void surf2Dread(short * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 524
static __forceinline void surf2Dread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 526
static __forceinline void surf2Dread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 528
static __forceinline void surf2Dread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 530
static __forceinline void surf2Dread(int * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 532
static __forceinline void surf2Dread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 534
static __forceinline void surf2Dread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 536
static __forceinline void surf2Dread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 538
static __forceinline void surf2Dread(__int64 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 540
static __forceinline void surf2Dread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 542
static __forceinline void surf2Dread(unsigned __int64 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 544
static __forceinline void surf2Dread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 546
static __forceinline void surf2Dread(float * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 548
static __forceinline void surf2Dread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 556
static __forceinline void surf2Dread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 558
static __forceinline void surf2Dread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 560
static __forceinline void surf2Dread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 562
static __forceinline void surf2Dread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 564
static __forceinline void surf2Dread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 566
static __forceinline void surf2Dread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 568
static __forceinline void surf2Dread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 570
static __forceinline void surf2Dread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 572
static __forceinline void surf2Dread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 580
static __forceinline void surf2Dread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 582
static __forceinline void surf2Dread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 584
static __forceinline void surf2Dread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 586
static __forceinline void surf2Dread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 588
static __forceinline void surf2Dread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 590
static __forceinline void surf2Dread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 592
static __forceinline void surf2Dread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 600
template< class T> static __forceinline T 
#line 601
surf2Dread(::cudaSurfaceObject_t surfObject, int x, int y, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 602
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 606
::exit(___);}
#if 0
#line 602
{ 
#line 603
T ret; 
#line 604
surf2Dread(&ret, surfObject, x, y, boundaryMode); 
#line 605
return ret; 
#line 606
} 
#endif
#line 614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.h"
static __forceinline void surf3Dread(char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 616
static __forceinline void surf3Dread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 618
static __forceinline void surf3Dread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 620
static __forceinline void surf3Dread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 622
static __forceinline void surf3Dread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 624
static __forceinline void surf3Dread(short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 626
static __forceinline void surf3Dread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 628
static __forceinline void surf3Dread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 630
static __forceinline void surf3Dread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 632
static __forceinline void surf3Dread(int * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 634
static __forceinline void surf3Dread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 636
static __forceinline void surf3Dread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 638
static __forceinline void surf3Dread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 640
static __forceinline void surf3Dread(__int64 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 642
static __forceinline void surf3Dread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 644
static __forceinline void surf3Dread(unsigned __int64 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 646
static __forceinline void surf3Dread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 648
static __forceinline void surf3Dread(float * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 650
static __forceinline void surf3Dread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 658
static __forceinline void surf3Dread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 660
static __forceinline void surf3Dread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 662
static __forceinline void surf3Dread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 664
static __forceinline void surf3Dread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 666
static __forceinline void surf3Dread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 668
static __forceinline void surf3Dread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 670
static __forceinline void surf3Dread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 672
static __forceinline void surf3Dread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 674
static __forceinline void surf3Dread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 682
static __forceinline void surf3Dread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 684
static __forceinline void surf3Dread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 686
static __forceinline void surf3Dread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 688
static __forceinline void surf3Dread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 690
static __forceinline void surf3Dread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 692
static __forceinline void surf3Dread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 694
static __forceinline void surf3Dread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 702
template< class T> static __forceinline T 
#line 703
surf3Dread(::cudaSurfaceObject_t surfObject, int x, int y, int z, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 704
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 708
::exit(___);}
#if 0
#line 704
{ 
#line 705
T ret; 
#line 706
surf3Dread(&ret, surfObject, x, y, z, boundaryMode); 
#line 707
return ret; 
#line 708
} 
#endif
#line 716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.h"
static __forceinline void surf1DLayeredread(char * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 718
static __forceinline void surf1DLayeredread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 720
static __forceinline void surf1DLayeredread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 722
static __forceinline void surf1DLayeredread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 724
static __forceinline void surf1DLayeredread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 726
static __forceinline void surf1DLayeredread(short * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 728
static __forceinline void surf1DLayeredread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 730
static __forceinline void surf1DLayeredread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 732
static __forceinline void surf1DLayeredread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 734
static __forceinline void surf1DLayeredread(int * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 736
static __forceinline void surf1DLayeredread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 738
static __forceinline void surf1DLayeredread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 740
static __forceinline void surf1DLayeredread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 742
static __forceinline void surf1DLayeredread(__int64 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 744
static __forceinline void surf1DLayeredread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 746
static __forceinline void surf1DLayeredread(unsigned __int64 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 748
static __forceinline void surf1DLayeredread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 750
static __forceinline void surf1DLayeredread(float * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 752
static __forceinline void surf1DLayeredread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 760
static __forceinline void surf1DLayeredread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 762
static __forceinline void surf1DLayeredread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 764
static __forceinline void surf1DLayeredread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 766
static __forceinline void surf1DLayeredread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 768
static __forceinline void surf1DLayeredread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 770
static __forceinline void surf1DLayeredread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 772
static __forceinline void surf1DLayeredread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 774
static __forceinline void surf1DLayeredread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 776
static __forceinline void surf1DLayeredread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 784
static __forceinline void surf1DLayeredread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 786
static __forceinline void surf1DLayeredread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 788
static __forceinline void surf1DLayeredread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 790
static __forceinline void surf1DLayeredread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 792
static __forceinline void surf1DLayeredread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 794
static __forceinline void surf1DLayeredread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 796
static __forceinline void surf1DLayeredread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 804
template< class T> static __forceinline T 
#line 805
surf1DLayeredread(::cudaSurfaceObject_t surfObject, int x, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 806
{int volatile ___ = 1;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 810
::exit(___);}
#if 0
#line 806
{ 
#line 807
T ret; 
#line 808
surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode); 
#line 809
return ret; 
#line 810
} 
#endif
#line 818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.h"
static __forceinline void surf2DLayeredread(char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 820
static __forceinline void surf2DLayeredread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 822
static __forceinline void surf2DLayeredread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 824
static __forceinline void surf2DLayeredread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 826
static __forceinline void surf2DLayeredread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 828
static __forceinline void surf2DLayeredread(short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 830
static __forceinline void surf2DLayeredread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 832
static __forceinline void surf2DLayeredread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 834
static __forceinline void surf2DLayeredread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 836
static __forceinline void surf2DLayeredread(int * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 838
static __forceinline void surf2DLayeredread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 840
static __forceinline void surf2DLayeredread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 842
static __forceinline void surf2DLayeredread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 844
static __forceinline void surf2DLayeredread(__int64 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 846
static __forceinline void surf2DLayeredread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 848
static __forceinline void surf2DLayeredread(unsigned __int64 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 850
static __forceinline void surf2DLayeredread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 852
static __forceinline void surf2DLayeredread(float * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 854
static __forceinline void surf2DLayeredread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 862
static __forceinline void surf2DLayeredread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 864
static __forceinline void surf2DLayeredread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 866
static __forceinline void surf2DLayeredread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 868
static __forceinline void surf2DLayeredread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 870
static __forceinline void surf2DLayeredread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 872
static __forceinline void surf2DLayeredread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 874
static __forceinline void surf2DLayeredread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 876
static __forceinline void surf2DLayeredread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 878
static __forceinline void surf2DLayeredread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 886
static __forceinline void surf2DLayeredread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 888
static __forceinline void surf2DLayeredread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 890
static __forceinline void surf2DLayeredread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 892
static __forceinline void surf2DLayeredread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 894
static __forceinline void surf2DLayeredread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 896
static __forceinline void surf2DLayeredread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 898
static __forceinline void surf2DLayeredread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 906
template< class T> static __forceinline T 
#line 907
surf2DLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int layer, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 908
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 912
::exit(___);}
#if 0
#line 908
{ 
#line 909
T ret; 
#line 910
surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode); 
#line 911
return ret; 
#line 912
} 
#endif
#line 920 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.h"
static __forceinline void surfCubemapread(char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 922
static __forceinline void surfCubemapread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 924
static __forceinline void surfCubemapread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 926
static __forceinline void surfCubemapread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 928
static __forceinline void surfCubemapread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 930
static __forceinline void surfCubemapread(short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 932
static __forceinline void surfCubemapread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 934
static __forceinline void surfCubemapread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 936
static __forceinline void surfCubemapread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 938
static __forceinline void surfCubemapread(int * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 940
static __forceinline void surfCubemapread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 942
static __forceinline void surfCubemapread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 944
static __forceinline void surfCubemapread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 946
static __forceinline void surfCubemapread(__int64 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 948
static __forceinline void surfCubemapread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 950
static __forceinline void surfCubemapread(unsigned __int64 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 952
static __forceinline void surfCubemapread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 954
static __forceinline void surfCubemapread(float * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 956
static __forceinline void surfCubemapread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 964
static __forceinline void surfCubemapread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 966
static __forceinline void surfCubemapread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 968
static __forceinline void surfCubemapread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 970
static __forceinline void surfCubemapread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 972
static __forceinline void surfCubemapread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 974
static __forceinline void surfCubemapread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 976
static __forceinline void surfCubemapread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 978
static __forceinline void surfCubemapread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 980
static __forceinline void surfCubemapread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 988
static __forceinline void surfCubemapread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 990
static __forceinline void surfCubemapread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 992
static __forceinline void surfCubemapread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 994
static __forceinline void surfCubemapread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 996
static __forceinline void surfCubemapread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 998
static __forceinline void surfCubemapread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1000
static __forceinline void surfCubemapread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1008
template< class T> static __forceinline T 
#line 1009
surfCubemapread(::cudaSurfaceObject_t surfObject, int x, int y, int face, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 1010
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 1014
::exit(___);}
#if 0
#line 1010
{ 
#line 1011
T ret; 
#line 1012
surfCubemapread(&ret, surfObject, face, x, y, boundaryMode); 
#line 1013
return ret; 
#line 1014
} 
#endif
#line 1022 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.h"
static __forceinline void surfCubemapLayeredread(char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1024
static __forceinline void surfCubemapLayeredread(signed char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1026
static __forceinline void surfCubemapLayeredread(char1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1028
static __forceinline void surfCubemapLayeredread(unsigned char * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1030
static __forceinline void surfCubemapLayeredread(uchar1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1032
static __forceinline void surfCubemapLayeredread(short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1034
static __forceinline void surfCubemapLayeredread(short1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1036
static __forceinline void surfCubemapLayeredread(unsigned short * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1038
static __forceinline void surfCubemapLayeredread(ushort1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1040
static __forceinline void surfCubemapLayeredread(int * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1042
static __forceinline void surfCubemapLayeredread(int1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1044
static __forceinline void surfCubemapLayeredread(unsigned * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1046
static __forceinline void surfCubemapLayeredread(uint1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1048
static __forceinline void surfCubemapLayeredread(__int64 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1050
static __forceinline void surfCubemapLayeredread(longlong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1052
static __forceinline void surfCubemapLayeredread(unsigned __int64 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1054
static __forceinline void surfCubemapLayeredread(ulonglong1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1056
static __forceinline void surfCubemapLayeredread(float * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1058
static __forceinline void surfCubemapLayeredread(float1 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1066
static __forceinline void surfCubemapLayeredread(char2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1068
static __forceinline void surfCubemapLayeredread(uchar2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1070
static __forceinline void surfCubemapLayeredread(short2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1072
static __forceinline void surfCubemapLayeredread(ushort2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1074
static __forceinline void surfCubemapLayeredread(int2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1076
static __forceinline void surfCubemapLayeredread(uint2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1078
static __forceinline void surfCubemapLayeredread(longlong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1080
static __forceinline void surfCubemapLayeredread(ulonglong2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1082
static __forceinline void surfCubemapLayeredread(float2 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1090
static __forceinline void surfCubemapLayeredread(char4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1092
static __forceinline void surfCubemapLayeredread(uchar4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1094
static __forceinline void surfCubemapLayeredread(short4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1096
static __forceinline void surfCubemapLayeredread(ushort4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1098
static __forceinline void surfCubemapLayeredread(int4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1100
static __forceinline void surfCubemapLayeredread(uint4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1102
static __forceinline void surfCubemapLayeredread(float4 * retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1110
template< class T> static __forceinline T 
#line 1111
surfCubemapLayeredread(::cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, ::cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap) 
#line 1112
{int volatile ___ = 1;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 1116
::exit(___);}
#if 0
#line 1112
{ 
#line 1113
T ret; 
#line 1114
surfCubemapLayeredread(&ret, surfObject, x, y, z, layerface, boundaryMode); 
#line 1115
return ret; 
#line 1116
} 
#endif
#line 1124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.h"
static __forceinline void surf1Dwrite(char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1126
static __forceinline void surf1Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1128
static __forceinline void surf1Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1130
static __forceinline void surf1Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1132
static __forceinline void surf1Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1134
static __forceinline void surf1Dwrite(short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1136
static __forceinline void surf1Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1138
static __forceinline void surf1Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1140
static __forceinline void surf1Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1142
static __forceinline void surf1Dwrite(int data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1144
static __forceinline void surf1Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1146
static __forceinline void surf1Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1148
static __forceinline void surf1Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1150
static __forceinline void surf1Dwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1152
static __forceinline void surf1Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1154
static __forceinline void surf1Dwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1156
static __forceinline void surf1Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1158
static __forceinline void surf1Dwrite(float data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1160
static __forceinline void surf1Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1168
static __forceinline void surf1Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1170
static __forceinline void surf1Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1172
static __forceinline void surf1Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1174
static __forceinline void surf1Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1176
static __forceinline void surf1Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1178
static __forceinline void surf1Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1180
static __forceinline void surf1Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1182
static __forceinline void surf1Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1184
static __forceinline void surf1Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1192
static __forceinline void surf1Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1194
static __forceinline void surf1Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1196
static __forceinline void surf1Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1198
static __forceinline void surf1Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1200
static __forceinline void surf1Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1202
static __forceinline void surf1Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1204
static __forceinline void surf1Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1212
static __forceinline void surf2Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1214
static __forceinline void surf2Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1216
static __forceinline void surf2Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1218
static __forceinline void surf2Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1220
static __forceinline void surf2Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1222
static __forceinline void surf2Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1224
static __forceinline void surf2Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1226
static __forceinline void surf2Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1228
static __forceinline void surf2Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1230
static __forceinline void surf2Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1232
static __forceinline void surf2Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1234
static __forceinline void surf2Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1236
static __forceinline void surf2Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1238
static __forceinline void surf2Dwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1240
static __forceinline void surf2Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1242
static __forceinline void surf2Dwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1244
static __forceinline void surf2Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1246
static __forceinline void surf2Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1248
static __forceinline void surf2Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1256
static __forceinline void surf2Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1258
static __forceinline void surf2Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1260
static __forceinline void surf2Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1262
static __forceinline void surf2Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1264
static __forceinline void surf2Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1266
static __forceinline void surf2Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1268
static __forceinline void surf2Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1270
static __forceinline void surf2Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1272
static __forceinline void surf2Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1280
static __forceinline void surf2Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1282
static __forceinline void surf2Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1284
static __forceinline void surf2Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1286
static __forceinline void surf2Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1288
static __forceinline void surf2Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1290
static __forceinline void surf2Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1292
static __forceinline void surf2Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1301
static __forceinline void surf3Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1303
static __forceinline void surf3Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1305
static __forceinline void surf3Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1307
static __forceinline void surf3Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1309
static __forceinline void surf3Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1311
static __forceinline void surf3Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1313
static __forceinline void surf3Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1315
static __forceinline void surf3Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1317
static __forceinline void surf3Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1319
static __forceinline void surf3Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1321
static __forceinline void surf3Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1323
static __forceinline void surf3Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1325
static __forceinline void surf3Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1327
static __forceinline void surf3Dwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1329
static __forceinline void surf3Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1331
static __forceinline void surf3Dwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1333
static __forceinline void surf3Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1335
static __forceinline void surf3Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1337
static __forceinline void surf3Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1345
static __forceinline void surf3Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1347
static __forceinline void surf3Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1349
static __forceinline void surf3Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1351
static __forceinline void surf3Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1353
static __forceinline void surf3Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1355
static __forceinline void surf3Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1357
static __forceinline void surf3Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1359
static __forceinline void surf3Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1361
static __forceinline void surf3Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1369
static __forceinline void surf3Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1371
static __forceinline void surf3Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1373
static __forceinline void surf3Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1375
static __forceinline void surf3Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1377
static __forceinline void surf3Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1379
static __forceinline void surf3Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1381
static __forceinline void surf3Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1389
static __forceinline void surf1DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1391
static __forceinline void surf1DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1393
static __forceinline void surf1DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1395
static __forceinline void surf1DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1397
static __forceinline void surf1DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1399
static __forceinline void surf1DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1401
static __forceinline void surf1DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1403
static __forceinline void surf1DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1405
static __forceinline void surf1DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1407
static __forceinline void surf1DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1409
static __forceinline void surf1DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1411
static __forceinline void surf1DLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1413
static __forceinline void surf1DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1415
static __forceinline void surf1DLayeredwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1417
static __forceinline void surf1DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1419
static __forceinline void surf1DLayeredwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1421
static __forceinline void surf1DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1423
static __forceinline void surf1DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1425
static __forceinline void surf1DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1433
static __forceinline void surf1DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1435
static __forceinline void surf1DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1437
static __forceinline void surf1DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1439
static __forceinline void surf1DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1441
static __forceinline void surf1DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1443
static __forceinline void surf1DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1445
static __forceinline void surf1DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1447
static __forceinline void surf1DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1449
static __forceinline void surf1DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1457
static __forceinline void surf1DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1459
static __forceinline void surf1DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1461
static __forceinline void surf1DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1463
static __forceinline void surf1DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1465
static __forceinline void surf1DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1467
static __forceinline void surf1DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1469
static __forceinline void surf1DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1477
static __forceinline void surf2DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1479
static __forceinline void surf2DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1481
static __forceinline void surf2DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1483
static __forceinline void surf2DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1485
static __forceinline void surf2DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1487
static __forceinline void surf2DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1489
static __forceinline void surf2DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1491
static __forceinline void surf2DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1493
static __forceinline void surf2DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1495
static __forceinline void surf2DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1497
static __forceinline void surf2DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1499
static __forceinline void surf2DLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1501
static __forceinline void surf2DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1503
static __forceinline void surf2DLayeredwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1505
static __forceinline void surf2DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1507
static __forceinline void surf2DLayeredwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1509
static __forceinline void surf2DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1511
static __forceinline void surf2DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1513
static __forceinline void surf2DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1521
static __forceinline void surf2DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1523
static __forceinline void surf2DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1525
static __forceinline void surf2DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1527
static __forceinline void surf2DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1529
static __forceinline void surf2DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1531
static __forceinline void surf2DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1533
static __forceinline void surf2DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1535
static __forceinline void surf2DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1537
static __forceinline void surf2DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1545
static __forceinline void surf2DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1547
static __forceinline void surf2DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1549
static __forceinline void surf2DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1551
static __forceinline void surf2DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1553
static __forceinline void surf2DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1555
static __forceinline void surf2DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1557
static __forceinline void surf2DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1565
static __forceinline void surfCubemapwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1567
static __forceinline void surfCubemapwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1569
static __forceinline void surfCubemapwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1571
static __forceinline void surfCubemapwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1573
static __forceinline void surfCubemapwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1575
static __forceinline void surfCubemapwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1577
static __forceinline void surfCubemapwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1579
static __forceinline void surfCubemapwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1581
static __forceinline void surfCubemapwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1583
static __forceinline void surfCubemapwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1585
static __forceinline void surfCubemapwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1587
static __forceinline void surfCubemapwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1589
static __forceinline void surfCubemapwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1591
static __forceinline void surfCubemapwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1593
static __forceinline void surfCubemapwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1595
static __forceinline void surfCubemapwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1597
static __forceinline void surfCubemapwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1599
static __forceinline void surfCubemapwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1601
static __forceinline void surfCubemapwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1609
static __forceinline void surfCubemapwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1611
static __forceinline void surfCubemapwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1613
static __forceinline void surfCubemapwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1615
static __forceinline void surfCubemapwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1617
static __forceinline void surfCubemapwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1619
static __forceinline void surfCubemapwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1621
static __forceinline void surfCubemapwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1623
static __forceinline void surfCubemapwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1625
static __forceinline void surfCubemapwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1633
static __forceinline void surfCubemapwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1635
static __forceinline void surfCubemapwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1637
static __forceinline void surfCubemapwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1639
static __forceinline void surfCubemapwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1641
static __forceinline void surfCubemapwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1643
static __forceinline void surfCubemapwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1645
static __forceinline void surfCubemapwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1653
static __forceinline void surfCubemapLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1655
static __forceinline void surfCubemapLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1657
static __forceinline void surfCubemapLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1659
static __forceinline void surfCubemapLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1661
static __forceinline void surfCubemapLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1663
static __forceinline void surfCubemapLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1665
static __forceinline void surfCubemapLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1667
static __forceinline void surfCubemapLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1669
static __forceinline void surfCubemapLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1671
static __forceinline void surfCubemapLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1673
static __forceinline void surfCubemapLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1675
static __forceinline void surfCubemapLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1677
static __forceinline void surfCubemapLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1679
static __forceinline void surfCubemapLayeredwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1681
static __forceinline void surfCubemapLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1683
static __forceinline void surfCubemapLayeredwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1685
static __forceinline void surfCubemapLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1687
static __forceinline void surfCubemapLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1689
static __forceinline void surfCubemapLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1697
static __forceinline void surfCubemapLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1699
static __forceinline void surfCubemapLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1701
static __forceinline void surfCubemapLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1703
static __forceinline void surfCubemapLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1705
static __forceinline void surfCubemapLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1707
static __forceinline void surfCubemapLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1709
static __forceinline void surfCubemapLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1711
static __forceinline void surfCubemapLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1713
static __forceinline void surfCubemapLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1721
static __forceinline void surfCubemapLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1723
static __forceinline void surfCubemapLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1725
static __forceinline void surfCubemapLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1727
static __forceinline void surfCubemapLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1729
static __forceinline void surfCubemapLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1731
static __forceinline void surfCubemapLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 1733
static __forceinline void surfCubemapLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap); 
#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 77
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 89
::exit(___);}
#if 0
#line 77
{ 
#line 78
char tmp; 
#line 79
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 80
__suld_1d_i8_trap(&tmp, surfObject, x); 
#line 81
} else { 
#line 82
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 83
__suld_1d_i8_clamp(&tmp, surfObject, x); 
#line 84
} else { 
#line 85
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 86
__suld_1d_i8_zero(&tmp, surfObject, x); 
#line 87
}  }  }  
#line 88
(*retVal) = tmp; 
#line 89
} 
#endif
#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 92
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 104
::exit(___);}
#if 0
#line 92
{ 
#line 93
signed char tmp; 
#line 94
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 95
__suld_1d_i8_trap((char *)(&tmp), surfObject, x); 
#line 96
} else { 
#line 97
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 98
__suld_1d_i8_clamp((char *)(&tmp), surfObject, x); 
#line 99
} else { 
#line 100
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 101
__suld_1d_i8_zero((char *)(&tmp), surfObject, x); 
#line 102
}  }  }  
#line 103
(*retVal) = tmp; 
#line 104
} 
#endif
#line 106 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 107
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 119
::exit(___);}
#if 0
#line 107
{ 
#line 108
char1 tmp; 
#line 109
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 110
__suld_1d_i8_trap((char *)(&(tmp.x)), surfObject, x); 
#line 111
} else { 
#line 112
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 113
__suld_1d_i8_clamp((char *)(&(tmp.x)), surfObject, x); 
#line 114
} else { 
#line 115
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 116
__suld_1d_i8_zero((char *)(&(tmp.x)), surfObject, x); 
#line 117
}  }  }  
#line 118
(*retVal) = make_char1(tmp.x); 
#line 119
} 
#endif
#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 122
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 134
::exit(___);}
#if 0
#line 122
{ 
#line 123
unsigned char tmp; 
#line 124
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 125
__suld_1d_i8_trap((char *)(&tmp), surfObject, x); 
#line 126
} else { 
#line 127
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 128
__suld_1d_i8_clamp((char *)(&tmp), surfObject, x); 
#line 129
} else { 
#line 130
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 131
__suld_1d_i8_zero((char *)(&tmp), surfObject, x); 
#line 132
}  }  }  
#line 133
(*retVal) = tmp; 
#line 134
} 
#endif
#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 137
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 149
::exit(___);}
#if 0
#line 137
{ 
#line 138
uchar1 tmp; 
#line 139
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 140
__suld_1d_i8_trap((char *)(&(tmp.x)), surfObject, x); 
#line 141
} else { 
#line 142
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 143
__suld_1d_i8_clamp((char *)(&(tmp.x)), surfObject, x); 
#line 144
} else { 
#line 145
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 146
__suld_1d_i8_zero((char *)(&(tmp.x)), surfObject, x); 
#line 147
}  }  }  
#line 148
(*retVal) = make_uchar1(tmp.x); 
#line 149
} 
#endif
#line 151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 152
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 164
::exit(___);}
#if 0
#line 152
{ 
#line 153
short tmp; 
#line 154
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 155
__suld_1d_i16_trap(&tmp, surfObject, x); 
#line 156
} else { 
#line 157
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 158
__suld_1d_i16_clamp(&tmp, surfObject, x); 
#line 159
} else { 
#line 160
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 161
__suld_1d_i16_zero(&tmp, surfObject, x); 
#line 162
}  }  }  
#line 163
(*retVal) = tmp; 
#line 164
} 
#endif
#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 167
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 179
::exit(___);}
#if 0
#line 167
{ 
#line 168
short tmp; 
#line 169
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 170
__suld_1d_i16_trap(&tmp, surfObject, x); 
#line 171
} else { 
#line 172
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 173
__suld_1d_i16_clamp(&tmp, surfObject, x); 
#line 174
} else { 
#line 175
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 176
__suld_1d_i16_zero(&tmp, surfObject, x); 
#line 177
}  }  }  
#line 178
(*retVal) = make_short1(tmp); 
#line 179
} 
#endif
#line 181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 182
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 194
::exit(___);}
#if 0
#line 182
{ 
#line 183
unsigned short tmp; 
#line 184
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 185
__suld_1d_i16_trap((short *)(&tmp), surfObject, x); 
#line 186
} else { 
#line 187
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 188
__suld_1d_i16_clamp((short *)(&tmp), surfObject, x); 
#line 189
} else { 
#line 190
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 191
__suld_1d_i16_zero((short *)(&tmp), surfObject, x); 
#line 192
}  }  }  
#line 193
(*retVal) = tmp; 
#line 194
} 
#endif
#line 196 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 197
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 209
::exit(___);}
#if 0
#line 197
{ 
#line 198
unsigned short tmp; 
#line 199
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 200
__suld_1d_i16_trap((short *)(&tmp), surfObject, x); 
#line 201
} else { 
#line 202
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 203
__suld_1d_i16_clamp((short *)(&tmp), surfObject, x); 
#line 204
} else { 
#line 205
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 206
__suld_1d_i16_zero((short *)(&tmp), surfObject, x); 
#line 207
}  }  }  
#line 208
(*retVal) = make_ushort1(tmp); 
#line 209
} 
#endif
#line 211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 212
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 224
::exit(___);}
#if 0
#line 212
{ 
#line 213
int tmp; 
#line 214
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 215
__suld_1d_i32_trap(&tmp, surfObject, x); 
#line 216
} else { 
#line 217
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 218
__suld_1d_i32_clamp(&tmp, surfObject, x); 
#line 219
} else { 
#line 220
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 221
__suld_1d_i32_zero(&tmp, surfObject, x); 
#line 222
}  }  }  
#line 223
(*retVal) = tmp; 
#line 224
} 
#endif
#line 226 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 227
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 239
::exit(___);}
#if 0
#line 227
{ 
#line 228
int tmp; 
#line 229
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 230
__suld_1d_i32_trap(&tmp, surfObject, x); 
#line 231
} else { 
#line 232
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 233
__suld_1d_i32_clamp(&tmp, surfObject, x); 
#line 234
} else { 
#line 235
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 236
__suld_1d_i32_zero(&tmp, surfObject, x); 
#line 237
}  }  }  
#line 238
(*retVal) = make_int1(tmp); 
#line 239
} 
#endif
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 242
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 254
::exit(___);}
#if 0
#line 242
{ 
#line 243
unsigned tmp; 
#line 244
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 245
__suld_1d_i32_trap((int *)(&tmp), surfObject, x); 
#line 246
} else { 
#line 247
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 248
__suld_1d_i32_clamp((int *)(&tmp), surfObject, x); 
#line 249
} else { 
#line 250
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 251
__suld_1d_i32_zero((int *)(&tmp), surfObject, x); 
#line 252
}  }  }  
#line 253
(*retVal) = tmp; 
#line 254
} 
#endif
#line 256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 257
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 269
::exit(___);}
#if 0
#line 257
{ 
#line 258
unsigned tmp; 
#line 259
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 260
__suld_1d_i32_trap((int *)(&tmp), surfObject, x); 
#line 261
} else { 
#line 262
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 263
__suld_1d_i32_clamp((int *)(&tmp), surfObject, x); 
#line 264
} else { 
#line 265
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 266
__suld_1d_i32_zero((int *)(&tmp), surfObject, x); 
#line 267
}  }  }  
#line 268
(*retVal) = make_uint1(tmp); 
#line 269
} 
#endif
#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(__int64 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 272
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 284
::exit(___);}
#if 0
#line 272
{ 
#line 273
__int64 tmp; 
#line 274
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 275
__suld_1d_i64_trap(&tmp, surfObject, x); 
#line 276
} else { 
#line 277
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 278
__suld_1d_i64_clamp(&tmp, surfObject, x); 
#line 279
} else { 
#line 280
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 281
__suld_1d_i64_zero(&tmp, surfObject, x); 
#line 282
}  }  }  
#line 283
(*retVal) = tmp; 
#line 284
} 
#endif
#line 286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 287
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 299
::exit(___);}
#if 0
#line 287
{ 
#line 288
__int64 tmp; 
#line 289
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 290
__suld_1d_i64_trap(&tmp, surfObject, x); 
#line 291
} else { 
#line 292
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 293
__suld_1d_i64_clamp(&tmp, surfObject, x); 
#line 294
} else { 
#line 295
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 296
__suld_1d_i64_zero(&tmp, surfObject, x); 
#line 297
}  }  }  
#line 298
(*retVal) = make_longlong1(tmp); 
#line 299
} 
#endif
#line 301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(unsigned __int64 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 302
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 314
::exit(___);}
#if 0
#line 302
{ 
#line 303
unsigned __int64 tmp; 
#line 304
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 305
__suld_1d_i64_trap((__int64 *)(&tmp), surfObject, x); 
#line 306
} else { 
#line 307
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 308
__suld_1d_i64_clamp((__int64 *)(&tmp), surfObject, x); 
#line 309
} else { 
#line 310
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 311
__suld_1d_i64_zero((__int64 *)(&tmp), surfObject, x); 
#line 312
}  }  }  
#line 313
(*retVal) = tmp; 
#line 314
} 
#endif
#line 316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 317
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 329
::exit(___);}
#if 0
#line 317
{ 
#line 318
unsigned __int64 tmp; 
#line 319
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 320
__suld_1d_i64_trap((__int64 *)(&tmp), surfObject, x); 
#line 321
} else { 
#line 322
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 323
__suld_1d_i64_clamp((__int64 *)(&tmp), surfObject, x); 
#line 324
} else { 
#line 325
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 326
__suld_1d_i64_zero((__int64 *)(&tmp), surfObject, x); 
#line 327
}  }  }  
#line 328
(*retVal) = make_ulonglong1(tmp); 
#line 329
} 
#endif
#line 331 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 332
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 344
::exit(___);}
#if 0
#line 332
{ 
#line 333
float tmp; 
#line 334
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 335
__suld_1d_i32_trap((int *)(&tmp), surfObject, x); 
#line 336
} else { 
#line 337
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 338
__suld_1d_i32_clamp((int *)(&tmp), surfObject, x); 
#line 339
} else { 
#line 340
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 341
__suld_1d_i32_zero((int *)(&tmp), surfObject, x); 
#line 342
}  }  }  
#line 343
(*retVal) = tmp; 
#line 344
} 
#endif
#line 346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 347
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 359
::exit(___);}
#if 0
#line 347
{ 
#line 348
float tmp; 
#line 349
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 350
__suld_1d_i32_trap((int *)(&tmp), surfObject, x); 
#line 351
} else { 
#line 352
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 353
__suld_1d_i32_clamp((int *)(&tmp), surfObject, x); 
#line 354
} else { 
#line 355
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 356
__suld_1d_i32_zero((int *)(&tmp), surfObject, x); 
#line 357
}  }  }  
#line 358
(*retVal) = make_float1(tmp); 
#line 359
} 
#endif
#line 367 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 368
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 380
::exit(___);}
#if 0
#line 368
{ 
#line 369
char2 tmp; 
#line 370
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 371
__suld_1d_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x); 
#line 372
} else { 
#line 373
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 374
__suld_1d_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x); 
#line 375
} else { 
#line 376
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 377
__suld_1d_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x); 
#line 378
}  }  }  
#line 379
(*retVal) = tmp; 
#line 380
} 
#endif
#line 382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 383
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 395
::exit(___);}
#if 0
#line 383
{ 
#line 384
uchar2 tmp; 
#line 385
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 386
__suld_1d_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x); 
#line 387
} else { 
#line 388
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 389
__suld_1d_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x); 
#line 390
} else { 
#line 391
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 392
__suld_1d_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x); 
#line 393
}  }  }  
#line 394
(*retVal) = tmp; 
#line 395
} 
#endif
#line 397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 398
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 410
::exit(___);}
#if 0
#line 398
{ 
#line 399
short2 tmp; 
#line 400
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 401
__suld_1d_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x); 
#line 402
} else { 
#line 403
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 404
__suld_1d_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x); 
#line 405
} else { 
#line 406
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 407
__suld_1d_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x); 
#line 408
}  }  }  
#line 409
(*retVal) = tmp; 
#line 410
} 
#endif
#line 412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 413
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 425
::exit(___);}
#if 0
#line 413
{ 
#line 414
ushort2 tmp; 
#line 415
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 416
__suld_1d_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x); 
#line 417
} else { 
#line 418
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 419
__suld_1d_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x); 
#line 420
} else { 
#line 421
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 422
__suld_1d_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x); 
#line 423
}  }  }  
#line 424
(*retVal) = tmp; 
#line 425
} 
#endif
#line 427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 428
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 440
::exit(___);}
#if 0
#line 428
{ 
#line 429
int2 tmp; 
#line 430
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 431
__suld_1d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
#line 432
} else { 
#line 433
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 434
__suld_1d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
#line 435
} else { 
#line 436
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 437
__suld_1d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
#line 438
}  }  }  
#line 439
(*retVal) = tmp; 
#line 440
} 
#endif
#line 442 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 443
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 455
::exit(___);}
#if 0
#line 443
{ 
#line 444
uint2 tmp; 
#line 445
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 446
__suld_1d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
#line 447
} else { 
#line 448
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 449
__suld_1d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
#line 450
} else { 
#line 451
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 452
__suld_1d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
#line 453
}  }  }  
#line 454
(*retVal) = tmp; 
#line 455
} 
#endif
#line 457 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 458
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 470
::exit(___);}
#if 0
#line 458
{ 
#line 459
longlong2 tmp; 
#line 460
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 461
__suld_1d_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x); 
#line 462
} else { 
#line 463
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 464
__suld_1d_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x); 
#line 465
} else { 
#line 466
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 467
__suld_1d_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x); 
#line 468
}  }  }  
#line 469
(*retVal) = tmp; 
#line 470
} 
#endif
#line 472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 473
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 485
::exit(___);}
#if 0
#line 473
{ 
#line 474
ulonglong2 tmp; 
#line 475
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 476
__suld_1d_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x); 
#line 477
} else { 
#line 478
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 479
__suld_1d_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x); 
#line 480
} else { 
#line 481
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 482
__suld_1d_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x); 
#line 483
}  }  }  
#line 484
(*retVal) = tmp; 
#line 485
} 
#endif
#line 487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 488
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 500
::exit(___);}
#if 0
#line 488
{ 
#line 489
float2 tmp; 
#line 490
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 491
__suld_1d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
#line 492
} else { 
#line 493
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 494
__suld_1d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
#line 495
} else { 
#line 496
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 497
__suld_1d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x); 
#line 498
}  }  }  
#line 499
(*retVal) = tmp; 
#line 500
} 
#endif
#line 508 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 509
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 521
::exit(___);}
#if 0
#line 509
{ 
#line 510
char4 tmp; 
#line 511
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 512
__suld_1d_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x); 
#line 513
} else { 
#line 514
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 515
__suld_1d_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x); 
#line 516
} else { 
#line 517
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 518
__suld_1d_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x); 
#line 519
}  }  }  
#line 520
(*retVal) = tmp; 
#line 521
} 
#endif
#line 523 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 524
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 536
::exit(___);}
#if 0
#line 524
{ 
#line 525
uchar4 tmp; 
#line 526
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 527
__suld_1d_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x); 
#line 528
} else { 
#line 529
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 530
__suld_1d_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x); 
#line 531
} else { 
#line 532
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 533
__suld_1d_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x); 
#line 534
}  }  }  
#line 535
(*retVal) = tmp; 
#line 536
} 
#endif
#line 538 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 539
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 551
::exit(___);}
#if 0
#line 539
{ 
#line 540
short4 tmp; 
#line 541
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 542
__suld_1d_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x); 
#line 543
} else { 
#line 544
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 545
__suld_1d_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x); 
#line 546
} else { 
#line 547
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 548
__suld_1d_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x); 
#line 549
}  }  }  
#line 550
(*retVal) = tmp; 
#line 551
} 
#endif
#line 553 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 554
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 566
::exit(___);}
#if 0
#line 554
{ 
#line 555
ushort4 tmp; 
#line 556
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 557
__suld_1d_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x); 
#line 558
} else { 
#line 559
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 560
__suld_1d_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x); 
#line 561
} else { 
#line 562
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 563
__suld_1d_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x); 
#line 564
}  }  }  
#line 565
(*retVal) = tmp; 
#line 566
} 
#endif
#line 568 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 569
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 581
::exit(___);}
#if 0
#line 569
{ 
#line 570
int4 tmp; 
#line 571
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 572
__suld_1d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
#line 573
} else { 
#line 574
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 575
__suld_1d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
#line 576
} else { 
#line 577
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 578
__suld_1d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
#line 579
}  }  }  
#line 580
(*retVal) = tmp; 
#line 581
} 
#endif
#line 583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 584
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 596
::exit(___);}
#if 0
#line 584
{ 
#line 585
uint4 tmp; 
#line 586
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 587
__suld_1d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
#line 588
} else { 
#line 589
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 590
__suld_1d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
#line 591
} else { 
#line 592
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 593
__suld_1d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
#line 594
}  }  }  
#line 595
(*retVal) = tmp; 
#line 596
} 
#endif
#line 598 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 599
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)boundaryMode;
#line 611
::exit(___);}
#if 0
#line 599
{ 
#line 600
float4 tmp; 
#line 601
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 602
__suld_1d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
#line 603
} else { 
#line 604
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 605
__suld_1d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
#line 606
} else { 
#line 607
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 608
__suld_1d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x); 
#line 609
}  }  }  
#line 610
(*retVal) = tmp; 
#line 611
} 
#endif
#line 619 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 620
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 632
::exit(___);}
#if 0
#line 620
{ 
#line 621
char tmp; 
#line 622
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 623
__suld_2d_i8_trap(&tmp, surfObject, x, y); 
#line 624
} else { 
#line 625
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 626
__suld_2d_i8_clamp(&tmp, surfObject, x, y); 
#line 627
} else { 
#line 628
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 629
__suld_2d_i8_zero(&tmp, surfObject, x, y); 
#line 630
}  }  }  
#line 631
(*retVal) = tmp; 
#line 632
} 
#endif
#line 634 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 635
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 647
::exit(___);}
#if 0
#line 635
{ 
#line 636
signed char tmp; 
#line 637
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 638
__suld_2d_i8_trap((char *)(&tmp), surfObject, x, y); 
#line 639
} else { 
#line 640
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 641
__suld_2d_i8_clamp((char *)(&tmp), surfObject, x, y); 
#line 642
} else { 
#line 643
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 644
__suld_2d_i8_zero((char *)(&tmp), surfObject, x, y); 
#line 645
}  }  }  
#line 646
(*retVal) = tmp; 
#line 647
} 
#endif
#line 649 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 650
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 662
::exit(___);}
#if 0
#line 650
{ 
#line 651
char tmp; 
#line 652
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 653
__suld_2d_i8_trap((char *)(&tmp), surfObject, x, y); 
#line 654
} else { 
#line 655
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 656
__suld_2d_i8_clamp((char *)(&tmp), surfObject, x, y); 
#line 657
} else { 
#line 658
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 659
__suld_2d_i8_zero((char *)(&tmp), surfObject, x, y); 
#line 660
}  }  }  
#line 661
(*retVal) = make_char1(tmp); 
#line 662
} 
#endif
#line 664 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 665
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 677
::exit(___);}
#if 0
#line 665
{ 
#line 666
unsigned char tmp; 
#line 667
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 668
__suld_2d_i8_trap((char *)(&tmp), surfObject, x, y); 
#line 669
} else { 
#line 670
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 671
__suld_2d_i8_clamp((char *)(&tmp), surfObject, x, y); 
#line 672
} else { 
#line 673
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 674
__suld_2d_i8_zero((char *)(&tmp), surfObject, x, y); 
#line 675
}  }  }  
#line 676
(*retVal) = tmp; 
#line 677
} 
#endif
#line 679 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 680
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 692
::exit(___);}
#if 0
#line 680
{ 
#line 681
unsigned char tmp; 
#line 682
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 683
__suld_2d_i8_trap((char *)(&tmp), surfObject, x, y); 
#line 684
} else { 
#line 685
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 686
__suld_2d_i8_clamp((char *)(&tmp), surfObject, x, y); 
#line 687
} else { 
#line 688
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 689
__suld_2d_i8_zero((char *)(&tmp), surfObject, x, y); 
#line 690
}  }  }  
#line 691
(*retVal) = make_uchar1(tmp); 
#line 692
} 
#endif
#line 694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 695
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 707
::exit(___);}
#if 0
#line 695
{ 
#line 696
short tmp; 
#line 697
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 698
__suld_2d_i16_trap((short *)(&tmp), surfObject, x, y); 
#line 699
} else { 
#line 700
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 701
__suld_2d_i16_clamp((short *)(&tmp), surfObject, x, y); 
#line 702
} else { 
#line 703
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 704
__suld_2d_i16_zero((short *)(&tmp), surfObject, x, y); 
#line 705
}  }  }  
#line 706
(*retVal) = tmp; 
#line 707
} 
#endif
#line 709 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 710
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 722
::exit(___);}
#if 0
#line 710
{ 
#line 711
short tmp; 
#line 712
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 713
__suld_2d_i16_trap((short *)(&tmp), surfObject, x, y); 
#line 714
} else { 
#line 715
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 716
__suld_2d_i16_clamp((short *)(&tmp), surfObject, x, y); 
#line 717
} else { 
#line 718
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 719
__suld_2d_i16_zero((short *)(&tmp), surfObject, x, y); 
#line 720
}  }  }  
#line 721
(*retVal) = make_short1(tmp); 
#line 722
} 
#endif
#line 724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 725
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 737
::exit(___);}
#if 0
#line 725
{ 
#line 726
unsigned short tmp; 
#line 727
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 728
__suld_2d_i16_trap((short *)(&tmp), surfObject, x, y); 
#line 729
} else { 
#line 730
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 731
__suld_2d_i16_clamp((short *)(&tmp), surfObject, x, y); 
#line 732
} else { 
#line 733
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 734
__suld_2d_i16_zero((short *)(&tmp), surfObject, x, y); 
#line 735
}  }  }  
#line 736
(*retVal) = tmp; 
#line 737
} 
#endif
#line 739 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 740
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 752
::exit(___);}
#if 0
#line 740
{ 
#line 741
unsigned short tmp; 
#line 742
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 743
__suld_2d_i16_trap((short *)(&tmp), surfObject, x, y); 
#line 744
} else { 
#line 745
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 746
__suld_2d_i16_clamp((short *)(&tmp), surfObject, x, y); 
#line 747
} else { 
#line 748
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 749
__suld_2d_i16_zero((short *)(&tmp), surfObject, x, y); 
#line 750
}  }  }  
#line 751
(*retVal) = make_ushort1(tmp); 
#line 752
} 
#endif
#line 754 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 755
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 767
::exit(___);}
#if 0
#line 755
{ 
#line 756
int tmp; 
#line 757
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 758
__suld_2d_i32_trap((int *)(&tmp), surfObject, x, y); 
#line 759
} else { 
#line 760
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 761
__suld_2d_i32_clamp((int *)(&tmp), surfObject, x, y); 
#line 762
} else { 
#line 763
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 764
__suld_2d_i32_zero((int *)(&tmp), surfObject, x, y); 
#line 765
}  }  }  
#line 766
(*retVal) = tmp; 
#line 767
} 
#endif
#line 769 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 770
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 782
::exit(___);}
#if 0
#line 770
{ 
#line 771
int tmp; 
#line 772
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 773
__suld_2d_i32_trap((int *)(&tmp), surfObject, x, y); 
#line 774
} else { 
#line 775
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 776
__suld_2d_i32_clamp((int *)(&tmp), surfObject, x, y); 
#line 777
} else { 
#line 778
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 779
__suld_2d_i32_zero((int *)(&tmp), surfObject, x, y); 
#line 780
}  }  }  
#line 781
(*retVal) = make_int1(tmp); 
#line 782
} 
#endif
#line 784 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 785
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 797
::exit(___);}
#if 0
#line 785
{ 
#line 786
unsigned tmp; 
#line 787
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 788
__suld_2d_i32_trap((int *)(&tmp), surfObject, x, y); 
#line 789
} else { 
#line 790
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 791
__suld_2d_i32_clamp((int *)(&tmp), surfObject, x, y); 
#line 792
} else { 
#line 793
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 794
__suld_2d_i32_zero((int *)(&tmp), surfObject, x, y); 
#line 795
}  }  }  
#line 796
(*retVal) = tmp; 
#line 797
} 
#endif
#line 799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 800
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 812
::exit(___);}
#if 0
#line 800
{ 
#line 801
unsigned tmp; 
#line 802
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 803
__suld_2d_i32_trap((int *)(&tmp), surfObject, x, y); 
#line 804
} else { 
#line 805
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 806
__suld_2d_i32_clamp((int *)(&tmp), surfObject, x, y); 
#line 807
} else { 
#line 808
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 809
__suld_2d_i32_zero((int *)(&tmp), surfObject, x, y); 
#line 810
}  }  }  
#line 811
(*retVal) = make_uint1(tmp); 
#line 812
} 
#endif
#line 814 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(__int64 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 815
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 827
::exit(___);}
#if 0
#line 815
{ 
#line 816
__int64 tmp; 
#line 817
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 818
__suld_2d_i64_trap((__int64 *)(&tmp), surfObject, x, y); 
#line 819
} else { 
#line 820
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 821
__suld_2d_i64_clamp((__int64 *)(&tmp), surfObject, x, y); 
#line 822
} else { 
#line 823
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 824
__suld_2d_i64_zero((__int64 *)(&tmp), surfObject, x, y); 
#line 825
}  }  }  
#line 826
(*retVal) = tmp; 
#line 827
} 
#endif
#line 829 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 830
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 842
::exit(___);}
#if 0
#line 830
{ 
#line 831
__int64 tmp; 
#line 832
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 833
__suld_2d_i64_trap((__int64 *)(&tmp), surfObject, x, y); 
#line 834
} else { 
#line 835
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 836
__suld_2d_i64_clamp((__int64 *)(&tmp), surfObject, x, y); 
#line 837
} else { 
#line 838
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 839
__suld_2d_i64_zero((__int64 *)(&tmp), surfObject, x, y); 
#line 840
}  }  }  
#line 841
(*retVal) = make_longlong1(tmp); 
#line 842
} 
#endif
#line 844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(unsigned __int64 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 845
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 857
::exit(___);}
#if 0
#line 845
{ 
#line 846
unsigned __int64 tmp; 
#line 847
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 848
__suld_2d_i64_trap((__int64 *)(&tmp), surfObject, x, y); 
#line 849
} else { 
#line 850
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 851
__suld_2d_i64_clamp((__int64 *)(&tmp), surfObject, x, y); 
#line 852
} else { 
#line 853
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 854
__suld_2d_i64_zero((__int64 *)(&tmp), surfObject, x, y); 
#line 855
}  }  }  
#line 856
(*retVal) = tmp; 
#line 857
} 
#endif
#line 859 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 860
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 872
::exit(___);}
#if 0
#line 860
{ 
#line 861
unsigned __int64 tmp; 
#line 862
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 863
__suld_2d_i64_trap((__int64 *)(&tmp), surfObject, x, y); 
#line 864
} else { 
#line 865
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 866
__suld_2d_i64_clamp((__int64 *)(&tmp), surfObject, x, y); 
#line 867
} else { 
#line 868
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 869
__suld_2d_i64_zero((__int64 *)(&tmp), surfObject, x, y); 
#line 870
}  }  }  
#line 871
(*retVal) = make_ulonglong1(tmp); 
#line 872
} 
#endif
#line 874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 875
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 887
::exit(___);}
#if 0
#line 875
{ 
#line 876
float tmp; 
#line 877
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 878
__suld_2d_i32_trap((int *)(&tmp), surfObject, x, y); 
#line 879
} else { 
#line 880
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 881
__suld_2d_i32_clamp((int *)(&tmp), surfObject, x, y); 
#line 882
} else { 
#line 883
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 884
__suld_2d_i32_zero((int *)(&tmp), surfObject, x, y); 
#line 885
}  }  }  
#line 886
(*retVal) = tmp; 
#line 887
} 
#endif
#line 889 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 890
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 902
::exit(___);}
#if 0
#line 890
{ 
#line 891
float tmp; 
#line 892
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 893
__suld_2d_i32_trap((int *)(&tmp), surfObject, x, y); 
#line 894
} else { 
#line 895
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 896
__suld_2d_i32_clamp((int *)(&tmp), surfObject, x, y); 
#line 897
} else { 
#line 898
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 899
__suld_2d_i32_zero((int *)(&tmp), surfObject, x, y); 
#line 900
}  }  }  
#line 901
(*retVal) = make_float1(tmp); 
#line 902
} 
#endif
#line 910 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 911
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 923
::exit(___);}
#if 0
#line 911
{ 
#line 912
char2 tmp; 
#line 913
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 914
__suld_2d_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y); 
#line 915
} else { 
#line 916
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 917
__suld_2d_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y); 
#line 918
} else { 
#line 919
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 920
__suld_2d_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y); 
#line 921
}  }  }  
#line 922
(*retVal) = tmp; 
#line 923
} 
#endif
#line 925 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 926
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 938
::exit(___);}
#if 0
#line 926
{ 
#line 927
uchar2 tmp; 
#line 928
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 929
__suld_2d_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y); 
#line 930
} else { 
#line 931
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 932
__suld_2d_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y); 
#line 933
} else { 
#line 934
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 935
__suld_2d_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y); 
#line 936
}  }  }  
#line 937
(*retVal) = tmp; 
#line 938
} 
#endif
#line 940 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 941
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 953
::exit(___);}
#if 0
#line 941
{ 
#line 942
short2 tmp; 
#line 943
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 944
__suld_2d_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y); 
#line 945
} else { 
#line 946
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 947
__suld_2d_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y); 
#line 948
} else { 
#line 949
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 950
__suld_2d_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y); 
#line 951
}  }  }  
#line 952
(*retVal) = tmp; 
#line 953
} 
#endif
#line 955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 956
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 968
::exit(___);}
#if 0
#line 956
{ 
#line 957
ushort2 tmp; 
#line 958
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 959
__suld_2d_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y); 
#line 960
} else { 
#line 961
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 962
__suld_2d_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y); 
#line 963
} else { 
#line 964
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 965
__suld_2d_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y); 
#line 966
}  }  }  
#line 967
(*retVal) = tmp; 
#line 968
} 
#endif
#line 970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 971
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 983
::exit(___);}
#if 0
#line 971
{ 
#line 972
int2 tmp; 
#line 973
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 974
__suld_2d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
#line 975
} else { 
#line 976
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 977
__suld_2d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
#line 978
} else { 
#line 979
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 980
__suld_2d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
#line 981
}  }  }  
#line 982
(*retVal) = tmp; 
#line 983
} 
#endif
#line 985 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 986
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 998
::exit(___);}
#if 0
#line 986
{ 
#line 987
uint2 tmp; 
#line 988
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 989
__suld_2d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
#line 990
} else { 
#line 991
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 992
__suld_2d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
#line 993
} else { 
#line 994
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 995
__suld_2d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
#line 996
}  }  }  
#line 997
(*retVal) = tmp; 
#line 998
} 
#endif
#line 1000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 1001
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 1013
::exit(___);}
#if 0
#line 1001
{ 
#line 1002
longlong2 tmp; 
#line 1003
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1004
__suld_2d_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x, y); 
#line 1005
} else { 
#line 1006
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1007
__suld_2d_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x, y); 
#line 1008
} else { 
#line 1009
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1010
__suld_2d_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x, y); 
#line 1011
}  }  }  
#line 1012
(*retVal) = tmp; 
#line 1013
} 
#endif
#line 1015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 1016
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 1028
::exit(___);}
#if 0
#line 1016
{ 
#line 1017
ulonglong2 tmp; 
#line 1018
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1019
__suld_2d_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x, y); 
#line 1020
} else { 
#line 1021
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1022
__suld_2d_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x, y); 
#line 1023
} else { 
#line 1024
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1025
__suld_2d_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x, y); 
#line 1026
}  }  }  
#line 1027
(*retVal) = tmp; 
#line 1028
} 
#endif
#line 1030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 1031
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 1043
::exit(___);}
#if 0
#line 1031
{ 
#line 1032
float2 tmp; 
#line 1033
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1034
__suld_2d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
#line 1035
} else { 
#line 1036
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1037
__suld_2d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
#line 1038
} else { 
#line 1039
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1040
__suld_2d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y); 
#line 1041
}  }  }  
#line 1042
(*retVal) = tmp; 
#line 1043
} 
#endif
#line 1051 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 1052
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 1064
::exit(___);}
#if 0
#line 1052
{ 
#line 1053
char4 tmp; 
#line 1054
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1055
__suld_2d_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y); 
#line 1056
} else { 
#line 1057
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1058
__suld_2d_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y); 
#line 1059
} else { 
#line 1060
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1061
__suld_2d_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y); 
#line 1062
}  }  }  
#line 1063
(*retVal) = tmp; 
#line 1064
} 
#endif
#line 1066 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 1067
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 1079
::exit(___);}
#if 0
#line 1067
{ 
#line 1068
uchar4 tmp; 
#line 1069
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1070
__suld_2d_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y); 
#line 1071
} else { 
#line 1072
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1073
__suld_2d_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y); 
#line 1074
} else { 
#line 1075
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1076
__suld_2d_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y); 
#line 1077
}  }  }  
#line 1078
(*retVal) = tmp; 
#line 1079
} 
#endif
#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 1082
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 1094
::exit(___);}
#if 0
#line 1082
{ 
#line 1083
short4 tmp; 
#line 1084
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1085
__suld_2d_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y); 
#line 1086
} else { 
#line 1087
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1088
__suld_2d_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y); 
#line 1089
} else { 
#line 1090
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1091
__suld_2d_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y); 
#line 1092
}  }  }  
#line 1093
(*retVal) = tmp; 
#line 1094
} 
#endif
#line 1096 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 1097
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 1109
::exit(___);}
#if 0
#line 1097
{ 
#line 1098
ushort4 tmp; 
#line 1099
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1100
__suld_2d_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y); 
#line 1101
} else { 
#line 1102
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1103
__suld_2d_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y); 
#line 1104
} else { 
#line 1105
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1106
__suld_2d_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y); 
#line 1107
}  }  }  
#line 1108
(*retVal) = tmp; 
#line 1109
} 
#endif
#line 1111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 1112
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 1124
::exit(___);}
#if 0
#line 1112
{ 
#line 1113
int4 tmp; 
#line 1114
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1115
__suld_2d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
#line 1116
} else { 
#line 1117
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1118
__suld_2d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
#line 1119
} else { 
#line 1120
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1121
__suld_2d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
#line 1122
}  }  }  
#line 1123
(*retVal) = tmp; 
#line 1124
} 
#endif
#line 1126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 1127
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 1139
::exit(___);}
#if 0
#line 1127
{ 
#line 1128
uint4 tmp; 
#line 1129
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1130
__suld_2d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
#line 1131
} else { 
#line 1132
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1133
__suld_2d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
#line 1134
} else { 
#line 1135
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1136
__suld_2d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
#line 1137
}  }  }  
#line 1138
(*retVal) = tmp; 
#line 1139
} 
#endif
#line 1141 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 1142
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 1154
::exit(___);}
#if 0
#line 1142
{ 
#line 1143
float4 tmp; 
#line 1144
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1145
__suld_2d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
#line 1146
} else { 
#line 1147
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1148
__suld_2d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
#line 1149
} else { 
#line 1150
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1151
__suld_2d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y); 
#line 1152
}  }  }  
#line 1153
(*retVal) = tmp; 
#line 1154
} 
#endif
#line 1162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1163
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1175
::exit(___);}
#if 0
#line 1163
{ 
#line 1164
char tmp; 
#line 1165
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1166
__suld_3d_i8_trap((char *)(&tmp), surfObject, x, y, z); 
#line 1167
} else { 
#line 1168
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1169
__suld_3d_i8_clamp((char *)(&tmp), surfObject, x, y, z); 
#line 1170
} else { 
#line 1171
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1172
__suld_3d_i8_zero((char *)(&tmp), surfObject, x, y, z); 
#line 1173
}  }  }  
#line 1174
(*retVal) = tmp; 
#line 1175
} 
#endif
#line 1177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1178
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1190
::exit(___);}
#if 0
#line 1178
{ 
#line 1179
signed char tmp; 
#line 1180
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1181
__suld_3d_i8_trap((char *)(&tmp), surfObject, x, y, z); 
#line 1182
} else { 
#line 1183
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1184
__suld_3d_i8_clamp((char *)(&tmp), surfObject, x, y, z); 
#line 1185
} else { 
#line 1186
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1187
__suld_3d_i8_zero((char *)(&tmp), surfObject, x, y, z); 
#line 1188
}  }  }  
#line 1189
(*retVal) = tmp; 
#line 1190
} 
#endif
#line 1192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1193
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1205
::exit(___);}
#if 0
#line 1193
{ 
#line 1194
char tmp; 
#line 1195
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1196
__suld_3d_i8_trap((char *)(&tmp), surfObject, x, y, z); 
#line 1197
} else { 
#line 1198
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1199
__suld_3d_i8_clamp((char *)(&tmp), surfObject, x, y, z); 
#line 1200
} else { 
#line 1201
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1202
__suld_3d_i8_zero((char *)(&tmp), surfObject, x, y, z); 
#line 1203
}  }  }  
#line 1204
(*retVal) = make_char1(tmp); 
#line 1205
} 
#endif
#line 1207 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1208
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1220
::exit(___);}
#if 0
#line 1208
{ 
#line 1209
unsigned char tmp; 
#line 1210
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1211
__suld_3d_i8_trap((char *)(&tmp), surfObject, x, y, z); 
#line 1212
} else { 
#line 1213
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1214
__suld_3d_i8_clamp((char *)(&tmp), surfObject, x, y, z); 
#line 1215
} else { 
#line 1216
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1217
__suld_3d_i8_zero((char *)(&tmp), surfObject, x, y, z); 
#line 1218
}  }  }  
#line 1219
(*retVal) = tmp; 
#line 1220
} 
#endif
#line 1222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1223
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1235
::exit(___);}
#if 0
#line 1223
{ 
#line 1224
unsigned char tmp; 
#line 1225
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1226
__suld_3d_i8_trap((char *)(&tmp), surfObject, x, y, z); 
#line 1227
} else { 
#line 1228
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1229
__suld_3d_i8_clamp((char *)(&tmp), surfObject, x, y, z); 
#line 1230
} else { 
#line 1231
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1232
__suld_3d_i8_zero((char *)(&tmp), surfObject, x, y, z); 
#line 1233
}  }  }  
#line 1234
(*retVal) = make_uchar1(tmp); 
#line 1235
} 
#endif
#line 1237 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1238
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1250
::exit(___);}
#if 0
#line 1238
{ 
#line 1239
short tmp; 
#line 1240
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1241
__suld_3d_i16_trap((short *)(&tmp), surfObject, x, y, z); 
#line 1242
} else { 
#line 1243
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1244
__suld_3d_i16_clamp((short *)(&tmp), surfObject, x, y, z); 
#line 1245
} else { 
#line 1246
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1247
__suld_3d_i16_zero((short *)(&tmp), surfObject, x, y, z); 
#line 1248
}  }  }  
#line 1249
(*retVal) = tmp; 
#line 1250
} 
#endif
#line 1252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1253
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1265
::exit(___);}
#if 0
#line 1253
{ 
#line 1254
short tmp; 
#line 1255
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1256
__suld_3d_i16_trap((short *)(&tmp), surfObject, x, y, z); 
#line 1257
} else { 
#line 1258
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1259
__suld_3d_i16_clamp((short *)(&tmp), surfObject, x, y, z); 
#line 1260
} else { 
#line 1261
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1262
__suld_3d_i16_zero((short *)(&tmp), surfObject, x, y, z); 
#line 1263
}  }  }  
#line 1264
(*retVal) = make_short1(tmp); 
#line 1265
} 
#endif
#line 1267 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1268
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1280
::exit(___);}
#if 0
#line 1268
{ 
#line 1269
unsigned short tmp; 
#line 1270
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1271
__suld_3d_i16_trap((short *)(&tmp), surfObject, x, y, z); 
#line 1272
} else { 
#line 1273
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1274
__suld_3d_i16_clamp((short *)(&tmp), surfObject, x, y, z); 
#line 1275
} else { 
#line 1276
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1277
__suld_3d_i16_zero((short *)(&tmp), surfObject, x, y, z); 
#line 1278
}  }  }  
#line 1279
(*retVal) = tmp; 
#line 1280
} 
#endif
#line 1282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1283
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1295
::exit(___);}
#if 0
#line 1283
{ 
#line 1284
unsigned short tmp; 
#line 1285
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1286
__suld_3d_i16_trap((short *)(&tmp), surfObject, x, y, z); 
#line 1287
} else { 
#line 1288
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1289
__suld_3d_i16_clamp((short *)(&tmp), surfObject, x, y, z); 
#line 1290
} else { 
#line 1291
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1292
__suld_3d_i16_zero((short *)(&tmp), surfObject, x, y, z); 
#line 1293
}  }  }  
#line 1294
(*retVal) = make_ushort1(tmp); 
#line 1295
} 
#endif
#line 1297 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1298
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1310
::exit(___);}
#if 0
#line 1298
{ 
#line 1299
int tmp; 
#line 1300
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1301
__suld_3d_i32_trap((int *)(&tmp), surfObject, x, y, z); 
#line 1302
} else { 
#line 1303
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1304
__suld_3d_i32_clamp((int *)(&tmp), surfObject, x, y, z); 
#line 1305
} else { 
#line 1306
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1307
__suld_3d_i32_zero((int *)(&tmp), surfObject, x, y, z); 
#line 1308
}  }  }  
#line 1309
(*retVal) = tmp; 
#line 1310
} 
#endif
#line 1312 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1313
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1325
::exit(___);}
#if 0
#line 1313
{ 
#line 1314
int tmp; 
#line 1315
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1316
__suld_3d_i32_trap((int *)(&tmp), surfObject, x, y, z); 
#line 1317
} else { 
#line 1318
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1319
__suld_3d_i32_clamp((int *)(&tmp), surfObject, x, y, z); 
#line 1320
} else { 
#line 1321
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1322
__suld_3d_i32_zero((int *)(&tmp), surfObject, x, y, z); 
#line 1323
}  }  }  
#line 1324
(*retVal) = make_int1(tmp); 
#line 1325
} 
#endif
#line 1327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1328
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1340
::exit(___);}
#if 0
#line 1328
{ 
#line 1329
unsigned tmp; 
#line 1330
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1331
__suld_3d_i32_trap((int *)(&tmp), surfObject, x, y, z); 
#line 1332
} else { 
#line 1333
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1334
__suld_3d_i32_clamp((int *)(&tmp), surfObject, x, y, z); 
#line 1335
} else { 
#line 1336
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1337
__suld_3d_i32_zero((int *)(&tmp), surfObject, x, y, z); 
#line 1338
}  }  }  
#line 1339
(*retVal) = tmp; 
#line 1340
} 
#endif
#line 1342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1343
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1355
::exit(___);}
#if 0
#line 1343
{ 
#line 1344
unsigned tmp; 
#line 1345
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1346
__suld_3d_i32_trap((int *)(&tmp), surfObject, x, y, z); 
#line 1347
} else { 
#line 1348
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1349
__suld_3d_i32_clamp((int *)(&tmp), surfObject, x, y, z); 
#line 1350
} else { 
#line 1351
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1352
__suld_3d_i32_zero((int *)(&tmp), surfObject, x, y, z); 
#line 1353
}  }  }  
#line 1354
(*retVal) = make_uint1(tmp); 
#line 1355
} 
#endif
#line 1357 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(__int64 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1358
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1370
::exit(___);}
#if 0
#line 1358
{ 
#line 1359
__int64 tmp; 
#line 1360
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1361
__suld_3d_i64_trap((__int64 *)(&tmp), surfObject, x, y, z); 
#line 1362
} else { 
#line 1363
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1364
__suld_3d_i64_clamp((__int64 *)(&tmp), surfObject, x, y, z); 
#line 1365
} else { 
#line 1366
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1367
__suld_3d_i64_zero((__int64 *)(&tmp), surfObject, x, y, z); 
#line 1368
}  }  }  
#line 1369
(*retVal) = tmp; 
#line 1370
} 
#endif
#line 1372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1373
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1385
::exit(___);}
#if 0
#line 1373
{ 
#line 1374
__int64 tmp; 
#line 1375
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1376
__suld_3d_i64_trap((__int64 *)(&tmp), surfObject, x, y, z); 
#line 1377
} else { 
#line 1378
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1379
__suld_3d_i64_clamp((__int64 *)(&tmp), surfObject, x, y, z); 
#line 1380
} else { 
#line 1381
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1382
__suld_3d_i64_zero((__int64 *)(&tmp), surfObject, x, y, z); 
#line 1383
}  }  }  
#line 1384
(*retVal) = make_longlong1(tmp); 
#line 1385
} 
#endif
#line 1387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(unsigned __int64 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1388
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1400
::exit(___);}
#if 0
#line 1388
{ 
#line 1389
unsigned __int64 tmp; 
#line 1390
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1391
__suld_3d_i64_trap((__int64 *)(&tmp), surfObject, x, y, z); 
#line 1392
} else { 
#line 1393
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1394
__suld_3d_i64_clamp((__int64 *)(&tmp), surfObject, x, y, z); 
#line 1395
} else { 
#line 1396
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1397
__suld_3d_i64_zero((__int64 *)(&tmp), surfObject, x, y, z); 
#line 1398
}  }  }  
#line 1399
(*retVal) = tmp; 
#line 1400
} 
#endif
#line 1402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1403
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1415
::exit(___);}
#if 0
#line 1403
{ 
#line 1404
unsigned __int64 tmp; 
#line 1405
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1406
__suld_3d_i64_trap((__int64 *)(&tmp), surfObject, x, y, z); 
#line 1407
} else { 
#line 1408
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1409
__suld_3d_i64_clamp((__int64 *)(&tmp), surfObject, x, y, z); 
#line 1410
} else { 
#line 1411
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1412
__suld_3d_i64_zero((__int64 *)(&tmp), surfObject, x, y, z); 
#line 1413
}  }  }  
#line 1414
(*retVal) = make_ulonglong1(tmp); 
#line 1415
} 
#endif
#line 1417 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1418
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1430
::exit(___);}
#if 0
#line 1418
{ 
#line 1419
float tmp; 
#line 1420
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1421
__suld_3d_i32_trap((int *)(&tmp), surfObject, x, y, z); 
#line 1422
} else { 
#line 1423
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1424
__suld_3d_i32_clamp((int *)(&tmp), surfObject, x, y, z); 
#line 1425
} else { 
#line 1426
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1427
__suld_3d_i32_zero((int *)(&tmp), surfObject, x, y, z); 
#line 1428
}  }  }  
#line 1429
(*retVal) = tmp; 
#line 1430
} 
#endif
#line 1432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1433
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1445
::exit(___);}
#if 0
#line 1433
{ 
#line 1434
float tmp; 
#line 1435
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1436
__suld_3d_i32_trap((int *)(&tmp), surfObject, x, y, z); 
#line 1437
} else { 
#line 1438
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1439
__suld_3d_i32_clamp((int *)(&tmp), surfObject, x, y, z); 
#line 1440
} else { 
#line 1441
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1442
__suld_3d_i32_zero((int *)(&tmp), surfObject, x, y, z); 
#line 1443
}  }  }  
#line 1444
(*retVal) = make_float1(tmp); 
#line 1445
} 
#endif
#line 1453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1454
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1466
::exit(___);}
#if 0
#line 1454
{ 
#line 1455
char2 tmp; 
#line 1456
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1457
__suld_3d_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y, z); 
#line 1458
} else { 
#line 1459
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1460
__suld_3d_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y, z); 
#line 1461
} else { 
#line 1462
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1463
__suld_3d_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y, z); 
#line 1464
}  }  }  
#line 1465
(*retVal) = tmp; 
#line 1466
} 
#endif
#line 1468 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1469
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1481
::exit(___);}
#if 0
#line 1469
{ 
#line 1470
uchar2 tmp; 
#line 1471
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1472
__suld_3d_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y, z); 
#line 1473
} else { 
#line 1474
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1475
__suld_3d_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y, z); 
#line 1476
} else { 
#line 1477
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1478
__suld_3d_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, x, y, z); 
#line 1479
}  }  }  
#line 1480
(*retVal) = tmp; 
#line 1481
} 
#endif
#line 1483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1484
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1496
::exit(___);}
#if 0
#line 1484
{ 
#line 1485
short2 tmp; 
#line 1486
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1487
__suld_3d_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y, z); 
#line 1488
} else { 
#line 1489
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1490
__suld_3d_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y, z); 
#line 1491
} else { 
#line 1492
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1493
__suld_3d_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y, z); 
#line 1494
}  }  }  
#line 1495
(*retVal) = tmp; 
#line 1496
} 
#endif
#line 1498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1499
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1511
::exit(___);}
#if 0
#line 1499
{ 
#line 1500
ushort2 tmp; 
#line 1501
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1502
__suld_3d_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y, z); 
#line 1503
} else { 
#line 1504
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1505
__suld_3d_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y, z); 
#line 1506
} else { 
#line 1507
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1508
__suld_3d_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, x, y, z); 
#line 1509
}  }  }  
#line 1510
(*retVal) = tmp; 
#line 1511
} 
#endif
#line 1513 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1514
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1526
::exit(___);}
#if 0
#line 1514
{ 
#line 1515
int2 tmp; 
#line 1516
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1517
__suld_3d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
#line 1518
} else { 
#line 1519
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1520
__suld_3d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
#line 1521
} else { 
#line 1522
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1523
__suld_3d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
#line 1524
}  }  }  
#line 1525
(*retVal) = tmp; 
#line 1526
} 
#endif
#line 1528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1529
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1541
::exit(___);}
#if 0
#line 1529
{ 
#line 1530
uint2 tmp; 
#line 1531
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1532
__suld_3d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
#line 1533
} else { 
#line 1534
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1535
__suld_3d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
#line 1536
} else { 
#line 1537
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1538
__suld_3d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
#line 1539
}  }  }  
#line 1540
(*retVal) = tmp; 
#line 1541
} 
#endif
#line 1543 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1544
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1556
::exit(___);}
#if 0
#line 1544
{ 
#line 1545
longlong2 tmp; 
#line 1546
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1547
__suld_3d_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x, y, z); 
#line 1548
} else { 
#line 1549
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1550
__suld_3d_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x, y, z); 
#line 1551
} else { 
#line 1552
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1553
__suld_3d_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x, y, z); 
#line 1554
}  }  }  
#line 1555
(*retVal) = tmp; 
#line 1556
} 
#endif
#line 1558 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1559
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1571
::exit(___);}
#if 0
#line 1559
{ 
#line 1560
ulonglong2 tmp; 
#line 1561
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1562
__suld_3d_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x, y, z); 
#line 1563
} else { 
#line 1564
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1565
__suld_3d_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x, y, z); 
#line 1566
} else { 
#line 1567
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1568
__suld_3d_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, x, y, z); 
#line 1569
}  }  }  
#line 1570
(*retVal) = tmp; 
#line 1571
} 
#endif
#line 1573 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1574
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1586
::exit(___);}
#if 0
#line 1574
{ 
#line 1575
float2 tmp; 
#line 1576
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1577
__suld_3d_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
#line 1578
} else { 
#line 1579
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1580
__suld_3d_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
#line 1581
} else { 
#line 1582
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1583
__suld_3d_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, x, y, z); 
#line 1584
}  }  }  
#line 1585
(*retVal) = tmp; 
#line 1586
} 
#endif
#line 1594 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1595
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1607
::exit(___);}
#if 0
#line 1595
{ 
#line 1596
char4 tmp; 
#line 1597
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1598
__suld_3d_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y, z); 
#line 1599
} else { 
#line 1600
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1601
__suld_3d_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y, z); 
#line 1602
} else { 
#line 1603
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1604
__suld_3d_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y, z); 
#line 1605
}  }  }  
#line 1606
(*retVal) = tmp; 
#line 1607
} 
#endif
#line 1609 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1610
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1622
::exit(___);}
#if 0
#line 1610
{ 
#line 1611
uchar4 tmp; 
#line 1612
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1613
__suld_3d_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y, z); 
#line 1614
} else { 
#line 1615
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1616
__suld_3d_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y, z); 
#line 1617
} else { 
#line 1618
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1619
__suld_3d_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, x, y, z); 
#line 1620
}  }  }  
#line 1621
(*retVal) = tmp; 
#line 1622
} 
#endif
#line 1624 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1625
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1637
::exit(___);}
#if 0
#line 1625
{ 
#line 1626
short4 tmp; 
#line 1627
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1628
__suld_3d_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y, z); 
#line 1629
} else { 
#line 1630
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1631
__suld_3d_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y, z); 
#line 1632
} else { 
#line 1633
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1634
__suld_3d_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y, z); 
#line 1635
}  }  }  
#line 1636
(*retVal) = tmp; 
#line 1637
} 
#endif
#line 1639 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1640
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1652
::exit(___);}
#if 0
#line 1640
{ 
#line 1641
ushort4 tmp; 
#line 1642
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1643
__suld_3d_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y, z); 
#line 1644
} else { 
#line 1645
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1646
__suld_3d_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y, z); 
#line 1647
} else { 
#line 1648
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1649
__suld_3d_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, x, y, z); 
#line 1650
}  }  }  
#line 1651
(*retVal) = tmp; 
#line 1652
} 
#endif
#line 1654 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1655
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1667
::exit(___);}
#if 0
#line 1655
{ 
#line 1656
int4 tmp; 
#line 1657
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1658
__suld_3d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
#line 1659
} else { 
#line 1660
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1661
__suld_3d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
#line 1662
} else { 
#line 1663
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1664
__suld_3d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
#line 1665
}  }  }  
#line 1666
(*retVal) = tmp; 
#line 1667
} 
#endif
#line 1669 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1670
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1682
::exit(___);}
#if 0
#line 1670
{ 
#line 1671
uint4 tmp; 
#line 1672
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1673
__suld_3d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
#line 1674
} else { 
#line 1675
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1676
__suld_3d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
#line 1677
} else { 
#line 1678
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1679
__suld_3d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
#line 1680
}  }  }  
#line 1681
(*retVal) = tmp; 
#line 1682
} 
#endif
#line 1684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 1685
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 1697
::exit(___);}
#if 0
#line 1685
{ 
#line 1686
float4 tmp; 
#line 1687
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1688
__suld_3d_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
#line 1689
} else { 
#line 1690
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1691
__suld_3d_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
#line 1692
} else { 
#line 1693
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1694
__suld_3d_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, x, y, z); 
#line 1695
}  }  }  
#line 1696
(*retVal) = tmp; 
#line 1697
} 
#endif
#line 1705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1706
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1718
::exit(___);}
#if 0
#line 1706
{ 
#line 1707
char tmp; 
#line 1708
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1709
__suld_1d_array_i8_trap((char *)(&tmp), surfObject, layer, x); 
#line 1710
} else { 
#line 1711
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1712
__suld_1d_array_i8_clamp((char *)(&tmp), surfObject, layer, x); 
#line 1713
} else { 
#line 1714
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1715
__suld_1d_array_i8_zero((char *)(&tmp), surfObject, layer, x); 
#line 1716
}  }  }  
#line 1717
(*retVal) = tmp; 
#line 1718
} 
#endif
#line 1720 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1721
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1733
::exit(___);}
#if 0
#line 1721
{ 
#line 1722
signed char tmp; 
#line 1723
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1724
__suld_1d_array_i8_trap((char *)(&tmp), surfObject, layer, x); 
#line 1725
} else { 
#line 1726
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1727
__suld_1d_array_i8_clamp((char *)(&tmp), surfObject, layer, x); 
#line 1728
} else { 
#line 1729
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1730
__suld_1d_array_i8_zero((char *)(&tmp), surfObject, layer, x); 
#line 1731
}  }  }  
#line 1732
(*retVal) = tmp; 
#line 1733
} 
#endif
#line 1735 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1736
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1748
::exit(___);}
#if 0
#line 1736
{ 
#line 1737
char tmp; 
#line 1738
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1739
__suld_1d_array_i8_trap((char *)(&tmp), surfObject, layer, x); 
#line 1740
} else { 
#line 1741
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1742
__suld_1d_array_i8_clamp((char *)(&tmp), surfObject, layer, x); 
#line 1743
} else { 
#line 1744
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1745
__suld_1d_array_i8_zero((char *)(&tmp), surfObject, layer, x); 
#line 1746
}  }  }  
#line 1747
(*retVal) = make_char1(tmp); 
#line 1748
} 
#endif
#line 1750 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1751
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1763
::exit(___);}
#if 0
#line 1751
{ 
#line 1752
unsigned char tmp; 
#line 1753
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1754
__suld_1d_array_i8_trap((char *)(&tmp), surfObject, layer, x); 
#line 1755
} else { 
#line 1756
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1757
__suld_1d_array_i8_clamp((char *)(&tmp), surfObject, layer, x); 
#line 1758
} else { 
#line 1759
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1760
__suld_1d_array_i8_zero((char *)(&tmp), surfObject, layer, x); 
#line 1761
}  }  }  
#line 1762
(*retVal) = tmp; 
#line 1763
} 
#endif
#line 1765 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1766
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1778
::exit(___);}
#if 0
#line 1766
{ 
#line 1767
unsigned char tmp; 
#line 1768
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1769
__suld_1d_array_i8_trap((char *)(&tmp), surfObject, layer, x); 
#line 1770
} else { 
#line 1771
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1772
__suld_1d_array_i8_clamp((char *)(&tmp), surfObject, layer, x); 
#line 1773
} else { 
#line 1774
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1775
__suld_1d_array_i8_zero((char *)(&tmp), surfObject, layer, x); 
#line 1776
}  }  }  
#line 1777
(*retVal) = make_uchar1(tmp); 
#line 1778
} 
#endif
#line 1780 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1781
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1793
::exit(___);}
#if 0
#line 1781
{ 
#line 1782
short tmp; 
#line 1783
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1784
__suld_1d_array_i16_trap((short *)(&tmp), surfObject, layer, x); 
#line 1785
} else { 
#line 1786
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1787
__suld_1d_array_i16_clamp((short *)(&tmp), surfObject, layer, x); 
#line 1788
} else { 
#line 1789
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1790
__suld_1d_array_i16_zero((short *)(&tmp), surfObject, layer, x); 
#line 1791
}  }  }  
#line 1792
(*retVal) = tmp; 
#line 1793
} 
#endif
#line 1795 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1796
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1808
::exit(___);}
#if 0
#line 1796
{ 
#line 1797
short tmp; 
#line 1798
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1799
__suld_1d_array_i16_trap((short *)(&tmp), surfObject, layer, x); 
#line 1800
} else { 
#line 1801
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1802
__suld_1d_array_i16_clamp((short *)(&tmp), surfObject, layer, x); 
#line 1803
} else { 
#line 1804
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1805
__suld_1d_array_i16_zero((short *)(&tmp), surfObject, layer, x); 
#line 1806
}  }  }  
#line 1807
(*retVal) = make_short1(tmp); 
#line 1808
} 
#endif
#line 1810 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1811
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1823
::exit(___);}
#if 0
#line 1811
{ 
#line 1812
unsigned short tmp; 
#line 1813
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1814
__suld_1d_array_i16_trap((short *)(&tmp), surfObject, layer, x); 
#line 1815
} else { 
#line 1816
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1817
__suld_1d_array_i16_clamp((short *)(&tmp), surfObject, layer, x); 
#line 1818
} else { 
#line 1819
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1820
__suld_1d_array_i16_zero((short *)(&tmp), surfObject, layer, x); 
#line 1821
}  }  }  
#line 1822
(*retVal) = tmp; 
#line 1823
} 
#endif
#line 1825 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1826
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1838
::exit(___);}
#if 0
#line 1826
{ 
#line 1827
unsigned short tmp; 
#line 1828
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1829
__suld_1d_array_i16_trap((short *)(&tmp), surfObject, layer, x); 
#line 1830
} else { 
#line 1831
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1832
__suld_1d_array_i16_clamp((short *)(&tmp), surfObject, layer, x); 
#line 1833
} else { 
#line 1834
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1835
__suld_1d_array_i16_zero((short *)(&tmp), surfObject, layer, x); 
#line 1836
}  }  }  
#line 1837
(*retVal) = make_ushort1(tmp); 
#line 1838
} 
#endif
#line 1840 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1841
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1853
::exit(___);}
#if 0
#line 1841
{ 
#line 1842
int tmp; 
#line 1843
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1844
__suld_1d_array_i32_trap((int *)(&tmp), surfObject, layer, x); 
#line 1845
} else { 
#line 1846
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1847
__suld_1d_array_i32_clamp((int *)(&tmp), surfObject, layer, x); 
#line 1848
} else { 
#line 1849
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1850
__suld_1d_array_i32_zero((int *)(&tmp), surfObject, layer, x); 
#line 1851
}  }  }  
#line 1852
(*retVal) = tmp; 
#line 1853
} 
#endif
#line 1855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1856
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1868
::exit(___);}
#if 0
#line 1856
{ 
#line 1857
int tmp; 
#line 1858
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1859
__suld_1d_array_i32_trap((int *)(&tmp), surfObject, layer, x); 
#line 1860
} else { 
#line 1861
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1862
__suld_1d_array_i32_clamp((int *)(&tmp), surfObject, layer, x); 
#line 1863
} else { 
#line 1864
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1865
__suld_1d_array_i32_zero((int *)(&tmp), surfObject, layer, x); 
#line 1866
}  }  }  
#line 1867
(*retVal) = make_int1(tmp); 
#line 1868
} 
#endif
#line 1870 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1871
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1883
::exit(___);}
#if 0
#line 1871
{ 
#line 1872
unsigned tmp; 
#line 1873
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1874
__suld_1d_array_i32_trap((int *)(&tmp), surfObject, layer, x); 
#line 1875
} else { 
#line 1876
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1877
__suld_1d_array_i32_clamp((int *)(&tmp), surfObject, layer, x); 
#line 1878
} else { 
#line 1879
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1880
__suld_1d_array_i32_zero((int *)(&tmp), surfObject, layer, x); 
#line 1881
}  }  }  
#line 1882
(*retVal) = tmp; 
#line 1883
} 
#endif
#line 1885 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1886
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1898
::exit(___);}
#if 0
#line 1886
{ 
#line 1887
unsigned tmp; 
#line 1888
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1889
__suld_1d_array_i32_trap((int *)(&tmp), surfObject, layer, x); 
#line 1890
} else { 
#line 1891
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1892
__suld_1d_array_i32_clamp((int *)(&tmp), surfObject, layer, x); 
#line 1893
} else { 
#line 1894
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1895
__suld_1d_array_i32_zero((int *)(&tmp), surfObject, layer, x); 
#line 1896
}  }  }  
#line 1897
(*retVal) = make_uint1(tmp); 
#line 1898
} 
#endif
#line 1900 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(__int64 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1901
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1913
::exit(___);}
#if 0
#line 1901
{ 
#line 1902
__int64 tmp; 
#line 1903
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1904
__suld_1d_array_i64_trap((__int64 *)(&tmp), surfObject, layer, x); 
#line 1905
} else { 
#line 1906
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1907
__suld_1d_array_i64_clamp((__int64 *)(&tmp), surfObject, layer, x); 
#line 1908
} else { 
#line 1909
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1910
__suld_1d_array_i64_zero((__int64 *)(&tmp), surfObject, layer, x); 
#line 1911
}  }  }  
#line 1912
(*retVal) = tmp; 
#line 1913
} 
#endif
#line 1915 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1916
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1928
::exit(___);}
#if 0
#line 1916
{ 
#line 1917
__int64 tmp; 
#line 1918
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1919
__suld_1d_array_i64_trap((__int64 *)(&tmp), surfObject, layer, x); 
#line 1920
} else { 
#line 1921
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1922
__suld_1d_array_i64_clamp((__int64 *)(&tmp), surfObject, layer, x); 
#line 1923
} else { 
#line 1924
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1925
__suld_1d_array_i64_zero((__int64 *)(&tmp), surfObject, layer, x); 
#line 1926
}  }  }  
#line 1927
(*retVal) = make_longlong1(tmp); 
#line 1928
} 
#endif
#line 1930 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(unsigned __int64 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1931
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1943
::exit(___);}
#if 0
#line 1931
{ 
#line 1932
unsigned __int64 tmp; 
#line 1933
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1934
__suld_1d_array_i64_trap((__int64 *)(&tmp), surfObject, layer, x); 
#line 1935
} else { 
#line 1936
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1937
__suld_1d_array_i64_clamp((__int64 *)(&tmp), surfObject, layer, x); 
#line 1938
} else { 
#line 1939
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1940
__suld_1d_array_i64_zero((__int64 *)(&tmp), surfObject, layer, x); 
#line 1941
}  }  }  
#line 1942
(*retVal) = tmp; 
#line 1943
} 
#endif
#line 1945 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1946
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1958
::exit(___);}
#if 0
#line 1946
{ 
#line 1947
unsigned __int64 tmp; 
#line 1948
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1949
__suld_1d_array_i64_trap((__int64 *)(&tmp), surfObject, layer, x); 
#line 1950
} else { 
#line 1951
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1952
__suld_1d_array_i64_clamp((__int64 *)(&tmp), surfObject, layer, x); 
#line 1953
} else { 
#line 1954
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1955
__suld_1d_array_i64_zero((__int64 *)(&tmp), surfObject, layer, x); 
#line 1956
}  }  }  
#line 1957
(*retVal) = make_ulonglong1(tmp); 
#line 1958
} 
#endif
#line 1960 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1961
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1973
::exit(___);}
#if 0
#line 1961
{ 
#line 1962
float tmp; 
#line 1963
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1964
__suld_1d_array_i32_trap((int *)(&tmp), surfObject, layer, x); 
#line 1965
} else { 
#line 1966
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1967
__suld_1d_array_i32_clamp((int *)(&tmp), surfObject, layer, x); 
#line 1968
} else { 
#line 1969
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1970
__suld_1d_array_i32_zero((int *)(&tmp), surfObject, layer, x); 
#line 1971
}  }  }  
#line 1972
(*retVal) = tmp; 
#line 1973
} 
#endif
#line 1975 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1976
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 1988
::exit(___);}
#if 0
#line 1976
{ 
#line 1977
float tmp; 
#line 1978
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 1979
__suld_1d_array_i32_trap((int *)(&tmp), surfObject, layer, x); 
#line 1980
} else { 
#line 1981
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 1982
__suld_1d_array_i32_clamp((int *)(&tmp), surfObject, layer, x); 
#line 1983
} else { 
#line 1984
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 1985
__suld_1d_array_i32_zero((int *)(&tmp), surfObject, layer, x); 
#line 1986
}  }  }  
#line 1987
(*retVal) = make_float1(tmp); 
#line 1988
} 
#endif
#line 1996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 1997
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2009
::exit(___);}
#if 0
#line 1997
{ 
#line 1998
char2 tmp; 
#line 1999
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2000
__suld_1d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x); 
#line 2001
} else { 
#line 2002
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2003
__suld_1d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x); 
#line 2004
} else { 
#line 2005
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2006
__suld_1d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x); 
#line 2007
}  }  }  
#line 2008
(*retVal) = tmp; 
#line 2009
} 
#endif
#line 2011 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2012
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2024
::exit(___);}
#if 0
#line 2012
{ 
#line 2013
uchar2 tmp; 
#line 2014
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2015
__suld_1d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x); 
#line 2016
} else { 
#line 2017
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2018
__suld_1d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x); 
#line 2019
} else { 
#line 2020
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2021
__suld_1d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x); 
#line 2022
}  }  }  
#line 2023
(*retVal) = tmp; 
#line 2024
} 
#endif
#line 2026 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2027
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2039
::exit(___);}
#if 0
#line 2027
{ 
#line 2028
short2 tmp; 
#line 2029
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2030
__suld_1d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x); 
#line 2031
} else { 
#line 2032
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2033
__suld_1d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x); 
#line 2034
} else { 
#line 2035
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2036
__suld_1d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x); 
#line 2037
}  }  }  
#line 2038
(*retVal) = tmp; 
#line 2039
} 
#endif
#line 2041 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2042
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2054
::exit(___);}
#if 0
#line 2042
{ 
#line 2043
ushort2 tmp; 
#line 2044
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2045
__suld_1d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x); 
#line 2046
} else { 
#line 2047
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2048
__suld_1d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x); 
#line 2049
} else { 
#line 2050
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2051
__suld_1d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x); 
#line 2052
}  }  }  
#line 2053
(*retVal) = tmp; 
#line 2054
} 
#endif
#line 2056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2057
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2069
::exit(___);}
#if 0
#line 2057
{ 
#line 2058
int2 tmp; 
#line 2059
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2060
__suld_1d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
#line 2061
} else { 
#line 2062
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2063
__suld_1d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
#line 2064
} else { 
#line 2065
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2066
__suld_1d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
#line 2067
}  }  }  
#line 2068
(*retVal) = tmp; 
#line 2069
} 
#endif
#line 2071 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2072
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2084
::exit(___);}
#if 0
#line 2072
{ 
#line 2073
uint2 tmp; 
#line 2074
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2075
__suld_1d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
#line 2076
} else { 
#line 2077
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2078
__suld_1d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
#line 2079
} else { 
#line 2080
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2081
__suld_1d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
#line 2082
}  }  }  
#line 2083
(*retVal) = tmp; 
#line 2084
} 
#endif
#line 2086 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2087
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2099
::exit(___);}
#if 0
#line 2087
{ 
#line 2088
longlong2 tmp; 
#line 2089
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2090
__suld_1d_array_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layer, x); 
#line 2091
} else { 
#line 2092
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2093
__suld_1d_array_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layer, x); 
#line 2094
} else { 
#line 2095
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2096
__suld_1d_array_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layer, x); 
#line 2097
}  }  }  
#line 2098
(*retVal) = tmp; 
#line 2099
} 
#endif
#line 2101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2102
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2114
::exit(___);}
#if 0
#line 2102
{ 
#line 2103
ulonglong2 tmp; 
#line 2104
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2105
__suld_1d_array_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layer, x); 
#line 2106
} else { 
#line 2107
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2108
__suld_1d_array_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layer, x); 
#line 2109
} else { 
#line 2110
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2111
__suld_1d_array_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layer, x); 
#line 2112
}  }  }  
#line 2113
(*retVal) = tmp; 
#line 2114
} 
#endif
#line 2116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2117
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2129
::exit(___);}
#if 0
#line 2117
{ 
#line 2118
float2 tmp; 
#line 2119
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2120
__suld_1d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
#line 2121
} else { 
#line 2122
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2123
__suld_1d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
#line 2124
} else { 
#line 2125
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2126
__suld_1d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x); 
#line 2127
}  }  }  
#line 2128
(*retVal) = tmp; 
#line 2129
} 
#endif
#line 2137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2138
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2150
::exit(___);}
#if 0
#line 2138
{ 
#line 2139
char4 tmp; 
#line 2140
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2141
__suld_1d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x); 
#line 2142
} else { 
#line 2143
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2144
__suld_1d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x); 
#line 2145
} else { 
#line 2146
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2147
__suld_1d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x); 
#line 2148
}  }  }  
#line 2149
(*retVal) = tmp; 
#line 2150
} 
#endif
#line 2152 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2153
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2165
::exit(___);}
#if 0
#line 2153
{ 
#line 2154
uchar4 tmp; 
#line 2155
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2156
__suld_1d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x); 
#line 2157
} else { 
#line 2158
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2159
__suld_1d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x); 
#line 2160
} else { 
#line 2161
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2162
__suld_1d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x); 
#line 2163
}  }  }  
#line 2164
(*retVal) = tmp; 
#line 2165
} 
#endif
#line 2167 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2168
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2180
::exit(___);}
#if 0
#line 2168
{ 
#line 2169
short4 tmp; 
#line 2170
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2171
__suld_1d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x); 
#line 2172
} else { 
#line 2173
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2174
__suld_1d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x); 
#line 2175
} else { 
#line 2176
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2177
__suld_1d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x); 
#line 2178
}  }  }  
#line 2179
(*retVal) = tmp; 
#line 2180
} 
#endif
#line 2182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2183
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2195
::exit(___);}
#if 0
#line 2183
{ 
#line 2184
ushort4 tmp; 
#line 2185
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2186
__suld_1d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x); 
#line 2187
} else { 
#line 2188
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2189
__suld_1d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x); 
#line 2190
} else { 
#line 2191
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2192
__suld_1d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x); 
#line 2193
}  }  }  
#line 2194
(*retVal) = tmp; 
#line 2195
} 
#endif
#line 2197 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2198
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2210
::exit(___);}
#if 0
#line 2198
{ 
#line 2199
int4 tmp; 
#line 2200
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2201
__suld_1d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
#line 2202
} else { 
#line 2203
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2204
__suld_1d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
#line 2205
} else { 
#line 2206
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2207
__suld_1d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
#line 2208
}  }  }  
#line 2209
(*retVal) = tmp; 
#line 2210
} 
#endif
#line 2212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2213
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2225
::exit(___);}
#if 0
#line 2213
{ 
#line 2214
uint4 tmp; 
#line 2215
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2216
__suld_1d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
#line 2217
} else { 
#line 2218
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2219
__suld_1d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
#line 2220
} else { 
#line 2221
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2222
__suld_1d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
#line 2223
}  }  }  
#line 2224
(*retVal) = tmp; 
#line 2225
} 
#endif
#line 2227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2228
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 2240
::exit(___);}
#if 0
#line 2228
{ 
#line 2229
float4 tmp; 
#line 2230
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2231
__suld_1d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
#line 2232
} else { 
#line 2233
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2234
__suld_1d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
#line 2235
} else { 
#line 2236
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2237
__suld_1d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x); 
#line 2238
}  }  }  
#line 2239
(*retVal) = tmp; 
#line 2240
} 
#endif
#line 2248 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2249
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2261
::exit(___);}
#if 0
#line 2249
{ 
#line 2250
char tmp; 
#line 2251
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2252
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layer, x, y); 
#line 2253
} else { 
#line 2254
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2255
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layer, x, y); 
#line 2256
} else { 
#line 2257
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2258
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layer, x, y); 
#line 2259
}  }  }  
#line 2260
(*retVal) = tmp; 
#line 2261
} 
#endif
#line 2263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2264
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2276
::exit(___);}
#if 0
#line 2264
{ 
#line 2265
signed char tmp; 
#line 2266
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2267
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layer, x, y); 
#line 2268
} else { 
#line 2269
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2270
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layer, x, y); 
#line 2271
} else { 
#line 2272
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2273
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layer, x, y); 
#line 2274
}  }  }  
#line 2275
(*retVal) = tmp; 
#line 2276
} 
#endif
#line 2278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2279
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2291
::exit(___);}
#if 0
#line 2279
{ 
#line 2280
char tmp; 
#line 2281
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2282
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layer, x, y); 
#line 2283
} else { 
#line 2284
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2285
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layer, x, y); 
#line 2286
} else { 
#line 2287
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2288
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layer, x, y); 
#line 2289
}  }  }  
#line 2290
(*retVal) = make_char1(tmp); 
#line 2291
} 
#endif
#line 2293 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2294
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2306
::exit(___);}
#if 0
#line 2294
{ 
#line 2295
unsigned char tmp; 
#line 2296
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2297
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layer, x, y); 
#line 2298
} else { 
#line 2299
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2300
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layer, x, y); 
#line 2301
} else { 
#line 2302
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2303
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layer, x, y); 
#line 2304
}  }  }  
#line 2305
(*retVal) = tmp; 
#line 2306
} 
#endif
#line 2308 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2309
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2321
::exit(___);}
#if 0
#line 2309
{ 
#line 2310
unsigned char tmp; 
#line 2311
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2312
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layer, x, y); 
#line 2313
} else { 
#line 2314
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2315
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layer, x, y); 
#line 2316
} else { 
#line 2317
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2318
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layer, x, y); 
#line 2319
}  }  }  
#line 2320
(*retVal) = make_uchar1(tmp); 
#line 2321
} 
#endif
#line 2323 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2324
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2336
::exit(___);}
#if 0
#line 2324
{ 
#line 2325
short tmp; 
#line 2326
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2327
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layer, x, y); 
#line 2328
} else { 
#line 2329
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2330
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layer, x, y); 
#line 2331
} else { 
#line 2332
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2333
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layer, x, y); 
#line 2334
}  }  }  
#line 2335
(*retVal) = tmp; 
#line 2336
} 
#endif
#line 2338 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2339
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2351
::exit(___);}
#if 0
#line 2339
{ 
#line 2340
short tmp; 
#line 2341
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2342
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layer, x, y); 
#line 2343
} else { 
#line 2344
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2345
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layer, x, y); 
#line 2346
} else { 
#line 2347
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2348
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layer, x, y); 
#line 2349
}  }  }  
#line 2350
(*retVal) = make_short1(tmp); 
#line 2351
} 
#endif
#line 2353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2354
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2366
::exit(___);}
#if 0
#line 2354
{ 
#line 2355
unsigned short tmp; 
#line 2356
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2357
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layer, x, y); 
#line 2358
} else { 
#line 2359
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2360
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layer, x, y); 
#line 2361
} else { 
#line 2362
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2363
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layer, x, y); 
#line 2364
}  }  }  
#line 2365
(*retVal) = tmp; 
#line 2366
} 
#endif
#line 2368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2369
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2381
::exit(___);}
#if 0
#line 2369
{ 
#line 2370
unsigned short tmp; 
#line 2371
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2372
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layer, x, y); 
#line 2373
} else { 
#line 2374
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2375
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layer, x, y); 
#line 2376
} else { 
#line 2377
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2378
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layer, x, y); 
#line 2379
}  }  }  
#line 2380
(*retVal) = make_ushort1(tmp); 
#line 2381
} 
#endif
#line 2383 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2384
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2396
::exit(___);}
#if 0
#line 2384
{ 
#line 2385
int tmp; 
#line 2386
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2387
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layer, x, y); 
#line 2388
} else { 
#line 2389
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2390
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layer, x, y); 
#line 2391
} else { 
#line 2392
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2393
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layer, x, y); 
#line 2394
}  }  }  
#line 2395
(*retVal) = tmp; 
#line 2396
} 
#endif
#line 2398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2399
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2411
::exit(___);}
#if 0
#line 2399
{ 
#line 2400
int tmp; 
#line 2401
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2402
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layer, x, y); 
#line 2403
} else { 
#line 2404
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2405
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layer, x, y); 
#line 2406
} else { 
#line 2407
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2408
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layer, x, y); 
#line 2409
}  }  }  
#line 2410
(*retVal) = make_int1(tmp); 
#line 2411
} 
#endif
#line 2413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2414
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2426
::exit(___);}
#if 0
#line 2414
{ 
#line 2415
unsigned tmp; 
#line 2416
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2417
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layer, x, y); 
#line 2418
} else { 
#line 2419
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2420
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layer, x, y); 
#line 2421
} else { 
#line 2422
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2423
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layer, x, y); 
#line 2424
}  }  }  
#line 2425
(*retVal) = tmp; 
#line 2426
} 
#endif
#line 2428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2429
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2441
::exit(___);}
#if 0
#line 2429
{ 
#line 2430
unsigned tmp; 
#line 2431
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2432
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layer, x, y); 
#line 2433
} else { 
#line 2434
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2435
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layer, x, y); 
#line 2436
} else { 
#line 2437
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2438
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layer, x, y); 
#line 2439
}  }  }  
#line 2440
(*retVal) = make_uint1(tmp); 
#line 2441
} 
#endif
#line 2443 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(__int64 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2444
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2456
::exit(___);}
#if 0
#line 2444
{ 
#line 2445
__int64 tmp; 
#line 2446
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2447
__suld_2d_array_i64_trap((__int64 *)(&tmp), surfObject, layer, x, y); 
#line 2448
} else { 
#line 2449
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2450
__suld_2d_array_i64_clamp((__int64 *)(&tmp), surfObject, layer, x, y); 
#line 2451
} else { 
#line 2452
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2453
__suld_2d_array_i64_zero((__int64 *)(&tmp), surfObject, layer, x, y); 
#line 2454
}  }  }  
#line 2455
(*retVal) = tmp; 
#line 2456
} 
#endif
#line 2458 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2459
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2471
::exit(___);}
#if 0
#line 2459
{ 
#line 2460
__int64 tmp; 
#line 2461
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2462
__suld_2d_array_i64_trap((__int64 *)(&tmp), surfObject, layer, x, y); 
#line 2463
} else { 
#line 2464
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2465
__suld_2d_array_i64_clamp((__int64 *)(&tmp), surfObject, layer, x, y); 
#line 2466
} else { 
#line 2467
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2468
__suld_2d_array_i64_zero((__int64 *)(&tmp), surfObject, layer, x, y); 
#line 2469
}  }  }  
#line 2470
(*retVal) = make_longlong1(tmp); 
#line 2471
} 
#endif
#line 2473 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(unsigned __int64 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2474
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2486
::exit(___);}
#if 0
#line 2474
{ 
#line 2475
unsigned __int64 tmp; 
#line 2476
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2477
__suld_2d_array_i64_trap((__int64 *)(&tmp), surfObject, layer, x, y); 
#line 2478
} else { 
#line 2479
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2480
__suld_2d_array_i64_clamp((__int64 *)(&tmp), surfObject, layer, x, y); 
#line 2481
} else { 
#line 2482
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2483
__suld_2d_array_i64_zero((__int64 *)(&tmp), surfObject, layer, x, y); 
#line 2484
}  }  }  
#line 2485
(*retVal) = tmp; 
#line 2486
} 
#endif
#line 2488 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2489
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2501
::exit(___);}
#if 0
#line 2489
{ 
#line 2490
unsigned __int64 tmp; 
#line 2491
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2492
__suld_2d_array_i64_trap((__int64 *)(&tmp), surfObject, layer, x, y); 
#line 2493
} else { 
#line 2494
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2495
__suld_2d_array_i64_clamp((__int64 *)(&tmp), surfObject, layer, x, y); 
#line 2496
} else { 
#line 2497
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2498
__suld_2d_array_i64_zero((__int64 *)(&tmp), surfObject, layer, x, y); 
#line 2499
}  }  }  
#line 2500
(*retVal) = make_ulonglong1(tmp); 
#line 2501
} 
#endif
#line 2503 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2504
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2516
::exit(___);}
#if 0
#line 2504
{ 
#line 2505
float tmp; 
#line 2506
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2507
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layer, x, y); 
#line 2508
} else { 
#line 2509
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2510
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layer, x, y); 
#line 2511
} else { 
#line 2512
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2513
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layer, x, y); 
#line 2514
}  }  }  
#line 2515
(*retVal) = tmp; 
#line 2516
} 
#endif
#line 2518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2519
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2531
::exit(___);}
#if 0
#line 2519
{ 
#line 2520
float tmp; 
#line 2521
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2522
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layer, x, y); 
#line 2523
} else { 
#line 2524
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2525
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layer, x, y); 
#line 2526
} else { 
#line 2527
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2528
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layer, x, y); 
#line 2529
}  }  }  
#line 2530
(*retVal) = make_float1(tmp); 
#line 2531
} 
#endif
#line 2539 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2540
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2552
::exit(___);}
#if 0
#line 2540
{ 
#line 2541
char2 tmp; 
#line 2542
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2543
__suld_2d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2544
} else { 
#line 2545
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2546
__suld_2d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2547
} else { 
#line 2548
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2549
__suld_2d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2550
}  }  }  
#line 2551
(*retVal) = tmp; 
#line 2552
} 
#endif
#line 2554 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2555
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2567
::exit(___);}
#if 0
#line 2555
{ 
#line 2556
uchar2 tmp; 
#line 2557
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2558
__suld_2d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2559
} else { 
#line 2560
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2561
__suld_2d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2562
} else { 
#line 2563
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2564
__suld_2d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2565
}  }  }  
#line 2566
(*retVal) = tmp; 
#line 2567
} 
#endif
#line 2569 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2570
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2582
::exit(___);}
#if 0
#line 2570
{ 
#line 2571
short2 tmp; 
#line 2572
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2573
__suld_2d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2574
} else { 
#line 2575
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2576
__suld_2d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2577
} else { 
#line 2578
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2579
__suld_2d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2580
}  }  }  
#line 2581
(*retVal) = tmp; 
#line 2582
} 
#endif
#line 2584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2585
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2597
::exit(___);}
#if 0
#line 2585
{ 
#line 2586
ushort2 tmp; 
#line 2587
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2588
__suld_2d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2589
} else { 
#line 2590
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2591
__suld_2d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2592
} else { 
#line 2593
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2594
__suld_2d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2595
}  }  }  
#line 2596
(*retVal) = tmp; 
#line 2597
} 
#endif
#line 2599 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2600
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2612
::exit(___);}
#if 0
#line 2600
{ 
#line 2601
int2 tmp; 
#line 2602
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2603
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2604
} else { 
#line 2605
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2606
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2607
} else { 
#line 2608
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2609
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2610
}  }  }  
#line 2611
(*retVal) = tmp; 
#line 2612
} 
#endif
#line 2614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2615
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2627
::exit(___);}
#if 0
#line 2615
{ 
#line 2616
uint2 tmp; 
#line 2617
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2618
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2619
} else { 
#line 2620
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2621
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2622
} else { 
#line 2623
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2624
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2625
}  }  }  
#line 2626
(*retVal) = tmp; 
#line 2627
} 
#endif
#line 2629 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2630
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2642
::exit(___);}
#if 0
#line 2630
{ 
#line 2631
longlong2 tmp; 
#line 2632
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2633
__suld_2d_array_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2634
} else { 
#line 2635
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2636
__suld_2d_array_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2637
} else { 
#line 2638
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2639
__suld_2d_array_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2640
}  }  }  
#line 2641
(*retVal) = tmp; 
#line 2642
} 
#endif
#line 2644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2645
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2657
::exit(___);}
#if 0
#line 2645
{ 
#line 2646
ulonglong2 tmp; 
#line 2647
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2648
__suld_2d_array_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2649
} else { 
#line 2650
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2651
__suld_2d_array_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2652
} else { 
#line 2653
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2654
__suld_2d_array_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2655
}  }  }  
#line 2656
(*retVal) = tmp; 
#line 2657
} 
#endif
#line 2659 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2660
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2672
::exit(___);}
#if 0
#line 2660
{ 
#line 2661
float2 tmp; 
#line 2662
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2663
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2664
} else { 
#line 2665
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2666
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2667
} else { 
#line 2668
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2669
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layer, x, y); 
#line 2670
}  }  }  
#line 2671
(*retVal) = tmp; 
#line 2672
} 
#endif
#line 2680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2681
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2693
::exit(___);}
#if 0
#line 2681
{ 
#line 2682
char4 tmp; 
#line 2683
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2684
__suld_2d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2685
} else { 
#line 2686
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2687
__suld_2d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2688
} else { 
#line 2689
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2690
__suld_2d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2691
}  }  }  
#line 2692
(*retVal) = tmp; 
#line 2693
} 
#endif
#line 2695 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2696
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2708
::exit(___);}
#if 0
#line 2696
{ 
#line 2697
uchar4 tmp; 
#line 2698
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2699
__suld_2d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2700
} else { 
#line 2701
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2702
__suld_2d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2703
} else { 
#line 2704
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2705
__suld_2d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2706
}  }  }  
#line 2707
(*retVal) = tmp; 
#line 2708
} 
#endif
#line 2710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2711
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2723
::exit(___);}
#if 0
#line 2711
{ 
#line 2712
short4 tmp; 
#line 2713
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2714
__suld_2d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2715
} else { 
#line 2716
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2717
__suld_2d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2718
} else { 
#line 2719
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2720
__suld_2d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2721
}  }  }  
#line 2722
(*retVal) = tmp; 
#line 2723
} 
#endif
#line 2725 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2726
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2738
::exit(___);}
#if 0
#line 2726
{ 
#line 2727
ushort4 tmp; 
#line 2728
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2729
__suld_2d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2730
} else { 
#line 2731
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2732
__suld_2d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2733
} else { 
#line 2734
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2735
__suld_2d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2736
}  }  }  
#line 2737
(*retVal) = tmp; 
#line 2738
} 
#endif
#line 2740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2741
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2753
::exit(___);}
#if 0
#line 2741
{ 
#line 2742
int4 tmp; 
#line 2743
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2744
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2745
} else { 
#line 2746
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2747
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2748
} else { 
#line 2749
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2750
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2751
}  }  }  
#line 2752
(*retVal) = tmp; 
#line 2753
} 
#endif
#line 2755 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2756
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2768
::exit(___);}
#if 0
#line 2756
{ 
#line 2757
uint4 tmp; 
#line 2758
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2759
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2760
} else { 
#line 2761
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2762
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2763
} else { 
#line 2764
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2765
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2766
}  }  }  
#line 2767
(*retVal) = tmp; 
#line 2768
} 
#endif
#line 2770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 2771
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 2783
::exit(___);}
#if 0
#line 2771
{ 
#line 2772
float4 tmp; 
#line 2773
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2774
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2775
} else { 
#line 2776
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2777
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2778
} else { 
#line 2779
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2780
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layer, x, y); 
#line 2781
}  }  }  
#line 2782
(*retVal) = tmp; 
#line 2783
} 
#endif
#line 2791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2792
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2804
::exit(___);}
#if 0
#line 2792
{ 
#line 2793
char tmp; 
#line 2794
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2795
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, face, x, y); 
#line 2796
} else { 
#line 2797
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2798
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, face, x, y); 
#line 2799
} else { 
#line 2800
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2801
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, face, x, y); 
#line 2802
}  }  }  
#line 2803
(*retVal) = tmp; 
#line 2804
} 
#endif
#line 2806 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2807
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2819
::exit(___);}
#if 0
#line 2807
{ 
#line 2808
signed char tmp; 
#line 2809
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2810
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, face, x, y); 
#line 2811
} else { 
#line 2812
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2813
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, face, x, y); 
#line 2814
} else { 
#line 2815
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2816
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, face, x, y); 
#line 2817
}  }  }  
#line 2818
(*retVal) = tmp; 
#line 2819
} 
#endif
#line 2821 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2822
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2834
::exit(___);}
#if 0
#line 2822
{ 
#line 2823
char tmp; 
#line 2824
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2825
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, face, x, y); 
#line 2826
} else { 
#line 2827
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2828
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, face, x, y); 
#line 2829
} else { 
#line 2830
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2831
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, face, x, y); 
#line 2832
}  }  }  
#line 2833
(*retVal) = make_char1(tmp); 
#line 2834
} 
#endif
#line 2836 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2837
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2849
::exit(___);}
#if 0
#line 2837
{ 
#line 2838
unsigned char tmp; 
#line 2839
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2840
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, face, x, y); 
#line 2841
} else { 
#line 2842
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2843
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, face, x, y); 
#line 2844
} else { 
#line 2845
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2846
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, face, x, y); 
#line 2847
}  }  }  
#line 2848
(*retVal) = tmp; 
#line 2849
} 
#endif
#line 2851 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2852
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2864
::exit(___);}
#if 0
#line 2852
{ 
#line 2853
unsigned char tmp; 
#line 2854
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2855
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, face, x, y); 
#line 2856
} else { 
#line 2857
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2858
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, face, x, y); 
#line 2859
} else { 
#line 2860
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2861
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, face, x, y); 
#line 2862
}  }  }  
#line 2863
(*retVal) = make_uchar1(tmp); 
#line 2864
} 
#endif
#line 2866 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2867
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2879
::exit(___);}
#if 0
#line 2867
{ 
#line 2868
short tmp; 
#line 2869
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2870
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, face, x, y); 
#line 2871
} else { 
#line 2872
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2873
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, face, x, y); 
#line 2874
} else { 
#line 2875
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2876
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, face, x, y); 
#line 2877
}  }  }  
#line 2878
(*retVal) = tmp; 
#line 2879
} 
#endif
#line 2881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2882
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2894
::exit(___);}
#if 0
#line 2882
{ 
#line 2883
short tmp; 
#line 2884
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2885
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, face, x, y); 
#line 2886
} else { 
#line 2887
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2888
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, face, x, y); 
#line 2889
} else { 
#line 2890
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2891
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, face, x, y); 
#line 2892
}  }  }  
#line 2893
(*retVal) = make_short1(tmp); 
#line 2894
} 
#endif
#line 2896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2897
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2909
::exit(___);}
#if 0
#line 2897
{ 
#line 2898
unsigned short tmp; 
#line 2899
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2900
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, face, x, y); 
#line 2901
} else { 
#line 2902
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2903
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, face, x, y); 
#line 2904
} else { 
#line 2905
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2906
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, face, x, y); 
#line 2907
}  }  }  
#line 2908
(*retVal) = tmp; 
#line 2909
} 
#endif
#line 2911 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2912
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2924
::exit(___);}
#if 0
#line 2912
{ 
#line 2913
unsigned short tmp; 
#line 2914
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2915
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, face, x, y); 
#line 2916
} else { 
#line 2917
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2918
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, face, x, y); 
#line 2919
} else { 
#line 2920
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2921
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, face, x, y); 
#line 2922
}  }  }  
#line 2923
(*retVal) = make_ushort1(tmp); 
#line 2924
} 
#endif
#line 2926 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2927
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2939
::exit(___);}
#if 0
#line 2927
{ 
#line 2928
int tmp; 
#line 2929
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2930
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, face, x, y); 
#line 2931
} else { 
#line 2932
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2933
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, face, x, y); 
#line 2934
} else { 
#line 2935
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2936
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, face, x, y); 
#line 2937
}  }  }  
#line 2938
(*retVal) = tmp; 
#line 2939
} 
#endif
#line 2941 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2942
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2954
::exit(___);}
#if 0
#line 2942
{ 
#line 2943
int tmp; 
#line 2944
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2945
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, face, x, y); 
#line 2946
} else { 
#line 2947
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2948
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, face, x, y); 
#line 2949
} else { 
#line 2950
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2951
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, face, x, y); 
#line 2952
}  }  }  
#line 2953
(*retVal) = make_int1(tmp); 
#line 2954
} 
#endif
#line 2956 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2957
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2969
::exit(___);}
#if 0
#line 2957
{ 
#line 2958
unsigned tmp; 
#line 2959
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2960
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, face, x, y); 
#line 2961
} else { 
#line 2962
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2963
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, face, x, y); 
#line 2964
} else { 
#line 2965
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2966
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, face, x, y); 
#line 2967
}  }  }  
#line 2968
(*retVal) = tmp; 
#line 2969
} 
#endif
#line 2971 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2972
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2984
::exit(___);}
#if 0
#line 2972
{ 
#line 2973
unsigned tmp; 
#line 2974
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2975
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, face, x, y); 
#line 2976
} else { 
#line 2977
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2978
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, face, x, y); 
#line 2979
} else { 
#line 2980
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2981
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, face, x, y); 
#line 2982
}  }  }  
#line 2983
(*retVal) = make_uint1(tmp); 
#line 2984
} 
#endif
#line 2986 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(__int64 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 2987
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 2999
::exit(___);}
#if 0
#line 2987
{ 
#line 2988
__int64 tmp; 
#line 2989
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 2990
__suld_2d_array_i64_trap((__int64 *)(&tmp), surfObject, face, x, y); 
#line 2991
} else { 
#line 2992
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 2993
__suld_2d_array_i64_clamp((__int64 *)(&tmp), surfObject, face, x, y); 
#line 2994
} else { 
#line 2995
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 2996
__suld_2d_array_i64_zero((__int64 *)(&tmp), surfObject, face, x, y); 
#line 2997
}  }  }  
#line 2998
(*retVal) = tmp; 
#line 2999
} 
#endif
#line 3001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3002
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3014
::exit(___);}
#if 0
#line 3002
{ 
#line 3003
__int64 tmp; 
#line 3004
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3005
__suld_2d_array_i64_trap((__int64 *)(&tmp), surfObject, face, x, y); 
#line 3006
} else { 
#line 3007
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3008
__suld_2d_array_i64_clamp((__int64 *)(&tmp), surfObject, face, x, y); 
#line 3009
} else { 
#line 3010
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3011
__suld_2d_array_i64_zero((__int64 *)(&tmp), surfObject, face, x, y); 
#line 3012
}  }  }  
#line 3013
(*retVal) = make_longlong1(tmp); 
#line 3014
} 
#endif
#line 3016 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(unsigned __int64 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3017
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3029
::exit(___);}
#if 0
#line 3017
{ 
#line 3018
unsigned __int64 tmp; 
#line 3019
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3020
__suld_2d_array_i64_trap((__int64 *)(&tmp), surfObject, face, x, y); 
#line 3021
} else { 
#line 3022
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3023
__suld_2d_array_i64_clamp((__int64 *)(&tmp), surfObject, face, x, y); 
#line 3024
} else { 
#line 3025
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3026
__suld_2d_array_i64_zero((__int64 *)(&tmp), surfObject, face, x, y); 
#line 3027
}  }  }  
#line 3028
(*retVal) = tmp; 
#line 3029
} 
#endif
#line 3031 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3032
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3044
::exit(___);}
#if 0
#line 3032
{ 
#line 3033
unsigned __int64 tmp; 
#line 3034
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3035
__suld_2d_array_i64_trap((__int64 *)(&tmp), surfObject, face, x, y); 
#line 3036
} else { 
#line 3037
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3038
__suld_2d_array_i64_clamp((__int64 *)(&tmp), surfObject, face, x, y); 
#line 3039
} else { 
#line 3040
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3041
__suld_2d_array_i64_zero((__int64 *)(&tmp), surfObject, face, x, y); 
#line 3042
}  }  }  
#line 3043
(*retVal) = make_ulonglong1(tmp); 
#line 3044
} 
#endif
#line 3046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3047
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3059
::exit(___);}
#if 0
#line 3047
{ 
#line 3048
float tmp; 
#line 3049
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3050
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, face, x, y); 
#line 3051
} else { 
#line 3052
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3053
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, face, x, y); 
#line 3054
} else { 
#line 3055
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3056
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, face, x, y); 
#line 3057
}  }  }  
#line 3058
(*retVal) = tmp; 
#line 3059
} 
#endif
#line 3061 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3062
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3074
::exit(___);}
#if 0
#line 3062
{ 
#line 3063
float tmp; 
#line 3064
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3065
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, face, x, y); 
#line 3066
} else { 
#line 3067
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3068
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, face, x, y); 
#line 3069
} else { 
#line 3070
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3071
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, face, x, y); 
#line 3072
}  }  }  
#line 3073
(*retVal) = make_float1(tmp); 
#line 3074
} 
#endif
#line 3082 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3083
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3095
::exit(___);}
#if 0
#line 3083
{ 
#line 3084
char2 tmp; 
#line 3085
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3086
__suld_2d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, face, x, y); 
#line 3087
} else { 
#line 3088
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3089
__suld_2d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, face, x, y); 
#line 3090
} else { 
#line 3091
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3092
__suld_2d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, face, x, y); 
#line 3093
}  }  }  
#line 3094
(*retVal) = tmp; 
#line 3095
} 
#endif
#line 3097 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3098
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3110
::exit(___);}
#if 0
#line 3098
{ 
#line 3099
uchar2 tmp; 
#line 3100
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3101
__suld_2d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, face, x, y); 
#line 3102
} else { 
#line 3103
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3104
__suld_2d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, face, x, y); 
#line 3105
} else { 
#line 3106
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3107
__suld_2d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, face, x, y); 
#line 3108
}  }  }  
#line 3109
(*retVal) = tmp; 
#line 3110
} 
#endif
#line 3112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3113
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3125
::exit(___);}
#if 0
#line 3113
{ 
#line 3114
short2 tmp; 
#line 3115
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3116
__suld_2d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, face, x, y); 
#line 3117
} else { 
#line 3118
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3119
__suld_2d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, face, x, y); 
#line 3120
} else { 
#line 3121
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3122
__suld_2d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, face, x, y); 
#line 3123
}  }  }  
#line 3124
(*retVal) = tmp; 
#line 3125
} 
#endif
#line 3127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3128
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3140
::exit(___);}
#if 0
#line 3128
{ 
#line 3129
ushort2 tmp; 
#line 3130
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3131
__suld_2d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, face, x, y); 
#line 3132
} else { 
#line 3133
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3134
__suld_2d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, face, x, y); 
#line 3135
} else { 
#line 3136
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3137
__suld_2d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, face, x, y); 
#line 3138
}  }  }  
#line 3139
(*retVal) = tmp; 
#line 3140
} 
#endif
#line 3142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3143
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3155
::exit(___);}
#if 0
#line 3143
{ 
#line 3144
int2 tmp; 
#line 3145
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3146
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
#line 3147
} else { 
#line 3148
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3149
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
#line 3150
} else { 
#line 3151
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3152
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
#line 3153
}  }  }  
#line 3154
(*retVal) = tmp; 
#line 3155
} 
#endif
#line 3157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3158
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3170
::exit(___);}
#if 0
#line 3158
{ 
#line 3159
uint2 tmp; 
#line 3160
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3161
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
#line 3162
} else { 
#line 3163
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3164
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
#line 3165
} else { 
#line 3166
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3167
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
#line 3168
}  }  }  
#line 3169
(*retVal) = tmp; 
#line 3170
} 
#endif
#line 3172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3173
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3185
::exit(___);}
#if 0
#line 3173
{ 
#line 3174
longlong2 tmp; 
#line 3175
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3176
__suld_2d_array_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, face, x, y); 
#line 3177
} else { 
#line 3178
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3179
__suld_2d_array_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, face, x, y); 
#line 3180
} else { 
#line 3181
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3182
__suld_2d_array_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, face, x, y); 
#line 3183
}  }  }  
#line 3184
(*retVal) = tmp; 
#line 3185
} 
#endif
#line 3187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3188
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3200
::exit(___);}
#if 0
#line 3188
{ 
#line 3189
ulonglong2 tmp; 
#line 3190
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3191
__suld_2d_array_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, face, x, y); 
#line 3192
} else { 
#line 3193
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3194
__suld_2d_array_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, face, x, y); 
#line 3195
} else { 
#line 3196
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3197
__suld_2d_array_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, face, x, y); 
#line 3198
}  }  }  
#line 3199
(*retVal) = tmp; 
#line 3200
} 
#endif
#line 3202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3203
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3215
::exit(___);}
#if 0
#line 3203
{ 
#line 3204
float2 tmp; 
#line 3205
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3206
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
#line 3207
} else { 
#line 3208
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3209
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
#line 3210
} else { 
#line 3211
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3212
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, face, x, y); 
#line 3213
}  }  }  
#line 3214
(*retVal) = tmp; 
#line 3215
} 
#endif
#line 3223 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3224
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3236
::exit(___);}
#if 0
#line 3224
{ 
#line 3225
char4 tmp; 
#line 3226
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3227
__suld_2d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, face, x, y); 
#line 3228
} else { 
#line 3229
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3230
__suld_2d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, face, x, y); 
#line 3231
} else { 
#line 3232
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3233
__suld_2d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, face, x, y); 
#line 3234
}  }  }  
#line 3235
(*retVal) = tmp; 
#line 3236
} 
#endif
#line 3238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3239
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3251
::exit(___);}
#if 0
#line 3239
{ 
#line 3240
uchar4 tmp; 
#line 3241
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3242
__suld_2d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, face, x, y); 
#line 3243
} else { 
#line 3244
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3245
__suld_2d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, face, x, y); 
#line 3246
} else { 
#line 3247
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3248
__suld_2d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, face, x, y); 
#line 3249
}  }  }  
#line 3250
(*retVal) = tmp; 
#line 3251
} 
#endif
#line 3253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3254
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3266
::exit(___);}
#if 0
#line 3254
{ 
#line 3255
short4 tmp; 
#line 3256
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3257
__suld_2d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, face, x, y); 
#line 3258
} else { 
#line 3259
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3260
__suld_2d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, face, x, y); 
#line 3261
} else { 
#line 3262
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3263
__suld_2d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, face, x, y); 
#line 3264
}  }  }  
#line 3265
(*retVal) = tmp; 
#line 3266
} 
#endif
#line 3268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3269
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3281
::exit(___);}
#if 0
#line 3269
{ 
#line 3270
ushort4 tmp; 
#line 3271
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3272
__suld_2d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, face, x, y); 
#line 3273
} else { 
#line 3274
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3275
__suld_2d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, face, x, y); 
#line 3276
} else { 
#line 3277
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3278
__suld_2d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, face, x, y); 
#line 3279
}  }  }  
#line 3280
(*retVal) = tmp; 
#line 3281
} 
#endif
#line 3283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3284
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3296
::exit(___);}
#if 0
#line 3284
{ 
#line 3285
int4 tmp; 
#line 3286
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3287
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
#line 3288
} else { 
#line 3289
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3290
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
#line 3291
} else { 
#line 3292
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3293
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
#line 3294
}  }  }  
#line 3295
(*retVal) = tmp; 
#line 3296
} 
#endif
#line 3298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3299
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3311
::exit(___);}
#if 0
#line 3299
{ 
#line 3300
uint4 tmp; 
#line 3301
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3302
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
#line 3303
} else { 
#line 3304
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3305
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
#line 3306
} else { 
#line 3307
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3308
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
#line 3309
}  }  }  
#line 3310
(*retVal) = tmp; 
#line 3311
} 
#endif
#line 3313 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 3314
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 3326
::exit(___);}
#if 0
#line 3314
{ 
#line 3315
float4 tmp; 
#line 3316
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3317
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
#line 3318
} else { 
#line 3319
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3320
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
#line 3321
} else { 
#line 3322
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3323
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, face, x, y); 
#line 3324
}  }  }  
#line 3325
(*retVal) = tmp; 
#line 3326
} 
#endif
#line 3334 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3335
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3347
::exit(___);}
#if 0
#line 3335
{ 
#line 3336
char tmp; 
#line 3337
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3338
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layerface, x, y); 
#line 3339
} else { 
#line 3340
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3341
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layerface, x, y); 
#line 3342
} else { 
#line 3343
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3344
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layerface, x, y); 
#line 3345
}  }  }  
#line 3346
(*retVal) = tmp; 
#line 3347
} 
#endif
#line 3349 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3350
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3362
::exit(___);}
#if 0
#line 3350
{ 
#line 3351
signed char tmp; 
#line 3352
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3353
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layerface, x, y); 
#line 3354
} else { 
#line 3355
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3356
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layerface, x, y); 
#line 3357
} else { 
#line 3358
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3359
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layerface, x, y); 
#line 3360
}  }  }  
#line 3361
(*retVal) = tmp; 
#line 3362
} 
#endif
#line 3364 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3365
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3377
::exit(___);}
#if 0
#line 3365
{ 
#line 3366
char tmp; 
#line 3367
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3368
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layerface, x, y); 
#line 3369
} else { 
#line 3370
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3371
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layerface, x, y); 
#line 3372
} else { 
#line 3373
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3374
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layerface, x, y); 
#line 3375
}  }  }  
#line 3376
(*retVal) = make_char1(tmp); 
#line 3377
} 
#endif
#line 3379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3380
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3392
::exit(___);}
#if 0
#line 3380
{ 
#line 3381
unsigned char tmp; 
#line 3382
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3383
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layerface, x, y); 
#line 3384
} else { 
#line 3385
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3386
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layerface, x, y); 
#line 3387
} else { 
#line 3388
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3389
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layerface, x, y); 
#line 3390
}  }  }  
#line 3391
(*retVal) = tmp; 
#line 3392
} 
#endif
#line 3394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3395
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3407
::exit(___);}
#if 0
#line 3395
{ 
#line 3396
unsigned char tmp; 
#line 3397
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3398
__suld_2d_array_i8_trap((char *)(&tmp), surfObject, layerface, x, y); 
#line 3399
} else { 
#line 3400
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3401
__suld_2d_array_i8_clamp((char *)(&tmp), surfObject, layerface, x, y); 
#line 3402
} else { 
#line 3403
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3404
__suld_2d_array_i8_zero((char *)(&tmp), surfObject, layerface, x, y); 
#line 3405
}  }  }  
#line 3406
(*retVal) = make_uchar1(tmp); 
#line 3407
} 
#endif
#line 3409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3410
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3422
::exit(___);}
#if 0
#line 3410
{ 
#line 3411
short tmp; 
#line 3412
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3413
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layerface, x, y); 
#line 3414
} else { 
#line 3415
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3416
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layerface, x, y); 
#line 3417
} else { 
#line 3418
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3419
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layerface, x, y); 
#line 3420
}  }  }  
#line 3421
(*retVal) = tmp; 
#line 3422
} 
#endif
#line 3424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3425
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3437
::exit(___);}
#if 0
#line 3425
{ 
#line 3426
short tmp; 
#line 3427
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3428
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layerface, x, y); 
#line 3429
} else { 
#line 3430
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3431
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layerface, x, y); 
#line 3432
} else { 
#line 3433
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3434
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layerface, x, y); 
#line 3435
}  }  }  
#line 3436
(*retVal) = make_short1(tmp); 
#line 3437
} 
#endif
#line 3439 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3440
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3452
::exit(___);}
#if 0
#line 3440
{ 
#line 3441
unsigned short tmp; 
#line 3442
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3443
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layerface, x, y); 
#line 3444
} else { 
#line 3445
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3446
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layerface, x, y); 
#line 3447
} else { 
#line 3448
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3449
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layerface, x, y); 
#line 3450
}  }  }  
#line 3451
(*retVal) = tmp; 
#line 3452
} 
#endif
#line 3454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3455
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3467
::exit(___);}
#if 0
#line 3455
{ 
#line 3456
unsigned short tmp; 
#line 3457
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3458
__suld_2d_array_i16_trap((short *)(&tmp), surfObject, layerface, x, y); 
#line 3459
} else { 
#line 3460
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3461
__suld_2d_array_i16_clamp((short *)(&tmp), surfObject, layerface, x, y); 
#line 3462
} else { 
#line 3463
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3464
__suld_2d_array_i16_zero((short *)(&tmp), surfObject, layerface, x, y); 
#line 3465
}  }  }  
#line 3466
(*retVal) = make_ushort1(tmp); 
#line 3467
} 
#endif
#line 3469 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3470
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3482
::exit(___);}
#if 0
#line 3470
{ 
#line 3471
int tmp; 
#line 3472
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3473
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layerface, x, y); 
#line 3474
} else { 
#line 3475
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3476
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layerface, x, y); 
#line 3477
} else { 
#line 3478
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3479
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layerface, x, y); 
#line 3480
}  }  }  
#line 3481
(*retVal) = tmp; 
#line 3482
} 
#endif
#line 3484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3485
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3497
::exit(___);}
#if 0
#line 3485
{ 
#line 3486
int tmp; 
#line 3487
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3488
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layerface, x, y); 
#line 3489
} else { 
#line 3490
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3491
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layerface, x, y); 
#line 3492
} else { 
#line 3493
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3494
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layerface, x, y); 
#line 3495
}  }  }  
#line 3496
(*retVal) = make_int1(tmp); 
#line 3497
} 
#endif
#line 3499 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(unsigned *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3500
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3512
::exit(___);}
#if 0
#line 3500
{ 
#line 3501
unsigned tmp; 
#line 3502
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3503
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layerface, x, y); 
#line 3504
} else { 
#line 3505
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3506
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layerface, x, y); 
#line 3507
} else { 
#line 3508
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3509
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layerface, x, y); 
#line 3510
}  }  }  
#line 3511
(*retVal) = tmp; 
#line 3512
} 
#endif
#line 3514 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3515
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3527
::exit(___);}
#if 0
#line 3515
{ 
#line 3516
unsigned tmp; 
#line 3517
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3518
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layerface, x, y); 
#line 3519
} else { 
#line 3520
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3521
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layerface, x, y); 
#line 3522
} else { 
#line 3523
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3524
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layerface, x, y); 
#line 3525
}  }  }  
#line 3526
(*retVal) = make_uint1(tmp); 
#line 3527
} 
#endif
#line 3529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(__int64 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3530
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3542
::exit(___);}
#if 0
#line 3530
{ 
#line 3531
__int64 tmp; 
#line 3532
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3533
__suld_2d_array_i64_trap((__int64 *)(&tmp), surfObject, layerface, x, y); 
#line 3534
} else { 
#line 3535
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3536
__suld_2d_array_i64_clamp((__int64 *)(&tmp), surfObject, layerface, x, y); 
#line 3537
} else { 
#line 3538
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3539
__suld_2d_array_i64_zero((__int64 *)(&tmp), surfObject, layerface, x, y); 
#line 3540
}  }  }  
#line 3541
(*retVal) = tmp; 
#line 3542
} 
#endif
#line 3544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3545
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3557
::exit(___);}
#if 0
#line 3545
{ 
#line 3546
__int64 tmp; 
#line 3547
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3548
__suld_2d_array_i64_trap((__int64 *)(&tmp), surfObject, layerface, x, y); 
#line 3549
} else { 
#line 3550
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3551
__suld_2d_array_i64_clamp((__int64 *)(&tmp), surfObject, layerface, x, y); 
#line 3552
} else { 
#line 3553
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3554
__suld_2d_array_i64_zero((__int64 *)(&tmp), surfObject, layerface, x, y); 
#line 3555
}  }  }  
#line 3556
(*retVal) = make_longlong1(tmp); 
#line 3557
} 
#endif
#line 3559 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(unsigned __int64 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3560
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3572
::exit(___);}
#if 0
#line 3560
{ 
#line 3561
unsigned __int64 tmp; 
#line 3562
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3563
__suld_2d_array_i64_trap((__int64 *)(&tmp), surfObject, layerface, x, y); 
#line 3564
} else { 
#line 3565
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3566
__suld_2d_array_i64_clamp((__int64 *)(&tmp), surfObject, layerface, x, y); 
#line 3567
} else { 
#line 3568
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3569
__suld_2d_array_i64_zero((__int64 *)(&tmp), surfObject, layerface, x, y); 
#line 3570
}  }  }  
#line 3571
(*retVal) = tmp; 
#line 3572
} 
#endif
#line 3574 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3575
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3587
::exit(___);}
#if 0
#line 3575
{ 
#line 3576
unsigned __int64 tmp; 
#line 3577
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3578
__suld_2d_array_i64_trap((__int64 *)(&tmp), surfObject, layerface, x, y); 
#line 3579
} else { 
#line 3580
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3581
__suld_2d_array_i64_clamp((__int64 *)(&tmp), surfObject, layerface, x, y); 
#line 3582
} else { 
#line 3583
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3584
__suld_2d_array_i64_zero((__int64 *)(&tmp), surfObject, layerface, x, y); 
#line 3585
}  }  }  
#line 3586
(*retVal) = make_ulonglong1(tmp); 
#line 3587
} 
#endif
#line 3589 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3590
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3602
::exit(___);}
#if 0
#line 3590
{ 
#line 3591
float tmp; 
#line 3592
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3593
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layerface, x, y); 
#line 3594
} else { 
#line 3595
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3596
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layerface, x, y); 
#line 3597
} else { 
#line 3598
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3599
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layerface, x, y); 
#line 3600
}  }  }  
#line 3601
(*retVal) = tmp; 
#line 3602
} 
#endif
#line 3604 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3605
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3617
::exit(___);}
#if 0
#line 3605
{ 
#line 3606
float tmp; 
#line 3607
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3608
__suld_2d_array_i32_trap((int *)(&tmp), surfObject, layerface, x, y); 
#line 3609
} else { 
#line 3610
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3611
__suld_2d_array_i32_clamp((int *)(&tmp), surfObject, layerface, x, y); 
#line 3612
} else { 
#line 3613
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3614
__suld_2d_array_i32_zero((int *)(&tmp), surfObject, layerface, x, y); 
#line 3615
}  }  }  
#line 3616
(*retVal) = make_float1(tmp); 
#line 3617
} 
#endif
#line 3625 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3626
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3638
::exit(___);}
#if 0
#line 3626
{ 
#line 3627
char2 tmp; 
#line 3628
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3629
__suld_2d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3630
} else { 
#line 3631
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3632
__suld_2d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3633
} else { 
#line 3634
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3635
__suld_2d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3636
}  }  }  
#line 3637
(*retVal) = tmp; 
#line 3638
} 
#endif
#line 3640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3641
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3653
::exit(___);}
#if 0
#line 3641
{ 
#line 3642
uchar2 tmp; 
#line 3643
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3644
__suld_2d_array_v2i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3645
} else { 
#line 3646
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3647
__suld_2d_array_v2i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3648
} else { 
#line 3649
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3650
__suld_2d_array_v2i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3651
}  }  }  
#line 3652
(*retVal) = tmp; 
#line 3653
} 
#endif
#line 3655 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3656
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3668
::exit(___);}
#if 0
#line 3656
{ 
#line 3657
short2 tmp; 
#line 3658
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3659
__suld_2d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3660
} else { 
#line 3661
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3662
__suld_2d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3663
} else { 
#line 3664
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3665
__suld_2d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3666
}  }  }  
#line 3667
(*retVal) = tmp; 
#line 3668
} 
#endif
#line 3670 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3671
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3683
::exit(___);}
#if 0
#line 3671
{ 
#line 3672
ushort2 tmp; 
#line 3673
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3674
__suld_2d_array_v2i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3675
} else { 
#line 3676
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3677
__suld_2d_array_v2i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3678
} else { 
#line 3679
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3680
__suld_2d_array_v2i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3681
}  }  }  
#line 3682
(*retVal) = tmp; 
#line 3683
} 
#endif
#line 3685 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3686
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3698
::exit(___);}
#if 0
#line 3686
{ 
#line 3687
int2 tmp; 
#line 3688
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3689
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3690
} else { 
#line 3691
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3692
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3693
} else { 
#line 3694
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3695
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3696
}  }  }  
#line 3697
(*retVal) = tmp; 
#line 3698
} 
#endif
#line 3700 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3701
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3713
::exit(___);}
#if 0
#line 3701
{ 
#line 3702
uint2 tmp; 
#line 3703
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3704
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3705
} else { 
#line 3706
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3707
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3708
} else { 
#line 3709
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3710
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3711
}  }  }  
#line 3712
(*retVal) = tmp; 
#line 3713
} 
#endif
#line 3715 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3716
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3728
::exit(___);}
#if 0
#line 3716
{ 
#line 3717
longlong2 tmp; 
#line 3718
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3719
__suld_2d_array_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3720
} else { 
#line 3721
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3722
__suld_2d_array_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3723
} else { 
#line 3724
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3725
__suld_2d_array_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3726
}  }  }  
#line 3727
(*retVal) = tmp; 
#line 3728
} 
#endif
#line 3730 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3731
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3743
::exit(___);}
#if 0
#line 3731
{ 
#line 3732
ulonglong2 tmp; 
#line 3733
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3734
__suld_2d_array_v2i64_trap((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3735
} else { 
#line 3736
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3737
__suld_2d_array_v2i64_clamp((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3738
} else { 
#line 3739
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3740
__suld_2d_array_v2i64_zero((__int64 *)(&(tmp.x)), (__int64 *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3741
}  }  }  
#line 3742
(*retVal) = tmp; 
#line 3743
} 
#endif
#line 3745 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3746
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3758
::exit(___);}
#if 0
#line 3746
{ 
#line 3747
float2 tmp; 
#line 3748
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3749
__suld_2d_array_v2i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3750
} else { 
#line 3751
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3752
__suld_2d_array_v2i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3753
} else { 
#line 3754
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3755
__suld_2d_array_v2i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), surfObject, layerface, x, y); 
#line 3756
}  }  }  
#line 3757
(*retVal) = tmp; 
#line 3758
} 
#endif
#line 3766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3767
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3779
::exit(___);}
#if 0
#line 3767
{ 
#line 3768
char4 tmp; 
#line 3769
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3770
__suld_2d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3771
} else { 
#line 3772
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3773
__suld_2d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3774
} else { 
#line 3775
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3776
__suld_2d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3777
}  }  }  
#line 3778
(*retVal) = tmp; 
#line 3779
} 
#endif
#line 3781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3782
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3794
::exit(___);}
#if 0
#line 3782
{ 
#line 3783
uchar4 tmp; 
#line 3784
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3785
__suld_2d_array_v4i8_trap((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3786
} else { 
#line 3787
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3788
__suld_2d_array_v4i8_clamp((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3789
} else { 
#line 3790
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3791
__suld_2d_array_v4i8_zero((char *)(&(tmp.x)), (char *)(&(tmp.y)), (char *)(&(tmp.z)), (char *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3792
}  }  }  
#line 3793
(*retVal) = tmp; 
#line 3794
} 
#endif
#line 3796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3797
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3809
::exit(___);}
#if 0
#line 3797
{ 
#line 3798
short4 tmp; 
#line 3799
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3800
__suld_2d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3801
} else { 
#line 3802
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3803
__suld_2d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3804
} else { 
#line 3805
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3806
__suld_2d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3807
}  }  }  
#line 3808
(*retVal) = tmp; 
#line 3809
} 
#endif
#line 3811 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3812
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3824
::exit(___);}
#if 0
#line 3812
{ 
#line 3813
ushort4 tmp; 
#line 3814
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3815
__suld_2d_array_v4i16_trap((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3816
} else { 
#line 3817
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3818
__suld_2d_array_v4i16_clamp((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3819
} else { 
#line 3820
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3821
__suld_2d_array_v4i16_zero((short *)(&(tmp.x)), (short *)(&(tmp.y)), (short *)(&(tmp.z)), (short *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3822
}  }  }  
#line 3823
(*retVal) = tmp; 
#line 3824
} 
#endif
#line 3826 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3827
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3839
::exit(___);}
#if 0
#line 3827
{ 
#line 3828
int4 tmp; 
#line 3829
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3830
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3831
} else { 
#line 3832
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3833
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3834
} else { 
#line 3835
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3836
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3837
}  }  }  
#line 3838
(*retVal) = tmp; 
#line 3839
} 
#endif
#line 3841 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3842
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3854
::exit(___);}
#if 0
#line 3842
{ 
#line 3843
uint4 tmp; 
#line 3844
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3845
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3846
} else { 
#line 3847
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3848
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3849
} else { 
#line 3850
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3851
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3852
}  }  }  
#line 3853
(*retVal) = tmp; 
#line 3854
} 
#endif
#line 3856 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 3857
{int volatile ___ = 1;(void)retVal;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 3869
::exit(___);}
#if 0
#line 3857
{ 
#line 3858
float4 tmp; 
#line 3859
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3860
__suld_2d_array_v4i32_trap((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3861
} else { 
#line 3862
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3863
__suld_2d_array_v4i32_clamp((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3864
} else { 
#line 3865
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3866
__suld_2d_array_v4i32_zero((int *)(&(tmp.x)), (int *)(&(tmp.y)), (int *)(&(tmp.z)), (int *)(&(tmp.w)), surfObject, layerface, x, y); 
#line 3867
}  }  }  
#line 3868
(*retVal) = tmp; 
#line 3869
} 
#endif
#line 3877 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 3878
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 3888
::exit(___);}
#if 0
#line 3878
{ 
#line 3879
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3880
__sust_b_1d_i8_trap(surfObject, x, data); 
#line 3881
} else { 
#line 3882
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3883
__sust_b_1d_i8_clamp(surfObject, x, data); 
#line 3884
} else { 
#line 3885
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3886
__sust_b_1d_i8_zero(surfObject, x, data); 
#line 3887
}  }  }  
#line 3888
} 
#endif
#line 3890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 3891
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 3901
::exit(___);}
#if 0
#line 3891
{ 
#line 3892
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3893
__sust_b_1d_i8_trap(surfObject, x, data); 
#line 3894
} else { 
#line 3895
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3896
__sust_b_1d_i8_clamp(surfObject, x, data); 
#line 3897
} else { 
#line 3898
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3899
__sust_b_1d_i8_zero(surfObject, x, data); 
#line 3900
}  }  }  
#line 3901
} 
#endif
#line 3903 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 3904
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 3914
::exit(___);}
#if 0
#line 3904
{ 
#line 3905
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3906
__sust_b_1d_i8_trap(surfObject, x, data.x); 
#line 3907
} else { 
#line 3908
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3909
__sust_b_1d_i8_clamp(surfObject, x, data.x); 
#line 3910
} else { 
#line 3911
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3912
__sust_b_1d_i8_zero(surfObject, x, data.x); 
#line 3913
}  }  }  
#line 3914
} 
#endif
#line 3916 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 3917
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 3927
::exit(___);}
#if 0
#line 3917
{ 
#line 3918
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3919
__sust_b_1d_i8_trap(surfObject, x, data); 
#line 3920
} else { 
#line 3921
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3922
__sust_b_1d_i8_clamp(surfObject, x, data); 
#line 3923
} else { 
#line 3924
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3925
__sust_b_1d_i8_zero(surfObject, x, data); 
#line 3926
}  }  }  
#line 3927
} 
#endif
#line 3929 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 3930
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 3940
::exit(___);}
#if 0
#line 3930
{ 
#line 3931
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3932
__sust_b_1d_i8_trap(surfObject, x, data.x); 
#line 3933
} else { 
#line 3934
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3935
__sust_b_1d_i8_clamp(surfObject, x, data.x); 
#line 3936
} else { 
#line 3937
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3938
__sust_b_1d_i8_zero(surfObject, x, data.x); 
#line 3939
}  }  }  
#line 3940
} 
#endif
#line 3942 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 3943
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 3953
::exit(___);}
#if 0
#line 3943
{ 
#line 3944
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3945
__sust_b_1d_i16_trap(surfObject, x, data); 
#line 3946
} else { 
#line 3947
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3948
__sust_b_1d_i16_clamp(surfObject, x, data); 
#line 3949
} else { 
#line 3950
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3951
__sust_b_1d_i16_zero(surfObject, x, data); 
#line 3952
}  }  }  
#line 3953
} 
#endif
#line 3955 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 3956
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 3966
::exit(___);}
#if 0
#line 3956
{ 
#line 3957
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3958
__sust_b_1d_i16_trap(surfObject, x, data.x); 
#line 3959
} else { 
#line 3960
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3961
__sust_b_1d_i16_clamp(surfObject, x, data.x); 
#line 3962
} else { 
#line 3963
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3964
__sust_b_1d_i16_zero(surfObject, x, data.x); 
#line 3965
}  }  }  
#line 3966
} 
#endif
#line 3968 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 3969
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 3979
::exit(___);}
#if 0
#line 3969
{ 
#line 3970
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3971
__sust_b_1d_i16_trap(surfObject, x, data); 
#line 3972
} else { 
#line 3973
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3974
__sust_b_1d_i16_clamp(surfObject, x, data); 
#line 3975
} else { 
#line 3976
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3977
__sust_b_1d_i16_zero(surfObject, x, data); 
#line 3978
}  }  }  
#line 3979
} 
#endif
#line 3981 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 3982
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 3992
::exit(___);}
#if 0
#line 3982
{ 
#line 3983
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3984
__sust_b_1d_i16_trap(surfObject, x, data.x); 
#line 3985
} else { 
#line 3986
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 3987
__sust_b_1d_i16_clamp(surfObject, x, data.x); 
#line 3988
} else { 
#line 3989
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 3990
__sust_b_1d_i16_zero(surfObject, x, data.x); 
#line 3991
}  }  }  
#line 3992
} 
#endif
#line 3994 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(int data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 3995
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4005
::exit(___);}
#if 0
#line 3995
{ 
#line 3996
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 3997
__sust_b_1d_i32_trap(surfObject, x, data); 
#line 3998
} else { 
#line 3999
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4000
__sust_b_1d_i32_clamp(surfObject, x, data); 
#line 4001
} else { 
#line 4002
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4003
__sust_b_1d_i32_zero(surfObject, x, data); 
#line 4004
}  }  }  
#line 4005
} 
#endif
#line 4007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4008
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4018
::exit(___);}
#if 0
#line 4008
{ 
#line 4009
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4010
__sust_b_1d_i32_trap(surfObject, x, data.x); 
#line 4011
} else { 
#line 4012
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4013
__sust_b_1d_i32_clamp(surfObject, x, data.x); 
#line 4014
} else { 
#line 4015
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4016
__sust_b_1d_i32_zero(surfObject, x, data.x); 
#line 4017
}  }  }  
#line 4018
} 
#endif
#line 4020 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4021
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4031
::exit(___);}
#if 0
#line 4021
{ 
#line 4022
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4023
__sust_b_1d_i32_trap(surfObject, x, data); 
#line 4024
} else { 
#line 4025
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4026
__sust_b_1d_i32_clamp(surfObject, x, data); 
#line 4027
} else { 
#line 4028
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4029
__sust_b_1d_i32_zero(surfObject, x, data); 
#line 4030
}  }  }  
#line 4031
} 
#endif
#line 4033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4034
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4044
::exit(___);}
#if 0
#line 4034
{ 
#line 4035
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4036
__sust_b_1d_i32_trap(surfObject, x, data.x); 
#line 4037
} else { 
#line 4038
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4039
__sust_b_1d_i32_clamp(surfObject, x, data.x); 
#line 4040
} else { 
#line 4041
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4042
__sust_b_1d_i32_zero(surfObject, x, data.x); 
#line 4043
}  }  }  
#line 4044
} 
#endif
#line 4046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4047
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4057
::exit(___);}
#if 0
#line 4047
{ 
#line 4048
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4049
__sust_b_1d_i64_trap(surfObject, x, data); 
#line 4050
} else { 
#line 4051
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4052
__sust_b_1d_i64_clamp(surfObject, x, data); 
#line 4053
} else { 
#line 4054
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4055
__sust_b_1d_i64_zero(surfObject, x, data); 
#line 4056
}  }  }  
#line 4057
} 
#endif
#line 4059 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4060
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4070
::exit(___);}
#if 0
#line 4060
{ 
#line 4061
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4062
__sust_b_1d_i64_trap(surfObject, x, data.x); 
#line 4063
} else { 
#line 4064
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4065
__sust_b_1d_i64_clamp(surfObject, x, data.x); 
#line 4066
} else { 
#line 4067
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4068
__sust_b_1d_i64_zero(surfObject, x, data.x); 
#line 4069
}  }  }  
#line 4070
} 
#endif
#line 4072 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4073
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4083
::exit(___);}
#if 0
#line 4073
{ 
#line 4074
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4075
__sust_b_1d_i64_trap(surfObject, x, data); 
#line 4076
} else { 
#line 4077
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4078
__sust_b_1d_i64_clamp(surfObject, x, data); 
#line 4079
} else { 
#line 4080
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4081
__sust_b_1d_i64_zero(surfObject, x, data); 
#line 4082
}  }  }  
#line 4083
} 
#endif
#line 4085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4086
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4096
::exit(___);}
#if 0
#line 4086
{ 
#line 4087
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4088
__sust_b_1d_i64_trap(surfObject, x, data.x); 
#line 4089
} else { 
#line 4090
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4091
__sust_b_1d_i64_clamp(surfObject, x, data.x); 
#line 4092
} else { 
#line 4093
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4094
__sust_b_1d_i64_zero(surfObject, x, data.x); 
#line 4095
}  }  }  
#line 4096
} 
#endif
#line 4098 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(float data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4099
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4112
::exit(___);}
#if 0
#line 4099
{ 
#line 4100
union { float f; unsigned i; } cvt; 
#line 4101
(cvt.f) = data; 
#line 4103
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4104
__sust_b_1d_i32_trap(surfObject, x, cvt.i); 
#line 4105
} else { 
#line 4106
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4107
__sust_b_1d_i32_clamp(surfObject, x, cvt.i); 
#line 4108
} else { 
#line 4109
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4110
__sust_b_1d_i32_zero(surfObject, x, cvt.i); 
#line 4111
}  }  }  
#line 4112
} 
#endif
#line 4114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4115
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4128
::exit(___);}
#if 0
#line 4115
{ 
#line 4116
union { float f; unsigned i; } cvt; 
#line 4117
(cvt.f) = (data.x); 
#line 4119
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4120
__sust_b_1d_i32_trap(surfObject, x, cvt.i); 
#line 4121
} else { 
#line 4122
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4123
__sust_b_1d_i32_clamp(surfObject, x, cvt.i); 
#line 4124
} else { 
#line 4125
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4126
__sust_b_1d_i32_zero(surfObject, x, cvt.i); 
#line 4127
}  }  }  
#line 4128
} 
#endif
#line 4136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4137
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4147
::exit(___);}
#if 0
#line 4137
{ 
#line 4138
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4139
__sust_b_1d_v2i8_trap(surfObject, x, make_uchar2(data.x, data.y)); 
#line 4140
} else { 
#line 4141
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4142
__sust_b_1d_v2i8_clamp(surfObject, x, make_uchar2(data.x, data.y)); 
#line 4143
} else { 
#line 4144
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4145
__sust_b_1d_v2i8_zero(surfObject, x, make_uchar2(data.x, data.y)); 
#line 4146
}  }  }  
#line 4147
} 
#endif
#line 4149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4150
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4160
::exit(___);}
#if 0
#line 4150
{ 
#line 4151
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4152
__sust_b_1d_v2i8_trap(surfObject, x, data); 
#line 4153
} else { 
#line 4154
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4155
__sust_b_1d_v2i8_clamp(surfObject, x, data); 
#line 4156
} else { 
#line 4157
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4158
__sust_b_1d_v2i8_zero(surfObject, x, data); 
#line 4159
}  }  }  
#line 4160
} 
#endif
#line 4162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4163
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4173
::exit(___);}
#if 0
#line 4163
{ 
#line 4164
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4165
__sust_b_1d_v2i16_trap(surfObject, x, make_ushort2(data.x, data.y)); 
#line 4166
} else { 
#line 4167
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4168
__sust_b_1d_v2i16_clamp(surfObject, x, make_ushort2(data.x, data.y)); 
#line 4169
} else { 
#line 4170
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4171
__sust_b_1d_v2i16_zero(surfObject, x, make_ushort2(data.x, data.y)); 
#line 4172
}  }  }  
#line 4173
} 
#endif
#line 4175 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4176
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4186
::exit(___);}
#if 0
#line 4176
{ 
#line 4177
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4178
__sust_b_1d_v2i16_trap(surfObject, x, data); 
#line 4179
} else { 
#line 4180
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4181
__sust_b_1d_v2i16_clamp(surfObject, x, data); 
#line 4182
} else { 
#line 4183
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4184
__sust_b_1d_v2i16_zero(surfObject, x, data); 
#line 4185
}  }  }  
#line 4186
} 
#endif
#line 4188 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4189
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4199
::exit(___);}
#if 0
#line 4189
{ 
#line 4190
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4191
__sust_b_1d_v2i32_trap(surfObject, x, make_uint2(data.x, data.y)); 
#line 4192
} else { 
#line 4193
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4194
__sust_b_1d_v2i32_clamp(surfObject, x, make_uint2(data.x, data.y)); 
#line 4195
} else { 
#line 4196
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4197
__sust_b_1d_v2i32_zero(surfObject, x, make_uint2(data.x, data.y)); 
#line 4198
}  }  }  
#line 4199
} 
#endif
#line 4201 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4202
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4212
::exit(___);}
#if 0
#line 4202
{ 
#line 4203
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4204
__sust_b_1d_v2i32_trap(surfObject, x, data); 
#line 4205
} else { 
#line 4206
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4207
__sust_b_1d_v2i32_clamp(surfObject, x, data); 
#line 4208
} else { 
#line 4209
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4210
__sust_b_1d_v2i32_zero(surfObject, x, data); 
#line 4211
}  }  }  
#line 4212
} 
#endif
#line 4214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4215
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4225
::exit(___);}
#if 0
#line 4215
{ 
#line 4216
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4217
__sust_b_1d_v2i64_trap(surfObject, x, make_ulonglong2(data.x, data.y)); 
#line 4218
} else { 
#line 4219
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4220
__sust_b_1d_v2i64_clamp(surfObject, x, make_ulonglong2(data.x, data.y)); 
#line 4221
} else { 
#line 4222
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4223
__sust_b_1d_v2i64_zero(surfObject, x, make_ulonglong2(data.x, data.y)); 
#line 4224
}  }  }  
#line 4225
} 
#endif
#line 4227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4228
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4238
::exit(___);}
#if 0
#line 4228
{ 
#line 4229
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4230
__sust_b_1d_v2i64_trap(surfObject, x, data); 
#line 4231
} else { 
#line 4232
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4233
__sust_b_1d_v2i64_clamp(surfObject, x, data); 
#line 4234
} else { 
#line 4235
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4236
__sust_b_1d_v2i64_zero(surfObject, x, data); 
#line 4237
}  }  }  
#line 4238
} 
#endif
#line 4240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4241
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4254
::exit(___);}
#if 0
#line 4241
{ 
#line 4242
union { float2 f; uint2 i; } cvt; 
#line 4243
(cvt.f) = data; 
#line 4245
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4246
__sust_b_1d_v2i32_trap(surfObject, x, cvt.i); 
#line 4247
} else { 
#line 4248
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4249
__sust_b_1d_v2i32_clamp(surfObject, x, cvt.i); 
#line 4250
} else { 
#line 4251
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4252
__sust_b_1d_v2i32_zero(surfObject, x, cvt.i); 
#line 4253
}  }  }  
#line 4254
} 
#endif
#line 4262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4263
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4273
::exit(___);}
#if 0
#line 4263
{ 
#line 4264
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4265
__sust_b_1d_v4i8_trap(surfObject, x, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 4266
} else { 
#line 4267
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4268
__sust_b_1d_v4i8_clamp(surfObject, x, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 4269
} else { 
#line 4270
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4271
__sust_b_1d_v4i8_zero(surfObject, x, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 4272
}  }  }  
#line 4273
} 
#endif
#line 4275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4276
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4286
::exit(___);}
#if 0
#line 4276
{ 
#line 4277
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4278
__sust_b_1d_v4i8_trap(surfObject, x, data); 
#line 4279
} else { 
#line 4280
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4281
__sust_b_1d_v4i8_clamp(surfObject, x, data); 
#line 4282
} else { 
#line 4283
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4284
__sust_b_1d_v4i8_zero(surfObject, x, data); 
#line 4285
}  }  }  
#line 4286
} 
#endif
#line 4288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4289
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4299
::exit(___);}
#if 0
#line 4289
{ 
#line 4290
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4291
__sust_b_1d_v4i16_trap(surfObject, x, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 4292
} else { 
#line 4293
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4294
__sust_b_1d_v4i16_clamp(surfObject, x, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 4295
} else { 
#line 4296
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4297
__sust_b_1d_v4i16_zero(surfObject, x, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 4298
}  }  }  
#line 4299
} 
#endif
#line 4301 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4302
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4312
::exit(___);}
#if 0
#line 4302
{ 
#line 4303
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4304
__sust_b_1d_v4i16_trap(surfObject, x, data); 
#line 4305
} else { 
#line 4306
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4307
__sust_b_1d_v4i16_clamp(surfObject, x, data); 
#line 4308
} else { 
#line 4309
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4310
__sust_b_1d_v4i16_zero(surfObject, x, data); 
#line 4311
}  }  }  
#line 4312
} 
#endif
#line 4314 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4315
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4325
::exit(___);}
#if 0
#line 4315
{ 
#line 4316
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4317
__sust_b_1d_v4i32_trap(surfObject, x, make_uint4(data.x, data.y, data.z, data.w)); 
#line 4318
} else { 
#line 4319
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4320
__sust_b_1d_v4i32_clamp(surfObject, x, make_uint4(data.x, data.y, data.z, data.w)); 
#line 4321
} else { 
#line 4322
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4323
__sust_b_1d_v4i32_zero(surfObject, x, make_uint4(data.x, data.y, data.z, data.w)); 
#line 4324
}  }  }  
#line 4325
} 
#endif
#line 4327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4328
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4338
::exit(___);}
#if 0
#line 4328
{ 
#line 4329
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4330
__sust_b_1d_v4i32_trap(surfObject, x, data); 
#line 4331
} else { 
#line 4332
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4333
__sust_b_1d_v4i32_clamp(surfObject, x, data); 
#line 4334
} else { 
#line 4335
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4336
__sust_b_1d_v4i32_zero(surfObject, x, data); 
#line 4337
}  }  }  
#line 4338
} 
#endif
#line 4340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode) 
#line 4341
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)boundaryMode;
#line 4354
::exit(___);}
#if 0
#line 4341
{ 
#line 4342
union { float4 f; uint4 i; } cvt; 
#line 4343
(cvt.f) = data; 
#line 4345
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4346
__sust_b_1d_v4i32_trap(surfObject, x, cvt.i); 
#line 4347
} else { 
#line 4348
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4349
__sust_b_1d_v4i32_clamp(surfObject, x, cvt.i); 
#line 4350
} else { 
#line 4351
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4352
__sust_b_1d_v4i32_zero(surfObject, x, cvt.i); 
#line 4353
}  }  }  
#line 4354
} 
#endif
#line 4362 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4363
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4373
::exit(___);}
#if 0
#line 4363
{ 
#line 4364
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4365
__sust_b_2d_i8_trap(surfObject, x, y, data); 
#line 4366
} else { 
#line 4367
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4368
__sust_b_2d_i8_clamp(surfObject, x, y, data); 
#line 4369
} else { 
#line 4370
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4371
__sust_b_2d_i8_zero(surfObject, x, y, data); 
#line 4372
}  }  }  
#line 4373
} 
#endif
#line 4375 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4376
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4386
::exit(___);}
#if 0
#line 4376
{ 
#line 4377
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4378
__sust_b_2d_i8_trap(surfObject, x, y, data); 
#line 4379
} else { 
#line 4380
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4381
__sust_b_2d_i8_clamp(surfObject, x, y, data); 
#line 4382
} else { 
#line 4383
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4384
__sust_b_2d_i8_zero(surfObject, x, y, data); 
#line 4385
}  }  }  
#line 4386
} 
#endif
#line 4388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4389
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4399
::exit(___);}
#if 0
#line 4389
{ 
#line 4390
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4391
__sust_b_2d_i8_trap(surfObject, x, y, data.x); 
#line 4392
} else { 
#line 4393
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4394
__sust_b_2d_i8_clamp(surfObject, x, y, data.x); 
#line 4395
} else { 
#line 4396
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4397
__sust_b_2d_i8_zero(surfObject, x, y, data.x); 
#line 4398
}  }  }  
#line 4399
} 
#endif
#line 4401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4402
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4412
::exit(___);}
#if 0
#line 4402
{ 
#line 4403
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4404
__sust_b_2d_i8_trap(surfObject, x, y, data); 
#line 4405
} else { 
#line 4406
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4407
__sust_b_2d_i8_clamp(surfObject, x, y, data); 
#line 4408
} else { 
#line 4409
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4410
__sust_b_2d_i8_zero(surfObject, x, y, data); 
#line 4411
}  }  }  
#line 4412
} 
#endif
#line 4414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4415
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4425
::exit(___);}
#if 0
#line 4415
{ 
#line 4416
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4417
__sust_b_2d_i8_trap(surfObject, x, y, data.x); 
#line 4418
} else { 
#line 4419
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4420
__sust_b_2d_i8_clamp(surfObject, x, y, data.x); 
#line 4421
} else { 
#line 4422
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4423
__sust_b_2d_i8_zero(surfObject, x, y, data.x); 
#line 4424
}  }  }  
#line 4425
} 
#endif
#line 4427 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4428
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4438
::exit(___);}
#if 0
#line 4428
{ 
#line 4429
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4430
__sust_b_2d_i16_trap(surfObject, x, y, data); 
#line 4431
} else { 
#line 4432
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4433
__sust_b_2d_i16_clamp(surfObject, x, y, data); 
#line 4434
} else { 
#line 4435
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4436
__sust_b_2d_i16_zero(surfObject, x, y, data); 
#line 4437
}  }  }  
#line 4438
} 
#endif
#line 4440 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4441
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4451
::exit(___);}
#if 0
#line 4441
{ 
#line 4442
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4443
__sust_b_2d_i16_trap(surfObject, x, y, data.x); 
#line 4444
} else { 
#line 4445
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4446
__sust_b_2d_i16_clamp(surfObject, x, y, data.x); 
#line 4447
} else { 
#line 4448
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4449
__sust_b_2d_i16_zero(surfObject, x, y, data.x); 
#line 4450
}  }  }  
#line 4451
} 
#endif
#line 4453 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4454
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4464
::exit(___);}
#if 0
#line 4454
{ 
#line 4455
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4456
__sust_b_2d_i16_trap(surfObject, x, y, data); 
#line 4457
} else { 
#line 4458
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4459
__sust_b_2d_i16_clamp(surfObject, x, y, data); 
#line 4460
} else { 
#line 4461
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4462
__sust_b_2d_i16_zero(surfObject, x, y, data); 
#line 4463
}  }  }  
#line 4464
} 
#endif
#line 4466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4467
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4477
::exit(___);}
#if 0
#line 4467
{ 
#line 4468
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4469
__sust_b_2d_i16_trap(surfObject, x, y, data.x); 
#line 4470
} else { 
#line 4471
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4472
__sust_b_2d_i16_clamp(surfObject, x, y, data.x); 
#line 4473
} else { 
#line 4474
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4475
__sust_b_2d_i16_zero(surfObject, x, y, data.x); 
#line 4476
}  }  }  
#line 4477
} 
#endif
#line 4479 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4480
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4490
::exit(___);}
#if 0
#line 4480
{ 
#line 4481
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4482
__sust_b_2d_i32_trap(surfObject, x, y, data); 
#line 4483
} else { 
#line 4484
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4485
__sust_b_2d_i32_clamp(surfObject, x, y, data); 
#line 4486
} else { 
#line 4487
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4488
__sust_b_2d_i32_zero(surfObject, x, y, data); 
#line 4489
}  }  }  
#line 4490
} 
#endif
#line 4492 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4493
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4503
::exit(___);}
#if 0
#line 4493
{ 
#line 4494
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4495
__sust_b_2d_i32_trap(surfObject, x, y, data.x); 
#line 4496
} else { 
#line 4497
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4498
__sust_b_2d_i32_clamp(surfObject, x, y, data.x); 
#line 4499
} else { 
#line 4500
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4501
__sust_b_2d_i32_zero(surfObject, x, y, data.x); 
#line 4502
}  }  }  
#line 4503
} 
#endif
#line 4505 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4506
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4516
::exit(___);}
#if 0
#line 4506
{ 
#line 4507
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4508
__sust_b_2d_i32_trap(surfObject, x, y, data); 
#line 4509
} else { 
#line 4510
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4511
__sust_b_2d_i32_clamp(surfObject, x, y, data); 
#line 4512
} else { 
#line 4513
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4514
__sust_b_2d_i32_zero(surfObject, x, y, data); 
#line 4515
}  }  }  
#line 4516
} 
#endif
#line 4518 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4519
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4529
::exit(___);}
#if 0
#line 4519
{ 
#line 4520
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4521
__sust_b_2d_i32_trap(surfObject, x, y, data.x); 
#line 4522
} else { 
#line 4523
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4524
__sust_b_2d_i32_clamp(surfObject, x, y, data.x); 
#line 4525
} else { 
#line 4526
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4527
__sust_b_2d_i32_zero(surfObject, x, y, data.x); 
#line 4528
}  }  }  
#line 4529
} 
#endif
#line 4531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4532
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4542
::exit(___);}
#if 0
#line 4532
{ 
#line 4533
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4534
__sust_b_2d_i64_trap(surfObject, x, y, data); 
#line 4535
} else { 
#line 4536
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4537
__sust_b_2d_i64_clamp(surfObject, x, y, data); 
#line 4538
} else { 
#line 4539
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4540
__sust_b_2d_i64_zero(surfObject, x, y, data); 
#line 4541
}  }  }  
#line 4542
} 
#endif
#line 4544 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4545
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4555
::exit(___);}
#if 0
#line 4545
{ 
#line 4546
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4547
__sust_b_2d_i64_trap(surfObject, x, y, data.x); 
#line 4548
} else { 
#line 4549
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4550
__sust_b_2d_i64_clamp(surfObject, x, y, data.x); 
#line 4551
} else { 
#line 4552
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4553
__sust_b_2d_i64_zero(surfObject, x, y, data.x); 
#line 4554
}  }  }  
#line 4555
} 
#endif
#line 4557 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4558
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4568
::exit(___);}
#if 0
#line 4558
{ 
#line 4559
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4560
__sust_b_2d_i64_trap(surfObject, x, y, data); 
#line 4561
} else { 
#line 4562
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4563
__sust_b_2d_i64_clamp(surfObject, x, y, data); 
#line 4564
} else { 
#line 4565
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4566
__sust_b_2d_i64_zero(surfObject, x, y, data); 
#line 4567
}  }  }  
#line 4568
} 
#endif
#line 4570 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4571
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4581
::exit(___);}
#if 0
#line 4571
{ 
#line 4572
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4573
__sust_b_2d_i64_trap(surfObject, x, y, data.x); 
#line 4574
} else { 
#line 4575
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4576
__sust_b_2d_i64_clamp(surfObject, x, y, data.x); 
#line 4577
} else { 
#line 4578
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4579
__sust_b_2d_i64_zero(surfObject, x, y, data.x); 
#line 4580
}  }  }  
#line 4581
} 
#endif
#line 4583 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4584
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4597
::exit(___);}
#if 0
#line 4584
{ 
#line 4585
union { float f; unsigned i; } cvt; 
#line 4586
(cvt.f) = data; 
#line 4588
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4589
__sust_b_2d_i32_trap(surfObject, x, y, cvt.i); 
#line 4590
} else { 
#line 4591
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4592
__sust_b_2d_i32_clamp(surfObject, x, y, cvt.i); 
#line 4593
} else { 
#line 4594
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4595
__sust_b_2d_i32_zero(surfObject, x, y, cvt.i); 
#line 4596
}  }  }  
#line 4597
} 
#endif
#line 4599 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4600
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4613
::exit(___);}
#if 0
#line 4600
{ 
#line 4601
union { float f; unsigned i; } cvt; 
#line 4602
(cvt.f) = (data.x); 
#line 4604
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4605
__sust_b_2d_i32_trap(surfObject, x, y, cvt.i); 
#line 4606
} else { 
#line 4607
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4608
__sust_b_2d_i32_clamp(surfObject, x, y, cvt.i); 
#line 4609
} else { 
#line 4610
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4611
__sust_b_2d_i32_zero(surfObject, x, y, cvt.i); 
#line 4612
}  }  }  
#line 4613
} 
#endif
#line 4621 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4622
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4632
::exit(___);}
#if 0
#line 4622
{ 
#line 4623
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4624
__sust_b_2d_v2i8_trap(surfObject, x, y, make_uchar2(data.x, data.y)); 
#line 4625
} else { 
#line 4626
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4627
__sust_b_2d_v2i8_clamp(surfObject, x, y, make_uchar2(data.x, data.y)); 
#line 4628
} else { 
#line 4629
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4630
__sust_b_2d_v2i8_zero(surfObject, x, y, make_uchar2(data.x, data.y)); 
#line 4631
}  }  }  
#line 4632
} 
#endif
#line 4634 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4635
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4645
::exit(___);}
#if 0
#line 4635
{ 
#line 4636
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4637
__sust_b_2d_v2i8_trap(surfObject, x, y, data); 
#line 4638
} else { 
#line 4639
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4640
__sust_b_2d_v2i8_clamp(surfObject, x, y, data); 
#line 4641
} else { 
#line 4642
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4643
__sust_b_2d_v2i8_zero(surfObject, x, y, data); 
#line 4644
}  }  }  
#line 4645
} 
#endif
#line 4647 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4648
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4658
::exit(___);}
#if 0
#line 4648
{ 
#line 4649
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4650
__sust_b_2d_v2i16_trap(surfObject, x, y, make_ushort2(data.x, data.y)); 
#line 4651
} else { 
#line 4652
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4653
__sust_b_2d_v2i16_clamp(surfObject, x, y, make_ushort2(data.x, data.y)); 
#line 4654
} else { 
#line 4655
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4656
__sust_b_2d_v2i16_zero(surfObject, x, y, make_ushort2(data.x, data.y)); 
#line 4657
}  }  }  
#line 4658
} 
#endif
#line 4660 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4661
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4671
::exit(___);}
#if 0
#line 4661
{ 
#line 4662
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4663
__sust_b_2d_v2i16_trap(surfObject, x, y, data); 
#line 4664
} else { 
#line 4665
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4666
__sust_b_2d_v2i16_clamp(surfObject, x, y, data); 
#line 4667
} else { 
#line 4668
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4669
__sust_b_2d_v2i16_zero(surfObject, x, y, data); 
#line 4670
}  }  }  
#line 4671
} 
#endif
#line 4673 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4674
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4684
::exit(___);}
#if 0
#line 4674
{ 
#line 4675
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4676
__sust_b_2d_v2i32_trap(surfObject, x, y, make_uint2(data.x, data.y)); 
#line 4677
} else { 
#line 4678
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4679
__sust_b_2d_v2i32_clamp(surfObject, x, y, make_uint2(data.x, data.y)); 
#line 4680
} else { 
#line 4681
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4682
__sust_b_2d_v2i32_zero(surfObject, x, y, make_uint2(data.x, data.y)); 
#line 4683
}  }  }  
#line 4684
} 
#endif
#line 4686 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4687
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4697
::exit(___);}
#if 0
#line 4687
{ 
#line 4688
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4689
__sust_b_2d_v2i32_trap(surfObject, x, y, data); 
#line 4690
} else { 
#line 4691
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4692
__sust_b_2d_v2i32_clamp(surfObject, x, y, data); 
#line 4693
} else { 
#line 4694
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4695
__sust_b_2d_v2i32_zero(surfObject, x, y, data); 
#line 4696
}  }  }  
#line 4697
} 
#endif
#line 4699 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4700
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4710
::exit(___);}
#if 0
#line 4700
{ 
#line 4701
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4702
__sust_b_2d_v2i64_trap(surfObject, x, y, make_ulonglong2(data.x, data.y)); 
#line 4703
} else { 
#line 4704
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4705
__sust_b_2d_v2i64_clamp(surfObject, x, y, make_ulonglong2(data.x, data.y)); 
#line 4706
} else { 
#line 4707
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4708
__sust_b_2d_v2i64_zero(surfObject, x, y, make_ulonglong2(data.x, data.y)); 
#line 4709
}  }  }  
#line 4710
} 
#endif
#line 4712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4713
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4723
::exit(___);}
#if 0
#line 4713
{ 
#line 4714
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4715
__sust_b_2d_v2i64_trap(surfObject, x, y, data); 
#line 4716
} else { 
#line 4717
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4718
__sust_b_2d_v2i64_clamp(surfObject, x, y, data); 
#line 4719
} else { 
#line 4720
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4721
__sust_b_2d_v2i64_zero(surfObject, x, y, data); 
#line 4722
}  }  }  
#line 4723
} 
#endif
#line 4725 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4726
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4739
::exit(___);}
#if 0
#line 4726
{ 
#line 4727
union { float2 f; uint2 i; } cvt; 
#line 4728
(cvt.f) = data; 
#line 4730
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4731
__sust_b_2d_v2i32_trap(surfObject, x, y, cvt.i); 
#line 4732
} else { 
#line 4733
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4734
__sust_b_2d_v2i32_clamp(surfObject, x, y, cvt.i); 
#line 4735
} else { 
#line 4736
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4737
__sust_b_2d_v2i32_zero(surfObject, x, y, cvt.i); 
#line 4738
}  }  }  
#line 4739
} 
#endif
#line 4747 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4748
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4758
::exit(___);}
#if 0
#line 4748
{ 
#line 4749
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4750
__sust_b_2d_v4i8_trap(surfObject, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 4751
} else { 
#line 4752
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4753
__sust_b_2d_v4i8_clamp(surfObject, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 4754
} else { 
#line 4755
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4756
__sust_b_2d_v4i8_zero(surfObject, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 4757
}  }  }  
#line 4758
} 
#endif
#line 4760 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4761
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4771
::exit(___);}
#if 0
#line 4761
{ 
#line 4762
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4763
__sust_b_2d_v4i8_trap(surfObject, x, y, data); 
#line 4764
} else { 
#line 4765
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4766
__sust_b_2d_v4i8_clamp(surfObject, x, y, data); 
#line 4767
} else { 
#line 4768
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4769
__sust_b_2d_v4i8_zero(surfObject, x, y, data); 
#line 4770
}  }  }  
#line 4771
} 
#endif
#line 4773 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4774
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4784
::exit(___);}
#if 0
#line 4774
{ 
#line 4775
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4776
__sust_b_2d_v4i16_trap(surfObject, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 4777
} else { 
#line 4778
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4779
__sust_b_2d_v4i16_clamp(surfObject, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 4780
} else { 
#line 4781
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4782
__sust_b_2d_v4i16_zero(surfObject, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 4783
}  }  }  
#line 4784
} 
#endif
#line 4786 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4787
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4797
::exit(___);}
#if 0
#line 4787
{ 
#line 4788
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4789
__sust_b_2d_v4i16_trap(surfObject, x, y, data); 
#line 4790
} else { 
#line 4791
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4792
__sust_b_2d_v4i16_clamp(surfObject, x, y, data); 
#line 4793
} else { 
#line 4794
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4795
__sust_b_2d_v4i16_zero(surfObject, x, y, data); 
#line 4796
}  }  }  
#line 4797
} 
#endif
#line 4799 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4800
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4810
::exit(___);}
#if 0
#line 4800
{ 
#line 4801
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4802
__sust_b_2d_v4i32_trap(surfObject, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
#line 4803
} else { 
#line 4804
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4805
__sust_b_2d_v4i32_clamp(surfObject, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
#line 4806
} else { 
#line 4807
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4808
__sust_b_2d_v4i32_zero(surfObject, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
#line 4809
}  }  }  
#line 4810
} 
#endif
#line 4812 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4813
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4823
::exit(___);}
#if 0
#line 4813
{ 
#line 4814
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4815
__sust_b_2d_v4i32_trap(surfObject, x, y, data); 
#line 4816
} else { 
#line 4817
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4818
__sust_b_2d_v4i32_clamp(surfObject, x, y, data); 
#line 4819
} else { 
#line 4820
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4821
__sust_b_2d_v4i32_zero(surfObject, x, y, data); 
#line 4822
}  }  }  
#line 4823
} 
#endif
#line 4825 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode) 
#line 4826
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)boundaryMode;
#line 4839
::exit(___);}
#if 0
#line 4826
{ 
#line 4827
union { float4 f; uint4 i; } cvt; 
#line 4828
(cvt.f) = data; 
#line 4830
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4831
__sust_b_2d_v4i32_trap(surfObject, x, y, cvt.i); 
#line 4832
} else { 
#line 4833
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4834
__sust_b_2d_v4i32_clamp(surfObject, x, y, cvt.i); 
#line 4835
} else { 
#line 4836
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4837
__sust_b_2d_v4i32_zero(surfObject, x, y, cvt.i); 
#line 4838
}  }  }  
#line 4839
} 
#endif
#line 4848 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 4849
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 4859
::exit(___);}
#if 0
#line 4849
{ 
#line 4850
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4851
__sust_b_3d_i8_trap(surfObject, x, y, z, data); 
#line 4852
} else { 
#line 4853
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4854
__sust_b_3d_i8_clamp(surfObject, x, y, z, data); 
#line 4855
} else { 
#line 4856
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4857
__sust_b_3d_i8_zero(surfObject, x, y, z, data); 
#line 4858
}  }  }  
#line 4859
} 
#endif
#line 4861 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 4862
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 4872
::exit(___);}
#if 0
#line 4862
{ 
#line 4863
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4864
__sust_b_3d_i8_trap(surfObject, x, y, z, data); 
#line 4865
} else { 
#line 4866
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4867
__sust_b_3d_i8_clamp(surfObject, x, y, z, data); 
#line 4868
} else { 
#line 4869
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4870
__sust_b_3d_i8_zero(surfObject, x, y, z, data); 
#line 4871
}  }  }  
#line 4872
} 
#endif
#line 4874 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 4875
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 4885
::exit(___);}
#if 0
#line 4875
{ 
#line 4876
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4877
__sust_b_3d_i8_trap(surfObject, x, y, z, data.x); 
#line 4878
} else { 
#line 4879
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4880
__sust_b_3d_i8_clamp(surfObject, x, y, z, data.x); 
#line 4881
} else { 
#line 4882
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4883
__sust_b_3d_i8_zero(surfObject, x, y, z, data.x); 
#line 4884
}  }  }  
#line 4885
} 
#endif
#line 4887 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 4888
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 4898
::exit(___);}
#if 0
#line 4888
{ 
#line 4889
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4890
__sust_b_3d_i8_trap(surfObject, x, y, z, data); 
#line 4891
} else { 
#line 4892
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4893
__sust_b_3d_i8_clamp(surfObject, x, y, z, data); 
#line 4894
} else { 
#line 4895
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4896
__sust_b_3d_i8_zero(surfObject, x, y, z, data); 
#line 4897
}  }  }  
#line 4898
} 
#endif
#line 4900 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 4901
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 4911
::exit(___);}
#if 0
#line 4901
{ 
#line 4902
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4903
__sust_b_3d_i8_trap(surfObject, x, y, z, data.x); 
#line 4904
} else { 
#line 4905
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4906
__sust_b_3d_i8_clamp(surfObject, x, y, z, data.x); 
#line 4907
} else { 
#line 4908
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4909
__sust_b_3d_i8_zero(surfObject, x, y, z, data.x); 
#line 4910
}  }  }  
#line 4911
} 
#endif
#line 4913 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 4914
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 4924
::exit(___);}
#if 0
#line 4914
{ 
#line 4915
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4916
__sust_b_3d_i16_trap(surfObject, x, y, z, data); 
#line 4917
} else { 
#line 4918
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4919
__sust_b_3d_i16_clamp(surfObject, x, y, z, data); 
#line 4920
} else { 
#line 4921
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4922
__sust_b_3d_i16_zero(surfObject, x, y, z, data); 
#line 4923
}  }  }  
#line 4924
} 
#endif
#line 4926 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 4927
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 4937
::exit(___);}
#if 0
#line 4927
{ 
#line 4928
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4929
__sust_b_3d_i16_trap(surfObject, x, y, z, data.x); 
#line 4930
} else { 
#line 4931
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4932
__sust_b_3d_i16_clamp(surfObject, x, y, z, data.x); 
#line 4933
} else { 
#line 4934
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4935
__sust_b_3d_i16_zero(surfObject, x, y, z, data.x); 
#line 4936
}  }  }  
#line 4937
} 
#endif
#line 4939 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 4940
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 4950
::exit(___);}
#if 0
#line 4940
{ 
#line 4941
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4942
__sust_b_3d_i16_trap(surfObject, x, y, z, data); 
#line 4943
} else { 
#line 4944
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4945
__sust_b_3d_i16_clamp(surfObject, x, y, z, data); 
#line 4946
} else { 
#line 4947
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4948
__sust_b_3d_i16_zero(surfObject, x, y, z, data); 
#line 4949
}  }  }  
#line 4950
} 
#endif
#line 4952 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 4953
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 4963
::exit(___);}
#if 0
#line 4953
{ 
#line 4954
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4955
__sust_b_3d_i16_trap(surfObject, x, y, z, data.x); 
#line 4956
} else { 
#line 4957
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4958
__sust_b_3d_i16_clamp(surfObject, x, y, z, data.x); 
#line 4959
} else { 
#line 4960
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4961
__sust_b_3d_i16_zero(surfObject, x, y, z, data.x); 
#line 4962
}  }  }  
#line 4963
} 
#endif
#line 4965 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 4966
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 4976
::exit(___);}
#if 0
#line 4966
{ 
#line 4967
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4968
__sust_b_3d_i32_trap(surfObject, x, y, z, data); 
#line 4969
} else { 
#line 4970
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4971
__sust_b_3d_i32_clamp(surfObject, x, y, z, data); 
#line 4972
} else { 
#line 4973
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4974
__sust_b_3d_i32_zero(surfObject, x, y, z, data); 
#line 4975
}  }  }  
#line 4976
} 
#endif
#line 4978 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 4979
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 4989
::exit(___);}
#if 0
#line 4979
{ 
#line 4980
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4981
__sust_b_3d_i32_trap(surfObject, x, y, z, data.x); 
#line 4982
} else { 
#line 4983
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4984
__sust_b_3d_i32_clamp(surfObject, x, y, z, data.x); 
#line 4985
} else { 
#line 4986
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 4987
__sust_b_3d_i32_zero(surfObject, x, y, z, data.x); 
#line 4988
}  }  }  
#line 4989
} 
#endif
#line 4991 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 4992
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5002
::exit(___);}
#if 0
#line 4992
{ 
#line 4993
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 4994
__sust_b_3d_i32_trap(surfObject, x, y, z, data); 
#line 4995
} else { 
#line 4996
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 4997
__sust_b_3d_i32_clamp(surfObject, x, y, z, data); 
#line 4998
} else { 
#line 4999
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5000
__sust_b_3d_i32_zero(surfObject, x, y, z, data); 
#line 5001
}  }  }  
#line 5002
} 
#endif
#line 5004 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5005
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5015
::exit(___);}
#if 0
#line 5005
{ 
#line 5006
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5007
__sust_b_3d_i32_trap(surfObject, x, y, z, data.x); 
#line 5008
} else { 
#line 5009
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5010
__sust_b_3d_i32_clamp(surfObject, x, y, z, data.x); 
#line 5011
} else { 
#line 5012
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5013
__sust_b_3d_i32_zero(surfObject, x, y, z, data.x); 
#line 5014
}  }  }  
#line 5015
} 
#endif
#line 5017 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5018
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5028
::exit(___);}
#if 0
#line 5018
{ 
#line 5019
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5020
__sust_b_3d_i64_trap(surfObject, x, y, z, data); 
#line 5021
} else { 
#line 5022
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5023
__sust_b_3d_i64_clamp(surfObject, x, y, z, data); 
#line 5024
} else { 
#line 5025
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5026
__sust_b_3d_i64_zero(surfObject, x, y, z, data); 
#line 5027
}  }  }  
#line 5028
} 
#endif
#line 5030 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5031
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5041
::exit(___);}
#if 0
#line 5031
{ 
#line 5032
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5033
__sust_b_3d_i64_trap(surfObject, x, y, z, data.x); 
#line 5034
} else { 
#line 5035
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5036
__sust_b_3d_i64_clamp(surfObject, x, y, z, data.x); 
#line 5037
} else { 
#line 5038
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5039
__sust_b_3d_i64_zero(surfObject, x, y, z, data.x); 
#line 5040
}  }  }  
#line 5041
} 
#endif
#line 5043 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5044
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5054
::exit(___);}
#if 0
#line 5044
{ 
#line 5045
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5046
__sust_b_3d_i64_trap(surfObject, x, y, z, data); 
#line 5047
} else { 
#line 5048
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5049
__sust_b_3d_i64_clamp(surfObject, x, y, z, data); 
#line 5050
} else { 
#line 5051
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5052
__sust_b_3d_i64_zero(surfObject, x, y, z, data); 
#line 5053
}  }  }  
#line 5054
} 
#endif
#line 5056 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5057
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5067
::exit(___);}
#if 0
#line 5057
{ 
#line 5058
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5059
__sust_b_3d_i64_trap(surfObject, x, y, z, data.x); 
#line 5060
} else { 
#line 5061
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5062
__sust_b_3d_i64_clamp(surfObject, x, y, z, data.x); 
#line 5063
} else { 
#line 5064
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5065
__sust_b_3d_i64_zero(surfObject, x, y, z, data.x); 
#line 5066
}  }  }  
#line 5067
} 
#endif
#line 5069 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5070
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5083
::exit(___);}
#if 0
#line 5070
{ 
#line 5071
union { float f; unsigned i; } cvt; 
#line 5072
(cvt.f) = data; 
#line 5074
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5075
__sust_b_3d_i32_trap(surfObject, x, y, z, cvt.i); 
#line 5076
} else { 
#line 5077
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5078
__sust_b_3d_i32_clamp(surfObject, x, y, z, cvt.i); 
#line 5079
} else { 
#line 5080
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5081
__sust_b_3d_i32_zero(surfObject, x, y, z, cvt.i); 
#line 5082
}  }  }  
#line 5083
} 
#endif
#line 5085 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5086
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5099
::exit(___);}
#if 0
#line 5086
{ 
#line 5087
union { float f; unsigned i; } cvt; 
#line 5088
(cvt.f) = (data.x); 
#line 5090
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5091
__sust_b_3d_i32_trap(surfObject, x, y, z, cvt.i); 
#line 5092
} else { 
#line 5093
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5094
__sust_b_3d_i32_clamp(surfObject, x, y, z, cvt.i); 
#line 5095
} else { 
#line 5096
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5097
__sust_b_3d_i32_zero(surfObject, x, y, z, cvt.i); 
#line 5098
}  }  }  
#line 5099
} 
#endif
#line 5107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5108
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5118
::exit(___);}
#if 0
#line 5108
{ 
#line 5109
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5110
__sust_b_3d_v2i8_trap(surfObject, x, y, z, make_uchar2(data.x, data.y)); 
#line 5111
} else { 
#line 5112
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5113
__sust_b_3d_v2i8_clamp(surfObject, x, y, z, make_uchar2(data.x, data.y)); 
#line 5114
} else { 
#line 5115
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5116
__sust_b_3d_v2i8_zero(surfObject, x, y, z, make_uchar2(data.x, data.y)); 
#line 5117
}  }  }  
#line 5118
} 
#endif
#line 5120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5121
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5131
::exit(___);}
#if 0
#line 5121
{ 
#line 5122
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5123
__sust_b_3d_v2i8_trap(surfObject, x, y, z, data); 
#line 5124
} else { 
#line 5125
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5126
__sust_b_3d_v2i8_clamp(surfObject, x, y, z, data); 
#line 5127
} else { 
#line 5128
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5129
__sust_b_3d_v2i8_zero(surfObject, x, y, z, data); 
#line 5130
}  }  }  
#line 5131
} 
#endif
#line 5133 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5134
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5144
::exit(___);}
#if 0
#line 5134
{ 
#line 5135
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5136
__sust_b_3d_v2i16_trap(surfObject, x, y, z, make_ushort2(data.x, data.y)); 
#line 5137
} else { 
#line 5138
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5139
__sust_b_3d_v2i16_clamp(surfObject, x, y, z, make_ushort2(data.x, data.y)); 
#line 5140
} else { 
#line 5141
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5142
__sust_b_3d_v2i16_zero(surfObject, x, y, z, make_ushort2(data.x, data.y)); 
#line 5143
}  }  }  
#line 5144
} 
#endif
#line 5146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5147
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5157
::exit(___);}
#if 0
#line 5147
{ 
#line 5148
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5149
__sust_b_3d_v2i16_trap(surfObject, x, y, z, data); 
#line 5150
} else { 
#line 5151
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5152
__sust_b_3d_v2i16_clamp(surfObject, x, y, z, data); 
#line 5153
} else { 
#line 5154
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5155
__sust_b_3d_v2i16_zero(surfObject, x, y, z, data); 
#line 5156
}  }  }  
#line 5157
} 
#endif
#line 5159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5160
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5170
::exit(___);}
#if 0
#line 5160
{ 
#line 5161
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5162
__sust_b_3d_v2i32_trap(surfObject, x, y, z, make_uint2(data.x, data.y)); 
#line 5163
} else { 
#line 5164
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5165
__sust_b_3d_v2i32_clamp(surfObject, x, y, z, make_uint2(data.x, data.y)); 
#line 5166
} else { 
#line 5167
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5168
__sust_b_3d_v2i32_zero(surfObject, x, y, z, make_uint2(data.x, data.y)); 
#line 5169
}  }  }  
#line 5170
} 
#endif
#line 5172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5173
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5183
::exit(___);}
#if 0
#line 5173
{ 
#line 5174
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5175
__sust_b_3d_v2i32_trap(surfObject, x, y, z, data); 
#line 5176
} else { 
#line 5177
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5178
__sust_b_3d_v2i32_clamp(surfObject, x, y, z, data); 
#line 5179
} else { 
#line 5180
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5181
__sust_b_3d_v2i32_zero(surfObject, x, y, z, data); 
#line 5182
}  }  }  
#line 5183
} 
#endif
#line 5185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5186
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5196
::exit(___);}
#if 0
#line 5186
{ 
#line 5187
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5188
__sust_b_3d_v2i64_trap(surfObject, x, y, z, make_ulonglong2(data.x, data.y)); 
#line 5189
} else { 
#line 5190
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5191
__sust_b_3d_v2i64_clamp(surfObject, x, y, z, make_ulonglong2(data.x, data.y)); 
#line 5192
} else { 
#line 5193
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5194
__sust_b_3d_v2i64_zero(surfObject, x, y, z, make_ulonglong2(data.x, data.y)); 
#line 5195
}  }  }  
#line 5196
} 
#endif
#line 5198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5199
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5209
::exit(___);}
#if 0
#line 5199
{ 
#line 5200
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5201
__sust_b_3d_v2i64_trap(surfObject, x, y, z, data); 
#line 5202
} else { 
#line 5203
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5204
__sust_b_3d_v2i64_clamp(surfObject, x, y, z, data); 
#line 5205
} else { 
#line 5206
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5207
__sust_b_3d_v2i64_zero(surfObject, x, y, z, data); 
#line 5208
}  }  }  
#line 5209
} 
#endif
#line 5211 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5212
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5225
::exit(___);}
#if 0
#line 5212
{ 
#line 5213
union { float2 f; uint2 i; } cvt; 
#line 5214
(cvt.f) = data; 
#line 5216
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5217
__sust_b_3d_v2i32_trap(surfObject, x, y, z, cvt.i); 
#line 5218
} else { 
#line 5219
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5220
__sust_b_3d_v2i32_clamp(surfObject, x, y, z, cvt.i); 
#line 5221
} else { 
#line 5222
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5223
__sust_b_3d_v2i32_zero(surfObject, x, y, z, cvt.i); 
#line 5224
}  }  }  
#line 5225
} 
#endif
#line 5233 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5234
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5244
::exit(___);}
#if 0
#line 5234
{ 
#line 5235
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5236
__sust_b_3d_v4i8_trap(surfObject, x, y, z, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 5237
} else { 
#line 5238
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5239
__sust_b_3d_v4i8_clamp(surfObject, x, y, z, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 5240
} else { 
#line 5241
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5242
__sust_b_3d_v4i8_zero(surfObject, x, y, z, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 5243
}  }  }  
#line 5244
} 
#endif
#line 5246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5247
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5257
::exit(___);}
#if 0
#line 5247
{ 
#line 5248
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5249
__sust_b_3d_v4i8_trap(surfObject, x, y, z, data); 
#line 5250
} else { 
#line 5251
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5252
__sust_b_3d_v4i8_clamp(surfObject, x, y, z, data); 
#line 5253
} else { 
#line 5254
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5255
__sust_b_3d_v4i8_zero(surfObject, x, y, z, data); 
#line 5256
}  }  }  
#line 5257
} 
#endif
#line 5259 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5260
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5270
::exit(___);}
#if 0
#line 5260
{ 
#line 5261
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5262
__sust_b_3d_v4i16_trap(surfObject, x, y, z, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 5263
} else { 
#line 5264
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5265
__sust_b_3d_v4i16_clamp(surfObject, x, y, z, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 5266
} else { 
#line 5267
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5268
__sust_b_3d_v4i16_zero(surfObject, x, y, z, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 5269
}  }  }  
#line 5270
} 
#endif
#line 5272 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5273
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5283
::exit(___);}
#if 0
#line 5273
{ 
#line 5274
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5275
__sust_b_3d_v4i16_trap(surfObject, x, y, z, data); 
#line 5276
} else { 
#line 5277
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5278
__sust_b_3d_v4i16_clamp(surfObject, x, y, z, data); 
#line 5279
} else { 
#line 5280
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5281
__sust_b_3d_v4i16_zero(surfObject, x, y, z, data); 
#line 5282
}  }  }  
#line 5283
} 
#endif
#line 5285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5286
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5296
::exit(___);}
#if 0
#line 5286
{ 
#line 5287
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5288
__sust_b_3d_v4i32_trap(surfObject, x, y, z, make_uint4(data.x, data.y, data.z, data.w)); 
#line 5289
} else { 
#line 5290
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5291
__sust_b_3d_v4i32_clamp(surfObject, x, y, z, make_uint4(data.x, data.y, data.z, data.w)); 
#line 5292
} else { 
#line 5293
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5294
__sust_b_3d_v4i32_zero(surfObject, x, y, z, make_uint4(data.x, data.y, data.z, data.w)); 
#line 5295
}  }  }  
#line 5296
} 
#endif
#line 5298 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5299
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5309
::exit(___);}
#if 0
#line 5299
{ 
#line 5300
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5301
__sust_b_3d_v4i32_trap(surfObject, x, y, z, data); 
#line 5302
} else { 
#line 5303
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5304
__sust_b_3d_v4i32_clamp(surfObject, x, y, z, data); 
#line 5305
} else { 
#line 5306
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5307
__sust_b_3d_v4i32_zero(surfObject, x, y, z, data); 
#line 5308
}  }  }  
#line 5309
} 
#endif
#line 5311 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf3Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode) 
#line 5312
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)boundaryMode;
#line 5325
::exit(___);}
#if 0
#line 5312
{ 
#line 5313
union { float4 f; uint4 i; } cvt; 
#line 5314
(cvt.f) = data; 
#line 5316
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5317
__sust_b_3d_v4i32_trap(surfObject, x, y, z, cvt.i); 
#line 5318
} else { 
#line 5319
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5320
__sust_b_3d_v4i32_clamp(surfObject, x, y, z, cvt.i); 
#line 5321
} else { 
#line 5322
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5323
__sust_b_3d_v4i32_zero(surfObject, x, y, z, cvt.i); 
#line 5324
}  }  }  
#line 5325
} 
#endif
#line 5333 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5334
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5344
::exit(___);}
#if 0
#line 5334
{ 
#line 5335
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5336
__sust_b_1d_array_i8_trap(surfObject, layer, x, data); 
#line 5337
} else { 
#line 5338
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5339
__sust_b_1d_array_i8_clamp(surfObject, layer, x, data); 
#line 5340
} else { 
#line 5341
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5342
__sust_b_1d_array_i8_zero(surfObject, layer, x, data); 
#line 5343
}  }  }  
#line 5344
} 
#endif
#line 5346 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5347
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5357
::exit(___);}
#if 0
#line 5347
{ 
#line 5348
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5349
__sust_b_1d_array_i8_trap(surfObject, layer, x, data); 
#line 5350
} else { 
#line 5351
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5352
__sust_b_1d_array_i8_clamp(surfObject, layer, x, data); 
#line 5353
} else { 
#line 5354
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5355
__sust_b_1d_array_i8_zero(surfObject, layer, x, data); 
#line 5356
}  }  }  
#line 5357
} 
#endif
#line 5359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5360
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5370
::exit(___);}
#if 0
#line 5360
{ 
#line 5361
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5362
__sust_b_1d_array_i8_trap(surfObject, layer, x, data.x); 
#line 5363
} else { 
#line 5364
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5365
__sust_b_1d_array_i8_clamp(surfObject, layer, x, data.x); 
#line 5366
} else { 
#line 5367
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5368
__sust_b_1d_array_i8_zero(surfObject, layer, x, data.x); 
#line 5369
}  }  }  
#line 5370
} 
#endif
#line 5372 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5373
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5383
::exit(___);}
#if 0
#line 5373
{ 
#line 5374
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5375
__sust_b_1d_array_i8_trap(surfObject, layer, x, data); 
#line 5376
} else { 
#line 5377
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5378
__sust_b_1d_array_i8_clamp(surfObject, layer, x, data); 
#line 5379
} else { 
#line 5380
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5381
__sust_b_1d_array_i8_zero(surfObject, layer, x, data); 
#line 5382
}  }  }  
#line 5383
} 
#endif
#line 5385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5386
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5396
::exit(___);}
#if 0
#line 5386
{ 
#line 5387
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5388
__sust_b_1d_array_i8_trap(surfObject, layer, x, data.x); 
#line 5389
} else { 
#line 5390
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5391
__sust_b_1d_array_i8_clamp(surfObject, layer, x, data.x); 
#line 5392
} else { 
#line 5393
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5394
__sust_b_1d_array_i8_zero(surfObject, layer, x, data.x); 
#line 5395
}  }  }  
#line 5396
} 
#endif
#line 5398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5399
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5409
::exit(___);}
#if 0
#line 5399
{ 
#line 5400
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5401
__sust_b_1d_array_i16_trap(surfObject, layer, x, data); 
#line 5402
} else { 
#line 5403
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5404
__sust_b_1d_array_i16_clamp(surfObject, layer, x, data); 
#line 5405
} else { 
#line 5406
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5407
__sust_b_1d_array_i16_zero(surfObject, layer, x, data); 
#line 5408
}  }  }  
#line 5409
} 
#endif
#line 5411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5412
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5422
::exit(___);}
#if 0
#line 5412
{ 
#line 5413
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5414
__sust_b_1d_array_i16_trap(surfObject, layer, x, data.x); 
#line 5415
} else { 
#line 5416
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5417
__sust_b_1d_array_i16_clamp(surfObject, layer, x, data.x); 
#line 5418
} else { 
#line 5419
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5420
__sust_b_1d_array_i16_zero(surfObject, layer, x, data.x); 
#line 5421
}  }  }  
#line 5422
} 
#endif
#line 5424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5425
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5435
::exit(___);}
#if 0
#line 5425
{ 
#line 5426
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5427
__sust_b_1d_array_i16_trap(surfObject, layer, x, data); 
#line 5428
} else { 
#line 5429
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5430
__sust_b_1d_array_i16_clamp(surfObject, layer, x, data); 
#line 5431
} else { 
#line 5432
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5433
__sust_b_1d_array_i16_zero(surfObject, layer, x, data); 
#line 5434
}  }  }  
#line 5435
} 
#endif
#line 5437 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5438
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5448
::exit(___);}
#if 0
#line 5438
{ 
#line 5439
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5440
__sust_b_1d_array_i16_trap(surfObject, layer, x, data.x); 
#line 5441
} else { 
#line 5442
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5443
__sust_b_1d_array_i16_clamp(surfObject, layer, x, data.x); 
#line 5444
} else { 
#line 5445
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5446
__sust_b_1d_array_i16_zero(surfObject, layer, x, data.x); 
#line 5447
}  }  }  
#line 5448
} 
#endif
#line 5450 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5451
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5461
::exit(___);}
#if 0
#line 5451
{ 
#line 5452
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5453
__sust_b_1d_array_i32_trap(surfObject, layer, x, data); 
#line 5454
} else { 
#line 5455
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5456
__sust_b_1d_array_i32_clamp(surfObject, layer, x, data); 
#line 5457
} else { 
#line 5458
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5459
__sust_b_1d_array_i32_zero(surfObject, layer, x, data); 
#line 5460
}  }  }  
#line 5461
} 
#endif
#line 5463 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5464
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5474
::exit(___);}
#if 0
#line 5464
{ 
#line 5465
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5466
__sust_b_1d_array_i32_trap(surfObject, layer, x, data.x); 
#line 5467
} else { 
#line 5468
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5469
__sust_b_1d_array_i32_clamp(surfObject, layer, x, data.x); 
#line 5470
} else { 
#line 5471
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5472
__sust_b_1d_array_i32_zero(surfObject, layer, x, data.x); 
#line 5473
}  }  }  
#line 5474
} 
#endif
#line 5476 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5477
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5487
::exit(___);}
#if 0
#line 5477
{ 
#line 5478
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5479
__sust_b_1d_array_i32_trap(surfObject, layer, x, data); 
#line 5480
} else { 
#line 5481
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5482
__sust_b_1d_array_i32_clamp(surfObject, layer, x, data); 
#line 5483
} else { 
#line 5484
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5485
__sust_b_1d_array_i32_zero(surfObject, layer, x, data); 
#line 5486
}  }  }  
#line 5487
} 
#endif
#line 5489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5490
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5500
::exit(___);}
#if 0
#line 5490
{ 
#line 5491
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5492
__sust_b_1d_array_i32_trap(surfObject, layer, x, data.x); 
#line 5493
} else { 
#line 5494
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5495
__sust_b_1d_array_i32_clamp(surfObject, layer, x, data.x); 
#line 5496
} else { 
#line 5497
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5498
__sust_b_1d_array_i32_zero(surfObject, layer, x, data.x); 
#line 5499
}  }  }  
#line 5500
} 
#endif
#line 5502 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5503
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5513
::exit(___);}
#if 0
#line 5503
{ 
#line 5504
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5505
__sust_b_1d_array_i64_trap(surfObject, layer, x, data); 
#line 5506
} else { 
#line 5507
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5508
__sust_b_1d_array_i64_clamp(surfObject, layer, x, data); 
#line 5509
} else { 
#line 5510
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5511
__sust_b_1d_array_i64_zero(surfObject, layer, x, data); 
#line 5512
}  }  }  
#line 5513
} 
#endif
#line 5515 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5516
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5526
::exit(___);}
#if 0
#line 5516
{ 
#line 5517
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5518
__sust_b_1d_array_i64_trap(surfObject, layer, x, data.x); 
#line 5519
} else { 
#line 5520
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5521
__sust_b_1d_array_i64_clamp(surfObject, layer, x, data.x); 
#line 5522
} else { 
#line 5523
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5524
__sust_b_1d_array_i64_zero(surfObject, layer, x, data.x); 
#line 5525
}  }  }  
#line 5526
} 
#endif
#line 5528 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5529
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5539
::exit(___);}
#if 0
#line 5529
{ 
#line 5530
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5531
__sust_b_1d_array_i64_trap(surfObject, layer, x, data); 
#line 5532
} else { 
#line 5533
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5534
__sust_b_1d_array_i64_clamp(surfObject, layer, x, data); 
#line 5535
} else { 
#line 5536
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5537
__sust_b_1d_array_i64_zero(surfObject, layer, x, data); 
#line 5538
}  }  }  
#line 5539
} 
#endif
#line 5541 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5542
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5552
::exit(___);}
#if 0
#line 5542
{ 
#line 5543
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5544
__sust_b_1d_array_i64_trap(surfObject, layer, x, data.x); 
#line 5545
} else { 
#line 5546
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5547
__sust_b_1d_array_i64_clamp(surfObject, layer, x, data.x); 
#line 5548
} else { 
#line 5549
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5550
__sust_b_1d_array_i64_zero(surfObject, layer, x, data.x); 
#line 5551
}  }  }  
#line 5552
} 
#endif
#line 5554 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5555
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5568
::exit(___);}
#if 0
#line 5555
{ 
#line 5556
union { float f; unsigned i; } cvt; 
#line 5557
(cvt.f) = data; 
#line 5559
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5560
__sust_b_1d_array_i32_trap(surfObject, layer, x, cvt.i); 
#line 5561
} else { 
#line 5562
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5563
__sust_b_1d_array_i32_clamp(surfObject, layer, x, cvt.i); 
#line 5564
} else { 
#line 5565
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5566
__sust_b_1d_array_i32_zero(surfObject, layer, x, cvt.i); 
#line 5567
}  }  }  
#line 5568
} 
#endif
#line 5570 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5571
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5584
::exit(___);}
#if 0
#line 5571
{ 
#line 5572
union { float f; unsigned i; } cvt; 
#line 5573
(cvt.f) = (data.x); 
#line 5575
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5576
__sust_b_1d_array_i32_trap(surfObject, layer, x, cvt.i); 
#line 5577
} else { 
#line 5578
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5579
__sust_b_1d_array_i32_clamp(surfObject, layer, x, cvt.i); 
#line 5580
} else { 
#line 5581
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5582
__sust_b_1d_array_i32_zero(surfObject, layer, x, cvt.i); 
#line 5583
}  }  }  
#line 5584
} 
#endif
#line 5592 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5593
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5603
::exit(___);}
#if 0
#line 5593
{ 
#line 5594
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5595
__sust_b_1d_array_v2i8_trap(surfObject, layer, x, make_uchar2(data.x, data.y)); 
#line 5596
} else { 
#line 5597
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5598
__sust_b_1d_array_v2i8_clamp(surfObject, layer, x, make_uchar2(data.x, data.y)); 
#line 5599
} else { 
#line 5600
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5601
__sust_b_1d_array_v2i8_zero(surfObject, layer, x, make_uchar2(data.x, data.y)); 
#line 5602
}  }  }  
#line 5603
} 
#endif
#line 5605 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5606
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5616
::exit(___);}
#if 0
#line 5606
{ 
#line 5607
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5608
__sust_b_1d_array_v2i8_trap(surfObject, layer, x, data); 
#line 5609
} else { 
#line 5610
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5611
__sust_b_1d_array_v2i8_clamp(surfObject, layer, x, data); 
#line 5612
} else { 
#line 5613
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5614
__sust_b_1d_array_v2i8_zero(surfObject, layer, x, data); 
#line 5615
}  }  }  
#line 5616
} 
#endif
#line 5618 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5619
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5629
::exit(___);}
#if 0
#line 5619
{ 
#line 5620
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5621
__sust_b_1d_array_v2i16_trap(surfObject, layer, x, make_ushort2(data.x, data.y)); 
#line 5622
} else { 
#line 5623
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5624
__sust_b_1d_array_v2i16_clamp(surfObject, layer, x, make_ushort2(data.x, data.y)); 
#line 5625
} else { 
#line 5626
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5627
__sust_b_1d_array_v2i16_zero(surfObject, layer, x, make_ushort2(data.x, data.y)); 
#line 5628
}  }  }  
#line 5629
} 
#endif
#line 5631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5632
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5642
::exit(___);}
#if 0
#line 5632
{ 
#line 5633
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5634
__sust_b_1d_array_v2i16_trap(surfObject, layer, x, data); 
#line 5635
} else { 
#line 5636
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5637
__sust_b_1d_array_v2i16_clamp(surfObject, layer, x, data); 
#line 5638
} else { 
#line 5639
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5640
__sust_b_1d_array_v2i16_zero(surfObject, layer, x, data); 
#line 5641
}  }  }  
#line 5642
} 
#endif
#line 5644 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5645
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5655
::exit(___);}
#if 0
#line 5645
{ 
#line 5646
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5647
__sust_b_1d_array_v2i32_trap(surfObject, layer, x, make_uint2(data.x, data.y)); 
#line 5648
} else { 
#line 5649
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5650
__sust_b_1d_array_v2i32_clamp(surfObject, layer, x, make_uint2(data.x, data.y)); 
#line 5651
} else { 
#line 5652
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5653
__sust_b_1d_array_v2i32_zero(surfObject, layer, x, make_uint2(data.x, data.y)); 
#line 5654
}  }  }  
#line 5655
} 
#endif
#line 5657 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5658
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5668
::exit(___);}
#if 0
#line 5658
{ 
#line 5659
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5660
__sust_b_1d_array_v2i32_trap(surfObject, layer, x, data); 
#line 5661
} else { 
#line 5662
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5663
__sust_b_1d_array_v2i32_clamp(surfObject, layer, x, data); 
#line 5664
} else { 
#line 5665
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5666
__sust_b_1d_array_v2i32_zero(surfObject, layer, x, data); 
#line 5667
}  }  }  
#line 5668
} 
#endif
#line 5670 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5671
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5681
::exit(___);}
#if 0
#line 5671
{ 
#line 5672
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5673
__sust_b_1d_array_v2i64_trap(surfObject, layer, x, make_ulonglong2(data.x, data.y)); 
#line 5674
} else { 
#line 5675
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5676
__sust_b_1d_array_v2i64_clamp(surfObject, layer, x, make_ulonglong2(data.x, data.y)); 
#line 5677
} else { 
#line 5678
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5679
__sust_b_1d_array_v2i64_zero(surfObject, layer, x, make_ulonglong2(data.x, data.y)); 
#line 5680
}  }  }  
#line 5681
} 
#endif
#line 5683 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5684
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5694
::exit(___);}
#if 0
#line 5684
{ 
#line 5685
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5686
__sust_b_1d_array_v2i64_trap(surfObject, layer, x, data); 
#line 5687
} else { 
#line 5688
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5689
__sust_b_1d_array_v2i64_clamp(surfObject, layer, x, data); 
#line 5690
} else { 
#line 5691
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5692
__sust_b_1d_array_v2i64_zero(surfObject, layer, x, data); 
#line 5693
}  }  }  
#line 5694
} 
#endif
#line 5696 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5697
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5710
::exit(___);}
#if 0
#line 5697
{ 
#line 5698
union { float2 f; uint2 i; } cvt; 
#line 5699
(cvt.f) = data; 
#line 5701
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5702
__sust_b_1d_array_v2i32_trap(surfObject, layer, x, cvt.i); 
#line 5703
} else { 
#line 5704
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5705
__sust_b_1d_array_v2i32_clamp(surfObject, layer, x, cvt.i); 
#line 5706
} else { 
#line 5707
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5708
__sust_b_1d_array_v2i32_zero(surfObject, layer, x, cvt.i); 
#line 5709
}  }  }  
#line 5710
} 
#endif
#line 5718 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5719
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5729
::exit(___);}
#if 0
#line 5719
{ 
#line 5720
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5721
__sust_b_1d_array_v4i8_trap(surfObject, layer, x, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 5722
} else { 
#line 5723
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5724
__sust_b_1d_array_v4i8_clamp(surfObject, layer, x, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 5725
} else { 
#line 5726
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5727
__sust_b_1d_array_v4i8_zero(surfObject, layer, x, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 5728
}  }  }  
#line 5729
} 
#endif
#line 5731 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5732
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5742
::exit(___);}
#if 0
#line 5732
{ 
#line 5733
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5734
__sust_b_1d_array_v4i8_trap(surfObject, layer, x, data); 
#line 5735
} else { 
#line 5736
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5737
__sust_b_1d_array_v4i8_clamp(surfObject, layer, x, data); 
#line 5738
} else { 
#line 5739
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5740
__sust_b_1d_array_v4i8_zero(surfObject, layer, x, data); 
#line 5741
}  }  }  
#line 5742
} 
#endif
#line 5744 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5745
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5755
::exit(___);}
#if 0
#line 5745
{ 
#line 5746
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5747
__sust_b_1d_array_v4i16_trap(surfObject, layer, x, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 5748
} else { 
#line 5749
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5750
__sust_b_1d_array_v4i16_clamp(surfObject, layer, x, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 5751
} else { 
#line 5752
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5753
__sust_b_1d_array_v4i16_zero(surfObject, layer, x, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 5754
}  }  }  
#line 5755
} 
#endif
#line 5757 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5758
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5768
::exit(___);}
#if 0
#line 5758
{ 
#line 5759
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5760
__sust_b_1d_array_v4i16_trap(surfObject, layer, x, data); 
#line 5761
} else { 
#line 5762
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5763
__sust_b_1d_array_v4i16_clamp(surfObject, layer, x, data); 
#line 5764
} else { 
#line 5765
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5766
__sust_b_1d_array_v4i16_zero(surfObject, layer, x, data); 
#line 5767
}  }  }  
#line 5768
} 
#endif
#line 5770 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5771
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5781
::exit(___);}
#if 0
#line 5771
{ 
#line 5772
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5773
__sust_b_1d_array_v4i32_trap(surfObject, layer, x, make_uint4(data.x, data.y, data.z, data.w)); 
#line 5774
} else { 
#line 5775
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5776
__sust_b_1d_array_v4i32_clamp(surfObject, layer, x, make_uint4(data.x, data.y, data.z, data.w)); 
#line 5777
} else { 
#line 5778
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5779
__sust_b_1d_array_v4i32_zero(surfObject, layer, x, make_uint4(data.x, data.y, data.z, data.w)); 
#line 5780
}  }  }  
#line 5781
} 
#endif
#line 5783 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5784
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5794
::exit(___);}
#if 0
#line 5784
{ 
#line 5785
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5786
__sust_b_1d_array_v4i32_trap(surfObject, layer, x, data); 
#line 5787
} else { 
#line 5788
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5789
__sust_b_1d_array_v4i32_clamp(surfObject, layer, x, data); 
#line 5790
} else { 
#line 5791
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5792
__sust_b_1d_array_v4i32_zero(surfObject, layer, x, data); 
#line 5793
}  }  }  
#line 5794
} 
#endif
#line 5796 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf1DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5797
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)layer;(void)boundaryMode;
#line 5810
::exit(___);}
#if 0
#line 5797
{ 
#line 5798
union { float4 f; uint4 i; } cvt; 
#line 5799
(cvt.f) = data; 
#line 5801
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5802
__sust_b_1d_array_v4i32_trap(surfObject, layer, x, cvt.i); 
#line 5803
} else { 
#line 5804
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5805
__sust_b_1d_array_v4i32_clamp(surfObject, layer, x, cvt.i); 
#line 5806
} else { 
#line 5807
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5808
__sust_b_1d_array_v4i32_zero(surfObject, layer, x, cvt.i); 
#line 5809
}  }  }  
#line 5810
} 
#endif
#line 5818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5819
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5829
::exit(___);}
#if 0
#line 5819
{ 
#line 5820
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5821
__sust_b_2d_array_i8_trap(surfObject, layer, x, y, data); 
#line 5822
} else { 
#line 5823
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5824
__sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data); 
#line 5825
} else { 
#line 5826
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5827
__sust_b_2d_array_i8_zero(surfObject, layer, x, y, data); 
#line 5828
}  }  }  
#line 5829
} 
#endif
#line 5831 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5832
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5842
::exit(___);}
#if 0
#line 5832
{ 
#line 5833
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5834
__sust_b_2d_array_i8_trap(surfObject, layer, x, y, data); 
#line 5835
} else { 
#line 5836
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5837
__sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data); 
#line 5838
} else { 
#line 5839
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5840
__sust_b_2d_array_i8_zero(surfObject, layer, x, y, data); 
#line 5841
}  }  }  
#line 5842
} 
#endif
#line 5844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5845
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5855
::exit(___);}
#if 0
#line 5845
{ 
#line 5846
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5847
__sust_b_2d_array_i8_trap(surfObject, layer, x, y, data.x); 
#line 5848
} else { 
#line 5849
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5850
__sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data.x); 
#line 5851
} else { 
#line 5852
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5853
__sust_b_2d_array_i8_zero(surfObject, layer, x, y, data.x); 
#line 5854
}  }  }  
#line 5855
} 
#endif
#line 5857 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5858
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5868
::exit(___);}
#if 0
#line 5858
{ 
#line 5859
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5860
__sust_b_2d_array_i8_trap(surfObject, layer, x, y, data); 
#line 5861
} else { 
#line 5862
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5863
__sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data); 
#line 5864
} else { 
#line 5865
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5866
__sust_b_2d_array_i8_zero(surfObject, layer, x, y, data); 
#line 5867
}  }  }  
#line 5868
} 
#endif
#line 5870 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5871
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5881
::exit(___);}
#if 0
#line 5871
{ 
#line 5872
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5873
__sust_b_2d_array_i8_trap(surfObject, layer, x, y, data.x); 
#line 5874
} else { 
#line 5875
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5876
__sust_b_2d_array_i8_clamp(surfObject, layer, x, y, data.x); 
#line 5877
} else { 
#line 5878
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5879
__sust_b_2d_array_i8_zero(surfObject, layer, x, y, data.x); 
#line 5880
}  }  }  
#line 5881
} 
#endif
#line 5883 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5884
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5894
::exit(___);}
#if 0
#line 5884
{ 
#line 5885
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5886
__sust_b_2d_array_i16_trap(surfObject, layer, x, y, data); 
#line 5887
} else { 
#line 5888
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5889
__sust_b_2d_array_i16_clamp(surfObject, layer, x, y, data); 
#line 5890
} else { 
#line 5891
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5892
__sust_b_2d_array_i16_zero(surfObject, layer, x, y, data); 
#line 5893
}  }  }  
#line 5894
} 
#endif
#line 5896 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5897
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5907
::exit(___);}
#if 0
#line 5897
{ 
#line 5898
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5899
__sust_b_2d_array_i16_trap(surfObject, layer, x, y, data.x); 
#line 5900
} else { 
#line 5901
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5902
__sust_b_2d_array_i16_clamp(surfObject, layer, x, y, data.x); 
#line 5903
} else { 
#line 5904
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5905
__sust_b_2d_array_i16_zero(surfObject, layer, x, y, data.x); 
#line 5906
}  }  }  
#line 5907
} 
#endif
#line 5909 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5910
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5920
::exit(___);}
#if 0
#line 5910
{ 
#line 5911
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5912
__sust_b_2d_array_i16_trap(surfObject, layer, x, y, data); 
#line 5913
} else { 
#line 5914
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5915
__sust_b_2d_array_i16_clamp(surfObject, layer, x, y, data); 
#line 5916
} else { 
#line 5917
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5918
__sust_b_2d_array_i16_zero(surfObject, layer, x, y, data); 
#line 5919
}  }  }  
#line 5920
} 
#endif
#line 5922 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5923
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5933
::exit(___);}
#if 0
#line 5923
{ 
#line 5924
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5925
__sust_b_2d_array_i16_trap(surfObject, layer, x, y, data.x); 
#line 5926
} else { 
#line 5927
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5928
__sust_b_2d_array_i16_clamp(surfObject, layer, x, y, data.x); 
#line 5929
} else { 
#line 5930
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5931
__sust_b_2d_array_i16_zero(surfObject, layer, x, y, data.x); 
#line 5932
}  }  }  
#line 5933
} 
#endif
#line 5935 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5936
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5946
::exit(___);}
#if 0
#line 5936
{ 
#line 5937
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5938
__sust_b_2d_array_i32_trap(surfObject, layer, x, y, data); 
#line 5939
} else { 
#line 5940
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5941
__sust_b_2d_array_i32_clamp(surfObject, layer, x, y, data); 
#line 5942
} else { 
#line 5943
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5944
__sust_b_2d_array_i32_zero(surfObject, layer, x, y, data); 
#line 5945
}  }  }  
#line 5946
} 
#endif
#line 5948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5949
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5959
::exit(___);}
#if 0
#line 5949
{ 
#line 5950
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5951
__sust_b_2d_array_i32_trap(surfObject, layer, x, y, data.x); 
#line 5952
} else { 
#line 5953
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5954
__sust_b_2d_array_i32_clamp(surfObject, layer, x, y, data.x); 
#line 5955
} else { 
#line 5956
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5957
__sust_b_2d_array_i32_zero(surfObject, layer, x, y, data.x); 
#line 5958
}  }  }  
#line 5959
} 
#endif
#line 5961 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5962
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5972
::exit(___);}
#if 0
#line 5962
{ 
#line 5963
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5964
__sust_b_2d_array_i32_trap(surfObject, layer, x, y, data); 
#line 5965
} else { 
#line 5966
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5967
__sust_b_2d_array_i32_clamp(surfObject, layer, x, y, data); 
#line 5968
} else { 
#line 5969
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5970
__sust_b_2d_array_i32_zero(surfObject, layer, x, y, data); 
#line 5971
}  }  }  
#line 5972
} 
#endif
#line 5974 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5975
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5985
::exit(___);}
#if 0
#line 5975
{ 
#line 5976
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5977
__sust_b_2d_array_i32_trap(surfObject, layer, x, y, data.x); 
#line 5978
} else { 
#line 5979
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5980
__sust_b_2d_array_i32_clamp(surfObject, layer, x, y, data.x); 
#line 5981
} else { 
#line 5982
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5983
__sust_b_2d_array_i32_zero(surfObject, layer, x, y, data.x); 
#line 5984
}  }  }  
#line 5985
} 
#endif
#line 5987 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 5988
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 5998
::exit(___);}
#if 0
#line 5988
{ 
#line 5989
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 5990
__sust_b_2d_array_i64_trap(surfObject, layer, x, y, data); 
#line 5991
} else { 
#line 5992
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 5993
__sust_b_2d_array_i64_clamp(surfObject, layer, x, y, data); 
#line 5994
} else { 
#line 5995
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 5996
__sust_b_2d_array_i64_zero(surfObject, layer, x, y, data); 
#line 5997
}  }  }  
#line 5998
} 
#endif
#line 6000 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6001
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6011
::exit(___);}
#if 0
#line 6001
{ 
#line 6002
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6003
__sust_b_2d_array_i64_trap(surfObject, layer, x, y, data.x); 
#line 6004
} else { 
#line 6005
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6006
__sust_b_2d_array_i64_clamp(surfObject, layer, x, y, data.x); 
#line 6007
} else { 
#line 6008
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6009
__sust_b_2d_array_i64_zero(surfObject, layer, x, y, data.x); 
#line 6010
}  }  }  
#line 6011
} 
#endif
#line 6013 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6014
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6024
::exit(___);}
#if 0
#line 6014
{ 
#line 6015
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6016
__sust_b_2d_array_i64_trap(surfObject, layer, x, y, data); 
#line 6017
} else { 
#line 6018
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6019
__sust_b_2d_array_i64_clamp(surfObject, layer, x, y, data); 
#line 6020
} else { 
#line 6021
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6022
__sust_b_2d_array_i64_zero(surfObject, layer, x, y, data); 
#line 6023
}  }  }  
#line 6024
} 
#endif
#line 6026 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6027
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6037
::exit(___);}
#if 0
#line 6027
{ 
#line 6028
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6029
__sust_b_2d_array_i64_trap(surfObject, layer, x, y, data.x); 
#line 6030
} else { 
#line 6031
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6032
__sust_b_2d_array_i64_clamp(surfObject, layer, x, y, data.x); 
#line 6033
} else { 
#line 6034
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6035
__sust_b_2d_array_i64_zero(surfObject, layer, x, y, data.x); 
#line 6036
}  }  }  
#line 6037
} 
#endif
#line 6039 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6040
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6053
::exit(___);}
#if 0
#line 6040
{ 
#line 6041
union { float f; unsigned i; } cvt; 
#line 6042
(cvt.f) = data; 
#line 6044
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6045
__sust_b_2d_array_i32_trap(surfObject, layer, x, y, cvt.i); 
#line 6046
} else { 
#line 6047
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6048
__sust_b_2d_array_i32_clamp(surfObject, layer, x, y, cvt.i); 
#line 6049
} else { 
#line 6050
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6051
__sust_b_2d_array_i32_zero(surfObject, layer, x, y, cvt.i); 
#line 6052
}  }  }  
#line 6053
} 
#endif
#line 6055 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6056
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6069
::exit(___);}
#if 0
#line 6056
{ 
#line 6057
union { float f; unsigned i; } cvt; 
#line 6058
(cvt.f) = (data.x); 
#line 6060
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6061
__sust_b_2d_array_i32_trap(surfObject, layer, x, y, cvt.i); 
#line 6062
} else { 
#line 6063
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6064
__sust_b_2d_array_i32_clamp(surfObject, layer, x, y, cvt.i); 
#line 6065
} else { 
#line 6066
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6067
__sust_b_2d_array_i32_zero(surfObject, layer, x, y, cvt.i); 
#line 6068
}  }  }  
#line 6069
} 
#endif
#line 6077 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6078
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6088
::exit(___);}
#if 0
#line 6078
{ 
#line 6079
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6080
__sust_b_2d_array_v2i8_trap(surfObject, layer, x, y, make_uchar2(data.x, data.y)); 
#line 6081
} else { 
#line 6082
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6083
__sust_b_2d_array_v2i8_clamp(surfObject, layer, x, y, make_uchar2(data.x, data.y)); 
#line 6084
} else { 
#line 6085
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6086
__sust_b_2d_array_v2i8_zero(surfObject, layer, x, y, make_uchar2(data.x, data.y)); 
#line 6087
}  }  }  
#line 6088
} 
#endif
#line 6090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6091
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6101
::exit(___);}
#if 0
#line 6091
{ 
#line 6092
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6093
__sust_b_2d_array_v2i8_trap(surfObject, layer, x, y, data); 
#line 6094
} else { 
#line 6095
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6096
__sust_b_2d_array_v2i8_clamp(surfObject, layer, x, y, data); 
#line 6097
} else { 
#line 6098
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6099
__sust_b_2d_array_v2i8_zero(surfObject, layer, x, y, data); 
#line 6100
}  }  }  
#line 6101
} 
#endif
#line 6103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6104
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6114
::exit(___);}
#if 0
#line 6104
{ 
#line 6105
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6106
__sust_b_2d_array_v2i16_trap(surfObject, layer, x, y, make_ushort2(data.x, data.y)); 
#line 6107
} else { 
#line 6108
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6109
__sust_b_2d_array_v2i16_clamp(surfObject, layer, x, y, make_ushort2(data.x, data.y)); 
#line 6110
} else { 
#line 6111
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6112
__sust_b_2d_array_v2i16_zero(surfObject, layer, x, y, make_ushort2(data.x, data.y)); 
#line 6113
}  }  }  
#line 6114
} 
#endif
#line 6116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6117
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6127
::exit(___);}
#if 0
#line 6117
{ 
#line 6118
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6119
__sust_b_2d_array_v2i16_trap(surfObject, layer, x, y, data); 
#line 6120
} else { 
#line 6121
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6122
__sust_b_2d_array_v2i16_clamp(surfObject, layer, x, y, data); 
#line 6123
} else { 
#line 6124
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6125
__sust_b_2d_array_v2i16_zero(surfObject, layer, x, y, data); 
#line 6126
}  }  }  
#line 6127
} 
#endif
#line 6129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6130
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6140
::exit(___);}
#if 0
#line 6130
{ 
#line 6131
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6132
__sust_b_2d_array_v2i32_trap(surfObject, layer, x, y, make_uint2(data.x, data.y)); 
#line 6133
} else { 
#line 6134
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6135
__sust_b_2d_array_v2i32_clamp(surfObject, layer, x, y, make_uint2(data.x, data.y)); 
#line 6136
} else { 
#line 6137
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6138
__sust_b_2d_array_v2i32_zero(surfObject, layer, x, y, make_uint2(data.x, data.y)); 
#line 6139
}  }  }  
#line 6140
} 
#endif
#line 6142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6143
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6153
::exit(___);}
#if 0
#line 6143
{ 
#line 6144
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6145
__sust_b_2d_array_v2i32_trap(surfObject, layer, x, y, data); 
#line 6146
} else { 
#line 6147
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6148
__sust_b_2d_array_v2i32_clamp(surfObject, layer, x, y, data); 
#line 6149
} else { 
#line 6150
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6151
__sust_b_2d_array_v2i32_zero(surfObject, layer, x, y, data); 
#line 6152
}  }  }  
#line 6153
} 
#endif
#line 6155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6156
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6166
::exit(___);}
#if 0
#line 6156
{ 
#line 6157
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6158
__sust_b_2d_array_v2i64_trap(surfObject, layer, x, y, make_ulonglong2(data.x, data.y)); 
#line 6159
} else { 
#line 6160
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6161
__sust_b_2d_array_v2i64_clamp(surfObject, layer, x, y, make_ulonglong2(data.x, data.y)); 
#line 6162
} else { 
#line 6163
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6164
__sust_b_2d_array_v2i64_zero(surfObject, layer, x, y, make_ulonglong2(data.x, data.y)); 
#line 6165
}  }  }  
#line 6166
} 
#endif
#line 6168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6169
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6179
::exit(___);}
#if 0
#line 6169
{ 
#line 6170
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6171
__sust_b_2d_array_v2i64_trap(surfObject, layer, x, y, data); 
#line 6172
} else { 
#line 6173
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6174
__sust_b_2d_array_v2i64_clamp(surfObject, layer, x, y, data); 
#line 6175
} else { 
#line 6176
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6177
__sust_b_2d_array_v2i64_zero(surfObject, layer, x, y, data); 
#line 6178
}  }  }  
#line 6179
} 
#endif
#line 6181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6182
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6195
::exit(___);}
#if 0
#line 6182
{ 
#line 6183
union { float2 f; uint2 i; } cvt; 
#line 6184
(cvt.f) = data; 
#line 6186
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6187
__sust_b_2d_array_v2i32_trap(surfObject, layer, x, y, cvt.i); 
#line 6188
} else { 
#line 6189
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6190
__sust_b_2d_array_v2i32_clamp(surfObject, layer, x, y, cvt.i); 
#line 6191
} else { 
#line 6192
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6193
__sust_b_2d_array_v2i32_zero(surfObject, layer, x, y, cvt.i); 
#line 6194
}  }  }  
#line 6195
} 
#endif
#line 6203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6204
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6214
::exit(___);}
#if 0
#line 6204
{ 
#line 6205
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6206
__sust_b_2d_array_v4i8_trap(surfObject, layer, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 6207
} else { 
#line 6208
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6209
__sust_b_2d_array_v4i8_clamp(surfObject, layer, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 6210
} else { 
#line 6211
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6212
__sust_b_2d_array_v4i8_zero(surfObject, layer, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 6213
}  }  }  
#line 6214
} 
#endif
#line 6216 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6217
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6227
::exit(___);}
#if 0
#line 6217
{ 
#line 6218
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6219
__sust_b_2d_array_v4i8_trap(surfObject, layer, x, y, data); 
#line 6220
} else { 
#line 6221
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6222
__sust_b_2d_array_v4i8_clamp(surfObject, layer, x, y, data); 
#line 6223
} else { 
#line 6224
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6225
__sust_b_2d_array_v4i8_zero(surfObject, layer, x, y, data); 
#line 6226
}  }  }  
#line 6227
} 
#endif
#line 6229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6230
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6240
::exit(___);}
#if 0
#line 6230
{ 
#line 6231
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6232
__sust_b_2d_array_v4i16_trap(surfObject, layer, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 6233
} else { 
#line 6234
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6235
__sust_b_2d_array_v4i16_clamp(surfObject, layer, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 6236
} else { 
#line 6237
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6238
__sust_b_2d_array_v4i16_zero(surfObject, layer, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 6239
}  }  }  
#line 6240
} 
#endif
#line 6242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6243
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6253
::exit(___);}
#if 0
#line 6243
{ 
#line 6244
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6245
__sust_b_2d_array_v4i16_trap(surfObject, layer, x, y, data); 
#line 6246
} else { 
#line 6247
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6248
__sust_b_2d_array_v4i16_clamp(surfObject, layer, x, y, data); 
#line 6249
} else { 
#line 6250
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6251
__sust_b_2d_array_v4i16_zero(surfObject, layer, x, y, data); 
#line 6252
}  }  }  
#line 6253
} 
#endif
#line 6255 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6256
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6266
::exit(___);}
#if 0
#line 6256
{ 
#line 6257
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6258
__sust_b_2d_array_v4i32_trap(surfObject, layer, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
#line 6259
} else { 
#line 6260
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6261
__sust_b_2d_array_v4i32_clamp(surfObject, layer, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
#line 6262
} else { 
#line 6263
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6264
__sust_b_2d_array_v4i32_zero(surfObject, layer, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
#line 6265
}  }  }  
#line 6266
} 
#endif
#line 6268 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6269
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6279
::exit(___);}
#if 0
#line 6269
{ 
#line 6270
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6271
__sust_b_2d_array_v4i32_trap(surfObject, layer, x, y, data); 
#line 6272
} else { 
#line 6273
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6274
__sust_b_2d_array_v4i32_clamp(surfObject, layer, x, y, data); 
#line 6275
} else { 
#line 6276
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6277
__sust_b_2d_array_v4i32_zero(surfObject, layer, x, y, data); 
#line 6278
}  }  }  
#line 6279
} 
#endif
#line 6281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surf2DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode) 
#line 6282
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)layer;(void)boundaryMode;
#line 6295
::exit(___);}
#if 0
#line 6282
{ 
#line 6283
union { float4 f; uint4 i; } cvt; 
#line 6284
(cvt.f) = data; 
#line 6286
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6287
__sust_b_2d_array_v4i32_trap(surfObject, layer, x, y, cvt.i); 
#line 6288
} else { 
#line 6289
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6290
__sust_b_2d_array_v4i32_clamp(surfObject, layer, x, y, cvt.i); 
#line 6291
} else { 
#line 6292
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6293
__sust_b_2d_array_v4i32_zero(surfObject, layer, x, y, cvt.i); 
#line 6294
}  }  }  
#line 6295
} 
#endif
#line 6303 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6304
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6314
::exit(___);}
#if 0
#line 6304
{ 
#line 6305
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6306
__sust_b_2d_array_i8_trap(surfObject, face, x, y, data); 
#line 6307
} else { 
#line 6308
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6309
__sust_b_2d_array_i8_clamp(surfObject, face, x, y, data); 
#line 6310
} else { 
#line 6311
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6312
__sust_b_2d_array_i8_zero(surfObject, face, x, y, data); 
#line 6313
}  }  }  
#line 6314
} 
#endif
#line 6316 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6317
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6327
::exit(___);}
#if 0
#line 6317
{ 
#line 6318
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6319
__sust_b_2d_array_i8_trap(surfObject, face, x, y, data); 
#line 6320
} else { 
#line 6321
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6322
__sust_b_2d_array_i8_clamp(surfObject, face, x, y, data); 
#line 6323
} else { 
#line 6324
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6325
__sust_b_2d_array_i8_zero(surfObject, face, x, y, data); 
#line 6326
}  }  }  
#line 6327
} 
#endif
#line 6329 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6330
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6340
::exit(___);}
#if 0
#line 6330
{ 
#line 6331
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6332
__sust_b_2d_array_i8_trap(surfObject, face, x, y, data.x); 
#line 6333
} else { 
#line 6334
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6335
__sust_b_2d_array_i8_clamp(surfObject, face, x, y, data.x); 
#line 6336
} else { 
#line 6337
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6338
__sust_b_2d_array_i8_zero(surfObject, face, x, y, data.x); 
#line 6339
}  }  }  
#line 6340
} 
#endif
#line 6342 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6343
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6353
::exit(___);}
#if 0
#line 6343
{ 
#line 6344
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6345
__sust_b_2d_array_i8_trap(surfObject, face, x, y, data); 
#line 6346
} else { 
#line 6347
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6348
__sust_b_2d_array_i8_clamp(surfObject, face, x, y, data); 
#line 6349
} else { 
#line 6350
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6351
__sust_b_2d_array_i8_zero(surfObject, face, x, y, data); 
#line 6352
}  }  }  
#line 6353
} 
#endif
#line 6355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6356
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6366
::exit(___);}
#if 0
#line 6356
{ 
#line 6357
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6358
__sust_b_2d_array_i8_trap(surfObject, face, x, y, data.x); 
#line 6359
} else { 
#line 6360
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6361
__sust_b_2d_array_i8_clamp(surfObject, face, x, y, data.x); 
#line 6362
} else { 
#line 6363
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6364
__sust_b_2d_array_i8_zero(surfObject, face, x, y, data.x); 
#line 6365
}  }  }  
#line 6366
} 
#endif
#line 6368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6369
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6379
::exit(___);}
#if 0
#line 6369
{ 
#line 6370
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6371
__sust_b_2d_array_i16_trap(surfObject, face, x, y, data); 
#line 6372
} else { 
#line 6373
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6374
__sust_b_2d_array_i16_clamp(surfObject, face, x, y, data); 
#line 6375
} else { 
#line 6376
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6377
__sust_b_2d_array_i16_zero(surfObject, face, x, y, data); 
#line 6378
}  }  }  
#line 6379
} 
#endif
#line 6381 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6382
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6392
::exit(___);}
#if 0
#line 6382
{ 
#line 6383
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6384
__sust_b_2d_array_i16_trap(surfObject, face, x, y, data.x); 
#line 6385
} else { 
#line 6386
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6387
__sust_b_2d_array_i16_clamp(surfObject, face, x, y, data.x); 
#line 6388
} else { 
#line 6389
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6390
__sust_b_2d_array_i16_zero(surfObject, face, x, y, data.x); 
#line 6391
}  }  }  
#line 6392
} 
#endif
#line 6394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6395
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6405
::exit(___);}
#if 0
#line 6395
{ 
#line 6396
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6397
__sust_b_2d_array_i16_trap(surfObject, face, x, y, data); 
#line 6398
} else { 
#line 6399
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6400
__sust_b_2d_array_i16_clamp(surfObject, face, x, y, data); 
#line 6401
} else { 
#line 6402
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6403
__sust_b_2d_array_i16_zero(surfObject, face, x, y, data); 
#line 6404
}  }  }  
#line 6405
} 
#endif
#line 6407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6408
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6418
::exit(___);}
#if 0
#line 6408
{ 
#line 6409
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6410
__sust_b_2d_array_i16_trap(surfObject, face, x, y, data.x); 
#line 6411
} else { 
#line 6412
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6413
__sust_b_2d_array_i16_clamp(surfObject, face, x, y, data.x); 
#line 6414
} else { 
#line 6415
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6416
__sust_b_2d_array_i16_zero(surfObject, face, x, y, data.x); 
#line 6417
}  }  }  
#line 6418
} 
#endif
#line 6420 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6421
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6431
::exit(___);}
#if 0
#line 6421
{ 
#line 6422
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6423
__sust_b_2d_array_i32_trap(surfObject, face, x, y, data); 
#line 6424
} else { 
#line 6425
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6426
__sust_b_2d_array_i32_clamp(surfObject, face, x, y, data); 
#line 6427
} else { 
#line 6428
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6429
__sust_b_2d_array_i32_zero(surfObject, face, x, y, data); 
#line 6430
}  }  }  
#line 6431
} 
#endif
#line 6433 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6434
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6444
::exit(___);}
#if 0
#line 6434
{ 
#line 6435
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6436
__sust_b_2d_array_i32_trap(surfObject, face, x, y, data.x); 
#line 6437
} else { 
#line 6438
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6439
__sust_b_2d_array_i32_clamp(surfObject, face, x, y, data.x); 
#line 6440
} else { 
#line 6441
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6442
__sust_b_2d_array_i32_zero(surfObject, face, x, y, data.x); 
#line 6443
}  }  }  
#line 6444
} 
#endif
#line 6446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6447
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6457
::exit(___);}
#if 0
#line 6447
{ 
#line 6448
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6449
__sust_b_2d_array_i32_trap(surfObject, face, x, y, data); 
#line 6450
} else { 
#line 6451
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6452
__sust_b_2d_array_i32_clamp(surfObject, face, x, y, data); 
#line 6453
} else { 
#line 6454
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6455
__sust_b_2d_array_i32_zero(surfObject, face, x, y, data); 
#line 6456
}  }  }  
#line 6457
} 
#endif
#line 6459 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6460
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6470
::exit(___);}
#if 0
#line 6460
{ 
#line 6461
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6462
__sust_b_2d_array_i32_trap(surfObject, face, x, y, data.x); 
#line 6463
} else { 
#line 6464
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6465
__sust_b_2d_array_i32_clamp(surfObject, face, x, y, data.x); 
#line 6466
} else { 
#line 6467
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6468
__sust_b_2d_array_i32_zero(surfObject, face, x, y, data.x); 
#line 6469
}  }  }  
#line 6470
} 
#endif
#line 6472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6473
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6483
::exit(___);}
#if 0
#line 6473
{ 
#line 6474
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6475
__sust_b_2d_array_i64_trap(surfObject, face, x, y, data); 
#line 6476
} else { 
#line 6477
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6478
__sust_b_2d_array_i64_clamp(surfObject, face, x, y, data); 
#line 6479
} else { 
#line 6480
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6481
__sust_b_2d_array_i64_zero(surfObject, face, x, y, data); 
#line 6482
}  }  }  
#line 6483
} 
#endif
#line 6485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6486
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6496
::exit(___);}
#if 0
#line 6486
{ 
#line 6487
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6488
__sust_b_2d_array_i64_trap(surfObject, face, x, y, data.x); 
#line 6489
} else { 
#line 6490
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6491
__sust_b_2d_array_i64_clamp(surfObject, face, x, y, data.x); 
#line 6492
} else { 
#line 6493
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6494
__sust_b_2d_array_i64_zero(surfObject, face, x, y, data.x); 
#line 6495
}  }  }  
#line 6496
} 
#endif
#line 6498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6499
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6509
::exit(___);}
#if 0
#line 6499
{ 
#line 6500
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6501
__sust_b_2d_array_i64_trap(surfObject, face, x, y, data); 
#line 6502
} else { 
#line 6503
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6504
__sust_b_2d_array_i64_clamp(surfObject, face, x, y, data); 
#line 6505
} else { 
#line 6506
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6507
__sust_b_2d_array_i64_zero(surfObject, face, x, y, data); 
#line 6508
}  }  }  
#line 6509
} 
#endif
#line 6511 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6512
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6522
::exit(___);}
#if 0
#line 6512
{ 
#line 6513
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6514
__sust_b_2d_array_i64_trap(surfObject, face, x, y, data.x); 
#line 6515
} else { 
#line 6516
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6517
__sust_b_2d_array_i64_clamp(surfObject, face, x, y, data.x); 
#line 6518
} else { 
#line 6519
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6520
__sust_b_2d_array_i64_zero(surfObject, face, x, y, data.x); 
#line 6521
}  }  }  
#line 6522
} 
#endif
#line 6524 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6525
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6538
::exit(___);}
#if 0
#line 6525
{ 
#line 6526
union { float f; unsigned i; } cvt; 
#line 6527
(cvt.f) = data; 
#line 6529
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6530
__sust_b_2d_array_i32_trap(surfObject, face, x, y, cvt.i); 
#line 6531
} else { 
#line 6532
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6533
__sust_b_2d_array_i32_clamp(surfObject, face, x, y, cvt.i); 
#line 6534
} else { 
#line 6535
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6536
__sust_b_2d_array_i32_zero(surfObject, face, x, y, cvt.i); 
#line 6537
}  }  }  
#line 6538
} 
#endif
#line 6540 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6541
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6554
::exit(___);}
#if 0
#line 6541
{ 
#line 6542
union { float f; unsigned i; } cvt; 
#line 6543
(cvt.f) = (data.x); 
#line 6545
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6546
__sust_b_2d_array_i32_trap(surfObject, face, x, y, cvt.i); 
#line 6547
} else { 
#line 6548
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6549
__sust_b_2d_array_i32_clamp(surfObject, face, x, y, cvt.i); 
#line 6550
} else { 
#line 6551
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6552
__sust_b_2d_array_i32_zero(surfObject, face, x, y, cvt.i); 
#line 6553
}  }  }  
#line 6554
} 
#endif
#line 6562 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6563
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6573
::exit(___);}
#if 0
#line 6563
{ 
#line 6564
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6565
__sust_b_2d_array_v2i8_trap(surfObject, face, x, y, make_uchar2(data.x, data.y)); 
#line 6566
} else { 
#line 6567
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6568
__sust_b_2d_array_v2i8_clamp(surfObject, face, x, y, make_uchar2(data.x, data.y)); 
#line 6569
} else { 
#line 6570
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6571
__sust_b_2d_array_v2i8_zero(surfObject, face, x, y, make_uchar2(data.x, data.y)); 
#line 6572
}  }  }  
#line 6573
} 
#endif
#line 6575 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6576
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6586
::exit(___);}
#if 0
#line 6576
{ 
#line 6577
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6578
__sust_b_2d_array_v2i8_trap(surfObject, face, x, y, data); 
#line 6579
} else { 
#line 6580
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6581
__sust_b_2d_array_v2i8_clamp(surfObject, face, x, y, data); 
#line 6582
} else { 
#line 6583
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6584
__sust_b_2d_array_v2i8_zero(surfObject, face, x, y, data); 
#line 6585
}  }  }  
#line 6586
} 
#endif
#line 6588 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6589
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6599
::exit(___);}
#if 0
#line 6589
{ 
#line 6590
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6591
__sust_b_2d_array_v2i16_trap(surfObject, face, x, y, make_ushort2(data.x, data.y)); 
#line 6592
} else { 
#line 6593
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6594
__sust_b_2d_array_v2i16_clamp(surfObject, face, x, y, make_ushort2(data.x, data.y)); 
#line 6595
} else { 
#line 6596
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6597
__sust_b_2d_array_v2i16_zero(surfObject, face, x, y, make_ushort2(data.x, data.y)); 
#line 6598
}  }  }  
#line 6599
} 
#endif
#line 6601 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6602
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6612
::exit(___);}
#if 0
#line 6602
{ 
#line 6603
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6604
__sust_b_2d_array_v2i16_trap(surfObject, face, x, y, data); 
#line 6605
} else { 
#line 6606
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6607
__sust_b_2d_array_v2i16_clamp(surfObject, face, x, y, data); 
#line 6608
} else { 
#line 6609
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6610
__sust_b_2d_array_v2i16_zero(surfObject, face, x, y, data); 
#line 6611
}  }  }  
#line 6612
} 
#endif
#line 6614 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6615
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6625
::exit(___);}
#if 0
#line 6615
{ 
#line 6616
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6617
__sust_b_2d_array_v2i32_trap(surfObject, face, x, y, make_uint2(data.x, data.y)); 
#line 6618
} else { 
#line 6619
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6620
__sust_b_2d_array_v2i32_clamp(surfObject, face, x, y, make_uint2(data.x, data.y)); 
#line 6621
} else { 
#line 6622
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6623
__sust_b_2d_array_v2i32_zero(surfObject, face, x, y, make_uint2(data.x, data.y)); 
#line 6624
}  }  }  
#line 6625
} 
#endif
#line 6627 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6628
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6638
::exit(___);}
#if 0
#line 6628
{ 
#line 6629
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6630
__sust_b_2d_array_v2i32_trap(surfObject, face, x, y, data); 
#line 6631
} else { 
#line 6632
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6633
__sust_b_2d_array_v2i32_clamp(surfObject, face, x, y, data); 
#line 6634
} else { 
#line 6635
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6636
__sust_b_2d_array_v2i32_zero(surfObject, face, x, y, data); 
#line 6637
}  }  }  
#line 6638
} 
#endif
#line 6640 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6641
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6651
::exit(___);}
#if 0
#line 6641
{ 
#line 6642
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6643
__sust_b_2d_array_v2i64_trap(surfObject, face, x, y, make_ulonglong2(data.x, data.y)); 
#line 6644
} else { 
#line 6645
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6646
__sust_b_2d_array_v2i64_clamp(surfObject, face, x, y, make_ulonglong2(data.x, data.y)); 
#line 6647
} else { 
#line 6648
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6649
__sust_b_2d_array_v2i64_zero(surfObject, face, x, y, make_ulonglong2(data.x, data.y)); 
#line 6650
}  }  }  
#line 6651
} 
#endif
#line 6653 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6654
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6664
::exit(___);}
#if 0
#line 6654
{ 
#line 6655
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6656
__sust_b_2d_array_v2i64_trap(surfObject, face, x, y, data); 
#line 6657
} else { 
#line 6658
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6659
__sust_b_2d_array_v2i64_clamp(surfObject, face, x, y, data); 
#line 6660
} else { 
#line 6661
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6662
__sust_b_2d_array_v2i64_zero(surfObject, face, x, y, data); 
#line 6663
}  }  }  
#line 6664
} 
#endif
#line 6666 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6667
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6680
::exit(___);}
#if 0
#line 6667
{ 
#line 6668
union { float2 f; uint2 i; } cvt; 
#line 6669
(cvt.f) = data; 
#line 6671
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6672
__sust_b_2d_array_v2i32_trap(surfObject, face, x, y, cvt.i); 
#line 6673
} else { 
#line 6674
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6675
__sust_b_2d_array_v2i32_clamp(surfObject, face, x, y, cvt.i); 
#line 6676
} else { 
#line 6677
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6678
__sust_b_2d_array_v2i32_zero(surfObject, face, x, y, cvt.i); 
#line 6679
}  }  }  
#line 6680
} 
#endif
#line 6688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6689
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6699
::exit(___);}
#if 0
#line 6689
{ 
#line 6690
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6691
__sust_b_2d_array_v4i8_trap(surfObject, face, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 6692
} else { 
#line 6693
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6694
__sust_b_2d_array_v4i8_clamp(surfObject, face, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 6695
} else { 
#line 6696
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6697
__sust_b_2d_array_v4i8_zero(surfObject, face, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 6698
}  }  }  
#line 6699
} 
#endif
#line 6701 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6702
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6712
::exit(___);}
#if 0
#line 6702
{ 
#line 6703
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6704
__sust_b_2d_array_v4i8_trap(surfObject, face, x, y, data); 
#line 6705
} else { 
#line 6706
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6707
__sust_b_2d_array_v4i8_clamp(surfObject, face, x, y, data); 
#line 6708
} else { 
#line 6709
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6710
__sust_b_2d_array_v4i8_zero(surfObject, face, x, y, data); 
#line 6711
}  }  }  
#line 6712
} 
#endif
#line 6714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6715
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6725
::exit(___);}
#if 0
#line 6715
{ 
#line 6716
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6717
__sust_b_2d_array_v4i16_trap(surfObject, face, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 6718
} else { 
#line 6719
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6720
__sust_b_2d_array_v4i16_clamp(surfObject, face, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 6721
} else { 
#line 6722
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6723
__sust_b_2d_array_v4i16_zero(surfObject, face, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 6724
}  }  }  
#line 6725
} 
#endif
#line 6727 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6728
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6738
::exit(___);}
#if 0
#line 6728
{ 
#line 6729
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6730
__sust_b_2d_array_v4i16_trap(surfObject, face, x, y, data); 
#line 6731
} else { 
#line 6732
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6733
__sust_b_2d_array_v4i16_clamp(surfObject, face, x, y, data); 
#line 6734
} else { 
#line 6735
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6736
__sust_b_2d_array_v4i16_zero(surfObject, face, x, y, data); 
#line 6737
}  }  }  
#line 6738
} 
#endif
#line 6740 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6741
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6751
::exit(___);}
#if 0
#line 6741
{ 
#line 6742
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6743
__sust_b_2d_array_v4i32_trap(surfObject, face, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
#line 6744
} else { 
#line 6745
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6746
__sust_b_2d_array_v4i32_clamp(surfObject, face, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
#line 6747
} else { 
#line 6748
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6749
__sust_b_2d_array_v4i32_zero(surfObject, face, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
#line 6750
}  }  }  
#line 6751
} 
#endif
#line 6753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6754
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6764
::exit(___);}
#if 0
#line 6754
{ 
#line 6755
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6756
__sust_b_2d_array_v4i32_trap(surfObject, face, x, y, data); 
#line 6757
} else { 
#line 6758
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6759
__sust_b_2d_array_v4i32_clamp(surfObject, face, x, y, data); 
#line 6760
} else { 
#line 6761
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6762
__sust_b_2d_array_v4i32_zero(surfObject, face, x, y, data); 
#line 6763
}  }  }  
#line 6764
} 
#endif
#line 6766 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode) 
#line 6767
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)face;(void)boundaryMode;
#line 6780
::exit(___);}
#if 0
#line 6767
{ 
#line 6768
union { float4 f; uint4 i; } cvt; 
#line 6769
(cvt.f) = data; 
#line 6771
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6772
__sust_b_2d_array_v4i32_trap(surfObject, face, x, y, cvt.i); 
#line 6773
} else { 
#line 6774
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6775
__sust_b_2d_array_v4i32_clamp(surfObject, face, x, y, cvt.i); 
#line 6776
} else { 
#line 6777
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6778
__sust_b_2d_array_v4i32_zero(surfObject, face, x, y, cvt.i); 
#line 6779
}  }  }  
#line 6780
} 
#endif
#line 6788 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6789
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6799
::exit(___);}
#if 0
#line 6789
{ 
#line 6790
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6791
__sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data); 
#line 6792
} else { 
#line 6793
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6794
__sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data); 
#line 6795
} else { 
#line 6796
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6797
__sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data); 
#line 6798
}  }  }  
#line 6799
} 
#endif
#line 6801 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6802
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6812
::exit(___);}
#if 0
#line 6802
{ 
#line 6803
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6804
__sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data); 
#line 6805
} else { 
#line 6806
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6807
__sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data); 
#line 6808
} else { 
#line 6809
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6810
__sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data); 
#line 6811
}  }  }  
#line 6812
} 
#endif
#line 6814 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6815
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6825
::exit(___);}
#if 0
#line 6815
{ 
#line 6816
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6817
__sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data.x); 
#line 6818
} else { 
#line 6819
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6820
__sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data.x); 
#line 6821
} else { 
#line 6822
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6823
__sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data.x); 
#line 6824
}  }  }  
#line 6825
} 
#endif
#line 6827 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6828
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6838
::exit(___);}
#if 0
#line 6828
{ 
#line 6829
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6830
__sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data); 
#line 6831
} else { 
#line 6832
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6833
__sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data); 
#line 6834
} else { 
#line 6835
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6836
__sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data); 
#line 6837
}  }  }  
#line 6838
} 
#endif
#line 6840 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6841
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6851
::exit(___);}
#if 0
#line 6841
{ 
#line 6842
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6843
__sust_b_2d_array_i8_trap(surfObject, layerface, x, y, data.x); 
#line 6844
} else { 
#line 6845
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6846
__sust_b_2d_array_i8_clamp(surfObject, layerface, x, y, data.x); 
#line 6847
} else { 
#line 6848
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6849
__sust_b_2d_array_i8_zero(surfObject, layerface, x, y, data.x); 
#line 6850
}  }  }  
#line 6851
} 
#endif
#line 6853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6854
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6864
::exit(___);}
#if 0
#line 6854
{ 
#line 6855
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6856
__sust_b_2d_array_i16_trap(surfObject, layerface, x, y, data); 
#line 6857
} else { 
#line 6858
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6859
__sust_b_2d_array_i16_clamp(surfObject, layerface, x, y, data); 
#line 6860
} else { 
#line 6861
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6862
__sust_b_2d_array_i16_zero(surfObject, layerface, x, y, data); 
#line 6863
}  }  }  
#line 6864
} 
#endif
#line 6866 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6867
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6877
::exit(___);}
#if 0
#line 6867
{ 
#line 6868
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6869
__sust_b_2d_array_i16_trap(surfObject, layerface, x, y, data.x); 
#line 6870
} else { 
#line 6871
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6872
__sust_b_2d_array_i16_clamp(surfObject, layerface, x, y, data.x); 
#line 6873
} else { 
#line 6874
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6875
__sust_b_2d_array_i16_zero(surfObject, layerface, x, y, data.x); 
#line 6876
}  }  }  
#line 6877
} 
#endif
#line 6879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6880
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6890
::exit(___);}
#if 0
#line 6880
{ 
#line 6881
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6882
__sust_b_2d_array_i16_trap(surfObject, layerface, x, y, data); 
#line 6883
} else { 
#line 6884
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6885
__sust_b_2d_array_i16_clamp(surfObject, layerface, x, y, data); 
#line 6886
} else { 
#line 6887
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6888
__sust_b_2d_array_i16_zero(surfObject, layerface, x, y, data); 
#line 6889
}  }  }  
#line 6890
} 
#endif
#line 6892 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6893
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6903
::exit(___);}
#if 0
#line 6893
{ 
#line 6894
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6895
__sust_b_2d_array_i16_trap(surfObject, layerface, x, y, data.x); 
#line 6896
} else { 
#line 6897
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6898
__sust_b_2d_array_i16_clamp(surfObject, layerface, x, y, data.x); 
#line 6899
} else { 
#line 6900
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6901
__sust_b_2d_array_i16_zero(surfObject, layerface, x, y, data.x); 
#line 6902
}  }  }  
#line 6903
} 
#endif
#line 6905 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6906
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6916
::exit(___);}
#if 0
#line 6906
{ 
#line 6907
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6908
__sust_b_2d_array_i32_trap(surfObject, layerface, x, y, data); 
#line 6909
} else { 
#line 6910
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6911
__sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, data); 
#line 6912
} else { 
#line 6913
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6914
__sust_b_2d_array_i32_zero(surfObject, layerface, x, y, data); 
#line 6915
}  }  }  
#line 6916
} 
#endif
#line 6918 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6919
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6929
::exit(___);}
#if 0
#line 6919
{ 
#line 6920
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6921
__sust_b_2d_array_i32_trap(surfObject, layerface, x, y, data.x); 
#line 6922
} else { 
#line 6923
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6924
__sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, data.x); 
#line 6925
} else { 
#line 6926
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6927
__sust_b_2d_array_i32_zero(surfObject, layerface, x, y, data.x); 
#line 6928
}  }  }  
#line 6929
} 
#endif
#line 6931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(unsigned data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6932
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6942
::exit(___);}
#if 0
#line 6932
{ 
#line 6933
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6934
__sust_b_2d_array_i32_trap(surfObject, layerface, x, y, data); 
#line 6935
} else { 
#line 6936
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6937
__sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, data); 
#line 6938
} else { 
#line 6939
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6940
__sust_b_2d_array_i32_zero(surfObject, layerface, x, y, data); 
#line 6941
}  }  }  
#line 6942
} 
#endif
#line 6944 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6945
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6955
::exit(___);}
#if 0
#line 6945
{ 
#line 6946
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6947
__sust_b_2d_array_i32_trap(surfObject, layerface, x, y, data.x); 
#line 6948
} else { 
#line 6949
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6950
__sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, data.x); 
#line 6951
} else { 
#line 6952
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6953
__sust_b_2d_array_i32_zero(surfObject, layerface, x, y, data.x); 
#line 6954
}  }  }  
#line 6955
} 
#endif
#line 6957 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(__int64 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6958
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6968
::exit(___);}
#if 0
#line 6958
{ 
#line 6959
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6960
__sust_b_2d_array_i64_trap(surfObject, layerface, x, y, data); 
#line 6961
} else { 
#line 6962
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6963
__sust_b_2d_array_i64_clamp(surfObject, layerface, x, y, data); 
#line 6964
} else { 
#line 6965
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6966
__sust_b_2d_array_i64_zero(surfObject, layerface, x, y, data); 
#line 6967
}  }  }  
#line 6968
} 
#endif
#line 6970 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6971
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6981
::exit(___);}
#if 0
#line 6971
{ 
#line 6972
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6973
__sust_b_2d_array_i64_trap(surfObject, layerface, x, y, data.x); 
#line 6974
} else { 
#line 6975
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6976
__sust_b_2d_array_i64_clamp(surfObject, layerface, x, y, data.x); 
#line 6977
} else { 
#line 6978
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6979
__sust_b_2d_array_i64_zero(surfObject, layerface, x, y, data.x); 
#line 6980
}  }  }  
#line 6981
} 
#endif
#line 6983 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(unsigned __int64 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6984
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 6994
::exit(___);}
#if 0
#line 6984
{ 
#line 6985
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6986
__sust_b_2d_array_i64_trap(surfObject, layerface, x, y, data); 
#line 6987
} else { 
#line 6988
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 6989
__sust_b_2d_array_i64_clamp(surfObject, layerface, x, y, data); 
#line 6990
} else { 
#line 6991
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 6992
__sust_b_2d_array_i64_zero(surfObject, layerface, x, y, data); 
#line 6993
}  }  }  
#line 6994
} 
#endif
#line 6996 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 6997
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7007
::exit(___);}
#if 0
#line 6997
{ 
#line 6998
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 6999
__sust_b_2d_array_i64_trap(surfObject, layerface, x, y, data.x); 
#line 7000
} else { 
#line 7001
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7002
__sust_b_2d_array_i64_clamp(surfObject, layerface, x, y, data.x); 
#line 7003
} else { 
#line 7004
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7005
__sust_b_2d_array_i64_zero(surfObject, layerface, x, y, data.x); 
#line 7006
}  }  }  
#line 7007
} 
#endif
#line 7009 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7010
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7023
::exit(___);}
#if 0
#line 7010
{ 
#line 7011
union { float f; unsigned i; } cvt; 
#line 7012
(cvt.f) = data; 
#line 7014
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7015
__sust_b_2d_array_i32_trap(surfObject, layerface, x, y, cvt.i); 
#line 7016
} else { 
#line 7017
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7018
__sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, cvt.i); 
#line 7019
} else { 
#line 7020
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7021
__sust_b_2d_array_i32_zero(surfObject, layerface, x, y, cvt.i); 
#line 7022
}  }  }  
#line 7023
} 
#endif
#line 7025 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7026
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7039
::exit(___);}
#if 0
#line 7026
{ 
#line 7027
union { float f; unsigned i; } cvt; 
#line 7028
(cvt.f) = (data.x); 
#line 7030
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7031
__sust_b_2d_array_i32_trap(surfObject, layerface, x, y, cvt.i); 
#line 7032
} else { 
#line 7033
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7034
__sust_b_2d_array_i32_clamp(surfObject, layerface, x, y, cvt.i); 
#line 7035
} else { 
#line 7036
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7037
__sust_b_2d_array_i32_zero(surfObject, layerface, x, y, cvt.i); 
#line 7038
}  }  }  
#line 7039
} 
#endif
#line 7047 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7048
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7058
::exit(___);}
#if 0
#line 7048
{ 
#line 7049
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7050
__sust_b_2d_array_v2i8_trap(surfObject, layerface, x, y, make_uchar2(data.x, data.y)); 
#line 7051
} else { 
#line 7052
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7053
__sust_b_2d_array_v2i8_clamp(surfObject, layerface, x, y, make_uchar2(data.x, data.y)); 
#line 7054
} else { 
#line 7055
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7056
__sust_b_2d_array_v2i8_zero(surfObject, layerface, x, y, make_uchar2(data.x, data.y)); 
#line 7057
}  }  }  
#line 7058
} 
#endif
#line 7060 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7061
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7071
::exit(___);}
#if 0
#line 7061
{ 
#line 7062
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7063
__sust_b_2d_array_v2i8_trap(surfObject, layerface, x, y, data); 
#line 7064
} else { 
#line 7065
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7066
__sust_b_2d_array_v2i8_clamp(surfObject, layerface, x, y, data); 
#line 7067
} else { 
#line 7068
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7069
__sust_b_2d_array_v2i8_zero(surfObject, layerface, x, y, data); 
#line 7070
}  }  }  
#line 7071
} 
#endif
#line 7073 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7074
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7084
::exit(___);}
#if 0
#line 7074
{ 
#line 7075
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7076
__sust_b_2d_array_v2i16_trap(surfObject, layerface, x, y, make_ushort2(data.x, data.y)); 
#line 7077
} else { 
#line 7078
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7079
__sust_b_2d_array_v2i16_clamp(surfObject, layerface, x, y, make_ushort2(data.x, data.y)); 
#line 7080
} else { 
#line 7081
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7082
__sust_b_2d_array_v2i16_zero(surfObject, layerface, x, y, make_ushort2(data.x, data.y)); 
#line 7083
}  }  }  
#line 7084
} 
#endif
#line 7086 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7087
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7097
::exit(___);}
#if 0
#line 7087
{ 
#line 7088
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7089
__sust_b_2d_array_v2i16_trap(surfObject, layerface, x, y, data); 
#line 7090
} else { 
#line 7091
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7092
__sust_b_2d_array_v2i16_clamp(surfObject, layerface, x, y, data); 
#line 7093
} else { 
#line 7094
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7095
__sust_b_2d_array_v2i16_zero(surfObject, layerface, x, y, data); 
#line 7096
}  }  }  
#line 7097
} 
#endif
#line 7099 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7100
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7110
::exit(___);}
#if 0
#line 7100
{ 
#line 7101
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7102
__sust_b_2d_array_v2i32_trap(surfObject, layerface, x, y, make_uint2(data.x, data.y)); 
#line 7103
} else { 
#line 7104
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7105
__sust_b_2d_array_v2i32_clamp(surfObject, layerface, x, y, make_uint2(data.x, data.y)); 
#line 7106
} else { 
#line 7107
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7108
__sust_b_2d_array_v2i32_zero(surfObject, layerface, x, y, make_uint2(data.x, data.y)); 
#line 7109
}  }  }  
#line 7110
} 
#endif
#line 7112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7113
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7123
::exit(___);}
#if 0
#line 7113
{ 
#line 7114
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7115
__sust_b_2d_array_v2i32_trap(surfObject, layerface, x, y, data); 
#line 7116
} else { 
#line 7117
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7118
__sust_b_2d_array_v2i32_clamp(surfObject, layerface, x, y, data); 
#line 7119
} else { 
#line 7120
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7121
__sust_b_2d_array_v2i32_zero(surfObject, layerface, x, y, data); 
#line 7122
}  }  }  
#line 7123
} 
#endif
#line 7125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7126
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7136
::exit(___);}
#if 0
#line 7126
{ 
#line 7127
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7128
__sust_b_2d_array_v2i64_trap(surfObject, layerface, x, y, make_ulonglong2(data.x, data.y)); 
#line 7129
} else { 
#line 7130
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7131
__sust_b_2d_array_v2i64_clamp(surfObject, layerface, x, y, make_ulonglong2(data.x, data.y)); 
#line 7132
} else { 
#line 7133
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7134
__sust_b_2d_array_v2i64_zero(surfObject, layerface, x, y, make_ulonglong2(data.x, data.y)); 
#line 7135
}  }  }  
#line 7136
} 
#endif
#line 7138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7139
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7149
::exit(___);}
#if 0
#line 7139
{ 
#line 7140
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7141
__sust_b_2d_array_v2i64_trap(surfObject, layerface, x, y, data); 
#line 7142
} else { 
#line 7143
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7144
__sust_b_2d_array_v2i64_clamp(surfObject, layerface, x, y, data); 
#line 7145
} else { 
#line 7146
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7147
__sust_b_2d_array_v2i64_zero(surfObject, layerface, x, y, data); 
#line 7148
}  }  }  
#line 7149
} 
#endif
#line 7151 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7152
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7165
::exit(___);}
#if 0
#line 7152
{ 
#line 7153
union { float2 f; uint2 i; } cvt; 
#line 7154
(cvt.f) = data; 
#line 7156
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7157
__sust_b_2d_array_v2i32_trap(surfObject, layerface, x, y, cvt.i); 
#line 7158
} else { 
#line 7159
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7160
__sust_b_2d_array_v2i32_clamp(surfObject, layerface, x, y, cvt.i); 
#line 7161
} else { 
#line 7162
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7163
__sust_b_2d_array_v2i32_zero(surfObject, layerface, x, y, cvt.i); 
#line 7164
}  }  }  
#line 7165
} 
#endif
#line 7173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7174
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7184
::exit(___);}
#if 0
#line 7174
{ 
#line 7175
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7176
__sust_b_2d_array_v4i8_trap(surfObject, layerface, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 7177
} else { 
#line 7178
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7179
__sust_b_2d_array_v4i8_clamp(surfObject, layerface, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 7180
} else { 
#line 7181
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7182
__sust_b_2d_array_v4i8_zero(surfObject, layerface, x, y, make_uchar4(data.x, data.y, data.z, data.w)); 
#line 7183
}  }  }  
#line 7184
} 
#endif
#line 7186 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7187
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7197
::exit(___);}
#if 0
#line 7187
{ 
#line 7188
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7189
__sust_b_2d_array_v4i8_trap(surfObject, layerface, x, y, data); 
#line 7190
} else { 
#line 7191
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7192
__sust_b_2d_array_v4i8_clamp(surfObject, layerface, x, y, data); 
#line 7193
} else { 
#line 7194
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7195
__sust_b_2d_array_v4i8_zero(surfObject, layerface, x, y, data); 
#line 7196
}  }  }  
#line 7197
} 
#endif
#line 7199 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7200
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7210
::exit(___);}
#if 0
#line 7200
{ 
#line 7201
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7202
__sust_b_2d_array_v4i16_trap(surfObject, layerface, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 7203
} else { 
#line 7204
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7205
__sust_b_2d_array_v4i16_clamp(surfObject, layerface, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 7206
} else { 
#line 7207
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7208
__sust_b_2d_array_v4i16_zero(surfObject, layerface, x, y, make_ushort4(data.x, data.y, data.z, data.w)); 
#line 7209
}  }  }  
#line 7210
} 
#endif
#line 7212 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7213
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7223
::exit(___);}
#if 0
#line 7213
{ 
#line 7214
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7215
__sust_b_2d_array_v4i16_trap(surfObject, layerface, x, y, data); 
#line 7216
} else { 
#line 7217
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7218
__sust_b_2d_array_v4i16_clamp(surfObject, layerface, x, y, data); 
#line 7219
} else { 
#line 7220
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7221
__sust_b_2d_array_v4i16_zero(surfObject, layerface, x, y, data); 
#line 7222
}  }  }  
#line 7223
} 
#endif
#line 7225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7226
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7236
::exit(___);}
#if 0
#line 7226
{ 
#line 7227
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7228
__sust_b_2d_array_v4i32_trap(surfObject, layerface, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
#line 7229
} else { 
#line 7230
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7231
__sust_b_2d_array_v4i32_clamp(surfObject, layerface, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
#line 7232
} else { 
#line 7233
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7234
__sust_b_2d_array_v4i32_zero(surfObject, layerface, x, y, make_uint4(data.x, data.y, data.z, data.w)); 
#line 7235
}  }  }  
#line 7236
} 
#endif
#line 7238 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7239
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7249
::exit(___);}
#if 0
#line 7239
{ 
#line 7240
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7241
__sust_b_2d_array_v4i32_trap(surfObject, layerface, x, y, data); 
#line 7242
} else { 
#line 7243
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7244
__sust_b_2d_array_v4i32_clamp(surfObject, layerface, x, y, data); 
#line 7245
} else { 
#line 7246
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7247
__sust_b_2d_array_v4i32_zero(surfObject, layerface, x, y, data); 
#line 7248
}  }  }  
#line 7249
} 
#endif
#line 7251 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\surface_indirect_functions.hpp"
static __forceinline void surfCubemapLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode) 
#line 7252
{int volatile ___ = 1;(void)data;(void)surfObject;(void)x;(void)y;(void)z;(void)layerface;(void)boundaryMode;
#line 7265
::exit(___);}
#if 0
#line 7252
{ 
#line 7253
union { float4 f; uint4 i; } cvt; 
#line 7254
(cvt.f) = data; 
#line 7256
if (boundaryMode == (cudaBoundaryModeTrap)) { 
#line 7257
__sust_b_2d_array_v4i32_trap(surfObject, layerface, x, y, cvt.i); 
#line 7258
} else { 
#line 7259
if (boundaryMode == (cudaBoundaryModeClamp)) { 
#line 7260
__sust_b_2d_array_v4i32_clamp(surfObject, layerface, x, y, cvt.i); 
#line 7261
} else { 
#line 7262
if (boundaryMode == (cudaBoundaryModeZero)) { 
#line 7263
__sust_b_2d_array_v4i32_zero(surfObject, layerface, x, y, cvt.i); 
#line 7264
}  }  }  
#line 7265
} 
#endif
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v7.0\\include\\device_launch_parameters.h"
extern "C" const uint3 __device_builtin_variable_threadIdx; 
#line 72
extern "C" const uint3 __device_builtin_variable_blockIdx; 
#line 73
extern "C" const dim3 __device_builtin_variable_blockDim; 
#line 74
extern "C" const dim3 __device_builtin_variable_gridDim; 
#line 75
extern "C" const int __device_builtin_variable_warpSize; 
#line 164 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v7.0\\include\\cuda_runtime.h"
template< class T> static __inline ::cudaError_t 
#line 165
cudaLaunchKernel(const T *
#line 166
func, ::dim3 
#line 167
gridDim, ::dim3 
#line 168
blockDim, void **
#line 169
args, ::size_t 
#line 170
sharedMem = 0, ::cudaStream_t 
#line 171
stream = 0) 
#line 173
{ 
#line 174
return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream); 
#line 175
} 
#line 202
template< class T> static __inline ::cudaError_t 
#line 203
cudaSetupArgument(T 
#line 204
arg, ::size_t 
#line 205
offset) 
#line 207
{ 
#line 208
return ::cudaSetupArgument((const void *)(&arg), sizeof(T), offset); 
#line 209
} 
#line 241
static __inline cudaError_t cudaEventCreate(cudaEvent_t *
#line 242
event, unsigned 
#line 243
flags) 
#line 245
{ 
#line 246
return ::cudaEventCreateWithFlags(event, flags); 
#line 247
} 
#line 304
static __inline cudaError_t cudaMallocHost(void **
#line 305
ptr, size_t 
#line 306
size, unsigned 
#line 307
flags) 
#line 309
{ 
#line 310
return ::cudaHostAlloc(ptr, size, flags); 
#line 311
} 
#line 313
template< class T> static __inline ::cudaError_t 
#line 314
cudaHostAlloc(T **
#line 315
ptr, ::size_t 
#line 316
size, unsigned 
#line 317
flags) 
#line 319
{ 
#line 320
return ::cudaHostAlloc((void **)((void *)ptr), size, flags); 
#line 321
} 
#line 323
template< class T> static __inline ::cudaError_t 
#line 324
cudaHostGetDevicePointer(T **
#line 325
pDevice, void *
#line 326
pHost, unsigned 
#line 327
flags) 
#line 329
{ 
#line 330
return ::cudaHostGetDevicePointer((void **)((void *)pDevice), pHost, flags); 
#line 331
} 
#line 402
template< class T> static __inline ::cudaError_t 
#line 403
cudaMallocManaged(T **
#line 404
devPtr, ::size_t 
#line 405
size, unsigned 
#line 406
flags = 1) 
#line 408
{ 
#line 409
return ::cudaMallocManaged((void **)((void *)devPtr), size, flags); 
#line 410
} 
#line 478
template< class T> static __inline ::cudaError_t 
#line 479
cudaStreamAttachMemAsync(::cudaStream_t 
#line 480
stream, T *
#line 481
devPtr, ::size_t 
#line 482
length = 0, unsigned 
#line 483
flags = 4) 
#line 485
{ 
#line 486
return ::cudaStreamAttachMemAsync(stream, (void *)devPtr, length, flags); 
#line 487
} 
#line 489
template< class T> __inline ::cudaError_t 
#line 490
cudaMalloc(T **
#line 491
devPtr, ::size_t 
#line 492
size) 
#line 494
{ 
#line 495
return ::cudaMalloc((void **)((void *)devPtr), size); 
#line 496
} 
#line 498
template< class T> static __inline ::cudaError_t 
#line 499
cudaMallocHost(T **
#line 500
ptr, ::size_t 
#line 501
size, unsigned 
#line 502
flags = 0) 
#line 504
{ 
#line 505
return cudaMallocHost((void **)((void *)ptr), size, flags); 
#line 506
} 
#line 508
template< class T> static __inline ::cudaError_t 
#line 509
cudaMallocPitch(T **
#line 510
devPtr, ::size_t *
#line 511
pitch, ::size_t 
#line 512
width, ::size_t 
#line 513
height) 
#line 515
{ 
#line 516
return ::cudaMallocPitch((void **)((void *)devPtr), pitch, width, height); 
#line 517
} 
#line 554
template< class T> static __inline ::cudaError_t 
#line 555
cudaMemcpyToSymbol(const T &
#line 556
symbol, const void *
#line 557
src, ::size_t 
#line 558
count, ::size_t 
#line 559
offset = 0, ::cudaMemcpyKind 
#line 560
kind = cudaMemcpyHostToDevice) 
#line 562
{ 
#line 563
return ::cudaMemcpyToSymbol((const void *)(&symbol), src, count, offset, kind); 
#line 564
} 
#line 606
template< class T> static __inline ::cudaError_t 
#line 607
cudaMemcpyToSymbolAsync(const T &
#line 608
symbol, const void *
#line 609
src, ::size_t 
#line 610
count, ::size_t 
#line 611
offset = 0, ::cudaMemcpyKind 
#line 612
kind = cudaMemcpyHostToDevice, ::cudaStream_t 
#line 613
stream = 0) 
#line 615
{ 
#line 616
return ::cudaMemcpyToSymbolAsync((const void *)(&symbol), src, count, offset, kind, stream); 
#line 617
} 
#line 652
template< class T> static __inline ::cudaError_t 
#line 653
cudaMemcpyFromSymbol(void *
#line 654
dst, const T &
#line 655
symbol, ::size_t 
#line 656
count, ::size_t 
#line 657
offset = 0, ::cudaMemcpyKind 
#line 658
kind = cudaMemcpyDeviceToHost) 
#line 660
{ 
#line 661
return ::cudaMemcpyFromSymbol(dst, (const void *)(&symbol), count, offset, kind); 
#line 662
} 
#line 704
template< class T> static __inline ::cudaError_t 
#line 705
cudaMemcpyFromSymbolAsync(void *
#line 706
dst, const T &
#line 707
symbol, ::size_t 
#line 708
count, ::size_t 
#line 709
offset = 0, ::cudaMemcpyKind 
#line 710
kind = cudaMemcpyDeviceToHost, ::cudaStream_t 
#line 711
stream = 0) 
#line 713
{ 
#line 714
return ::cudaMemcpyFromSymbolAsync(dst, (const void *)(&symbol), count, offset, kind, stream); 
#line 715
} 
#line 737
template< class T> static __inline ::cudaError_t 
#line 738
cudaGetSymbolAddress(void **
#line 739
devPtr, const T &
#line 740
symbol) 
#line 742
{ 
#line 743
return ::cudaGetSymbolAddress(devPtr, (const void *)(&symbol)); 
#line 744
} 
#line 766
template< class T> static __inline ::cudaError_t 
#line 767
cudaGetSymbolSize(::size_t *
#line 768
size, const T &
#line 769
symbol) 
#line 771
{ 
#line 772
return ::cudaGetSymbolSize(size, (const void *)(&symbol)); 
#line 773
} 
#line 809
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 810
cudaBindTexture(::size_t *
#line 811
offset, const texture< T, dim, readMode>  &
#line 812
tex, const void *
#line 813
devPtr, const ::cudaChannelFormatDesc &
#line 814
desc, ::size_t 
#line 815
size = 4294967295U) 
#line 817
{ 
#line 818
return ::cudaBindTexture(offset, &tex, devPtr, &desc, size); 
#line 819
} 
#line 854
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 855
cudaBindTexture(::size_t *
#line 856
offset, const texture< T, dim, readMode>  &
#line 857
tex, const void *
#line 858
devPtr, ::size_t 
#line 859
size = 4294967295U) 
#line 861
{ 
#line 862
return cudaBindTexture(offset, tex, devPtr, (tex.channelDesc), size); 
#line 863
} 
#line 910
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 911
cudaBindTexture2D(::size_t *
#line 912
offset, const texture< T, dim, readMode>  &
#line 913
tex, const void *
#line 914
devPtr, const ::cudaChannelFormatDesc &
#line 915
desc, ::size_t 
#line 916
width, ::size_t 
#line 917
height, ::size_t 
#line 918
pitch) 
#line 920
{ 
#line 921
return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch); 
#line 922
} 
#line 968
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 969
cudaBindTexture2D(::size_t *
#line 970
offset, const texture< T, dim, readMode>  &
#line 971
tex, const void *
#line 972
devPtr, ::size_t 
#line 973
width, ::size_t 
#line 974
height, ::size_t 
#line 975
pitch) 
#line 977
{ 
#line 978
return ::cudaBindTexture2D(offset, &tex, devPtr, &(tex.channelDesc), width, height, pitch); 
#line 979
} 
#line 1010
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1011
cudaBindTextureToArray(const texture< T, dim, readMode>  &
#line 1012
tex, ::cudaArray_const_t 
#line 1013
array, const ::cudaChannelFormatDesc &
#line 1014
desc) 
#line 1016
{ 
#line 1017
return ::cudaBindTextureToArray(&tex, array, &desc); 
#line 1018
} 
#line 1048
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1049
cudaBindTextureToArray(const texture< T, dim, readMode>  &
#line 1050
tex, ::cudaArray_const_t 
#line 1051
array) 
#line 1053
{ 
#line 1054
::cudaChannelFormatDesc desc; 
#line 1055
::cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
#line 1057
return (err == (cudaSuccess)) ? cudaBindTextureToArray(tex, array, desc) : err; 
#line 1058
} 
#line 1089
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1090
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
#line 1091
tex, ::cudaMipmappedArray_const_t 
#line 1092
mipmappedArray, const ::cudaChannelFormatDesc &
#line 1093
desc) 
#line 1095
{ 
#line 1096
return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc); 
#line 1097
} 
#line 1127
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1128
cudaBindTextureToMipmappedArray(const texture< T, dim, readMode>  &
#line 1129
tex, ::cudaMipmappedArray_const_t 
#line 1130
mipmappedArray) 
#line 1132
{ 
#line 1133
::cudaChannelFormatDesc desc; 
#line 1134
::cudaArray_t levelArray; 
#line 1135
::cudaError_t err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0); 
#line 1137
if (err != (cudaSuccess)) { 
#line 1138
return err; 
#line 1139
}  
#line 1140
err = ::cudaGetChannelDesc(&desc, levelArray); 
#line 1142
return (err == (cudaSuccess)) ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err; 
#line 1143
} 
#line 1166
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1167
cudaUnbindTexture(const texture< T, dim, readMode>  &
#line 1168
tex) 
#line 1170
{ 
#line 1171
return ::cudaUnbindTexture(&tex); 
#line 1172
} 
#line 1200
template< class T, int dim, cudaTextureReadMode readMode> static __inline ::cudaError_t 
#line 1201
cudaGetTextureAlignmentOffset(::size_t *
#line 1202
offset, const texture< T, dim, readMode>  &
#line 1203
tex) 
#line 1205
{ 
#line 1206
return ::cudaGetTextureAlignmentOffset(offset, &tex); 
#line 1207
} 
#line 1252
template< class T> static __inline ::cudaError_t 
#line 1253
cudaFuncSetCacheConfig(T *
#line 1254
func, ::cudaFuncCache 
#line 1255
cacheConfig) 
#line 1257
{ 
#line 1258
return ::cudaFuncSetCacheConfig((const void *)func, cacheConfig); 
#line 1259
} 
#line 1261
template< class T> static __inline ::cudaError_t 
#line 1262
cudaFuncSetSharedMemConfig(T *
#line 1263
func, ::cudaSharedMemConfig 
#line 1264
config) 
#line 1266
{ 
#line 1267
return ::cudaFuncSetSharedMemConfig((const void *)func, config); 
#line 1268
} 
#line 1297
template< class T> __inline ::cudaError_t 
#line 1298
cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *
#line 1299
numBlocks, T 
#line 1300
func, int 
#line 1301
blockSize, ::size_t 
#line 1302
dynamicSMemSize) 
#line 1303
{ 
#line 1304
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, 0); 
#line 1305
} 
#line 1348
template< class T> __inline ::cudaError_t 
#line 1349
cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *
#line 1350
numBlocks, T 
#line 1351
func, int 
#line 1352
blockSize, ::size_t 
#line 1353
dynamicSMemSize, unsigned 
#line 1354
flags) 
#line 1355
{ 
#line 1356
return ::cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(numBlocks, (const void *)func, blockSize, dynamicSMemSize, flags); 
#line 1357
} 
#line 1362
class __cudaOccupancyB2DHelper { 
#line 1363
size_t n; 
#line 1365
public: __cudaOccupancyB2DHelper(size_t n_) : n(n_) { } 
#line 1366
size_t operator()(int) 
#line 1367
{ 
#line 1368
return n; 
#line 1369
} 
#line 1370
}; 
#line 1417
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1418
cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(int *
#line 1419
minGridSize, int *
#line 1420
blockSize, T 
#line 1421
func, UnaryFunction 
#line 1422
blockSizeToDynamicSMemSize, int 
#line 1423
blockSizeLimit = 0, unsigned 
#line 1424
flags = 0) 
#line 1425
{ 
#line 1426
::cudaError_t status; 
#line 1429
int device; 
#line 1430
::cudaFuncAttributes attr; 
#line 1433
int maxThreadsPerMultiProcessor; 
#line 1434
int warpSize; 
#line 1435
int devMaxThreadsPerBlock; 
#line 1436
int multiProcessorCount; 
#line 1437
int funcMaxThreadsPerBlock; 
#line 1438
int occupancyLimit; 
#line 1439
int granularity; 
#line 1442
int maxBlockSize = 0; 
#line 1443
int numBlocks = 0; 
#line 1444
int maxOccupancy = 0; 
#line 1447
int blockSizeToTryAligned; 
#line 1448
int blockSizeToTry; 
#line 1449
int blockSizeLimitAligned; 
#line 1450
int occupancyInBlocks; 
#line 1451
int occupancyInThreads; 
#line 1452
int dynamicSMemSize; 
#line 1458
if (((!minGridSize) || (!blockSize)) || (!func)) { 
#line 1459
return cudaErrorInvalidValue; 
#line 1460
}  
#line 1466
status = ::cudaGetDevice(&device); 
#line 1467
if (status != (cudaSuccess)) { 
#line 1468
return status; 
#line 1469
}  
#line 1471
status = cudaDeviceGetAttribute(&maxThreadsPerMultiProcessor, cudaDevAttrMaxThreadsPerMultiProcessor, device); 
#line 1475
if (status != (cudaSuccess)) { 
#line 1476
return status; 
#line 1477
}  
#line 1479
status = cudaDeviceGetAttribute(&warpSize, cudaDevAttrWarpSize, device); 
#line 1483
if (status != (cudaSuccess)) { 
#line 1484
return status; 
#line 1485
}  
#line 1487
status = cudaDeviceGetAttribute(&devMaxThreadsPerBlock, cudaDevAttrMaxThreadsPerBlock, device); 
#line 1491
if (status != (cudaSuccess)) { 
#line 1492
return status; 
#line 1493
}  
#line 1495
status = cudaDeviceGetAttribute(&multiProcessorCount, cudaDevAttrMultiProcessorCount, device); 
#line 1499
if (status != (cudaSuccess)) { 
#line 1500
return status; 
#line 1501
}  
#line 1503
status = cudaFuncGetAttributes(&attr, func); 
#line 1504
if (status != (cudaSuccess)) { 
#line 1505
return status; 
#line 1506
}  
#line 1508
funcMaxThreadsPerBlock = (attr.maxThreadsPerBlock); 
#line 1514
occupancyLimit = maxThreadsPerMultiProcessor; 
#line 1515
granularity = warpSize; 
#line 1517
if (blockSizeLimit == 0) { 
#line 1518
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1519
}  
#line 1521
if (devMaxThreadsPerBlock < blockSizeLimit) { 
#line 1522
blockSizeLimit = devMaxThreadsPerBlock; 
#line 1523
}  
#line 1525
if (funcMaxThreadsPerBlock < blockSizeLimit) { 
#line 1526
blockSizeLimit = funcMaxThreadsPerBlock; 
#line 1527
}  
#line 1529
blockSizeLimitAligned = (((blockSizeLimit + (granularity - 1)) / granularity) * granularity); 
#line 1531
for (blockSizeToTryAligned = blockSizeLimitAligned; blockSizeToTryAligned > 0; blockSizeToTryAligned -= granularity) { 
#line 1535
if (blockSizeLimit < blockSizeToTryAligned) { 
#line 1536
blockSizeToTry = blockSizeLimit; 
#line 1537
} else { 
#line 1538
blockSizeToTry = blockSizeToTryAligned; 
#line 1539
}  
#line 1541
dynamicSMemSize = blockSizeToDynamicSMemSize(blockSizeToTry); 
#line 1543
status = cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(&occupancyInBlocks, func, blockSizeToTry, dynamicSMemSize, flags); 
#line 1550
if (status != (cudaSuccess)) { 
#line 1551
return status; 
#line 1552
}  
#line 1554
occupancyInThreads = (blockSizeToTry * occupancyInBlocks); 
#line 1556
if (occupancyInThreads > maxOccupancy) { 
#line 1557
maxBlockSize = blockSizeToTry; 
#line 1558
numBlocks = occupancyInBlocks; 
#line 1559
maxOccupancy = occupancyInThreads; 
#line 1560
}  
#line 1564
if (occupancyLimit == maxOccupancy) { 
#line 1565
break; 
#line 1566
}  
#line 1567
}  
#line 1575
(*minGridSize) = (numBlocks * multiProcessorCount); 
#line 1576
(*blockSize) = maxBlockSize; 
#line 1578
return status; 
#line 1579
} 
#line 1615
template< class T> static __inline ::cudaError_t 
#line 1616
cudaOccupancyMaxPotentialBlockSize(int *
#line 1617
minGridSize, int *
#line 1618
blockSize, T 
#line 1619
func, ::size_t 
#line 1620
dynamicSMemSize = 0, int 
#line 1621
blockSizeLimit = 0) 
#line 1622
{ 
#line 1623
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, 0); 
#line 1624
} 
#line 1674
template< class T> static __inline ::cudaError_t 
#line 1675
cudaOccupancyMaxPotentialBlockSizeWithFlags(int *
#line 1676
minGridSize, int *
#line 1677
blockSize, T 
#line 1678
func, ::size_t 
#line 1679
dynamicSMemSize = 0, int 
#line 1680
blockSizeLimit = 0, unsigned 
#line 1681
flags = 0) 
#line 1682
{ 
#line 1683
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, ((::__cudaOccupancyB2DHelper)(dynamicSMemSize)), blockSizeLimit, flags); 
#line 1684
} 
#line 1717
template< class UnaryFunction, class T> static __inline ::cudaError_t 
#line 1718
cudaOccupancyMaxPotentialBlockSizeVariableSMem(int *
#line 1719
minGridSize, int *
#line 1720
blockSize, T 
#line 1721
func, UnaryFunction 
#line 1722
blockSizeToDynamicSMemSize, int 
#line 1723
blockSizeLimit = 0) 
#line 1724
{ 
#line 1725
return cudaOccupancyMaxPotentialBlockSizeVariableSMemWithFlags(minGridSize, blockSize, func, blockSizeToDynamicSMemSize, blockSizeLimit, 0); 
#line 1726
} 
#line 1764
template< class T> static __inline ::cudaError_t 
#line 1765
cudaLaunch(T *
#line 1766
func) 
#line 1768
{ 
#line 1769
return ::cudaLaunch((const void *)func); 
#line 1770
} 
#line 1801
template< class T> __inline ::cudaError_t 
#line 1802
cudaFuncGetAttributes(::cudaFuncAttributes *
#line 1803
attr, T *
#line 1804
entry) 
#line 1806
{ 
#line 1807
return ::cudaFuncGetAttributes(attr, (const void *)entry); 
#line 1808
} 
#line 1830
template< class T, int dim> static __inline ::cudaError_t 
#line 1831
cudaBindSurfaceToArray(const surface< T, dim>  &
#line 1832
surf, ::cudaArray_const_t 
#line 1833
array, const ::cudaChannelFormatDesc &
#line 1834
desc) 
#line 1836
{ 
#line 1837
return ::cudaBindSurfaceToArray(&surf, array, &desc); 
#line 1838
} 
#line 1859
template< class T, int dim> static __inline ::cudaError_t 
#line 1860
cudaBindSurfaceToArray(const surface< T, dim>  &
#line 1861
surf, ::cudaArray_const_t 
#line 1862
array) 
#line 1864
{ 
#line 1865
::cudaChannelFormatDesc desc; 
#line 1866
::cudaError_t err = ::cudaGetChannelDesc(&desc, array); 
#line 1868
return (err == (cudaSuccess)) ? cudaBindSurfaceToArray(surf, array, desc) : err; 
#line 1869
} 
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma pack ( push, 8 )
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { struct _iobuf { 
#line 64
char *_ptr; 
#line 65
int _cnt; 
#line 66
char *_base; 
#line 67
int _flag; 
#line 68
int _file; 
#line 69
int _charbuf; 
#line 70
int _bufsiz; 
#line 71
char *_tmpfname; 
#line 72
}; }
#line 73
extern "C" { typedef _iobuf FILE; }
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) FILE *__cdecl __iob_func(); } 
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { typedef __int64 fpos_t; }
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl _filbuf(FILE * _File); } 
#line 176
extern "C" { __declspec(dllimport) int __cdecl _flsbuf(int _Ch, FILE * _File); } 
#line 178
extern "C" { __declspec(dllimport) FILE *__cdecl _fsopen(const char * _Filename, const char * _Mode, int _ShFlag); } 
#line 180
extern "C" { __declspec(dllimport) void __cdecl clearerr(FILE * _File); } 
#line 182
extern "C" { __declspec(dllimport) errno_t __cdecl clearerr_s(FILE * _File); } 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl fclose(FILE * _File); } 
#line 185
extern "C" { __declspec(dllimport) int __cdecl _fcloseall(); } 
#line 187
extern "C" { __declspec(dllimport) FILE *__cdecl _fdopen(int _FileHandle, const char * _Mode); } 
#line 189
extern "C" { __declspec(dllimport) int __cdecl feof(FILE * _File); } 
#line 190
extern "C" { __declspec(dllimport) int __cdecl ferror(FILE * _File); } 
#line 191
extern "C" { __declspec(dllimport) int __cdecl fflush(FILE * _File); } 
#line 192
extern "C" { __declspec(dllimport) int __cdecl fgetc(FILE * _File); } 
#line 193
extern "C" { __declspec(dllimport) int __cdecl _fgetchar(); } 
#line 194
extern "C" { __declspec(dllimport) int __cdecl fgetpos(FILE * _File, fpos_t * _Pos); } 
#line 195
extern "C" { __declspec(dllimport) char *__cdecl fgets(char * _Buf, int _MaxCount, FILE * _File); } 
#line 197
extern "C" { __declspec(dllimport) int __cdecl _fileno(FILE * _File); } 
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) char *__cdecl _tempnam(const char * _DirName, const char * _FilePrefix); } 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl _flushall(); } 
#line 211
extern "C" { __declspec(dllimport) FILE *__cdecl fopen(const char * _Filename, const char * _Mode); } 
#line 213
extern "C" { __declspec(dllimport) errno_t __cdecl fopen_s(FILE ** _File, const char * _Filename, const char * _Mode); } 
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl fprintf(FILE * _File, const char * _Format, ...); } 
#line 217
extern "C" { __declspec(dllimport) int __cdecl fprintf_s(FILE * _File, const char * _Format, ...); } 
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl fputc(int _Ch, FILE * _File); } 
#line 220
extern "C" { __declspec(dllimport) int __cdecl _fputchar(int _Ch); } 
#line 221
extern "C" { __declspec(dllimport) int __cdecl fputs(const char * _Str, FILE * _File); } 
#line 222
extern "C" { __declspec(dllimport) size_t __cdecl fread(void * _DstBuf, size_t _ElementSize, size_t _Count, FILE * _File); } 
#line 224
extern "C" { __declspec(dllimport) size_t __cdecl fread_s(void * _DstBuf, size_t _DstSize, size_t _ElementSize, size_t _Count, FILE * _File); } 
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) FILE *__cdecl freopen(const char * _Filename, const char * _Mode, FILE * _File); } 
#line 228
extern "C" { __declspec(dllimport) errno_t __cdecl freopen_s(FILE ** _File, const char * _Filename, const char * _Mode, FILE * _OldFile); } 
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl fscanf(FILE * _File, const char * _Format, ...); } 
#line 231
extern "C" { __declspec(dllimport) int __cdecl _fscanf_l(FILE * _File, const char * _Format, _locale_t _Locale, ...); } 
#pragma warning(push)
#pragma warning(disable:6530)
#line 235
extern "C" { __declspec(dllimport) int __cdecl fscanf_s(FILE * _File, const char * _Format, ...); } 
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl _fscanf_s_l(FILE * _File, const char * _Format, _locale_t _Locale, ...); } 
#pragma warning(pop)
extern "C" { __declspec(dllimport) int __cdecl fsetpos(FILE * _File, const fpos_t * _Pos); } 
#line 240
extern "C" { __declspec(dllimport) int __cdecl fseek(FILE * _File, long _Offset, int _Origin); } 
#line 241
extern "C" { __declspec(dllimport) long __cdecl ftell(FILE * _File); } 
#line 243
extern "C" { __declspec(dllimport) int __cdecl _fseeki64(FILE * _File, __int64 _Offset, int _Origin); } 
#line 244
extern "C" { __declspec(dllimport) __int64 __cdecl _ftelli64(FILE * _File); } 
#line 246
extern "C" { __declspec(dllimport) size_t __cdecl fwrite(const void * _Str, size_t _Size, size_t _Count, FILE * _File); } 
#line 247
extern "C" { __declspec(dllimport) int __cdecl getc(FILE * _File); } 
#line 248
extern "C" { __declspec(dllimport) int __cdecl getchar(); } 
#line 249
extern "C" { __declspec(dllimport) int __cdecl _getmaxstdio(); } 
#line 251
extern "C" { __declspec(dllimport) char *__cdecl gets_s(char * _Buf, rsize_t _Size); } 
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
template < size_t _Size > inline char * __cdecl gets_s ( char ( & _Buffer ) [ _Size ] ) throw ( ) { return gets_s ( _Buffer, _Size ); }
#line 254
extern "C" { __declspec(dllimport) char *__cdecl gets(char * _Buffer); } 
#line 255
extern "C" { int __cdecl _getw(FILE * _File); } 
#line 261
extern "C" { __declspec(dllimport) int __cdecl _pclose(FILE * _File); } 
#line 262
extern "C" { __declspec(dllimport) FILE *__cdecl _popen(const char * _Command, const char * _Mode); } 
#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl printf(const char * _Format, ...); } 
#line 266
extern "C" { __declspec(dllimport) int __cdecl printf_s(const char * _Format, ...); } 
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl putc(int _Ch, FILE * _File); } 
#line 269
extern "C" { __declspec(dllimport) int __cdecl putchar(int _Ch); } 
#line 270
extern "C" { __declspec(dllimport) int __cdecl puts(const char * _Str); } 
#line 271
extern "C" { __declspec(dllimport) int __cdecl _putw(int _Word, FILE * _File); } 
#line 274
extern "C" { __declspec(dllimport) int __cdecl remove(const char * _Filename); } 
#line 275
extern "C" { __declspec(dllimport) int __cdecl rename(const char * _OldFilename, const char * _NewFilename); } 
#line 276
extern "C" { __declspec(dllimport) int __cdecl _unlink(const char * _Filename); } 
#line 278
extern "C" { __declspec(dllimport) int __cdecl unlink(const char * _Filename); } 
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) void __cdecl rewind(FILE * _File); } 
#line 282
extern "C" { __declspec(dllimport) int __cdecl _rmtmp(); } 
#line 283
extern "C" { __declspec(dllimport) int __cdecl scanf(const char * _Format, ...); } 
#line 284
extern "C" { __declspec(dllimport) int __cdecl _scanf_l(const char * _Format, _locale_t _Locale, ...); } 
#pragma warning(push)
#pragma warning(disable:6530)
#line 288
extern "C" { __declspec(dllimport) int __cdecl scanf_s(const char * _Format, ...); } 
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl _scanf_s_l(const char * _Format, _locale_t _Locale, ...); } 
#pragma warning(pop)
extern "C" { __declspec(dllimport) void __cdecl setbuf(FILE * _File, char * _Buffer); } 
#line 293
extern "C" { __declspec(dllimport) int __cdecl _setmaxstdio(int _Max); } 
#line 294
extern "C" { __declspec(dllimport) unsigned __cdecl _set_output_format(unsigned _Format); } 
#line 295
extern "C" { __declspec(dllimport) unsigned __cdecl _get_output_format(); } 
#line 296
extern "C" { __declspec(dllimport) int __cdecl setvbuf(FILE * _File, char * _Buf, int _Mode, size_t _Size); } 
#line 297
extern "C" { __declspec(dllimport) int __cdecl _snprintf_s(char * _DstBuf, size_t _SizeInBytes, size_t _MaxCount, const char * _Format, ...); } 
#line 298
__pragma( warning(push)) __pragma( warning(disable: 4793)) template < size_t _Size > inline int __cdecl _snprintf_s ( char ( & _Dest ) [ _Size ], size_t _MaxCount, const char * _Format, ... ) throw ( ) { va_list _ArgList; ( __va_start ( & _ArgList, _Format ) ); return _vsnprintf_s ( _Dest, _Size, _MaxCount, _Format, _ArgList ); }__pragma( warning(pop)) 
#line 300
extern "C" { __declspec(dllimport) int __cdecl sprintf_s(char * _DstBuf, size_t _SizeInBytes, const char * _Format, ...); } 
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
__pragma( warning(push)) __pragma( warning(disable: 4793)) template < size_t _Size > inline int __cdecl sprintf_s ( char ( & _Dest ) [ _Size ], const char * _Format, ... ) throw ( ) { va_list _ArgList; ( __va_start ( & _ArgList, _Format ) ); return vsprintf_s ( _Dest, _Size, _Format, _ArgList ); }__pragma( warning(pop)) 
#line 303
extern "C" { __declspec(dllimport) int __cdecl _scprintf(const char * _Format, ...); } 
#line 304
extern "C" { __declspec(dllimport) int __cdecl sscanf(const char * _Src, const char * _Format, ...); } 
#line 305
extern "C" { __declspec(dllimport) int __cdecl _sscanf_l(const char * _Src, const char * _Format, _locale_t _Locale, ...); } 
#pragma warning(push)
#pragma warning(disable:6530)
#line 309
extern "C" { __declspec(dllimport) int __cdecl sscanf_s(const char * _Src, const char * _Format, ...); } 
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl _sscanf_s_l(const char * _Src, const char * _Format, _locale_t _Locale, ...); } 
#line 312
extern "C" { __declspec(dllimport) int __cdecl _snscanf(const char * _Src, size_t _MaxCount, const char * _Format, ...); } 
#line 313
extern "C" { __declspec(dllimport) int __cdecl _snscanf_l(const char * _Src, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...); } 
#line 314
extern "C" { __declspec(dllimport) int __cdecl _snscanf_s(const char * _Src, size_t _MaxCount, const char * _Format, ...); } 
#line 315
extern "C" { __declspec(dllimport) int __cdecl _snscanf_s_l(const char * _Src, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...); } 
#pragma warning(pop)
extern "C" { __declspec(dllimport) FILE *__cdecl tmpfile(); } 
#line 319
extern "C" { __declspec(dllimport) errno_t __cdecl tmpfile_s(FILE ** _File); } 
#line 320
extern "C" { __declspec(dllimport) errno_t __cdecl tmpnam_s(char * _Buf, rsize_t _Size); } 
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
template < size_t _Size > inline errno_t __cdecl tmpnam_s ( char ( & _Buf ) [ _Size ] ) throw ( ) { return tmpnam_s ( _Buf, _Size ); }
#line 323
extern "C" { __declspec(dllimport) char *__cdecl tmpnam(char * _Buffer); } 
#line 324
extern "C" { __declspec(dllimport) int __cdecl ungetc(int _Ch, FILE * _File); } 
#line 325
extern "C" { __declspec(dllimport) int __cdecl vfprintf(FILE * _File, const char * _Format, va_list _ArgList); } 
#line 326
extern "C" { __declspec(dllimport) int __cdecl vfscanf(FILE * _File, const char * _Format, va_list _ArgList); } 
#line 328
extern "C" { __declspec(dllimport) int __cdecl vfprintf_s(FILE * _File, const char * _Format, va_list _ArgList); } 
#line 329
extern "C" { __declspec(dllimport) int __cdecl vfscanf_s(FILE * _File, const char * _Format, va_list _ArgList); } 
#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl vprintf(const char * _Format, va_list _ArgList); } 
#line 332
extern "C" { __declspec(dllimport) int __cdecl vscanf(const char * _Format, va_list _ArgList); } 
#line 334
extern "C" { __declspec(dllimport) int __cdecl vprintf_s(const char * _Format, va_list _ArgList); } 
#line 335
extern "C" { __declspec(dllimport) int __cdecl vscanf_s(const char * _Format, va_list _ArgList); } 
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl vsnprintf(char * _DstBuf, size_t _MaxCount, const char * _Format, va_list _ArgList); } 
#line 339
extern "C" { __declspec(dllimport) int __cdecl vsnprintf_s(char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, va_list _ArgList); } 
#line 340
template < size_t _Size > inline int __cdecl vsnprintf_s ( char ( & _Dest ) [ _Size ], size_t _MaxCount, const char * _Format, va_list _Args ) throw ( ) { return vsnprintf_s ( _Dest, _Size, _MaxCount, _Format, _Args ); }
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl _vsnprintf_s(char * _DstBuf, size_t _SizeInBytes, size_t _MaxCount, const char * _Format, va_list _ArgList); } 
#line 343
template < size_t _Size > inline int __cdecl _vsnprintf_s ( char ( & _Dest ) [ _Size ], size_t _MaxCount, const char * _Format, va_list _Args ) throw ( ) { return _vsnprintf_s ( _Dest, _Size, _MaxCount, _Format, _Args ); }
#pragma warning(push)
#pragma warning(disable:4793)
extern "C" { __declspec(dllimport) int __cdecl _snprintf(char * _Dest, size_t _Count, const char * _Format, ...); } extern "C" { __declspec(dllimport) int __cdecl _vsnprintf(char * _Dest, size_t _Count, const char * _Format, va_list _Args); } 
#pragma warning(pop)
#line 349
extern "C" { __declspec(dllimport) int __cdecl vsprintf_s(char * _DstBuf, size_t _SizeInBytes, const char * _Format, va_list _ArgList); } 
#line 350
template < size_t _Size > inline int __cdecl vsprintf_s ( char ( & _Dest ) [ _Size ], const char * _Format, va_list _Args ) throw ( ) { return vsprintf_s ( _Dest, _Size, _Format, _Args ); }
#line 351
extern "C" { __declspec(dllimport) int __cdecl vsscanf_s(const char * _Src, const char * _Format, va_list _ArgList); } 
#line 352
template < size_t _Size > inline int __cdecl vsscanf_s ( const char ( & _Src ) [ _Size ], const char * _Format, va_list _Args ) throw ( ) { return vsscanf_s ( _Src, _Size, _Format, _Args ); }
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(push)
#pragma warning(disable:4793)
extern "C" { __declspec(dllimport) int __cdecl sprintf(char * _Dest, const char * _Format, ...); } extern "C" { __declspec(dllimport) int __cdecl vsprintf(char * _Dest, const char * _Format, va_list _Args); } 
#line 357
extern "C" { __declspec(dllimport) int __cdecl vsscanf(const char * _srcBuf, const char * _Format, va_list _ArgList); } 
#pragma warning(pop)
extern "C" { __declspec(dllimport) int __cdecl _vscprintf(const char * _Format, va_list _ArgList); } 
#line 360
extern "C" { __declspec(dllimport) int __cdecl _snprintf_c(char * _DstBuf, size_t _MaxCount, const char * _Format, ...); } 
#line 361
extern "C" { __declspec(dllimport) int __cdecl _vsnprintf_c(char * _DstBuf, size_t _MaxCount, const char * _Format, va_list _ArgList); } 
#line 363
extern "C" { __declspec(dllimport) int __cdecl _fprintf_p(FILE * _File, const char * _Format, ...); } 
#line 364
extern "C" { __declspec(dllimport) int __cdecl _printf_p(const char * _Format, ...); } 
#line 365
extern "C" { __declspec(dllimport) int __cdecl _sprintf_p(char * _Dst, size_t _MaxCount, const char * _Format, ...); } 
#line 366
extern "C" { __declspec(dllimport) int __cdecl _vfprintf_p(FILE * _File, const char * _Format, va_list _ArgList); } 
#line 367
extern "C" { __declspec(dllimport) int __cdecl _vprintf_p(const char * _Format, va_list _ArgList); } 
#line 368
extern "C" { __declspec(dllimport) int __cdecl _vsprintf_p(char * _Dst, size_t _MaxCount, const char * _Format, va_list _ArgList); } 
#line 369
extern "C" { __declspec(dllimport) int __cdecl _scprintf_p(const char * _Format, ...); } 
#line 370
extern "C" { __declspec(dllimport) int __cdecl _vscprintf_p(const char * _Format, va_list _ArgList); } 
#line 371
extern "C" { __declspec(dllimport) int __cdecl _set_printf_count_output(int _Value); } 
#line 372
extern "C" { __declspec(dllimport) int __cdecl _get_printf_count_output(); } 
#line 374
extern "C" { __declspec(dllimport) int __cdecl _printf_l(const char * _Format, _locale_t _Locale, ...); } 
#line 375
extern "C" { __declspec(dllimport) int __cdecl _printf_p_l(const char * _Format, _locale_t _Locale, ...); } 
#line 376
extern "C" { __declspec(dllimport) int __cdecl _printf_s_l(const char * _Format, _locale_t _Locale, ...); } 
#line 377
extern "C" { __declspec(dllimport) int __cdecl _vprintf_l(const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 378
extern "C" { __declspec(dllimport) int __cdecl _vprintf_p_l(const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 379
extern "C" { __declspec(dllimport) int __cdecl _vprintf_s_l(const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 381
extern "C" { __declspec(dllimport) int __cdecl _fprintf_l(FILE * _File, const char * _Format, _locale_t _Locale, ...); } 
#line 382
extern "C" { __declspec(dllimport) int __cdecl _fprintf_p_l(FILE * _File, const char * _Format, _locale_t _Locale, ...); } 
#line 383
extern "C" { __declspec(dllimport) int __cdecl _fprintf_s_l(FILE * _File, const char * _Format, _locale_t _Locale, ...); } 
#line 384
extern "C" { __declspec(dllimport) int __cdecl _vfprintf_l(FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 385
extern "C" { __declspec(dllimport) int __cdecl _vfprintf_p_l(FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 386
extern "C" { __declspec(dllimport) int __cdecl _vfprintf_s_l(FILE * _File, const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 388
extern "C" { __declspec(dllimport) int __cdecl _sprintf_l(char * _DstBuf, const char * _Format, _locale_t _Locale, ...); } 
#line 389
extern "C" { __declspec(dllimport) int __cdecl _sprintf_p_l(char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...); } 
#line 390
extern "C" { __declspec(dllimport) int __cdecl _sprintf_s_l(char * _DstBuf, size_t _DstSize, const char * _Format, _locale_t _Locale, ...); } 
#line 391
extern "C" { __declspec(dllimport) int __cdecl _vsprintf_l(char * _DstBuf, const char * _Format, _locale_t, va_list _ArgList); } 
#line 392
extern "C" { __declspec(dllimport) int __cdecl _vsprintf_p_l(char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 393
extern "C" { __declspec(dllimport) int __cdecl _vsprintf_s_l(char * _DstBuf, size_t _DstSize, const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 395
extern "C" { __declspec(dllimport) int __cdecl _scprintf_l(const char * _Format, _locale_t _Locale, ...); } 
#line 396
extern "C" { __declspec(dllimport) int __cdecl _scprintf_p_l(const char * _Format, _locale_t _Locale, ...); } 
#line 397
extern "C" { __declspec(dllimport) int __cdecl _vscprintf_l(const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 398
extern "C" { __declspec(dllimport) int __cdecl _vscprintf_p_l(const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 400
extern "C" { __declspec(dllimport) int __cdecl _snprintf_l(char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...); } 
#line 401
extern "C" { __declspec(dllimport) int __cdecl _snprintf_c_l(char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...); } 
#line 402
extern "C" { __declspec(dllimport) int __cdecl _snprintf_s_l(char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, _locale_t _Locale, ...); } 
#line 403
extern "C" { __declspec(dllimport) int __cdecl _vsnprintf_l(char * _DstBuf, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 404
extern "C" { __declspec(dllimport) int __cdecl _vsnprintf_c_l(char * _DstBuf, size_t _MaxCount, const char *, _locale_t _Locale, va_list _ArgList); } 
#line 405
extern "C" { __declspec(dllimport) int __cdecl _vsnprintf_s_l(char * _DstBuf, size_t _DstSize, size_t _MaxCount, const char * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) FILE *__cdecl _wfsopen(const __wchar_t * _Filename, const __wchar_t * _Mode, int _ShFlag); } 
#line 417
extern "C" { __declspec(dllimport) wint_t __cdecl fgetwc(FILE * _File); } 
#line 418
extern "C" { __declspec(dllimport) wint_t __cdecl _fgetwchar(); } 
#line 419
extern "C" { __declspec(dllimport) wint_t __cdecl fputwc(__wchar_t _Ch, FILE * _File); } 
#line 420
extern "C" { __declspec(dllimport) wint_t __cdecl _fputwchar(__wchar_t _Ch); } 
#line 421
extern "C" { __declspec(dllimport) wint_t __cdecl getwc(FILE * _File); } 
#line 422
extern "C" { __declspec(dllimport) inline wint_t __cdecl getwchar(); } 
#line 423
extern "C" { __declspec(dllimport) wint_t __cdecl putwc(__wchar_t _Ch, FILE * _File); } 
#line 424
extern "C" { __declspec(dllimport) inline wint_t __cdecl putwchar(__wchar_t _Ch); } 
#line 425
extern "C" { __declspec(dllimport) wint_t __cdecl ungetwc(wint_t _Ch, FILE * _File); } 
#line 427
extern "C" { __declspec(dllimport) __wchar_t *__cdecl fgetws(__wchar_t * _Dst, int _SizeInWords, FILE * _File); } 
#line 428
extern "C" { __declspec(dllimport) int __cdecl fputws(const __wchar_t * _Str, FILE * _File); } 
#line 429
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _getws_s(__wchar_t * _Str, size_t _SizeInWords); } 
#line 430
template < size_t _Size > inline wchar_t * __cdecl _getws_s ( wchar_t ( & _String ) [ _Size ] ) throw ( ) { return _getws_s ( _String, _Size ); }
#line 431
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _getws(__wchar_t * _String); } 
#line 432
extern "C" { __declspec(dllimport) int __cdecl _putws(const __wchar_t * _Str); } 
#line 434
extern "C" { __declspec(dllimport) int __cdecl fwprintf(FILE * _File, const __wchar_t * _Format, ...); } 
#line 436
extern "C" { __declspec(dllimport) int __cdecl fwprintf_s(FILE * _File, const __wchar_t * _Format, ...); } 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl wprintf(const __wchar_t * _Format, ...); } 
#line 440
extern "C" { __declspec(dllimport) int __cdecl wprintf_s(const __wchar_t * _Format, ...); } 
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl _scwprintf(const __wchar_t * _Format, ...); } 
#line 443
extern "C" { __declspec(dllimport) int __cdecl vfwprintf(FILE * _File, const __wchar_t * _Format, va_list _ArgList); } 
#line 444
extern "C" { __declspec(dllimport) int __cdecl vfwscanf(FILE * _File, const __wchar_t * _Format, va_list _ArgList); } 
#line 446
extern "C" { __declspec(dllimport) int __cdecl vfwprintf_s(FILE * _File, const __wchar_t * _Format, va_list _ArgList); } 
#line 447
extern "C" { __declspec(dllimport) int __cdecl vfwscanf_s(FILE * _File, const __wchar_t * _Format, va_list _ArgList); } 
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl vwprintf(const __wchar_t * _Format, va_list _ArgList); } 
#line 450
extern "C" { __declspec(dllimport) int __cdecl vwscanf(const __wchar_t * _Format, va_list _ArgList); } 
#line 452
extern "C" { __declspec(dllimport) int __cdecl vwprintf_s(const __wchar_t * _Format, va_list _ArgList); } 
#line 453
extern "C" { __declspec(dllimport) int __cdecl vwscanf_s(const __wchar_t * _Format, va_list _ArgList); } 
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl swprintf_s(__wchar_t * _Dst, size_t _SizeInWords, const __wchar_t * _Format, ...); } 
#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
__pragma( warning(push)) __pragma( warning(disable: 4793)) template < size_t _Size > inline int __cdecl swprintf_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Format, ... ) throw ( ) { va_list _ArgList; ( __va_start ( & _ArgList, _Format ) ); return vswprintf_s ( _Dest, _Size, _Format, _ArgList ); }__pragma( warning(pop)) 
#line 461
extern "C" { __declspec(dllimport) int __cdecl vswprintf_s(__wchar_t * _Dst, size_t _SizeInWords, const __wchar_t * _Format, va_list _ArgList); } 
#line 462
extern "C" { __declspec(dllimport) int __cdecl vswscanf_s(const __wchar_t * _Src, const __wchar_t * _Format, va_list _ArgList); } 
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
template < size_t _Size > inline int __cdecl vswprintf_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Format, va_list _Args ) throw ( ) { return vswprintf_s ( _Dest, _Size, _Format, _Args ); }
#line 465
template < size_t _Size > inline int __cdecl vswscanf_s ( wchar_t ( & _Dest ) [ _Size ], const wchar_t * _Format, va_list _Args ) throw ( ) { return vswscanf_s ( _Dest, _Size, _Format, _Args ); }
#line 466
extern "C" { __declspec(dllimport) int __cdecl vswscanf(const __wchar_t * _srcBuf, const __wchar_t * _Format, va_list _ArgList); } 
#line 468
extern "C" { __declspec(dllimport) int __cdecl _swprintf_c(__wchar_t * _DstBuf, size_t _SizeInWords, const __wchar_t * _Format, ...); } 
#line 469
extern "C" { __declspec(dllimport) int __cdecl _vswprintf_c(__wchar_t * _DstBuf, size_t _SizeInWords, const __wchar_t * _Format, va_list _ArgList); } 
#line 471
extern "C" { __declspec(dllimport) int __cdecl _snwprintf_s(__wchar_t * _DstBuf, size_t _SizeInWords, size_t _MaxCount, const __wchar_t * _Format, ...); } 
#line 472
__pragma( warning(push)) __pragma( warning(disable: 4793)) template < size_t _Size > inline int __cdecl _snwprintf_s ( wchar_t ( & _Dest ) [ _Size ], size_t _Count, const wchar_t * _Format, ... ) throw ( ) { va_list _ArgList; ( __va_start ( & _ArgList, _Format ) ); return _vsnwprintf_s ( _Dest, _Size, _Count, _Format, _ArgList ); }__pragma( warning(pop)) 
#line 473
extern "C" { __declspec(dllimport) int __cdecl _vsnwprintf_s(__wchar_t * _DstBuf, size_t _SizeInWords, size_t _MaxCount, const __wchar_t * _Format, va_list _ArgList); } 
#line 474
template < size_t _Size > inline int __cdecl _vsnwprintf_s ( wchar_t ( & _Dest ) [ _Size ], size_t _Count, const wchar_t * _Format, va_list _Args ) throw ( ) { return _vsnwprintf_s ( _Dest, _Size, _Count, _Format, _Args ); }
#pragma warning(push)
#pragma warning(disable:4793)
extern "C" { __declspec(dllimport) int __cdecl _snwprintf(__wchar_t * _Dest, size_t _Count, const __wchar_t * _Format, ...); } extern "C" { __declspec(dllimport) int __cdecl _vsnwprintf(__wchar_t * _Dest, size_t _Count, const __wchar_t * _Format, va_list _Args); } 
#pragma warning(pop)
#line 480
extern "C" { __declspec(dllimport) int __cdecl _fwprintf_p(FILE * _File, const __wchar_t * _Format, ...); } 
#line 481
extern "C" { __declspec(dllimport) int __cdecl _wprintf_p(const __wchar_t * _Format, ...); } 
#line 482
extern "C" { __declspec(dllimport) int __cdecl _vfwprintf_p(FILE * _File, const __wchar_t * _Format, va_list _ArgList); } 
#line 483
extern "C" { __declspec(dllimport) int __cdecl _vwprintf_p(const __wchar_t * _Format, va_list _ArgList); } 
#line 484
extern "C" { __declspec(dllimport) int __cdecl _swprintf_p(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, ...); } 
#line 485
extern "C" { __declspec(dllimport) int __cdecl _vswprintf_p(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, va_list _ArgList); } 
#line 486
extern "C" { __declspec(dllimport) int __cdecl _scwprintf_p(const __wchar_t * _Format, ...); } 
#line 487
extern "C" { __declspec(dllimport) int __cdecl _vscwprintf_p(const __wchar_t * _Format, va_list _ArgList); } 
#line 489
extern "C" { __declspec(dllimport) int __cdecl _wprintf_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 490
extern "C" { __declspec(dllimport) int __cdecl _wprintf_p_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 491
extern "C" { __declspec(dllimport) int __cdecl _wprintf_s_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 492
extern "C" { __declspec(dllimport) int __cdecl _vwprintf_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 493
extern "C" { __declspec(dllimport) int __cdecl _vwprintf_p_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 494
extern "C" { __declspec(dllimport) int __cdecl _vwprintf_s_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 496
extern "C" { __declspec(dllimport) int __cdecl _fwprintf_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 497
extern "C" { __declspec(dllimport) int __cdecl _fwprintf_p_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 498
extern "C" { __declspec(dllimport) int __cdecl _fwprintf_s_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 499
extern "C" { __declspec(dllimport) int __cdecl _vfwprintf_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 500
extern "C" { __declspec(dllimport) int __cdecl _vfwprintf_p_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 501
extern "C" { __declspec(dllimport) int __cdecl _vfwprintf_s_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 503
extern "C" { __declspec(dllimport) int __cdecl _swprintf_c_l(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 504
extern "C" { __declspec(dllimport) int __cdecl _swprintf_p_l(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 505
extern "C" { __declspec(dllimport) int __cdecl _swprintf_s_l(__wchar_t * _DstBuf, size_t _DstSize, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 506
extern "C" { __declspec(dllimport) int __cdecl _vswprintf_c_l(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 507
extern "C" { __declspec(dllimport) int __cdecl _vswprintf_p_l(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 508
extern "C" { __declspec(dllimport) int __cdecl _vswprintf_s_l(__wchar_t * _DstBuf, size_t _DstSize, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 510
extern "C" { __declspec(dllimport) int __cdecl _scwprintf_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 511
extern "C" { __declspec(dllimport) int __cdecl _scwprintf_p_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 512
extern "C" { __declspec(dllimport) int __cdecl _vscwprintf_p_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 514
extern "C" { __declspec(dllimport) int __cdecl _snwprintf_l(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 515
extern "C" { __declspec(dllimport) int __cdecl _snwprintf_s_l(__wchar_t * _DstBuf, size_t _DstSize, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 516
extern "C" { __declspec(dllimport) int __cdecl _vsnwprintf_l(__wchar_t * _DstBuf, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 517
extern "C" { __declspec(dllimport) int __cdecl _vsnwprintf_s_l(__wchar_t * _DstBuf, size_t _DstSize, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma warning(push)
#pragma warning(disable:4141 4996 4793)
extern "C" { __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl _swprintf(__wchar_t * _Dest, const __wchar_t * _Format, ...); } extern "C" { __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl _vswprintf(__wchar_t * _Dest, const __wchar_t * _Format, va_list _Args); } 
#line 534
extern "C" { __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl __swprintf_l(__wchar_t * _Dest, const __wchar_t * _Format, _locale_t _Plocinfo, ...); } extern "C" { __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl __vswprintf_l(__wchar_t * _Dest, const __wchar_t * _Format, _locale_t _Plocinfo, va_list _Args); } 
#pragma warning(pop)
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\swprintf.inl"
#pragma warning( push )
#pragma warning( disable : 4793 4412 )
extern "C" { static __inline int swprintf(__wchar_t *_String, size_t _Count, const __wchar_t *_Format, ...) 
#line 37
{ 
#line 38
va_list _Arglist; 
#line 39
int _Ret; 
#line 40
__va_start(&_Arglist, _Format); 
#line 41
_Ret = _vswprintf_c_l(_String, _Count, _Format, 0, _Arglist); 
#line 42
_Arglist = ((va_list)0); 
#line 43
return _Ret; 
#line 44
} } 
#pragma warning( pop )
#line 47
#pragma warning( push )
#pragma warning( disable : 4412 )
extern "C" { static __inline int __cdecl vswprintf(__wchar_t *_String, size_t _Count, const __wchar_t *_Format, va_list _Ap) 
#line 50
{ 
#line 51
return _vswprintf_c_l(_String, _Count, _Format, 0, _Ap); 
#line 52
} } 
#pragma warning( pop )
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\swprintf.inl"
#pragma warning( push )
#pragma warning( disable : 4793 4412 )
extern "C" { static __inline int _swprintf_l(__wchar_t *_String, size_t _Count, const __wchar_t *_Format, _locale_t _Plocinfo, ...) 
#line 61
{ 
#line 62
va_list _Arglist; 
#line 63
int _Ret; 
#line 64
__va_start(&_Arglist, _Plocinfo); 
#line 65
_Ret = _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Arglist); 
#line 66
_Arglist = ((va_list)0); 
#line 67
return _Ret; 
#line 68
} } 
#pragma warning( pop )
#line 71
#pragma warning( push )
#pragma warning( disable : 4412 )
extern "C" { static __inline int __cdecl _vswprintf_l(__wchar_t *_String, size_t _Count, const __wchar_t *_Format, _locale_t _Plocinfo, va_list _Ap) 
#line 74
{ 
#line 75
return _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Ap); 
#line 76
} } 
#pragma warning( pop )
#line 80
#pragma warning( push )
#pragma warning( disable : 4996 )
#line 83
#pragma warning( push )
#pragma warning( disable : 4793 4141 )
__declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __inline int swprintf(__wchar_t *_String, const __wchar_t *_Format, ...) 
#line 86
{ 
#line 87
va_list _Arglist; 
#line 88
__va_start(&_Arglist, _Format); 
#line 89
int _Ret = _vswprintf(_String, _Format, _Arglist); 
#line 90
_Arglist = ((va_list)0); 
#line 91
return _Ret; 
#line 92
} 
#pragma warning( pop )
#line 95
#pragma warning( push )
#pragma warning( disable : 4141 )
__declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __inline int __cdecl vswprintf(__wchar_t *_String, const __wchar_t *_Format, va_list _Ap) 
#line 98
{ 
#line 99
return _vswprintf(_String, _Format, _Ap); 
#line 100
} 
#pragma warning( pop )
#line 103
#pragma warning( push )
#pragma warning( disable : 4793 4141 )
__declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __inline int _swprintf_l(__wchar_t *_String, const __wchar_t *_Format, _locale_t _Plocinfo, ...) 
#line 106
{ 
#line 107
va_list _Arglist; 
#line 108
__va_start(&_Arglist, _Plocinfo); 
#line 109
int _Ret = __vswprintf_l(_String, _Format, _Plocinfo, _Arglist); 
#line 110
_Arglist = ((va_list)0); 
#line 111
return _Ret; 
#line 112
} 
#pragma warning( pop )
#line 115
#pragma warning( push )
#pragma warning( disable : 4141 )
__declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Micr" "osoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __inline int __cdecl _vswprintf_l(__wchar_t *_String, const __wchar_t *_Format, _locale_t _Plocinfo, va_list _Ap) 
#line 118
{ 
#line 119
return __vswprintf_l(_String, _Format, _Plocinfo, _Ap); 
#line 120
} 
#pragma warning( pop )
#line 123
#pragma warning( pop )
#line 555 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wtempnam(const __wchar_t * _Directory, const __wchar_t * _FilePrefix); } 
#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl _vscwprintf(const __wchar_t * _Format, va_list _ArgList); } 
#line 562
extern "C" { __declspec(dllimport) int __cdecl _vscwprintf_l(const __wchar_t * _Format, _locale_t _Locale, va_list _ArgList); } 
#line 563
extern "C" { __declspec(dllimport) int __cdecl fwscanf(FILE * _File, const __wchar_t * _Format, ...); } 
#line 564
extern "C" { __declspec(dllimport) int __cdecl _fwscanf_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#pragma warning(push)
#pragma warning(disable:6530)
#line 568
extern "C" { __declspec(dllimport) int __cdecl fwscanf_s(FILE * _File, const __wchar_t * _Format, ...); } 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl _fwscanf_s_l(FILE * _File, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 571
extern "C" { __declspec(dllimport) int __cdecl swscanf(const __wchar_t * _Src, const __wchar_t * _Format, ...); } 
#line 572
extern "C" { __declspec(dllimport) int __cdecl _swscanf_l(const __wchar_t * _Src, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 574
extern "C" { __declspec(dllimport) int __cdecl swscanf_s(const __wchar_t * _Src, const __wchar_t * _Format, ...); } 
#line 576 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl _swscanf_s_l(const __wchar_t * _Src, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 577
extern "C" { __declspec(dllimport) int __cdecl _snwscanf(const __wchar_t * _Src, size_t _MaxCount, const __wchar_t * _Format, ...); } 
#line 578
extern "C" { __declspec(dllimport) int __cdecl _snwscanf_l(const __wchar_t * _Src, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 579
extern "C" { __declspec(dllimport) int __cdecl _snwscanf_s(const __wchar_t * _Src, size_t _MaxCount, const __wchar_t * _Format, ...); } 
#line 580
extern "C" { __declspec(dllimport) int __cdecl _snwscanf_s_l(const __wchar_t * _Src, size_t _MaxCount, const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 581
extern "C" { __declspec(dllimport) int __cdecl wscanf(const __wchar_t * _Format, ...); } 
#line 582
extern "C" { __declspec(dllimport) int __cdecl _wscanf_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
#line 584
extern "C" { __declspec(dllimport) int __cdecl wscanf_s(const __wchar_t * _Format, ...); } 
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl _wscanf_s_l(const __wchar_t * _Format, _locale_t _Locale, ...); } 
#pragma warning(pop)
#line 589
extern "C" { __declspec(dllimport) FILE *__cdecl _wfdopen(int _FileHandle, const __wchar_t * _Mode); } 
#line 590
extern "C" { __declspec(dllimport) FILE *__cdecl _wfopen(const __wchar_t * _Filename, const __wchar_t * _Mode); } 
#line 591
extern "C" { __declspec(dllimport) errno_t __cdecl _wfopen_s(FILE ** _File, const __wchar_t * _Filename, const __wchar_t * _Mode); } 
#line 592
extern "C" { __declspec(dllimport) FILE *__cdecl _wfreopen(const __wchar_t * _Filename, const __wchar_t * _Mode, FILE * _OldFile); } 
#line 593
extern "C" { __declspec(dllimport) errno_t __cdecl _wfreopen_s(FILE ** _File, const __wchar_t * _Filename, const __wchar_t * _Mode, FILE * _OldFile); } 
#line 600
extern "C" { __declspec(dllimport) FILE *__cdecl _wpopen(const __wchar_t * _Command, const __wchar_t * _Mode); } 
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl _wremove(const __wchar_t * _Filename); } 
#line 603
extern "C" { __declspec(dllimport) errno_t __cdecl _wtmpnam_s(__wchar_t * _DstBuf, size_t _SizeInWords); } 
#line 604
template < size_t _Size > inline errno_t __cdecl _wtmpnam_s ( wchar_t ( & _Buffer ) [ _Size ] ) throw ( ) { return _wtmpnam_s ( _Buffer, _Size ); }
#line 605
extern "C" { __declspec(dllimport) __wchar_t *__cdecl _wtmpnam(__wchar_t * _Buffer); } 
#line 607
extern "C" { __declspec(dllimport) wint_t __cdecl _fgetwc_nolock(FILE * _File); } 
#line 608
extern "C" { __declspec(dllimport) wint_t __cdecl _fputwc_nolock(__wchar_t _Ch, FILE * _File); } 
#line 609
extern "C" { __declspec(dllimport) wint_t __cdecl _ungetwc_nolock(wint_t _Ch, FILE * _File); } 
#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { inline wint_t __cdecl getwchar() 
#line 622
{ return fgetwc(&(__iob_func()[0])); } } 
#line 623
extern "C" { inline wint_t __cdecl putwchar(__wchar_t _C) 
#line 624
{ return fputwc(_C, &(__iob_func()[1])); } } 
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) void __cdecl _lock_file(FILE * _File); } 
#line 671
extern "C" { __declspec(dllimport) void __cdecl _unlock_file(FILE * _File); } 
#line 673
extern "C" { __declspec(dllimport) int __cdecl _fclose_nolock(FILE * _File); } 
#line 674
extern "C" { __declspec(dllimport) int __cdecl _fflush_nolock(FILE * _File); } 
#line 675
extern "C" { __declspec(dllimport) size_t __cdecl _fread_nolock(void * _DstBuf, size_t _ElementSize, size_t _Count, FILE * _File); } 
#line 676
extern "C" { __declspec(dllimport) size_t __cdecl _fread_nolock_s(void * _DstBuf, size_t _DstSize, size_t _ElementSize, size_t _Count, FILE * _File); } 
#line 677
extern "C" { __declspec(dllimport) int __cdecl _fseek_nolock(FILE * _File, long _Offset, int _Origin); } 
#line 678
extern "C" { __declspec(dllimport) long __cdecl _ftell_nolock(FILE * _File); } 
#line 679
extern "C" { __declspec(dllimport) int __cdecl _fseeki64_nolock(FILE * _File, __int64 _Offset, int _Origin); } 
#line 680
extern "C" { __declspec(dllimport) __int64 __cdecl _ftelli64_nolock(FILE * _File); } 
#line 681
extern "C" { __declspec(dllimport) size_t __cdecl _fwrite_nolock(const void * _DstBuf, size_t _Size, size_t _Count, FILE * _File); } 
#line 682
extern "C" { __declspec(dllimport) int __cdecl _ungetc_nolock(int _Ch, FILE * _File); } 
#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) char *__cdecl tempnam(const char * _Directory, const char * _FilePrefix); } 
#line 715 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
extern "C" { __declspec(dllimport) int __cdecl fcloseall(); } 
#line 716
extern "C" { __declspec(dllimport) FILE *__cdecl fdopen(int _FileHandle, const char * _Format); } 
#line 717
extern "C" { __declspec(dllimport) int __cdecl fgetchar(); } 
#line 718
extern "C" { __declspec(dllimport) int __cdecl fileno(FILE * _File); } 
#line 719
extern "C" { __declspec(dllimport) int __cdecl flushall(); } 
#line 720
extern "C" { __declspec(dllimport) int __cdecl fputchar(int _Ch); } 
#line 721
extern "C" { __declspec(dllimport) int __cdecl getw(FILE * _File); } 
#line 722
extern "C" { __declspec(dllimport) int __cdecl putw(int _Ch, FILE * _File); } 
#line 723
extern "C" { __declspec(dllimport) int __cdecl rmtmp(); } 
#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\stdio.h"
#pragma pack ( pop )
#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
extern "C" { __declspec(dllimport) unsigned __cdecl _clearfp(); } 
#pragma warning(push)
#pragma warning(disable: 4141)
extern "C" { __declspec(dllimport) unsigned __cdecl _controlfp(unsigned _NewValue, unsigned _Mask); } 
#pragma warning(pop)
extern "C" { __declspec(dllimport) void __cdecl _set_controlfp(unsigned _NewValue, unsigned _Mask); } 
#line 123
extern "C" { __declspec(dllimport) errno_t __cdecl _controlfp_s(unsigned * _CurrentState, unsigned _NewValue, unsigned _Mask); } 
#line 124
extern "C" { __declspec(dllimport) unsigned __cdecl _statusfp(); } 
#line 125
extern "C" { __declspec(dllimport) void __cdecl _fpreset(); } 
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
extern "C" { __declspec(dllimport) unsigned __cdecl _control87(unsigned _NewValue, unsigned _Mask); } 
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
extern "C" { __declspec(dllimport) extern int *__cdecl __fpecode(); } 
#line 241
extern "C" { __declspec(dllimport) double __cdecl _copysign(double _Number, double _Sign); } 
#line 242
extern "C" { __declspec(dllimport) double __cdecl _chgsign(double _X); } 
#line 243
extern "C" { __declspec(dllimport) double __cdecl _scalb(double _X, long _Y); } 
#line 244
extern "C" { __declspec(dllimport) double __cdecl _logb(double _X); } 
#line 245
extern "C" { __declspec(dllimport) double __cdecl _nextafter(double _X, double _Y); } 
#line 246
extern "C" { __declspec(dllimport) int __cdecl _finite(double _X); } 
#line 247
extern "C" { __declspec(dllimport) int __cdecl _isnan(double _X); } 
#line 248
extern "C" { __declspec(dllimport) int __cdecl _fpclass(double _X); } 
#line 251
extern "C" { __declspec(dllimport) float __cdecl _scalbf(float _X, long _Y); } 
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 12.0\\VC\\include\\float.h"
extern "C" { __declspec(dllimport) void __cdecl fpreset(); } 
#line 11 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void matrixPlusVector(float *input, float *bias, float *output, int rows, int columns) ;
#if 0
#line 12
{ 
#line 13
int i = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 14
int j = ((__device_builtin_variable_blockDim.y) * (__device_builtin_variable_blockIdx.y)) + (__device_builtin_variable_threadIdx.y); 
#line 15
if ((i < rows) && (j < columns)) 
#line 16
{ 
#line 17
int ij = (j * rows) + i; 
#line 18
(output[ij]) = ((input[ij]) + (bias[i])); 
#line 19
}  
#line 20
} 
#endif
#line 22 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void matrixTanh(float *input, float *output, int rows, int columns) ;
#if 0
#line 23
{ 
#line 24
int i = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 25
int j = ((__device_builtin_variable_blockDim.y) * (__device_builtin_variable_blockIdx.y)) + (__device_builtin_variable_threadIdx.y); 
#line 26
if ((i < rows) && (j < columns)) 
#line 27
{ 
#line 28
int ij = (j * rows) + i; 
#line 29
(output[ij]) = tanh(input[ij]); 
#line 30
}  
#line 31
} 
#endif
#line 33 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void matrixIncorporateTanhDeriv(float *base, float *activation, float *output, int rows, int columns) ;
#if 0
#line 34
{ 
#line 35
int i = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 36
int j = ((__device_builtin_variable_blockDim.y) * (__device_builtin_variable_blockIdx.y)) + (__device_builtin_variable_threadIdx.y); 
#line 37
if ((i < rows) && (j < columns)) 
#line 38
{ 
#line 39
int ij = (j * rows) + i; 
#line 40
(output[ij]) = (((base[ij]) * ((1) + (activation[ij]))) * ((1) - (activation[ij]))); 
#line 41
}  
#line 42
} 
#endif
#line 44 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void matrixReLu(float *input, float *output, int rows, int columns) ;
#if 0
#line 45
{ 
#line 46
int i = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 47
int j = ((__device_builtin_variable_blockDim.y) * (__device_builtin_variable_blockIdx.y)) + (__device_builtin_variable_threadIdx.y); 
#line 48
if ((i < rows) && (j < columns)) 
#line 49
{ 
#line 50
int ij = (j * rows) + i; 
#line 51
(output[ij]) = fmaxf(input[ij], 0); 
#line 52
}  
#line 53
} 
#endif
#line 55 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void matrixIncorporateReLuDeriv(float *base, float *activation, float *output, int rows, int columns) ;
#if 0
#line 56
{ 
#line 57
int j = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 58
int i = ((__device_builtin_variable_blockDim.y) * (__device_builtin_variable_blockIdx.y)) + (__device_builtin_variable_threadIdx.y); 
#line 59
if ((i < rows) && (j < columns)) 
#line 60
{ 
#line 61
int ij = (j * rows) + i; 
#line 62
(output[ij]) = (((activation[ij]) <= (0)) ? 0 : (base[ij])); 
#line 63
}  
#line 64
} 
#endif
#line 66 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void matrixSigmoid(float *input, float *output, int rows, int columns) ;
#if 0
#line 67
{ 
#line 68
int i = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 69
int j = ((__device_builtin_variable_blockDim.y) * (__device_builtin_variable_blockIdx.y)) + (__device_builtin_variable_threadIdx.y); 
#line 70
if ((i < rows) && (j < columns)) 
#line 71
{ 
#line 72
int ij = (j * rows) + i; 
#line 74
(output[ij]) = ((tanhf((input[ij]) / (2)) + (1)) / (2.0F)); 
#line 75
}  
#line 76
} 
#endif
#line 78 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void matrixIncorporateSigmoidDeriv(float *base, float *activation, float *output, int rows, int columns) ;
#if 0
#line 79
{ 
#line 80
int i = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 81
int j = ((__device_builtin_variable_blockDim.y) * (__device_builtin_variable_blockIdx.y)) + (__device_builtin_variable_threadIdx.y); 
#line 82
if ((i < rows) && (j < columns)) 
#line 83
{ 
#line 84
int ij = (j * rows) + i; 
#line 85
(output[ij]) = (((base[ij]) * (activation[ij])) * ((1) - (activation[ij]))); 
#line 86
}  
#line 87
} 
#endif
#line 89 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void matrixCrossEntropyError(float *sigmoidScores, float *trueLabels, float *output, int rows, int columns) ;
#if 0
#line 90
{ 
#line 91
int i = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 92
int j = ((__device_builtin_variable_blockDim.y) * (__device_builtin_variable_blockIdx.y)) + (__device_builtin_variable_threadIdx.y); 
#line 93
if ((i < rows) && (j < columns)) 
#line 94
{ 
#line 95
int ij = (j * rows) + i; 
#line 96
(output[ij]) = (((trueLabels[ij]) > (0)) ? logf((sigmoidScores[ij]) + (1.192092896e-007F)) : logf(((1) - (sigmoidScores[ij])) + (1.192092896e-007F))); 
#line 97
(output[ij]) *= (-1); 
#line 98
}  
#line 99
} 
#endif
#line 101 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void matrixBellmanErrorAndDeriv(float *predictedQValues, float *maxQHatValues, float *chosenActionIndices, float *currentRewards, float *error, float *errorDerivative, float 
#line 102
discount, float *isLastEpisode, int rows, int columns) ;
#if 0
#line 103
{ 
#line 104
int i = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 105
int j = ((__device_builtin_variable_blockDim.y) * (__device_builtin_variable_blockIdx.y)) + (__device_builtin_variable_threadIdx.y); 
#line 106
if ((i < rows) && (j < columns)) 
#line 107
{ 
#line 108
int ij = (j * rows) + i; 
#line 109
float y = ((isLastEpisode[j]) > (0)) ? currentRewards[j] : ((currentRewards[j]) + (discount * (maxQHatValues[j]))); 
#line 110
(errorDerivative[ij]) = (0); 
#line 113
if (i == (chosenActionIndices[j])) 
#line 114
{ 
#line 115
float tmp = (predictedQValues[i]) - y; 
#line 116
(errorDerivative[ij]) = tmp; 
#line 117
(error[j]) = (((0.5) * tmp) * tmp); 
#line 118
}  
#line 119
}  
#line 120
} 
#endif
#line 122 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void DqnStanfordEvaluation(float *predictedactionIndices, float *chosenActionIndices, float *currentRewards, float *matchPredictRewards, float *nonMatchPredictRewards, int rows) ;
#if 0
#line 123
{ 
#line 124
int i = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 125
if (i < rows) 
#line 126
{ 
#line 127
if ((predictedactionIndices[i]) == (chosenActionIndices[i])) 
#line 128
{ 
#line 129
(matchPredictRewards[i]) = (currentRewards[i]); 
#line 130
} else 
#line 132
{ 
#line 133
(nonMatchPredictRewards[i]) = (currentRewards[i]); 
#line 134
}  
#line 135
}  
#line 136
} 
#endif
#line 138 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void matrixHadamard(float *input1, float *input2, float alpha, float *output, float beta, int rows, int columns) ;
#if 0
#line 139
{ 
#line 140
int i = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 141
int j = ((__device_builtin_variable_blockDim.y) * (__device_builtin_variable_blockIdx.y)) + (__device_builtin_variable_threadIdx.y); 
#line 142
if ((i < rows) && (j < columns)) 
#line 143
{ 
#line 144
int ij = (j * rows) + i; 
#line 145
(output[ij]) = (((alpha * (input1[ij])) * (input2[ij])) + (beta * (output[ij]))); 
#line 146
}  
#line 147
} 
#endif
#line 149 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void columnwiseMax(float *input, float *output, int rows, int columns) ;
#if 0
#line 150
{ 
#line 151
int j = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 152
if (j < columns) 
#line 153
{ 
#line 154
float maxInColumn = input[(j * rows) + 0]; 
#line 155
for (int i = 0; i < rows; i++) 
#line 156
{ 
#line 157
int ij = (j * rows) + i; 
#line 158
if ((input[ij]) > maxInColumn) 
#line 159
{ 
#line 160
maxInColumn = (input[ij]); 
#line 161
}  
#line 162
}  
#line 163
(output[j]) = maxInColumn; 
#line 164
}  
#line 165
} 
#endif
#line 167 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
 __noinline__ void columnwiseMaxIndex(float *input, float *output, int rows, int columns) ;
#if 0
#line 168
{ 
#line 169
int j = ((__device_builtin_variable_blockDim.x) * (__device_builtin_variable_blockIdx.x)) + (__device_builtin_variable_threadIdx.x); 
#line 170
if (j < columns) 
#line 171
{ 
#line 172
int maxInColumnIndex = 0; 
#line 173
float maxInColumn = input[(j * rows) + maxInColumnIndex]; 
#line 174
for (int i = 0; i < rows; i++) 
#line 175
{ 
#line 176
int ij = (j * rows) + i; 
#line 177
if ((input[ij]) > maxInColumn) 
#line 178
{ 
#line 179
maxInColumn = (input[ij]); 
#line 180
maxInColumnIndex = i; 
#line 181
}  
#line 182
}  
#line 183
(output[j]) = ((float)maxInColumnIndex); 
#line 184
}  
#line 185
} 
#endif
#line 187 "D:/vinods/Repos/MSR-DSSM/private/vinods/CudalibManaged/Kernels/kernel.cu"
int main() 
#line 188
{ 
#line 189
return 0; 
#line 190
} 
#line 1 "kernel.cudafe1.stub.c"
#define _NV_ANON_NAMESPACE _GLOBAL__N__14_kernel_cpp1_ii_aea4bb27
#line 1 "kernel.cudafe1.stub.c"
#include "kernel.cudafe1.stub.c"
#line 1 "kernel.cudafe1.stub.c"
#undef _NV_ANON_NAMESPACE
