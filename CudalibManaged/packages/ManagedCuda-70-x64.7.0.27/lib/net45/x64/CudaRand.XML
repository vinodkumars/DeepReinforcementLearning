<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CudaRand</name>
    </assembly>
    <members>
        <member name="T:ManagedCuda.CudaRand.CudaRandDevice">
            <summary>
            Wrapper for a CUrand generator handle in device mode
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.#ctor(ManagedCuda.CudaRand.GeneratorType)">
            <summary>
            Creates a new random number generator of type Type
            </summary>
            <param name="Type">Generator type</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.SetStream(ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Set the current stream for CURAND kernel launches.  All library functions
            will use this stream until set again.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.SetPseudoRandomGeneratorSeed(System.UInt64)">
            <summary> 
            Set the seed value of the pseudorandom number generator.<para/>
            All values of seed are valid.  Different seeds will produce different sequences.
            Different seeds will often not be statistically correlated with each other,
            but some pairs of seed values may generate sequences which are statistically correlated.
            </summary>
            <param name="seed">All values of seed are valid.</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.SetOffset(System.UInt64)">
            <summary>
            Set the absolute offset of the pseudo or quasirandom number generator.
            <para/>
            All values of offset are valid.  The offset position is absolute, not 
            relative to the current position in the sequence.
            </summary>
            <param name="offset">All values of offset are valid.</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.SetGeneratorOrdering(ManagedCuda.CudaRand.Ordering)">
            <summary>
            
            Set the ordering of results of the pseudo or quasirandom number generator.
            <para/>
            Legal values of order for pseudorandom generators are:<para/>
            - <see cref="F:ManagedCuda.CudaRand.Ordering.PseudoDefault"/><para/>
            - <see cref="F:ManagedCuda.CudaRand.Ordering.PseudoBest"/><para/>
            - <see cref="F:ManagedCuda.CudaRand.Ordering.PseudoSeeded"/><para/>
            <para/>
            Legal values of order for quasirandom generators are:<para/>
            - <see cref="F:ManagedCuda.CudaRand.Ordering.QuasiDefault"/>
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.SetQuasiRandomGeneratorDimensions(System.UInt32)">
            <summary>
            Set the number of dimensions to be generated by the quasirandom number generator.
            <para/>
            Legal values for dimensions are 1 to 20000.
            </summary>
            <param name="dimensions">Legal values for dimensions are 1 to 20000.</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.Generate32(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Use generator to generate num 32-bit results into the device memory at
            output. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using <see cref="M:ManagedCuda.CudaRand.CudaRandDevice.SetStream(ManagedCuda.BasicTypes.CUstream)"/>, or the null stream if no stream has been set.
            <para/>
            Results are 32-bit values with every bit random.
            </summary>
            <param name="output">DevicePtr of type uint*</param>
            <param name="size">Number of random elements to create</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.Generate64(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Use generator to generate num 64-bit results into the device memory at
            output. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using <see cref="M:ManagedCuda.CudaRand.CudaRandDevice.SetStream(ManagedCuda.BasicTypes.CUstream)"/>, or the null stream if no stream has been set.
            <para/>
            Results are 64-bit values with every bit random.
            </summary>
            <param name="output">DevicePtr of type ulong*</param>
            <param name="size">Number of random elements to create</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.Generate(ManagedCuda.CudaDeviceVariable{System.UInt32})">
            <summary>
            Use generator to generate num 32-bit results into the device memory at
            output. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using <see cref="M:ManagedCuda.CudaRand.CudaRandDevice.SetStream(ManagedCuda.BasicTypes.CUstream)"/>, or the null stream if no stream has been set.
            <para/>
            Results are 32-bit values with every bit random.
            </summary>
            <param name="output">CudaDeviceVariable</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.Generate(ManagedCuda.CudaDeviceVariable{System.UInt64})">
            <summary>
            Use generator to generate num 64-bit results into the device memory at
            output. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using <see cref="M:ManagedCuda.CudaRand.CudaRandDevice.SetStream(ManagedCuda.BasicTypes.CUstream)"/>, or the null stream if no stream has been set.
            <para/>
            Results are 64-bit values with every bit random.
            </summary>
            <param name="output">CudaDeviceVariable</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateUniform32(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using SetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values between 0.0f and 1.0f,
            excluding 0.0f and including 1.0f.
            </summary>
            <param name="output">DevicePtr of type float*</param>
            <param name="size">Number of random elements to create</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateUniform64(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit double precision floating point values between 
            0.0 and 1.0, excluding 0.0 and including 1.0.
            </summary>
            <param name="output">DevicePtr of type double*</param>
            <param name="size">Number of random elements to create</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateUniform(ManagedCuda.CudaDeviceVariable{System.Single})">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using SetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values between 0.0f and 1.0f,
            excluding 0.0f and including 1.0f.
            </summary>
            <param name="output">CudaDeviceVariable</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateUniform(ManagedCuda.CudaDeviceVariable{System.Double})">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit double precision floating point values between 
            0.0 and 1.0, excluding 0.0 and including 1.0.
            </summary>
            <param name="output">CudaDeviceVariable</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateNormal32(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.Single,System.Single)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values with mean  mean and standard
            deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with curandCreateGenerator()
            and results calculated on the CPU with generators created with
            curandCreateGeneratorHost(). These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <param name="output">DevicePtr of type float*</param>
            <param name="size">Number of random elements to create</param>
            <param name="mean"></param>
            <param name="stddev"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateNormal64(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.Single,System.Single)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit floating point values with mean mean and standard
            deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with curandCreateGenerator()
            and results calculated on the CPU with generators created with
            curandCreateGeneratorHost().  These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <param name="output">DevicePtr of type double*</param>
            <param name="size">Number of random elements to create</param>
            <param name="mean"></param>
            <param name="stddev"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateNormal(ManagedCuda.CudaDeviceVariable{System.Single},System.Single,System.Single)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values with mean  mean and standard
            deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with curandCreateGenerator()
            and results calculated on the CPU with generators created with
            curandCreateGeneratorHost(). These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <param name="output">CudaDeviceVariable</param>
            <param name="mean"></param>
            <param name="stddev"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateNormal(ManagedCuda.CudaDeviceVariable{System.Double},System.Double,System.Double)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit floating point values with mean mean and standard
            deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with curandCreateGenerator()
            and results calculated on the CPU with generators created with
            curandCreateGeneratorHost().  These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <param name="output">CudaDeviceVariable</param>
            <param name="mean"></param>
            <param name="stddev"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateLogNormal32(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.Single,System.Single)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using ::curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values with log-normal distribution based on
            an associated normal distribution with mean mean and standard deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality. <para/>
            The normally distributed results are transformed into log-normal distribution.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with ::curandCreateGenerator()
            and results calculated on the CPU with generators created with
            ::curandCreateGeneratorHost(). These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <param name="output">DevicePtr of type float*</param>
            <param name="size">Number of random elements to create</param>
            <param name="mean"></param>
            <param name="stddev"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateLogNormal64(ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.Single,System.Single)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit floating point values with log-normal distribution based on
            an associated normal distribution with mean mean and standard deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            The normally distributed results are transformed into log-normal distribution.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with ::curandCreateGenerator()
            and results calculated on the CPU with generators created with
            ::curandCreateGeneratorHost().  These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <param name="output">DevicePtr of type double*</param>
            <param name="size">Number of random elements to create</param>
            <param name="mean"></param>
            <param name="stddev"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateLogNormal(ManagedCuda.CudaDeviceVariable{System.Single},System.Single,System.Single)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using ::curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values with log-normal distribution based on
            an associated normal distribution with mean mean and standard deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality. <para/>
            The normally distributed results are transformed into log-normal distribution.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with ::curandCreateGenerator()
            and results calculated on the CPU with generators created with
            ::curandCreateGeneratorHost(). These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <param name="output">CudaDeviceVariable</param>
            <param name="mean"></param>
            <param name="stddev"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateLogNormal(ManagedCuda.CudaDeviceVariable{System.Double},System.Double,System.Double)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit floating point values with log-normal distribution based on
            an associated normal distribution with mean mean and standard deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            The normally distributed results are transformed into log-normal distribution.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with ::curandCreateGenerator()
            and results calculated on the CPU with generators created with
            ::curandCreateGeneratorHost().  These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <param name="output">CudaDeviceVariable</param>
            <param name="mean"></param>
            <param name="stddev"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GenerateSeeds">
            <summary>
            Generate the starting state of the generator.  This function is
            automatically called by generation functions such as
            Generate(CudaDeviceVariable) and GenerateUniform(CudaDeviceVariable).
            It can be called manually for performance testing reasons to separate
            timings for starting state generation and random number generation.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GetScrambleConstants32">
            <summary>
            Get scramble constants that can be used for quasirandom number generation.
            <para/>
            The array contains constants for many dimensions. Each dimension
            has a single uint constant. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GetScrambleConstants64">
            <summary>
            Get scramble constants that can be used for quasirandom number generation.
            <para/>
            The array contains constants for many dimensions. Each dimension
            has a single ulong constant. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GetDirectionVectors32(ManagedCuda.CudaRand.DirectionVectorSet)">
            <summary>
            Get an array of direction vectors that can be used for quasirandom number generation.
            <para/>
            The array contains vectors for many dimensions. Each dimension
            has 32 vectors. Each individual vector is an unsigned int.
            <para/>
            Legal values for set are:
            - <see cref="F:ManagedCuda.CudaRand.DirectionVectorSet.JoeKuo6_32"/> (20,000 dimensions)
            - <see cref="F:ManagedCuda.CudaRand.DirectionVectorSet.ScrambledJoeKuo6_32"/> (20,000 dimensions)
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GetDirectionVectors64(ManagedCuda.CudaRand.DirectionVectorSet)">
            <summary>
            Get an array of direction vectors that can be used for quasirandom number generation.
            <para/>
            The array contains vectors for many dimensions. Each dimension
            has 64 vectors. Each individual vector is an unsigned long long.
            <para/>
            Legal values for set are:
            - <see cref="F:ManagedCuda.CudaRand.DirectionVectorSet.JoeKuo6_64"/> (20,000 dimensions)
            - <see cref="F:ManagedCuda.CudaRand.DirectionVectorSet.ScrambledJoeKuo6_64"/> (20,000 dimensions)
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandDevice.GetVersion">
            <summary>
            Returns the version number of the dynamically linked CURAND library.   
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaRand.CudaRandDevice.Generator">
            <summary>
            Returns the wrapped curand generator handle
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaRand.CudaRandException">
            <summary>
            An CudaRandException is thrown, if any wrapped call to the CURAND-library does not return <see cref="F:ManagedCuda.CudaRand.CurandStatus.Success"/>.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="serInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandException.#ctor(ManagedCuda.CudaRand.CurandStatus)">
            <summary>
            
            </summary>
            <param name="error"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandException.#ctor(ManagedCuda.CudaRand.CurandStatus,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="error"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandException.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:ManagedCuda.CudaRand.CudaRandException.CudaRandError">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaRand.CudaRandHost">
            <summary>
            Wrapper for a CUrand generator handle in host mode
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.#ctor(ManagedCuda.CudaRand.GeneratorType)">
            <summary>
            Creates a new random number generator of type Type
            </summary>
            <param name="Type">Generator type</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.SetPseudoRandomGeneratorSeed(System.UInt64)">
            <summary> 
            Set the seed value of the pseudorandom number generator.<para/>
            All values of seed are valid.  Different seeds will produce different sequences.
            Different seeds will often not be statistically correlated with each other,
            but some pairs of seed values may generate sequences which are statistically correlated.
            </summary>
            <param name="seed">All values of seed are valid.</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.SetOffset(System.UInt64)">
            <summary>
            Set the absolute offset of the pseudo or quasirandom number generator.
            <para/>
            All values of offset are valid.  The offset position is absolute, not 
            relative to the current position in the sequence.
            </summary>
            <param name="offset">All values of offset are valid.</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.SetGeneratorOrdering(ManagedCuda.CudaRand.Ordering)">
            <summary>
            
            Set the ordering of results of the pseudo or quasirandom number generator.
            <para/>
            Legal values of order for pseudorandom generators are:<para/>
            - <see cref="F:ManagedCuda.CudaRand.Ordering.PseudoDefault"/><para/>
            - <see cref="F:ManagedCuda.CudaRand.Ordering.PseudoBest"/><para/>
            - <see cref="F:ManagedCuda.CudaRand.Ordering.PseudoSeeded"/><para/>
            <para/>
            Legal values of order for quasirandom generators are:<para/>
            - <see cref="F:ManagedCuda.CudaRand.Ordering.QuasiDefault"/>
            </summary>
            <param name="order"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.SetQuasiRandomGeneratorDimensions(System.UInt32)">
            <summary>
            Set the number of dimensions to be generated by the quasirandom number generator.
            <para/>
            Legal values for dimensions are 1 to 20000.
            </summary>
            <param name="dimensions">Legal values for dimensions are 1 to 20000.</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.Generate(System.UInt32[])">
            <summary>
            Use generator to generate num 32-bit results into the device memory at
            output. The device memory must have been previously allocated and be
            large enough to hold all the results.
            <para/>
            Results are 32-bit values with every bit random.
            </summary>
            <param name="output">CudaDeviceVariable</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.Generate(System.UInt64[])">
            <summary>
            Use generator to generate num 64-bit results into the device memory at
            output. The device memory must have been previously allocated and be
            large enough to hold all the results.
            <para/>
            Results are 64-bit values with every bit random.
            </summary>
            <param name="output">CudaDeviceVariable</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.GenerateUniform(System.Single[])">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using SetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values between 0.0f and 1.0f,
            excluding 0.0f and including 1.0f.
            </summary>
            <param name="output">CudaDeviceVariable</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.GenerateUniform(System.Double[])">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit double precision floating point values between 
            0.0 and 1.0, excluding 0.0 and including 1.0.
            </summary>
            <param name="output">CudaDeviceVariable</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.GenerateNormal(System.Single[],System.Single,System.Single)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values with mean  mean and standard
            deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with curandCreateGenerator()
            and results calculated on the CPU with generators created with
            curandCreateGeneratorHost(). These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <param name="output">CudaDeviceVariable</param>
            <param name="mean"></param>
            <param name="stddev"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.GenerateNormal(System.Double[],System.Double,System.Double)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit floating point values with mean mean and standard
            deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with curandCreateGenerator()
            and results calculated on the CPU with generators created with
            curandCreateGeneratorHost().  These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <param name="output">CudaDeviceVariable</param>
            <param name="mean"></param>
            <param name="stddev"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.GenerateLogNormal(System.Single[],System.Single,System.Single)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using ::curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values with log-normal distribution based on
            an associated normal distribution with mean mean and standard deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality. <para/>
            The normally distributed results are transformed into log-normal distribution.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with ::curandCreateGenerator()
            and results calculated on the CPU with generators created with
            ::curandCreateGeneratorHost(). These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <param name="output">CudaDeviceVariable</param>
            <param name="mean"></param>
            <param name="stddev"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.GenerateLogNormal(System.Double[],System.Double,System.Double)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit floating point values with log-normal distribution based on
            an associated normal distribution with mean mean and standard deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            The normally distributed results are transformed into log-normal distribution.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with ::curandCreateGenerator()
            and results calculated on the CPU with generators created with
            ::curandCreateGeneratorHost().  These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <param name="output">CudaDeviceVariable</param>
            <param name="mean"></param>
            <param name="stddev"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.GenerateSeeds">
            <summary>
            Generate the starting state of the generator.  This function is
            automatically called by generation functions such as
            Generate(CudaDeviceVariable) and GenerateUniform(CudaDeviceVariable).
            It can be called manually for performance testing reasons to separate
            timings for starting state generation and random number generation.
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.GetScrambleConstants32">
            <summary>
            Get scramble constants that can be used for quasirandom number generation.
            <para/>
            The array contains constants for many dimensions. Each dimension
            has a single uint constant. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.GetScrambleConstants64">
            <summary>
            Get scramble constants that can be used for quasirandom number generation.
            <para/>
            The array contains constants for many dimensions. Each dimension
            has a single ulong constant. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.GetDirectionVectors32(ManagedCuda.CudaRand.DirectionVectorSet)">
            <summary>
            Get an array of direction vectors that can be used for quasirandom number generation.
            <para/>
            The array contains vectors for many dimensions. Each dimension
            has 32 vectors. Each individual vector is an unsigned int.
            <para/>
            Legal values for set are:
            - <see cref="F:ManagedCuda.CudaRand.DirectionVectorSet.JoeKuo6_32"/> (20,000 dimensions)
            - <see cref="F:ManagedCuda.CudaRand.DirectionVectorSet.ScrambledJoeKuo6_32"/> (20,000 dimensions)
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.GetDirectionVectors64(ManagedCuda.CudaRand.DirectionVectorSet)">
            <summary>
            Get an array of direction vectors that can be used for quasirandom number generation.
            <para/>
            The array contains vectors for many dimensions. Each dimension
            has 64 vectors. Each individual vector is an unsigned long long.
            <para/>
            Legal values for set are:
            - <see cref="F:ManagedCuda.CudaRand.DirectionVectorSet.JoeKuo6_64"/> (20,000 dimensions)
            - <see cref="F:ManagedCuda.CudaRand.DirectionVectorSet.ScrambledJoeKuo6_64"/> (20,000 dimensions)
            </summary>
            <param name="set"></param>
            <returns></returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandHost.GetVersion">
            <summary>
            Returns the version number of the dynamically linked CURAND library.   
            </summary>
        </member>
        <member name="P:ManagedCuda.CudaRand.CudaRandHost.Generator">
            <summary>
            Returns the wrapped curand generator handle
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaRand.CudaRandNativeMethods">
            <summary>
            C# Wrapper-Methods for CuRand functions defined in curand.h
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandCreateGenerator(ManagedCuda.CudaRand.CurandGenerator@,ManagedCuda.CudaRand.GeneratorType)">
            <summary>
            Creates a new random number generator of type rng_type and returns it in ref generator.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandCreateGeneratorHost(ManagedCuda.CudaRand.CurandGenerator@,ManagedCuda.CudaRand.GeneratorType)">
            <summary>
            Creates a new host CPU random number generator of type rng_type and returns it in ref generator.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandDestroyGenerator(ManagedCuda.CudaRand.CurandGenerator)">
            <summary>
            Destroy an existing generator and free all memory associated with its state.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGetVersion(System.Int32@)">
            <summary>
            Return in version the version number of the dynamically linked CURAND
            library.  The format is the same as CUDART_VERSION from the CUDA Runtime.
            The only supported configuration is CURAND version equal to CUDA Runtime
            version.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandSetStream(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUstream)">
            <summary>
            Set the current stream for CURAND kernel launches.  All library functions
            will use this stream until set again.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandSetPseudoRandomGeneratorSeed(ManagedCuda.CudaRand.CurandGenerator,System.UInt64)">
            <summary>
            Set the seed value of the pseudorandom number generator.
            All values of seed are valid.  Different seeds will produce different sequences.
            Different seeds will often not be statistically correlated with each other,
            but some pairs of seed values may generate sequences which are statistically correlated.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandSetGeneratorOffset(ManagedCuda.CudaRand.CurandGenerator,System.UInt64)">
            <summary>
            Set the absolute offset of the pseudo or quasirandom number generator.
            <para/>
            All values of offset are valid.  The offset position is absolute, not 
            relative to the current position in the sequence.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandSetGeneratorOrdering(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.CudaRand.Ordering)">
            <summary>
            Set the ordering of results of the pseudo or quasirandom number generator.
            <para/>
            Legal values of order for pseudorandom generators are:<para/>
            - <see cref="F:ManagedCuda.CudaRand.Ordering.PseudoDefault"/><para/>
            - <see cref="F:ManagedCuda.CudaRand.Ordering.PseudoBest"/><para/>
            - <see cref="F:ManagedCuda.CudaRand.Ordering.PseudoSeeded"/><para/>
            <para/>
            Legal values of order for quasirandom generators are:<para/>
            - <see cref="F:ManagedCuda.CudaRand.Ordering.QuasiDefault"/>
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandSetQuasiRandomGeneratorDimensions(ManagedCuda.CudaRand.CurandGenerator,System.UInt32)">
            <summary>
            Set the number of dimensions to be generated by the quasirandom number generator.
            <para/>
            Legal values for num_dimensions are 1 to 20000.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerate(ManagedCuda.CudaRand.CurandGenerator,System.UInt32[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Use generator to generate num 32-bit results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using <see cref="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandSetStream(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUstream)"/>, or the null stream if no stream has been set.
            <para/>
            Results are 32-bit values with every bit random.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerate(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Use generator to generate num 32-bit results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using <see cref="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandSetStream(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUstream)"/>, or the null stream if no stream has been set.
            <para/>
            Results are 32-bit values with every bit random.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateLongLong(ManagedCuda.CudaRand.CurandGenerator,System.UInt64[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Use generator to generate num 64-bit results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using <see cref="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandSetStream(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUstream)"/>, or the null stream if no stream has been set.
            <para/>
            Results are 64-bit values with every bit random.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateLongLong(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Use generator to generate num 64-bit results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using <see cref="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandSetStream(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUstream)"/>, or the null stream if no stream has been set.
            <para/>
            Results are 64-bit values with every bit random.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateUniform(ManagedCuda.CudaRand.CurandGenerator,System.Single[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values between 0.0f and 1.0f,
            excluding 0.0f and including 1.0f.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateUniform(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values between 0.0f and 1.0f,
            excluding 0.0f and including 1.0f.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateUniformDouble(ManagedCuda.CudaRand.CurandGenerator,System.Double[],ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit double precision floating point values between 
            0.0 and 1.0, excluding 0.0 and including 1.0.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateUniformDouble(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit double precision floating point values between 
            0.0 and 1.0, excluding 0.0 and including 1.0.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateNormal(ManagedCuda.CudaRand.CurandGenerator,System.Single[],ManagedCuda.BasicTypes.SizeT,System.Single,System.Single)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values with mean  mean and standard
            deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with curandCreateGenerator()
            and results calculated on the CPU with generators created with
            curandCreateGeneratorHost(). These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateNormal(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.Single,System.Single)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results. Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values with mean  mean and standard
            deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with curandCreateGenerator()
            and results calculated on the CPU with generators created with
            curandCreateGeneratorHost(). These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateNormalDouble(ManagedCuda.CudaRand.CurandGenerator,System.Double[],ManagedCuda.BasicTypes.SizeT,System.Double,System.Double)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit floating point values with mean mean and standard
            deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with curandCreateGenerator()
            and results calculated on the CPU with generators created with
            curandCreateGeneratorHost().  These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateNormalDouble(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.Double,System.Double)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr. The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit floating point values with mean mean and standard
            deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with curandCreateGenerator()
            and results calculated on the CPU with generators created with
            curandCreateGeneratorHost().  These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateLogNormal(ManagedCuda.CudaRand.CurandGenerator,System.Single[],ManagedCuda.BasicTypes.SizeT,System.Single,System.Single)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using ::curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values with log-normal distribution based on
            an associated normal distribution with mean mean and standard deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality. <para/>
            The normally distributed results are transformed into log-normal distribution.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with ::curandCreateGenerator()
            and results calculated on the CPU with generators created with
            ::curandCreateGeneratorHost(). These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateLogNormal(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.Single,System.Single)">
            <summary>
            Use generator to generate num float results into the device memory at
            outputPtr.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using ::curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 32-bit floating point values with log-normal distribution based on
            an associated normal distribution with mean mean and standard deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality. <para/>
            The normally distributed results are transformed into log-normal distribution.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with ::curandCreateGenerator()
            and results calculated on the CPU with generators created with
            ::curandCreateGeneratorHost(). These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateLogNormalDouble(ManagedCuda.CudaRand.CurandGenerator,System.Double[],ManagedCuda.BasicTypes.SizeT,System.Double,System.Double)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit floating point values with log-normal distribution based on
            an associated normal distribution with mean mean and standard deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            The normally distributed results are transformed into log-normal distribution.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with ::curandCreateGenerator()
            and results calculated on the CPU with generators created with
            ::curandCreateGeneratorHost().  These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateLogNormalDouble(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.Double,System.Double)">
            <summary>
            Use generator to generate num double results into the device memory at
            outputPtr.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using curandSetStream(), or the null stream if no stream has been set.
            <para/>
            Results are 64-bit floating point values with log-normal distribution based on
            an associated normal distribution with mean mean and standard deviation stddev.
            <para/>
            Normally distributed results are generated from pseudorandom generators
            with a Box-Muller transform, and so require num to be even.
            Quasirandom generators use an inverse cumulative distribution 
            function to preserve dimensionality.
            The normally distributed results are transformed into log-normal distribution.
            <para/>
            There may be slight numerical differences between results generated
            on the GPU with generators created with ::curandCreateGenerator()
            and results calculated on the CPU with generators created with
            ::curandCreateGeneratorHost().  These differences arise because of
            differences in results for transcendental functions.  In addition,
            future versions of CURAND may use newer versions of the CUDA math
            library, so different versions of CURAND may give slightly different
            numerical values.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGenerateSeeds(ManagedCuda.CudaRand.CurandGenerator)">
            <summary>
            Generate the starting state of the generator.  This function is
            automatically called by generation functions such as
            ::curandGenerate() and ::curandGenerateUniform().
            It can be called manually for performance testing reasons to separate
            timings for starting state generation and random number generation.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGetDirectionVectors32(System.IntPtr@,ManagedCuda.CudaRand.DirectionVectorSet)">
            <summary>
            Get a pointer to an array of direction vectors that can be used
            for quasirandom number generation.  The resulting pointer will
            reference an array of direction vectors in host memory.
            <para/>
            The array contains vectors for many dimensions.  Each dimension
            has 32 vectors.  Each individual vector is an unsigned int.
            <para/>
            Legal values for set are:
            - <see cref="F:ManagedCuda.CudaRand.DirectionVectorSet.JoeKuo6_32"/> (20,000 dimensions)
            - <see cref="F:ManagedCuda.CudaRand.DirectionVectorSet.ScrambledJoeKuo6_32"/> (20,000 dimensions)
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGetScrambleConstants32(System.IntPtr@)">
            <summary>
            Get a pointer to an array of scramble constants that can be used
            for quasirandom number generation.  The resulting pointer will
            reference an array of unsinged ints in host memory.
            <para/>
            The array contains constants for many dimensions.  Each dimension
            has a single unsigned int constant.
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGetDirectionVectors64(System.IntPtr@,ManagedCuda.CudaRand.DirectionVectorSet)">
            <summary>
            Get a pointer to an array of direction vectors that can be used
            for quasirandom number generation. The resulting pointer will
            reference an array of direction vectors in host memory.
            <para/>
            The array contains vectors for many dimensions. Each dimension
            has 64 vectors. Each individual vector is an unsigned long long.
            <para/>
            Legal values for set are:
            - <see cref="F:ManagedCuda.CudaRand.DirectionVectorSet.JoeKuo6_64"/> (20,000 dimensions)
            - <see cref="F:ManagedCuda.CudaRand.DirectionVectorSet.ScrambledJoeKuo6_64"/> (20,000 dimensions)
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGetScrambleConstants64(System.IntPtr@)">
            <summary>
            Get a pointer to an array of scramble constants that can be used
            for quasirandom number generation. The resulting pointer will
            reference an array of unsinged long longs in host memory.
            <para/>
            The array contains constants for many dimensions. Each dimension
            has a single unsigned long long constant. 
            </summary>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandCreatePoissonDistribution(System.Double,ManagedCuda.CudaRand.DiscreteDistribution@)">
            <summary>
            Construct histogram array for poisson distribution.<para/>
            Construct histogram array for poisson distribution with lambda <c>lambda</c>.
            For lambda greater than 2000 optimization with normal distribution is used.
            </summary>
            <param name="lambda">lambda for poisson distribution</param>
            <param name="discrete_distribution">pointer to mapped memory to store histogram</param>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandDestroyDistribution(ManagedCuda.CudaRand.DiscreteDistribution)">
            <summary>
            Destroy histogram array for discrete distribution.<para/>
            Destroy histogram array for discrete distribution created by curandCreatePoissonDistribution.
            </summary>
            <param name="discrete_distribution">pointer to mapped memory where histogram is stored</param>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGeneratePoisson(ManagedCuda.CudaRand.CurandGenerator,ManagedCuda.BasicTypes.CUdeviceptr,ManagedCuda.BasicTypes.SizeT,System.Double)">
            <summary>
            Generate Poisson-distributed unsigned ints.<para/>
            Use <c>generator</c> to generate <c>num</c> unsigned int results into the device memory at
            <c>outputPtr</c>.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using <c>curandSetStream()</c>, or the null stream if no stream has been set.
            Results are 32-bit unsigned int point values with poisson distribution based on
            an associated poisson distribution with lambda <c>lambda</c>.
            </summary>
            <param name="generator">Generator to use</param>
            <param name="outputPtr">Pointer to device memory to store CUDA-generated results, or Pointer to host memory to store CPU-generated results</param>
            <param name="n">Number of unsigned ints to generate</param>
            <param name="lambda">lambda for poisson distribution</param>
            <returns>Status</returns>
        </member>
        <member name="M:ManagedCuda.CudaRand.CudaRandNativeMethods.curandGeneratePoisson(ManagedCuda.CudaRand.CurandGenerator,System.UInt32[],ManagedCuda.BasicTypes.SizeT,System.Double)">
            <summary>
            Generate Poisson-distributed unsigned ints.<para/>
            Use <c>generator</c> to generate <c>num</c> unsigned int results into the device memory at
            <c>outputPtr</c>.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using <c>curandSetStream()</c>, or the null stream if no stream has been set.
            Results are 32-bit unsigned int point values with poisson distribution based on
            an associated poisson distribution with lambda <c>lambda</c>.
            </summary>
            <param name="generator">Generator to use</param>
            <param name="outputPtr">Pointer to device memory to store CUDA-generated results, or Pointer to host memory to store CPU-generated results</param>
            <param name="n">Number of unsigned ints to generate</param>
            <param name="lambda">lambda for poisson distribution</param>
            <returns>Status</returns>
        </member>
        <member name="T:ManagedCuda.CudaRand.CurandStatus">
            <summary>
            CURAND function call status types
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.Success">
            <summary>
            No errors.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.VersionMismatch">
            <summary>
            Header file and linked library version do not match.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.NotInitialized">
            <summary>
            Generator not initialized.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.AllocationFailed">
            <summary>
            Memory allocation failed.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.TypeError">
            <summary>
            Generator is wrong type.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.OutOfRange">
            <summary>
            Argument out of range.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.LengthNotMultiple">
            <summary>
            Length requested is not a multple of dimension.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.DoublePrecisionRequired">
            <summary>
            GPU does not have double precision required by MRG32k3a.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.LaunchFailure">
            <summary>
            Kernel launch failure.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.PreexistingFailure">
            <summary>
            Preexisting failure on library entry.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.InitializationFailed">
            <summary>
            Initialization of CUDA failed.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.ArchMismatch">
            <summary>
            Architecture mismatch, GPU does not support requested feature.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandStatus.InternalError">
            <summary>
            Internal library error.
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaRand.GeneratorType">
            <summary>
            CURAND generator types
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.GeneratorType.Test">
            <summary>
            
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.GeneratorType.PseudoDefault">
            <summary>
            Default pseudorandom generator.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.GeneratorType.PseudoXORWOW">
            <summary>
            XORWOW pseudorandom generator.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.GeneratorType.PseudoMRG32K3A">
            <summary>
            MRG32k3a pseudorandom generator.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.GeneratorType.PseudoMTGP32">
            <summary>
            Mersenne Twister pseudorandom generator.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.GeneratorType.PseudoMT19937">
            <summary>
            Mersenne Twister MT19937 pseudorandom generator.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.GeneratorType.PseudoPhilox4_32_10">
            <summary>
            PseudoPhilox4_32_10 quasirandom generator.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.GeneratorType.QuasiDefault">
            <summary>
            Default quasirandom generator.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.GeneratorType.QuasiSobol32">
            <summary>
            Sobol32 quasirandom generator.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.GeneratorType.QuasiScrambledSobol32">
            <summary>
            Scrambled Sobol32 quasirandom generator.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.GeneratorType.QuasiSobol64">
            <summary>
            Sobol64 quasirandom generator.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.GeneratorType.QuasiScrambledSobol64">
            <summary>
            Scrambled Sobol64 quasirandom generator.
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaRand.Ordering">
            <summary>
            CURAND orderings of results in memory
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.Ordering.PseudoBest">
            <summary>
            Best ordering for pseudorandom results.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.Ordering.PseudoDefault">
            <summary>
            Specific default 4096 thread sequence for pseudorandom results.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.Ordering.PseudoSeeded">
            <summary>
            Specific seeding pattern for fast lower quality pseudorandom results.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.Ordering.QuasiDefault">
            <summary>
            Specific n-dimensional ordering for quasirandom results.
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaRand.DirectionVectorSet">
            <summary>
            CURAND choice of direction vector set
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.DirectionVectorSet.JoeKuo6_32">
            <summary>
            Specific set of 32-bit direction vectors generated from polynomials 
            recommended by S. Joe and F. Y. Kuo, for up to 20,000 dimensions.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.DirectionVectorSet.ScrambledJoeKuo6_32">
            <summary>
            Specific set of 32-bit direction vectors generated from polynomials 
            recommended by S. Joe and F. Y. Kuo, for up to 20,000 dimensions, and scrambled.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.DirectionVectorSet.JoeKuo6_64">
            <summary>
            Specific set of 64-bit direction vectors generated from polynomials 
            recommended by S. Joe and F. Y. Kuo, for up to 20,000 dimensions.
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.DirectionVectorSet.ScrambledJoeKuo6_64">
            <summary>
            Specific set of 64-bit direction vectors generated from polynomials 
            recommended by S. Joe and F. Y. Kuo, for up to 20,000 dimensions, and scrambled.
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaRand.curandMethod">
            <summary>
            CURAND method
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.ChooseBest">
            <summary>
            choose best depends on args
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.ITR">
            <summary></summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.Knuth">
            <summary></summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.HITR">
            <summary></summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.M1">
            <summary></summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.M2">
            <summary></summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.BinarySearch">
            <summary></summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.DiscreteGauss">
            <summary></summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.Rejection">
            <summary></summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.DeviceAPI">
            <summary></summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.FastRejection">
            <summary></summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.Third">
            <summary></summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.Definition">
            <summary></summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.curandMethod.Poisson">
            <summary></summary>
        </member>
        <member name="T:ManagedCuda.CudaRand.CurandGenerator">
            <summary>
            CURAND generator
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.CurandGenerator.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaRand.DirectionVectors32">
            <summary>
            Array of 32-bit direction vectors
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.DirectionVectors32.Array">
            <summary>
            Inner data array
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaRand.DirectionVectors64">
            <summary>
            Array of 64-bit direction vectors
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.DirectionVectors64.Array">
            <summary>
            Inner data array
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaRand.DiscreteDistribution">
            <summary>
            Discrete Distribution
            </summary>
        </member>
        <member name="F:ManagedCuda.CudaRand.DiscreteDistribution.Pointer">
            <summary>
            
            </summary>
        </member>
        <member name="T:ManagedCuda.CudaRand.PoissonDistribution">
            <summary>
            Poisson distribution
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.PoissonDistribution.#ctor(System.Double)">
            <summary>
            Creates a new poisson distribution.<para/>
            Construct histogram array for poisson distribution.<para/>
            Construct histogram array for poisson distribution with lambda <c>lambda</c>.
            For lambda greater than 2000 optimization with normal distribution is used.
            </summary>
            <param name="lambda">lambda for poisson distribution</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.PoissonDistribution.Finalize">
            <summary>
            For dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.PoissonDistribution.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ManagedCuda.CudaRand.PoissonDistribution.Dispose(System.Boolean)">
            <summary>
            For IDisposable
            </summary>
            <param name="fDisposing"></param>
        </member>
        <member name="M:ManagedCuda.CudaRand.PoissonDistribution.Generate(ManagedCuda.CudaRand.CudaRandDevice,ManagedCuda.CudaDeviceVariable{System.UInt32})">
            <summary> 
            Generate Poisson-distributed unsigned ints.<para/>
            Use <c>generator</c> to generate <c>num</c> unsigned int results into the device memory at
            <c>outputPtr</c>.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using <c>curandSetStream()</c>, or the null stream if no stream has been set.
            Results are 32-bit unsigned int point values with poisson distribution based on
            an associated poisson distribution with lambda <c>lambda</c>.
            </summary>
            <param name="generator">Generator to use</param>
            <param name="output">Pointer to device memory to store CUDA-generated results</param>
        </member>
        <member name="M:ManagedCuda.CudaRand.PoissonDistribution.Generate(ManagedCuda.CudaRand.CudaRandHost,System.UInt32[])">
            <summary> 
            Generate Poisson-distributed unsigned ints.<para/>
            Use <c>generator</c> to generate <c>num</c> unsigned int results into the device memory at
            <c>outputPtr</c>.  The device memory must have been previously allocated and be
            large enough to hold all the results.  Launches are done with the stream
            set using <c>curandSetStream()</c>, or the null stream if no stream has been set.
            Results are 32-bit unsigned int point values with poisson distribution based on
            an associated poisson distribution with lambda <c>lambda</c>.
            </summary>
            <param name="generator">Generator to use</param>
            <param name="output">Pointer to host memory to store CPU-generated results</param>
        </member>
    </members>
</doc>
